(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-17 23:27:22
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-const class_Full_adder<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Prc_half_adder_1<TYPE> TYPE)
(declare-const class_Prc_half_adder_2<TYPE> TYPE)
(declare-const class_Prc_or<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Full_adder_m: Ref]
(declare-fun $FVF.domain_Full_adder_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Full_adder_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Full_adder_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Full_adder_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Full_adder_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Full_adder_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Prc_half_adder_1_m: Ref]
(declare-fun $FVF.domain_Prc_half_adder_1_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Prc_half_adder_1_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Prc_half_adder_1_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Prc_half_adder_1_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Prc_half_adder_1_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Prc_half_adder_1_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Prc_half_adder_2_m: Ref]
(declare-fun $FVF.domain_Prc_half_adder_2_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Prc_half_adder_2_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Prc_half_adder_2_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Prc_half_adder_2_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Prc_half_adder_2_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Prc_half_adder_2_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Prc_or_m: Ref]
(declare-fun $FVF.domain_Prc_or_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Prc_or_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Prc_or_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Prc_or_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Prc_or_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Prc_or_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Prc_half_adder_1_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_half_adder_1_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_half_adder_2_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_half_adder_2_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_or_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_or_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Full_adder<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Prc_half_adder_1<TYPE> class_Prc_half_adder_2<TYPE> class_Prc_or<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Full_adder<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Prc_half_adder_1<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Prc_half_adder_2<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Prc_or<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Full_adder_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Full_adder_m vs) ($FVF.domain_Full_adder_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Full_adder_m vs))
            (= ($FVF.lookup_Full_adder_m vs x) ($FVF.lookup_Full_adder_m ws x)))
          :pattern (($FVF.lookup_Full_adder_m vs x) ($FVF.lookup_Full_adder_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Full_adder_m pm r))
    :pattern ($FVF.perm_Full_adder_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Full_adder_m f r) true)
    :pattern ($FVF.loc_Full_adder_m f r))))
; /field_value_functions_axioms.smt2 [Prc_half_adder_1_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Prc_half_adder_1_m vs) ($FVF.domain_Prc_half_adder_1_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Prc_half_adder_1_m vs))
            (= ($FVF.lookup_Prc_half_adder_1_m vs x) ($FVF.lookup_Prc_half_adder_1_m ws x)))
          :pattern (($FVF.lookup_Prc_half_adder_1_m vs x) ($FVF.lookup_Prc_half_adder_1_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Prc_half_adder_1_m pm r))
    :pattern ($FVF.perm_Prc_half_adder_1_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Prc_half_adder_1_m f r) true)
    :pattern ($FVF.loc_Prc_half_adder_1_m f r))))
; /field_value_functions_axioms.smt2 [Prc_half_adder_2_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Prc_half_adder_2_m vs) ($FVF.domain_Prc_half_adder_2_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Prc_half_adder_2_m vs))
            (= ($FVF.lookup_Prc_half_adder_2_m vs x) ($FVF.lookup_Prc_half_adder_2_m ws x)))
          :pattern (($FVF.lookup_Prc_half_adder_2_m vs x) ($FVF.lookup_Prc_half_adder_2_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Prc_half_adder_2_m pm r))
    :pattern ($FVF.perm_Prc_half_adder_2_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Prc_half_adder_2_m f r) true)
    :pattern ($FVF.loc_Prc_half_adder_2_m f r))))
; /field_value_functions_axioms.smt2 [Prc_or_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Prc_or_m vs) ($FVF.domain_Prc_or_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Prc_or_m vs))
            (= ($FVF.lookup_Prc_or_m vs x) ($FVF.lookup_Prc_or_m ws x)))
          :pattern (($FVF.lookup_Prc_or_m vs x) ($FVF.lookup_Prc_or_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Prc_or_m pm r))
    :pattern ($FVF.perm_Prc_or_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Prc_or_m f r) true)
    :pattern ($FVF.loc_Prc_or_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 6))
    (and
      (and
        (and
          (and
            (and
              (and
                (or
                  (< (Seq_index vals@8@00 0) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 0)))
                (or
                  (< (Seq_index vals@8@00 1) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 1))))
              (or
                (< (Seq_index vals@8@00 2) (- 0 1))
                (<= result@9@00 (Seq_index vals@8@00 2))))
            (or
              (< (Seq_index vals@8@00 3) (- 0 1))
              (<= result@9@00 (Seq_index vals@8@00 3))))
          (or
            (< (Seq_index vals@8@00 4) (- 0 1))
            (<= result@9@00 (Seq_index vals@8@00 4))))
        (or
          (< (Seq_index vals@8@00 5) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 5))))
      (and
        (implies
          (and
            (and
              (and
                (and
                  (and
                    (< (Seq_index vals@8@00 0) (- 0 1))
                    (< (Seq_index vals@8@00 1) (- 0 1)))
                  (< (Seq_index vals@8@00 2) (- 0 1)))
                (< (Seq_index vals@8@00 3) (- 0 1)))
              (< (Seq_index vals@8@00 4) (- 0 1)))
            (< (Seq_index vals@8@00 5) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (or
              (or
                (or
                  (or
                    (<= (- 0 1) (Seq_index vals@8@00 0))
                    (<= (- 0 1) (Seq_index vals@8@00 1)))
                  (<= (- 0 1) (Seq_index vals@8@00 2)))
                (<= (- 0 1) (Seq_index vals@8@00 3)))
              (<= (- 0 1) (Seq_index vals@8@00 4)))
            (<= (- 0 1) (Seq_index vals@8@00 5)))
          (or
            (or
              (or
                (or
                  (or
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 0))
                      (= result@9@00 (Seq_index vals@8@00 0)))
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 1))
                      (= result@9@00 (Seq_index vals@8@00 1))))
                  (and
                    (<= (- 0 1) (Seq_index vals@8@00 2))
                    (= result@9@00 (Seq_index vals@8@00 2))))
                (and
                  (<= (- 0 1) (Seq_index vals@8@00 3))
                  (= result@9@00 (Seq_index vals@8@00 3))))
              (and
                (<= (- 0 1) (Seq_index vals@8@00 4))
                (= result@9@00 (Seq_index vals@8@00 4))))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 5))
              (= result@9@00 (Seq_index vals@8@00 5)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Full_adder___contract_unsatisfiable__Full_adder_EncodedGlobalVariables_Main ----------
(declare-const diz@0@08 $Ref)
(declare-const globals@1@08 $Ref)
(declare-const m_param@2@08 $Ref)
(declare-const diz@3@08 $Ref)
(declare-const globals@4@08 $Ref)
(declare-const m_param@5@08 $Ref)
(push) ; 1
(declare-const $t@6@08 $Snap)
(assert (= $t@6@08 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@3@08 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@7@08 $Snap)
(assert (= $t@7@08 ($Snap.combine ($Snap.first $t@7@08) ($Snap.second $t@7@08))))
(assert (= ($Snap.first $t@7@08) $Snap.unit))
(assert (= ($Snap.second $t@7@08) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Prc_half_adder_1_run_EncodedGlobalVariables ----------
(declare-const diz@8@08 $Ref)
(declare-const globals@9@08 $Ref)
(declare-const diz@10@08 $Ref)
(declare-const globals@11@08 $Ref)
(push) ; 1
(declare-const $t@12@08 $Snap)
(assert (= $t@12@08 ($Snap.combine ($Snap.first $t@12@08) ($Snap.second $t@12@08))))
(assert (= ($Snap.first $t@12@08) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@10@08 $Ref.null)))
(assert (=
  ($Snap.second $t@12@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@12@08))
    ($Snap.second ($Snap.second $t@12@08)))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             26
;  :arith-assert-lower    1
;  :arith-assert-upper    1
;  :arith-eq-adapter      1
;  :binary-propagations   22
;  :datatype-accessor-ax  5
;  :datatype-occurs-check 9
;  :final-checks          5
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.67
;  :mk-bool-var           246
;  :mk-clause             1
;  :num-allocs            3250513
;  :num-checks            6
;  :propagations          22
;  :quant-instantiations  1
;  :rlimit-count          102015)
(assert (=
  ($Snap.second ($Snap.second $t@12@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@12@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@12@08))) $Snap.unit))
; [eval] diz.Prc_half_adder_1_m != null
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@12@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))
(declare-const $k@13@08 $Perm)
(assert ($Perm.isReadVar $k@13@08 $Perm.Write))
(push) ; 2
(assert (not (or (= $k@13@08 $Perm.No) (< $Perm.No $k@13@08))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             38
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    2
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             1
;  :datatype-accessor-ax  7
;  :datatype-occurs-check 9
;  :final-checks          5
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.67
;  :mk-bool-var           255
;  :mk-clause             3
;  :num-allocs            3250513
;  :num-checks            7
;  :propagations          23
;  :quant-instantiations  2
;  :rlimit-count          102587)
(assert (<= $Perm.No $k@13@08))
(assert (<= $k@13@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@13@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@13@08)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             44
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             2
;  :datatype-accessor-ax  8
;  :datatype-occurs-check 9
;  :final-checks          5
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.67
;  :mk-bool-var           258
;  :mk-clause             3
;  :num-allocs            3250513
;  :num-checks            8
;  :propagations          23
;  :quant-instantiations  2
;  :rlimit-count          102860)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))
  diz@10@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             51
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             2
;  :datatype-accessor-ax  9
;  :datatype-occurs-check 9
;  :final-checks          5
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.67
;  :mk-bool-var           261
;  :mk-clause             3
;  :num-allocs            3250513
;  :num-checks            9
;  :propagations          23
;  :quant-instantiations  3
;  :rlimit-count          103111)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08))))))
  $Snap.unit))
; [eval] !diz.Prc_half_adder_1_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@14@08 $Snap)
(assert (= $t@14@08 ($Snap.combine ($Snap.first $t@14@08) ($Snap.second $t@14@08))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               69
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      3
;  :arith-eq-adapter        2
;  :binary-propagations     22
;  :conflicts               2
;  :datatype-accessor-ax    10
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   11
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             269
;  :mk-clause               3
;  :num-allocs              3361857
;  :num-checks              11
;  :propagations            23
;  :quant-instantiations    5
;  :rlimit-count            103739)
(assert (=
  ($Snap.second $t@14@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@14@08))
    ($Snap.second ($Snap.second $t@14@08)))))
(assert (= ($Snap.first ($Snap.second $t@14@08)) $Snap.unit))
; [eval] diz.Prc_half_adder_1_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@14@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@14@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@14@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@14@08))))))
(declare-const $k@15@08 $Perm)
(assert ($Perm.isReadVar $k@15@08 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@15@08 $Perm.No) (< $Perm.No $k@15@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               81
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      4
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               3
;  :datatype-accessor-ax    12
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   11
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             278
;  :mk-clause               5
;  :num-allocs              3361857
;  :num-checks              12
;  :propagations            24
;  :quant-instantiations    6
;  :rlimit-count            104300)
(assert (<= $Perm.No $k@15@08))
(assert (<= $k@15@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@15@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@14@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@14@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@08)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@08))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@15@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               87
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    13
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   11
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             281
;  :mk-clause               5
;  :num-allocs              3361857
;  :num-checks              13
;  :propagations            24
;  :quant-instantiations    6
;  :rlimit-count            104563)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@14@08))))
  diz@10@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@08))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               95
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    14
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   11
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              2
;  :final-checks            7
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             284
;  :mk-clause               5
;  :num-allocs              3474492
;  :num-checks              14
;  :propagations            24
;  :quant-instantiations    7
;  :rlimit-count            104803)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@08)))))
  $Snap.unit))
; [eval] !diz.Prc_half_adder_1_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@08))))))))
(pop) ; 2
(push) ; 2
; [exec]
; var __flatten_1__7: Ref
(declare-const __flatten_1__7@16@08 $Ref)
; [exec]
; var __flatten_2__8: Seq[Int]
(declare-const __flatten_2__8@17@08 Seq<Int>)
; [exec]
; var __flatten_3__9: Ref
(declare-const __flatten_3__9@18@08 $Ref)
; [exec]
; var __flatten_4__10: Ref
(declare-const __flatten_4__10@19@08 $Ref)
; [exec]
; var __flatten_5__11: Seq[Int]
(declare-const __flatten_5__11@20@08 Seq<Int>)
; [exec]
; var __flatten_6__12: Ref
(declare-const __flatten_6__12@21@08 $Ref)
; [exec]
; var __flatten_7__14: Ref
(declare-const __flatten_7__14@22@08 $Ref)
; [exec]
; var __flatten_8__15: Ref
(declare-const __flatten_8__15@23@08 $Ref)
; [exec]
; var __flatten_9__16: Bool
(declare-const __flatten_9__16@24@08 Bool)
; [exec]
; var __flatten_10__17: Ref
(declare-const __flatten_10__17@25@08 $Ref)
; [exec]
; var __flatten_11__18: Ref
(declare-const __flatten_11__18@26@08 $Ref)
; [exec]
; var __flatten_12__19: Ref
(declare-const __flatten_12__19@27@08 $Ref)
; [exec]
; var __flatten_13__20: Ref
(declare-const __flatten_13__20@28@08 $Ref)
; [exec]
; var __flatten_14__21: Ref
(declare-const __flatten_14__21@29@08 $Ref)
; [exec]
; var __flatten_16__22: Ref
(declare-const __flatten_16__22@30@08 $Ref)
; [exec]
; var __flatten_17__23: Ref
(declare-const __flatten_17__23@31@08 $Ref)
; [exec]
; var __flatten_18__24: Bool
(declare-const __flatten_18__24@32@08 Bool)
; [exec]
; var __flatten_19__25: Ref
(declare-const __flatten_19__25@33@08 $Ref)
; [exec]
; var __flatten_20__26: Ref
(declare-const __flatten_20__26@34@08 $Ref)
; [exec]
; var __flatten_21__27: Ref
(declare-const __flatten_21__27@35@08 $Ref)
; [exec]
; var __flatten_22__28: Ref
(declare-const __flatten_22__28@36@08 $Ref)
; [exec]
; var __flatten_23__29: Ref
(declare-const __flatten_23__29@37@08 $Ref)
; [exec]
; var __flatten_24__30: Seq[Int]
(declare-const __flatten_24__30@38@08 Seq<Int>)
; [exec]
; var __flatten_25__31: Ref
(declare-const __flatten_25__31@39@08 $Ref)
; [exec]
; var __flatten_26__32: Ref
(declare-const __flatten_26__32@40@08 $Ref)
; [exec]
; var __flatten_27__33: Seq[Int]
(declare-const __flatten_27__33@41@08 Seq<Int>)
; [exec]
; var __flatten_28__34: Ref
(declare-const __flatten_28__34@42@08 $Ref)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
(declare-const $t@43@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
(assert (= $t@43@08 ($Snap.combine ($Snap.first $t@43@08) ($Snap.second $t@43@08))))
(assert (= ($Snap.first $t@43@08) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@43@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@43@08))
    ($Snap.second ($Snap.second $t@43@08)))))
(assert (= ($Snap.first ($Snap.second $t@43@08)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@43@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@43@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@43@08))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@43@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@44@08 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@44@08 | live]
; [else-branch: 0 | !(0 <= i@44@08) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@44@08]
(assert (<= 0 i@44@08))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@44@08)]
(assert (not (<= 0 i@44@08)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i@44@08 < |First:(Second:(Second:(Second:($t@43@08))))| && 0 <= i@44@08 | live]
; [else-branch: 1 | !(i@44@08 < |First:(Second:(Second:(Second:($t@43@08))))| && 0 <= i@44@08) | live]
(push) ; 5
; [then-branch: 1 | i@44@08 < |First:(Second:(Second:(Second:($t@43@08))))| && 0 <= i@44@08]
(assert (and
  (<
    i@44@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))
  (<= 0 i@44@08)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@44@08 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               153
;  :arith-assert-diseq      4
;  :arith-assert-lower      12
;  :arith-assert-upper      8
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              4
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             316
;  :mk-clause               11
;  :num-allocs              3587172
;  :num-checks              16
;  :propagations            26
;  :quant-instantiations    13
;  :rlimit-count            106461)
; [eval] -1
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:($t@43@08))))[i@44@08] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:($t@43@08))))[i@44@08] != -1 | live]
(push) ; 7
; [then-branch: 2 | First:(Second:(Second:(Second:($t@43@08))))[i@44@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))
    i@44@08)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | First:(Second:(Second:(Second:($t@43@08))))[i@44@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))
      i@44@08)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@44@08 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               153
;  :arith-assert-diseq      4
;  :arith-assert-lower      12
;  :arith-assert-upper      8
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              4
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             317
;  :mk-clause               11
;  :num-allocs              3587172
;  :num-checks              17
;  :propagations            26
;  :quant-instantiations    13
;  :rlimit-count            106636)
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@43@08))))[i@44@08] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@43@08))))[i@44@08]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@43@08))))[i@44@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))
    i@44@08)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@44@08 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               153
;  :arith-assert-diseq      5
;  :arith-assert-lower      15
;  :arith-assert-upper      8
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              4
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             320
;  :mk-clause               12
;  :num-allocs              3587172
;  :num-checks              18
;  :propagations            26
;  :quant-instantiations    13
;  :rlimit-count            106760)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@43@08))))[i@44@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))
      i@44@08))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i@44@08 < |First:(Second:(Second:(Second:($t@43@08))))| && 0 <= i@44@08)]
(assert (not
  (and
    (<
      i@44@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))
    (<= 0 i@44@08))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@44@08 Int)) (!
  (implies
    (and
      (<
        i@44@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))
      (<= 0 i@44@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))
          i@44@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))
            i@44@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))
            i@44@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))
    i@44@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))
(declare-const $k@45@08 $Perm)
(assert ($Perm.isReadVar $k@45@08 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@45@08 $Perm.No) (< $Perm.No $k@45@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               158
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      9
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               5
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             326
;  :mk-clause               14
;  :num-allocs              3587172
;  :num-checks              19
;  :propagations            27
;  :quant-instantiations    13
;  :rlimit-count            107528)
(assert (<= $Perm.No $k@45@08))
(assert (<= $k@45@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@45@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))
  $Snap.unit))
; [eval] diz.Main_adder != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               164
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               6
;  :datatype-accessor-ax    24
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             329
;  :mk-clause               14
;  :num-allocs              3587172
;  :num-checks              20
;  :propagations            27
;  :quant-instantiations    13
;  :rlimit-count            107851)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               170
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    25
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             332
;  :mk-clause               14
;  :num-allocs              3587172
;  :num-checks              21
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            108207)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               175
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               8
;  :datatype-accessor-ax    26
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             333
;  :mk-clause               14
;  :num-allocs              3587172
;  :num-checks              22
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            108464)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               180
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               9
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             334
;  :mk-clause               14
;  :num-allocs              3587172
;  :num-checks              23
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            108731)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               185
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               10
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             335
;  :mk-clause               14
;  :num-allocs              3587172
;  :num-checks              24
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            109008)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               190
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               11
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             336
;  :mk-clause               14
;  :num-allocs              3587172
;  :num-checks              25
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            109295)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               195
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               12
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             337
;  :mk-clause               14
;  :num-allocs              3587172
;  :num-checks              26
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            109592)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               200
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               13
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             338
;  :mk-clause               14
;  :num-allocs              3587172
;  :num-checks              27
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            109899)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               205
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               14
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             339
;  :mk-clause               14
;  :num-allocs              3703406
;  :num-checks              28
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            110216)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               210
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               15
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             340
;  :mk-clause               14
;  :num-allocs              3703406
;  :num-checks              29
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            110543)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               215
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               16
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             341
;  :mk-clause               14
;  :num-allocs              3703406
;  :num-checks              30
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            110880)
(declare-const $k@46@08 $Perm)
(assert ($Perm.isReadVar $k@46@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@46@08 $Perm.No) (< $Perm.No $k@46@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               215
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      11
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               17
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             345
;  :mk-clause               16
;  :num-allocs              3703406
;  :num-checks              31
;  :propagations            28
;  :quant-instantiations    14
;  :rlimit-count            111079)
(assert (<= $Perm.No $k@46@08))
(assert (<= $k@46@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@46@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder.Full_adder_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               221
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               18
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             348
;  :mk-clause               16
;  :num-allocs              3703406
;  :num-checks              32
;  :propagations            28
;  :quant-instantiations    14
;  :rlimit-count            111512)
(push) ; 3
(assert (not (< $Perm.No $k@46@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               221
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             348
;  :mk-clause               16
;  :num-allocs              3703406
;  :num-checks              33
;  :propagations            28
;  :quant-instantiations    14
;  :rlimit-count            111560)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))))
(declare-const $k@47@08 $Perm)
(assert ($Perm.isReadVar $k@47@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@47@08 $Perm.No) (< $Perm.No $k@47@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               229
;  :arith-assert-diseq      8
;  :arith-assert-lower      21
;  :arith-assert-upper      13
;  :arith-eq-adapter        11
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             355
;  :mk-clause               18
;  :num-allocs              3703406
;  :num-checks              34
;  :propagations            29
;  :quant-instantiations    15
;  :rlimit-count            112201)
(assert (<= $Perm.No $k@47@08))
(assert (<= $k@47@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@47@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@47@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               235
;  :arith-assert-diseq      8
;  :arith-assert-lower      21
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :binary-propagations     22
;  :conflicts               21
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             358
;  :mk-clause               18
;  :num-allocs              3703406
;  :num-checks              35
;  :propagations            29
;  :quant-instantiations    15
;  :rlimit-count            112654)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@47@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               241
;  :arith-assert-diseq      8
;  :arith-assert-lower      21
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :binary-propagations     22
;  :conflicts               22
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             361
;  :mk-clause               18
;  :num-allocs              3703406
;  :num-checks              36
;  :propagations            29
;  :quant-instantiations    16
;  :rlimit-count            113138)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               241
;  :arith-assert-diseq      8
;  :arith-assert-lower      21
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :binary-propagations     22
;  :conflicts               22
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             361
;  :mk-clause               18
;  :num-allocs              3703406
;  :num-checks              37
;  :propagations            29
;  :quant-instantiations    16
;  :rlimit-count            113151)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))))))
(declare-const $k@48@08 $Perm)
(assert ($Perm.isReadVar $k@48@08 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@48@08 $Perm.No) (< $Perm.No $k@48@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               246
;  :arith-assert-diseq      9
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               23
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             366
;  :mk-clause               20
;  :num-allocs              3703406
;  :num-checks              38
;  :propagations            30
;  :quant-instantiations    16
;  :rlimit-count            113681)
(declare-const $t@49@08 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@13@08)
    (=
      $t@49@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))
  (implies
    (< $Perm.No $k@48@08)
    (=
      $t@49@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@13@08 $k@48@08)))
(assert (<= (+ $k@13@08 $k@48@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@13@08 $k@48@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@13@08 $k@48@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               256
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      17
;  :arith-conflicts         1
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             374
;  :mk-clause               20
;  :num-allocs              3703406
;  :num-checks              39
;  :propagations            30
;  :quant-instantiations    17
;  :rlimit-count            114426)
(assert (not (= $t@49@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@13@08 $k@48@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               262
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      18
;  :arith-conflicts         2
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             377
;  :mk-clause               20
;  :num-allocs              3703406
;  :num-checks              40
;  :propagations            30
;  :quant-instantiations    17
;  :rlimit-count            114892)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               262
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      18
;  :arith-conflicts         2
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             377
;  :mk-clause               20
;  :num-allocs              3703406
;  :num-checks              41
;  :propagations            30
;  :quant-instantiations    17
;  :rlimit-count            114905)
(set-option :timeout 10)
(push) ; 3
(assert (not (= diz@10@08 $t@49@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               262
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      18
;  :arith-conflicts         2
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             378
;  :mk-clause               20
;  :num-allocs              3703406
;  :num-checks              42
;  :propagations            30
;  :quant-instantiations    17
;  :rlimit-count            114965)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@08)))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))))))))))
(declare-const $k@50@08 $Perm)
(assert ($Perm.isReadVar $k@50@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@50@08 $Perm.No) (< $Perm.No $k@50@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               270
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      19
;  :arith-conflicts         2
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               27
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             385
;  :mk-clause               22
;  :num-allocs              3703406
;  :num-checks              43
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            115615)
(assert (<= $Perm.No $k@50@08))
(assert (<= $k@50@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@50@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               276
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      20
;  :arith-conflicts         2
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               28
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             388
;  :mk-clause               22
;  :num-allocs              3703406
;  :num-checks              44
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            116128)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))))))))))))))))))
    $Ref.null)))
(push) ; 3
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               277
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      20
;  :arith-conflicts         2
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             390
;  :mk-clause               22
;  :num-allocs              3703406
;  :num-checks              45
;  :propagations            31
;  :quant-instantiations    19
;  :rlimit-count            116562)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               277
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      20
;  :arith-conflicts         2
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   12
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             390
;  :mk-clause               22
;  :num-allocs              3703406
;  :num-checks              46
;  :propagations            31
;  :quant-instantiations    19
;  :rlimit-count            116575)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@43@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))) globals@11@08))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
(declare-const $t@51@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz.Prc_half_adder_1_init := true
; [exec]
; __flatten_1__7 := diz.Prc_half_adder_1_m
(declare-const __flatten_1__7@52@08 $Ref)
(assert (=
  __flatten_1__7@52@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))))
; [exec]
; __flatten_3__9 := diz.Prc_half_adder_1_m
(declare-const __flatten_3__9@53@08 $Ref)
(assert (=
  __flatten_3__9@53@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))))
; [exec]
; __flatten_2__8 := __flatten_3__9.Main_process_state[1 := 2]
; [eval] __flatten_3__9.Main_process_state[1 := 2]
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))
  __flatten_3__9@53@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               403
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      20
;  :arith-conflicts         2
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             431
;  :mk-clause               23
;  :num-allocs              3823595
;  :num-checks              49
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            117996)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               403
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      20
;  :arith-conflicts         2
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             431
;  :mk-clause               23
;  :num-allocs              3823595
;  :num-checks              50
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            118011)
(declare-const __flatten_2__8@54@08 Seq<Int>)
(assert (Seq_equal
  __flatten_2__8@54@08
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))
    1
    2)))
; [exec]
; __flatten_1__7.Main_process_state := __flatten_2__8
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))
  __flatten_1__7@52@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               413
;  :arith-add-rows          3
;  :arith-assert-diseq      11
;  :arith-assert-lower      30
;  :arith-assert-upper      22
;  :arith-conflicts         2
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         4
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             454
;  :mk-clause               42
;  :num-allocs              3823595
;  :num-checks              51
;  :propagations            41
;  :quant-instantiations    24
;  :rlimit-count            118489)
(assert (not (= __flatten_1__7@52@08 $Ref.null)))
; [exec]
; __flatten_4__10 := diz.Prc_half_adder_1_m
(declare-const __flatten_4__10@55@08 $Ref)
(assert (=
  __flatten_4__10@55@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))))
; [exec]
; __flatten_6__12 := diz.Prc_half_adder_1_m
(declare-const __flatten_6__12@56@08 $Ref)
(assert (=
  __flatten_6__12@56@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))))
; [exec]
; __flatten_5__11 := __flatten_6__12.Main_event_state[2 := 2]
; [eval] __flatten_6__12.Main_event_state[2 := 2]
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))
  __flatten_6__12@56@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               416
;  :arith-add-rows          3
;  :arith-assert-diseq      11
;  :arith-assert-lower      30
;  :arith-assert-upper      22
;  :arith-conflicts         2
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         4
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             457
;  :mk-clause               42
;  :num-allocs              3823595
;  :num-checks              52
;  :propagations            41
;  :quant-instantiations    24
;  :rlimit-count            118616)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               416
;  :arith-add-rows          3
;  :arith-assert-diseq      11
;  :arith-assert-lower      30
;  :arith-assert-upper      22
;  :arith-conflicts         2
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         4
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             457
;  :mk-clause               42
;  :num-allocs              3823595
;  :num-checks              53
;  :propagations            41
;  :quant-instantiations    24
;  :rlimit-count            118631)
(declare-const __flatten_5__11@57@08 Seq<Int>)
(assert (Seq_equal
  __flatten_5__11@57@08
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))
    2
    2)))
; [exec]
; __flatten_4__10.Main_event_state := __flatten_5__11
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))
  __flatten_4__10@55@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               426
;  :arith-add-rows          6
;  :arith-assert-diseq      12
;  :arith-assert-lower      34
;  :arith-assert-upper      24
;  :arith-conflicts         2
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             480
;  :mk-clause               61
;  :num-allocs              3823595
;  :num-checks              54
;  :propagations            50
;  :quant-instantiations    29
;  :rlimit-count            119144)
(assert (not (= __flatten_4__10@55@08 $Ref.null)))
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@58@08 $Snap)
(assert (= $t@58@08 ($Snap.combine ($Snap.first $t@58@08) ($Snap.second $t@58@08))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               431
;  :arith-add-rows          6
;  :arith-assert-diseq      12
;  :arith-assert-lower      34
;  :arith-assert-upper      24
;  :arith-conflicts         2
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             481
;  :mk-clause               61
;  :num-allocs              3823595
;  :num-checks              55
;  :propagations            50
;  :quant-instantiations    29
;  :rlimit-count            119277)
(assert (=
  ($Snap.second $t@58@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@58@08))
    ($Snap.second ($Snap.second $t@58@08)))))
(assert (= ($Snap.first ($Snap.second $t@58@08)) $Snap.unit))
; [eval] diz.Prc_half_adder_1_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@58@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@58@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@58@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
  $Snap.unit))
; [eval] |diz.Prc_half_adder_1_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
  $Snap.unit))
; [eval] |diz.Prc_half_adder_1_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))
  $Snap.unit))
; [eval] (forall i__13: Int :: { diz.Prc_half_adder_1_m.Main_process_state[i__13] } 0 <= i__13 && i__13 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__13] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13] && diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|)
(declare-const i__13@59@08 Int)
(push) ; 4
; [eval] 0 <= i__13 && i__13 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__13] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13] && diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= i__13 && i__13 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] 0 <= i__13
(push) ; 5
; [then-branch: 4 | 0 <= i__13@59@08 | live]
; [else-branch: 4 | !(0 <= i__13@59@08) | live]
(push) ; 6
; [then-branch: 4 | 0 <= i__13@59@08]
(assert (<= 0 i__13@59@08))
; [eval] i__13 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(pop) ; 6
(push) ; 6
; [else-branch: 4 | !(0 <= i__13@59@08)]
(assert (not (<= 0 i__13@59@08)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 5 | i__13@59@08 < |First:(Second:(Second:(Second:($t@58@08))))| && 0 <= i__13@59@08 | live]
; [else-branch: 5 | !(i__13@59@08 < |First:(Second:(Second:(Second:($t@58@08))))| && 0 <= i__13@59@08) | live]
(push) ; 6
; [then-branch: 5 | i__13@59@08 < |First:(Second:(Second:(Second:($t@58@08))))| && 0 <= i__13@59@08]
(assert (and
  (<
    i__13@59@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
  (<= 0 i__13@59@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13] && diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13] == -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13]
(push) ; 7
(assert (not (>= i__13@59@08 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               475
;  :arith-add-rows          6
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      27
;  :arith-conflicts         2
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             506
;  :mk-clause               61
;  :num-allocs              3823595
;  :num-checks              56
;  :propagations            50
;  :quant-instantiations    34
;  :rlimit-count            120555)
; [eval] -1
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@58@08))))[i__13@59@08] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@58@08))))[i__13@59@08] != -1 | live]
(push) ; 8
; [then-branch: 6 | First:(Second:(Second:(Second:($t@58@08))))[i__13@59@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    i__13@59@08)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 6 | First:(Second:(Second:(Second:($t@58@08))))[i__13@59@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
      i__13@59@08)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13] && diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13]
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13]
(push) ; 9
(assert (not (>= i__13@59@08 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               475
;  :arith-add-rows          6
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      27
;  :arith-conflicts         2
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             507
;  :mk-clause               61
;  :num-allocs              3823595
;  :num-checks              57
;  :propagations            50
;  :quant-instantiations    34
;  :rlimit-count            120730)
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@58@08))))[i__13@59@08] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@58@08))))[i__13@59@08]) | live]
(push) ; 10
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@58@08))))[i__13@59@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    i__13@59@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13]
(push) ; 11
(assert (not (>= i__13@59@08 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               475
;  :arith-add-rows          6
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      27
;  :arith-conflicts         2
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             510
;  :mk-clause               62
;  :num-allocs              3823595
;  :num-checks              58
;  :propagations            50
;  :quant-instantiations    34
;  :rlimit-count            120854)
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(pop) ; 10
(push) ; 10
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@58@08))))[i__13@59@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
      i__13@59@08))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 5 | !(i__13@59@08 < |First:(Second:(Second:(Second:($t@58@08))))| && 0 <= i__13@59@08)]
(assert (not
  (and
    (<
      i__13@59@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
    (<= 0 i__13@59@08))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__13@59@08 Int)) (!
  (implies
    (and
      (<
        i__13@59@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
      (<= 0 i__13@59@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
          i__13@59@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
            i__13@59@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
            i__13@59@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    i__13@59@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))
(declare-const $k@60@08 $Perm)
(assert ($Perm.isReadVar $k@60@08 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@60@08 $Perm.No) (< $Perm.No $k@60@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               480
;  :arith-add-rows          6
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      28
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               31
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             516
;  :mk-clause               64
;  :num-allocs              3946718
;  :num-checks              59
;  :propagations            51
;  :quant-instantiations    34
;  :rlimit-count            121623)
(assert (<= $Perm.No $k@60@08))
(assert (<= $k@60@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@60@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               486
;  :arith-add-rows          6
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             519
;  :mk-clause               64
;  :num-allocs              3946718
;  :num-checks              60
;  :propagations            51
;  :quant-instantiations    34
;  :rlimit-count            121946)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               492
;  :arith-add-rows          6
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               33
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             522
;  :mk-clause               64
;  :num-allocs              3946718
;  :num-checks              61
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            122302)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               497
;  :arith-add-rows          6
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               34
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             523
;  :mk-clause               64
;  :num-allocs              3946718
;  :num-checks              62
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            122559)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               502
;  :arith-add-rows          6
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               35
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             524
;  :mk-clause               64
;  :num-allocs              3946718
;  :num-checks              63
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            122826)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               507
;  :arith-add-rows          6
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               36
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             525
;  :mk-clause               64
;  :num-allocs              3946718
;  :num-checks              64
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            123103)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               512
;  :arith-add-rows          6
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               37
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             526
;  :mk-clause               64
;  :num-allocs              3946718
;  :num-checks              65
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            123390)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               517
;  :arith-add-rows          6
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             527
;  :mk-clause               64
;  :num-allocs              3946718
;  :num-checks              66
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            123687)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               522
;  :arith-add-rows          6
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               39
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             528
;  :mk-clause               64
;  :num-allocs              3946718
;  :num-checks              67
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            123994)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               527
;  :arith-add-rows          6
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               40
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             529
;  :mk-clause               64
;  :num-allocs              3946718
;  :num-checks              68
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            124311)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               532
;  :arith-add-rows          6
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               41
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             530
;  :mk-clause               64
;  :num-allocs              3946718
;  :num-checks              69
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            124638)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               537
;  :arith-add-rows          6
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               42
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             531
;  :mk-clause               64
;  :num-allocs              3946718
;  :num-checks              70
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            124975)
(declare-const $k@61@08 $Perm)
(assert ($Perm.isReadVar $k@61@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@61@08 $Perm.No) (< $Perm.No $k@61@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               537
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      30
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               43
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             535
;  :mk-clause               66
;  :num-allocs              3946718
;  :num-checks              71
;  :propagations            52
;  :quant-instantiations    35
;  :rlimit-count            125174)
(assert (<= $Perm.No $k@61@08))
(assert (<= $k@61@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@61@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder.Full_adder_m == diz.Prc_half_adder_1_m
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               543
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             538
;  :mk-clause               66
;  :num-allocs              3946718
;  :num-checks              72
;  :propagations            52
;  :quant-instantiations    35
;  :rlimit-count            125607)
(push) ; 4
(assert (not (< $Perm.No $k@61@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               543
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             538
;  :mk-clause               66
;  :num-allocs              3946718
;  :num-checks              73
;  :propagations            52
;  :quant-instantiations    35
;  :rlimit-count            125655)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))
(declare-const $k@62@08 $Perm)
(assert ($Perm.isReadVar $k@62@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@62@08 $Perm.No) (< $Perm.No $k@62@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               551
;  :arith-add-rows          6
;  :arith-assert-diseq      16
;  :arith-assert-lower      48
;  :arith-assert-upper      32
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               46
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             545
;  :mk-clause               68
;  :num-allocs              3946718
;  :num-checks              74
;  :propagations            53
;  :quant-instantiations    36
;  :rlimit-count            126285)
(assert (<= $Perm.No $k@62@08))
(assert (<= $k@62@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@62@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@62@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               557
;  :arith-add-rows          6
;  :arith-assert-diseq      16
;  :arith-assert-lower      48
;  :arith-assert-upper      33
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               47
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             548
;  :mk-clause               68
;  :num-allocs              3946718
;  :num-checks              75
;  :propagations            53
;  :quant-instantiations    36
;  :rlimit-count            126738)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@62@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               563
;  :arith-add-rows          6
;  :arith-assert-diseq      16
;  :arith-assert-lower      48
;  :arith-assert-upper      33
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             551
;  :mk-clause               68
;  :num-allocs              3946718
;  :num-checks              76
;  :propagations            53
;  :quant-instantiations    37
;  :rlimit-count            127222)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               563
;  :arith-add-rows          6
;  :arith-assert-diseq      16
;  :arith-assert-lower      48
;  :arith-assert-upper      33
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             551
;  :mk-clause               68
;  :num-allocs              3946718
;  :num-checks              77
;  :propagations            53
;  :quant-instantiations    37
;  :rlimit-count            127235)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))
(declare-const $k@63@08 $Perm)
(assert ($Perm.isReadVar $k@63@08 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@63@08 $Perm.No) (< $Perm.No $k@63@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               568
;  :arith-add-rows          6
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      34
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             556
;  :mk-clause               70
;  :num-allocs              3946718
;  :num-checks              78
;  :propagations            54
;  :quant-instantiations    37
;  :rlimit-count            127766)
(assert (<= $Perm.No $k@63@08))
(assert (<= $k@63@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@63@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@63@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               574
;  :arith-add-rows          6
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      35
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               50
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             559
;  :mk-clause               70
;  :num-allocs              3946718
;  :num-checks              79
;  :propagations            54
;  :quant-instantiations    37
;  :rlimit-count            128249)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@63@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               580
;  :arith-add-rows          6
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      35
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             562
;  :mk-clause               70
;  :num-allocs              3946718
;  :num-checks              80
;  :propagations            54
;  :quant-instantiations    38
;  :rlimit-count            128765)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               580
;  :arith-add-rows          6
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      35
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             562
;  :mk-clause               70
;  :num-allocs              3946718
;  :num-checks              81
;  :propagations            54
;  :quant-instantiations    38
;  :rlimit-count            128778)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))
(declare-const $k@64@08 $Perm)
(assert ($Perm.isReadVar $k@64@08 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@64@08 $Perm.No) (< $Perm.No $k@64@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               585
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      36
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               52
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             567
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              82
;  :propagations            55
;  :quant-instantiations    38
;  :rlimit-count            129339)
(assert (<= $Perm.No $k@64@08))
(assert (<= $k@64@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@64@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@64@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               591
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               53
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             570
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              83
;  :propagations            55
;  :quant-instantiations    38
;  :rlimit-count            129852)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@64@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               597
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               54
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             573
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              84
;  :propagations            55
;  :quant-instantiations    39
;  :rlimit-count            130398)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               597
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               54
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             573
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              85
;  :propagations            55
;  :quant-instantiations    39
;  :rlimit-count            130411)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@63@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               603
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             575
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              86
;  :propagations            55
;  :quant-instantiations    39
;  :rlimit-count            130890)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
  diz@10@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               611
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             577
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              87
;  :propagations            55
;  :quant-instantiations    39
;  :rlimit-count            131364)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1 || diz.Prc_half_adder_1_m.Main_event_state[2] != -2
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               619
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             583
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              88
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            131931)
; [eval] -1
(push) ; 5
; [then-branch: 8 | First:(Second:(Second:(Second:($t@58@08))))[1] != -1 | live]
; [else-branch: 8 | First:(Second:(Second:(Second:($t@58@08))))[1] == -1 | live]
(push) ; 6
; [then-branch: 8 | First:(Second:(Second:(Second:($t@58@08))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
      1)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 8 | First:(Second:(Second:(Second:($t@58@08))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    1)
  (- 0 1)))
; [eval] diz.Prc_half_adder_1_m.Main_event_state[2] != -2
; [eval] diz.Prc_half_adder_1_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               620
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             584
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              89
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            132093)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [eval] !(diz.Prc_half_adder_1_m.Main_process_state[1] != -1 || diz.Prc_half_adder_1_m.Main_event_state[2] != -2)
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1 || diz.Prc_half_adder_1_m.Main_event_state[2] != -2
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               620
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             584
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              90
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            132113)
; [eval] -1
(push) ; 5
; [then-branch: 9 | First:(Second:(Second:(Second:($t@58@08))))[1] != -1 | live]
; [else-branch: 9 | First:(Second:(Second:(Second:($t@58@08))))[1] == -1 | live]
(push) ; 6
; [then-branch: 9 | First:(Second:(Second:(Second:($t@58@08))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
      1)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 9 | First:(Second:(Second:(Second:($t@58@08))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    1)
  (- 0 1)))
; [eval] diz.Prc_half_adder_1_m.Main_event_state[2] != -2
; [eval] diz.Prc_half_adder_1_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               621
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             585
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              91
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            132271)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               621
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              32
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             585
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              92
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            132289)
; [eval] diz.Prc_half_adder_1_m != null
; [eval] |diz.Prc_half_adder_1_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(push) ; 4
(assert (not (= (Seq_length __flatten_2__8@54@08) 3)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               621
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              32
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             588
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              93
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            132363)
(assert (= (Seq_length __flatten_2__8@54@08) 3))
; [eval] |diz.Prc_half_adder_1_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(push) ; 4
(assert (not (= (Seq_length __flatten_5__11@57@08) 6)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               622
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      53
;  :arith-assert-upper      38
;  :arith-conflicts         2
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              32
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             594
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              94
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            132488)
(assert (= (Seq_length __flatten_5__11@57@08) 6))
; [eval] (forall i__13: Int :: { diz.Prc_half_adder_1_m.Main_process_state[i__13] } 0 <= i__13 && i__13 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__13] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13] && diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|)
(declare-const i__13@65@08 Int)
(push) ; 4
; [eval] 0 <= i__13 && i__13 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__13] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13] && diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= i__13 && i__13 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] 0 <= i__13
(push) ; 5
; [then-branch: 10 | 0 <= i__13@65@08 | live]
; [else-branch: 10 | !(0 <= i__13@65@08) | live]
(push) ; 6
; [then-branch: 10 | 0 <= i__13@65@08]
(assert (<= 0 i__13@65@08))
; [eval] i__13 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(pop) ; 6
(push) ; 6
; [else-branch: 10 | !(0 <= i__13@65@08)]
(assert (not (<= 0 i__13@65@08)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 11 | i__13@65@08 < |__flatten_2__8@54@08| && 0 <= i__13@65@08 | live]
; [else-branch: 11 | !(i__13@65@08 < |__flatten_2__8@54@08| && 0 <= i__13@65@08) | live]
(push) ; 6
; [then-branch: 11 | i__13@65@08 < |__flatten_2__8@54@08| && 0 <= i__13@65@08]
(assert (and (< i__13@65@08 (Seq_length __flatten_2__8@54@08)) (<= 0 i__13@65@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13] && diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13] == -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13]
(push) ; 7
(assert (not (>= i__13@65@08 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               623
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      55
;  :arith-assert-upper      40
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              32
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             599
;  :mk-clause               72
;  :num-allocs              4074650
;  :num-checks              95
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            132675)
; [eval] -1
(push) ; 7
; [then-branch: 12 | __flatten_2__8@54@08[i__13@65@08] == -1 | live]
; [else-branch: 12 | __flatten_2__8@54@08[i__13@65@08] != -1 | live]
(push) ; 8
; [then-branch: 12 | __flatten_2__8@54@08[i__13@65@08] == -1]
(assert (= (Seq_index __flatten_2__8@54@08 i__13@65@08) (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 12 | __flatten_2__8@54@08[i__13@65@08] != -1]
(assert (not (= (Seq_index __flatten_2__8@54@08 i__13@65@08) (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13] && diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13]
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13]
(push) ; 9
(assert (not (>= i__13@65@08 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               624
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      55
;  :arith-assert-upper      40
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              32
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             607
;  :mk-clause               82
;  :num-allocs              4074650
;  :num-checks              96
;  :propagations            55
;  :quant-instantiations    43
;  :rlimit-count            132838)
(push) ; 9
; [then-branch: 13 | 0 <= __flatten_2__8@54@08[i__13@65@08] | live]
; [else-branch: 13 | !(0 <= __flatten_2__8@54@08[i__13@65@08]) | live]
(push) ; 10
; [then-branch: 13 | 0 <= __flatten_2__8@54@08[i__13@65@08]]
(assert (<= 0 (Seq_index __flatten_2__8@54@08 i__13@65@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13]
(push) ; 11
(assert (not (>= i__13@65@08 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               624
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      40
;  :arith-conflicts         2
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              32
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             610
;  :mk-clause               83
;  :num-allocs              4074650
;  :num-checks              97
;  :propagations            55
;  :quant-instantiations    43
;  :rlimit-count            132911)
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(pop) ; 10
(push) ; 10
; [else-branch: 13 | !(0 <= __flatten_2__8@54@08[i__13@65@08])]
(assert (not (<= 0 (Seq_index __flatten_2__8@54@08 i__13@65@08))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 11 | !(i__13@65@08 < |__flatten_2__8@54@08| && 0 <= i__13@65@08)]
(assert (not (and (< i__13@65@08 (Seq_length __flatten_2__8@54@08)) (<= 0 i__13@65@08))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 4
(assert (not (forall ((i__13@65@08 Int)) (!
  (implies
    (and (< i__13@65@08 (Seq_length __flatten_2__8@54@08)) (<= 0 i__13@65@08))
    (or
      (= (Seq_index __flatten_2__8@54@08 i__13@65@08) (- 0 1))
      (and
        (<
          (Seq_index __flatten_2__8@54@08 i__13@65@08)
          (Seq_length __flatten_5__11@57@08))
        (<= 0 (Seq_index __flatten_2__8@54@08 i__13@65@08)))))
  :pattern ((Seq_index __flatten_2__8@54@08 i__13@65@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      72
;  :arith-assert-upper      49
;  :arith-conflicts         4
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               64
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             648
;  :mk-clause               132
;  :num-allocs              4074650
;  :num-checks              98
;  :propagations            85
;  :quant-instantiations    46
;  :rlimit-count            133544)
(assert (forall ((i__13@65@08 Int)) (!
  (implies
    (and (< i__13@65@08 (Seq_length __flatten_2__8@54@08)) (<= 0 i__13@65@08))
    (or
      (= (Seq_index __flatten_2__8@54@08 i__13@65@08) (- 0 1))
      (and
        (<
          (Seq_index __flatten_2__8@54@08 i__13@65@08)
          (Seq_length __flatten_5__11@57@08))
        (<= 0 (Seq_index __flatten_2__8@54@08 i__13@65@08)))))
  :pattern ((Seq_index __flatten_2__8@54@08 i__13@65@08))
  :qid |prog.l<no position>|)))
(declare-const $k@66@08 $Perm)
(assert ($Perm.isReadVar $k@66@08 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@66@08 $Perm.No) (< $Perm.No $k@66@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      74
;  :arith-assert-upper      50
;  :arith-conflicts         4
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               65
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             653
;  :mk-clause               134
;  :num-allocs              4074650
;  :num-checks              99
;  :propagations            86
;  :quant-instantiations    46
;  :rlimit-count            134014)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@45@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      74
;  :arith-assert-upper      50
;  :arith-conflicts         4
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               65
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             653
;  :mk-clause               134
;  :num-allocs              4074650
;  :num-checks              100
;  :propagations            86
;  :quant-instantiations    46
;  :rlimit-count            134025)
(assert (< $k@66@08 $k@45@08))
(assert (<= $Perm.No (- $k@45@08 $k@66@08)))
(assert (<= (- $k@45@08 $k@66@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@45@08 $k@66@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))
      $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder != null
(push) ; 4
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      76
;  :arith-assert-upper      51
;  :arith-conflicts         4
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               66
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             656
;  :mk-clause               134
;  :num-allocs              4074650
;  :num-checks              101
;  :propagations            86
;  :quant-instantiations    46
;  :rlimit-count            134239)
(push) ; 4
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      76
;  :arith-assert-upper      51
;  :arith-conflicts         4
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             656
;  :mk-clause               134
;  :num-allocs              4074650
;  :num-checks              102
;  :propagations            86
;  :quant-instantiations    46
;  :rlimit-count            134287)
(push) ; 4
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      76
;  :arith-assert-upper      51
;  :arith-conflicts         4
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             656
;  :mk-clause               134
;  :num-allocs              4074650
;  :num-checks              103
;  :propagations            86
;  :quant-instantiations    46
;  :rlimit-count            134335)
(push) ; 4
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      76
;  :arith-assert-upper      51
;  :arith-conflicts         4
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             656
;  :mk-clause               134
;  :num-allocs              4074650
;  :num-checks              104
;  :propagations            86
;  :quant-instantiations    46
;  :rlimit-count            134383)
(push) ; 4
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      76
;  :arith-assert-upper      51
;  :arith-conflicts         4
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             656
;  :mk-clause               134
;  :num-allocs              4074650
;  :num-checks              105
;  :propagations            86
;  :quant-instantiations    46
;  :rlimit-count            134431)
(push) ; 4
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      76
;  :arith-assert-upper      51
;  :arith-conflicts         4
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               71
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             656
;  :mk-clause               134
;  :num-allocs              4074650
;  :num-checks              106
;  :propagations            86
;  :quant-instantiations    46
;  :rlimit-count            134479)
(push) ; 4
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      76
;  :arith-assert-upper      51
;  :arith-conflicts         4
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               72
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             656
;  :mk-clause               134
;  :num-allocs              4074650
;  :num-checks              107
;  :propagations            86
;  :quant-instantiations    46
;  :rlimit-count            134527)
(push) ; 4
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      76
;  :arith-assert-upper      51
;  :arith-conflicts         4
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             656
;  :mk-clause               134
;  :num-allocs              4074650
;  :num-checks              108
;  :propagations            86
;  :quant-instantiations    46
;  :rlimit-count            134575)
(push) ; 4
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      76
;  :arith-assert-upper      51
;  :arith-conflicts         4
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             656
;  :mk-clause               134
;  :num-allocs              4074650
;  :num-checks              109
;  :propagations            86
;  :quant-instantiations    46
;  :rlimit-count            134623)
(push) ; 4
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      76
;  :arith-assert-upper      51
;  :arith-conflicts         4
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             656
;  :mk-clause               134
;  :num-allocs              4074650
;  :num-checks              110
;  :propagations            86
;  :quant-instantiations    46
;  :rlimit-count            134671)
(declare-const $k@67@08 $Perm)
(assert ($Perm.isReadVar $k@67@08 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      52
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             660
;  :mk-clause               136
;  :num-allocs              4074650
;  :num-checks              111
;  :propagations            87
;  :quant-instantiations    46
;  :rlimit-count            134868)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@67@08 $Perm.No) (< $Perm.No $k@67@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      52
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             660
;  :mk-clause               136
;  :num-allocs              4074650
;  :num-checks              112
;  :propagations            87
;  :quant-instantiations    46
;  :rlimit-count            134918)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@46@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      52
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             660
;  :mk-clause               136
;  :num-allocs              4074650
;  :num-checks              113
;  :propagations            87
;  :quant-instantiations    46
;  :rlimit-count            134929)
(assert (< $k@67@08 $k@46@08))
(assert (<= $Perm.No (- $k@46@08 $k@67@08)))
(assert (<= (- $k@46@08 $k@67@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@46@08 $k@67@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08))))))))))
      $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder.Full_adder_m == diz.Prc_half_adder_1_m
(push) ; 4
(assert (not (< $Perm.No $k@45@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               78
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             663
;  :mk-clause               136
;  :num-allocs              4074650
;  :num-checks              114
;  :propagations            87
;  :quant-instantiations    46
;  :rlimit-count            135143)
(push) ; 4
(assert (not (< $Perm.No $k@46@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               79
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             663
;  :mk-clause               136
;  :num-allocs              4074650
;  :num-checks              115
;  :propagations            87
;  :quant-instantiations    46
;  :rlimit-count            135191)
(declare-const $k@68@08 $Perm)
(assert ($Perm.isReadVar $k@68@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@68@08 $Perm.No) (< $Perm.No $k@68@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      82
;  :arith-assert-upper      54
;  :arith-conflicts         4
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             667
;  :mk-clause               138
;  :num-allocs              4074650
;  :num-checks              116
;  :propagations            88
;  :quant-instantiations    46
;  :rlimit-count            135390)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@47@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      82
;  :arith-assert-upper      54
;  :arith-conflicts         4
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             667
;  :mk-clause               138
;  :num-allocs              4074650
;  :num-checks              117
;  :propagations            88
;  :quant-instantiations    46
;  :rlimit-count            135401)
(assert (< $k@68@08 $k@47@08))
(assert (<= $Perm.No (- $k@47@08 $k@68@08)))
(assert (<= (- $k@47@08 $k@68@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@47@08 $k@68@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))
      $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_prc != null
(push) ; 4
(assert (not (< $Perm.No $k@47@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-conflicts         4
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               81
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             670
;  :mk-clause               138
;  :num-allocs              4074650
;  :num-checks              118
;  :propagations            88
;  :quant-instantiations    46
;  :rlimit-count            135615)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-conflicts         4
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               81
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             670
;  :mk-clause               138
;  :num-allocs              4074650
;  :num-checks              119
;  :propagations            88
;  :quant-instantiations    46
;  :rlimit-count            135628)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@47@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-conflicts         4
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             670
;  :mk-clause               138
;  :num-allocs              4074650
;  :num-checks              120
;  :propagations            88
;  :quant-instantiations    46
;  :rlimit-count            135676)
(declare-const $k@69@08 $Perm)
(assert ($Perm.isReadVar $k@69@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@69@08 $Perm.No) (< $Perm.No $k@69@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      86
;  :arith-assert-upper      56
;  :arith-conflicts         4
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              92
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             674
;  :mk-clause               140
;  :num-allocs              4074650
;  :num-checks              121
;  :propagations            89
;  :quant-instantiations    46
;  :rlimit-count            135875)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@13@08 $k@48@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               644
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      86
;  :arith-assert-upper      57
;  :arith-conflicts         5
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              94
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             676
;  :mk-clause               142
;  :num-allocs              4074650
;  :num-checks              122
;  :propagations            90
;  :quant-instantiations    46
;  :rlimit-count            135937)
(assert (< $k@69@08 (+ $k@13@08 $k@48@08)))
(assert (<= $Perm.No (- (+ $k@13@08 $k@48@08) $k@69@08)))
(assert (<= (- (+ $k@13@08 $k@48@08) $k@69@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@13@08 $k@48@08) $k@69@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))
      $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 != null
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@08 $k@48@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               644
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      88
;  :arith-assert-upper      59
;  :arith-conflicts         6
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         9
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              94
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             680
;  :mk-clause               142
;  :num-allocs              4074650
;  :num-checks              123
;  :propagations            90
;  :quant-instantiations    46
;  :rlimit-count            136169)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               644
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      88
;  :arith-assert-upper      59
;  :arith-conflicts         6
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         9
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              94
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             680
;  :mk-clause               142
;  :num-allocs              4074650
;  :num-checks              124
;  :propagations            90
;  :quant-instantiations    46
;  :rlimit-count            136182)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@08 $k@48@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               644
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      88
;  :arith-assert-upper      60
;  :arith-conflicts         7
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         10
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              94
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             681
;  :mk-clause               142
;  :num-allocs              4074650
;  :num-checks              125
;  :propagations            90
;  :quant-instantiations    46
;  :rlimit-count            136245)
(push) ; 4
(assert (not (= diz@10@08 $t@49@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               644
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      88
;  :arith-assert-upper      60
;  :arith-conflicts         7
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         10
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   24
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              94
;  :final-checks            14
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             682
;  :mk-clause               142
;  :num-allocs              4074650
;  :num-checks              126
;  :propagations            90
;  :quant-instantiations    46
;  :rlimit-count            136305)
(push) ; 4
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               704
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      88
;  :arith-assert-upper      60
;  :arith-conflicts         7
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         10
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   30
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              94
;  :final-checks            17
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             699
;  :mk-clause               142
;  :num-allocs              4074650
;  :num-checks              127
;  :propagations            91
;  :quant-instantiations    46
;  :rlimit-count            136966
;  :time                    0.00)
(declare-const $k@70@08 $Perm)
(assert ($Perm.isReadVar $k@70@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@70@08 $Perm.No) (< $Perm.No $k@70@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               704
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      90
;  :arith-assert-upper      61
;  :arith-conflicts         7
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         10
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   30
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              94
;  :final-checks            17
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             703
;  :mk-clause               144
;  :num-allocs              4074650
;  :num-checks              128
;  :propagations            92
;  :quant-instantiations    46
;  :rlimit-count            137165)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@50@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               704
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      90
;  :arith-assert-upper      61
;  :arith-conflicts         7
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         10
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   30
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              94
;  :final-checks            17
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             703
;  :mk-clause               144
;  :num-allocs              4074650
;  :num-checks              129
;  :propagations            92
;  :quant-instantiations    46
;  :rlimit-count            137176)
(assert (< $k@70@08 $k@50@08))
(assert (<= $Perm.No (- $k@50@08 $k@70@08)))
(assert (<= (- $k@50@08 $k@70@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@50@08 $k@70@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08)))
      $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder2 != null
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               704
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      92
;  :arith-assert-upper      62
;  :arith-conflicts         7
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   30
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              94
;  :final-checks            17
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             706
;  :mk-clause               144
;  :num-allocs              4074650
;  :num-checks              130
;  :propagations            92
;  :quant-instantiations    46
;  :rlimit-count            137390)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               704
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      92
;  :arith-assert-upper      62
;  :arith-conflicts         7
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   30
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              94
;  :final-checks            17
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             706
;  :mk-clause               144
;  :num-allocs              4074650
;  :num-checks              131
;  :propagations            92
;  :quant-instantiations    46
;  :rlimit-count            137403)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               704
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      92
;  :arith-assert-upper      62
;  :arith-conflicts         7
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   30
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              94
;  :final-checks            17
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             706
;  :mk-clause               144
;  :num-allocs              4074650
;  :num-checks              132
;  :propagations            92
;  :quant-instantiations    46
;  :rlimit-count            137451)
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(push) ; 4
(assert (not (< $Perm.No (+ $k@13@08 $k@48@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               704
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      92
;  :arith-assert-upper      63
;  :arith-conflicts         8
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         11
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   30
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              94
;  :final-checks            17
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             707
;  :mk-clause               144
;  :num-allocs              4074650
;  :num-checks              133
;  :propagations            92
;  :quant-instantiations    46
;  :rlimit-count            137514)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@49@08 diz@10@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               704
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      92
;  :arith-assert-upper      63
;  :arith-conflicts         8
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         11
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   30
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              94
;  :final-checks            17
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             707
;  :mk-clause               144
;  :num-allocs              4074650
;  :num-checks              134
;  :propagations            92
;  :quant-instantiations    46
;  :rlimit-count            137570)
(assert (= $t@49@08 diz@10@08))
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               704
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      92
;  :arith-assert-upper      63
;  :arith-conflicts         8
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         11
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   30
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              94
;  :final-checks            17
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             707
;  :mk-clause               144
;  :num-allocs              4074650
;  :num-checks              135
;  :propagations            92
;  :quant-instantiations    46
;  :rlimit-count            137618)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@60@08 $Perm.Write))
(assert ($Perm.isReadVar $k@61@08 $Perm.Write))
(assert ($Perm.isReadVar $k@62@08 $Perm.Write))
(assert ($Perm.isReadVar $k@63@08 $Perm.Write))
(assert ($Perm.isReadVar $k@64@08 $Perm.Write))
(assert (= $t@58@08 ($Snap.combine ($Snap.first $t@58@08) ($Snap.second $t@58@08))))
(assert (=
  ($Snap.second $t@58@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@58@08))
    ($Snap.second ($Snap.second $t@58@08)))))
(assert (= ($Snap.first ($Snap.second $t@58@08)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@58@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@58@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@58@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))
  $Snap.unit))
(assert (forall ((i__13@59@08 Int)) (!
  (implies
    (and
      (<
        i__13@59@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
      (<= 0 i__13@59@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
          i__13@59@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
            i__13@59@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
            i__13@59@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    i__13@59@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))
(assert (<= $Perm.No $k@60@08))
(assert (<= $k@60@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@60@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))
(assert (<= $Perm.No $k@61@08))
(assert (<= $k@61@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@61@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))
(assert (<= $Perm.No $k@62@08))
(assert (<= $k@62@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@62@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@63@08))
(assert (<= $k@63@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@63@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@64@08))
(assert (<= $k@64@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@64@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
  diz@10@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1 || diz.Prc_half_adder_1_m.Main_event_state[2] != -2
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          7
;  :arith-assert-diseq      35
;  :arith-assert-lower      106
;  :arith-assert-upper      75
;  :arith-conflicts         8
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         11
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 211
;  :datatype-occurs-check   48
;  :datatype-splits         139
;  :decisions               203
;  :del-clause              106
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             889
;  :mk-clause               158
;  :num-allocs              4349591
;  :num-checks              138
;  :propagations            103
;  :quant-instantiations    59
;  :rlimit-count            145524)
; [eval] -1
(push) ; 5
; [then-branch: 14 | First:(Second:(Second:(Second:($t@58@08))))[1] != -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:($t@58@08))))[1] == -1 | live]
(push) ; 6
; [then-branch: 14 | First:(Second:(Second:(Second:($t@58@08))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
      1)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 14 | First:(Second:(Second:(Second:($t@58@08))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    1)
  (- 0 1)))
; [eval] diz.Prc_half_adder_1_m.Main_event_state[2] != -2
; [eval] diz.Prc_half_adder_1_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1287
;  :arith-add-rows          7
;  :arith-assert-diseq      35
;  :arith-assert-lower      106
;  :arith-assert-upper      75
;  :arith-conflicts         8
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         11
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 211
;  :datatype-occurs-check   48
;  :datatype-splits         139
;  :decisions               203
;  :del-clause              106
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             890
;  :mk-clause               158
;  :num-allocs              4349591
;  :num-checks              139
;  :propagations            103
;  :quant-instantiations    59
;  :rlimit-count            145682)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
          2)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1415
;  :arith-add-rows          7
;  :arith-assert-diseq      37
;  :arith-assert-lower      113
;  :arith-assert-upper      78
;  :arith-conflicts         8
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 255
;  :datatype-occurs-check   57
;  :datatype-splits         180
;  :decisions               245
;  :del-clause              117
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             946
;  :mk-clause               169
;  :num-allocs              4349591
;  :num-checks              140
;  :propagations            111
;  :quant-instantiations    61
;  :rlimit-count            147091
;  :time                    0.00)
(push) ; 5
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
        2)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      37
;  :arith-assert-lower      113
;  :arith-assert-upper      78
;  :arith-conflicts         8
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              117
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             988
;  :mk-clause               169
;  :num-allocs              4349591
;  :num-checks              141
;  :propagations            114
;  :quant-instantiations    61
;  :rlimit-count            148313
;  :time                    0.00)
; [then-branch: 15 | First:(Second:(Second:(Second:($t@58@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@08))))))[2] != -2 | live]
; [else-branch: 15 | !(First:(Second:(Second:(Second:($t@58@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@08))))))[2] != -2) | live]
(push) ; 5
; [then-branch: 15 | First:(Second:(Second:(Second:($t@58@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@08))))))[2] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
        2)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@71@08 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 16 | 0 <= i@71@08 | live]
; [else-branch: 16 | !(0 <= i@71@08) | live]
(push) ; 8
; [then-branch: 16 | 0 <= i@71@08]
(assert (<= 0 i@71@08))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 16 | !(0 <= i@71@08)]
(assert (not (<= 0 i@71@08)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 17 | i@71@08 < |First:(Second:(Second:(Second:($t@58@08))))| && 0 <= i@71@08 | live]
; [else-branch: 17 | !(i@71@08 < |First:(Second:(Second:(Second:($t@58@08))))| && 0 <= i@71@08) | live]
(push) ; 8
; [then-branch: 17 | i@71@08 < |First:(Second:(Second:(Second:($t@58@08))))| && 0 <= i@71@08]
(assert (and
  (<
    i@71@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
  (<= 0 i@71@08)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@71@08 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      37
;  :arith-assert-lower      114
;  :arith-assert-upper      79
;  :arith-conflicts         8
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              117
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             992
;  :mk-clause               170
;  :num-allocs              4349591
;  :num-checks              142
;  :propagations            114
;  :quant-instantiations    61
;  :rlimit-count            148679)
; [eval] -1
(push) ; 9
; [then-branch: 18 | First:(Second:(Second:(Second:($t@58@08))))[i@71@08] == -1 | live]
; [else-branch: 18 | First:(Second:(Second:(Second:($t@58@08))))[i@71@08] != -1 | live]
(push) ; 10
; [then-branch: 18 | First:(Second:(Second:(Second:($t@58@08))))[i@71@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    i@71@08)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 18 | First:(Second:(Second:(Second:($t@58@08))))[i@71@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
      i@71@08)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@71@08 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      38
;  :arith-assert-lower      117
;  :arith-assert-upper      80
;  :arith-conflicts         8
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              117
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             998
;  :mk-clause               174
;  :num-allocs              4349591
;  :num-checks              143
;  :propagations            116
;  :quant-instantiations    62
;  :rlimit-count            148911)
(push) ; 11
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@58@08))))[i@71@08] | live]
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@58@08))))[i@71@08]) | live]
(push) ; 12
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@58@08))))[i@71@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    i@71@08)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@71@08 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      38
;  :arith-assert-lower      117
;  :arith-assert-upper      80
;  :arith-conflicts         8
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              117
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             998
;  :mk-clause               174
;  :num-allocs              4349591
;  :num-checks              144
;  :propagations            116
;  :quant-instantiations    62
;  :rlimit-count            149025)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@58@08))))[i@71@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
      i@71@08))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 17 | !(i@71@08 < |First:(Second:(Second:(Second:($t@58@08))))| && 0 <= i@71@08)]
(assert (not
  (and
    (<
      i@71@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
    (<= 0 i@71@08))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@71@08 Int)) (!
  (implies
    (and
      (<
        i@71@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
      (<= 0 i@71@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
          i@71@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
            i@71@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
            i@71@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    i@71@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      40
;  :arith-assert-lower      118
;  :arith-assert-upper      81
;  :arith-conflicts         8
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               95
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1006
;  :mk-clause               188
;  :num-allocs              4349591
;  :num-checks              145
;  :propagations            118
;  :quant-instantiations    63
;  :rlimit-count            149471)
(assert (forall ((i@71@08 Int)) (!
  (implies
    (and
      (<
        i@71@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
      (<= 0 i@71@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
          i@71@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
            i@71@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
            i@71@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    i@71@08))
  :qid |prog.l<no position>|)))
(declare-const $k@72@08 $Perm)
(assert ($Perm.isReadVar $k@72@08 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@72@08 $Perm.No) (< $Perm.No $k@72@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      82
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1011
;  :mk-clause               190
;  :num-allocs              4349591
;  :num-checks              146
;  :propagations            119
;  :quant-instantiations    63
;  :rlimit-count            150032)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@60@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      82
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1011
;  :mk-clause               190
;  :num-allocs              4349591
;  :num-checks              147
;  :propagations            119
;  :quant-instantiations    63
;  :rlimit-count            150043)
(assert (< $k@72@08 $k@60@08))
(assert (<= $Perm.No (- $k@60@08 $k@72@08)))
(assert (<= (- $k@60@08 $k@72@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@60@08 $k@72@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
; [eval] diz.Main_adder != null
(push) ; 6
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      41
;  :arith-assert-lower      122
;  :arith-assert-upper      83
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               97
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1014
;  :mk-clause               190
;  :num-allocs              4349591
;  :num-checks              148
;  :propagations            119
;  :quant-instantiations    63
;  :rlimit-count            150257)
(push) ; 6
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      41
;  :arith-assert-lower      122
;  :arith-assert-upper      83
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               98
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1014
;  :mk-clause               190
;  :num-allocs              4349591
;  :num-checks              149
;  :propagations            119
;  :quant-instantiations    63
;  :rlimit-count            150305)
(push) ; 6
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      41
;  :arith-assert-lower      122
;  :arith-assert-upper      83
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1014
;  :mk-clause               190
;  :num-allocs              4349591
;  :num-checks              150
;  :propagations            119
;  :quant-instantiations    63
;  :rlimit-count            150353)
(push) ; 6
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      41
;  :arith-assert-lower      122
;  :arith-assert-upper      83
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1014
;  :mk-clause               190
;  :num-allocs              4349591
;  :num-checks              151
;  :propagations            119
;  :quant-instantiations    63
;  :rlimit-count            150401)
(push) ; 6
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      41
;  :arith-assert-lower      122
;  :arith-assert-upper      83
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               101
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1014
;  :mk-clause               190
;  :num-allocs              4349591
;  :num-checks              152
;  :propagations            119
;  :quant-instantiations    63
;  :rlimit-count            150449)
(push) ; 6
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      41
;  :arith-assert-lower      122
;  :arith-assert-upper      83
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1014
;  :mk-clause               190
;  :num-allocs              4349591
;  :num-checks              153
;  :propagations            119
;  :quant-instantiations    63
;  :rlimit-count            150497)
(push) ; 6
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      41
;  :arith-assert-lower      122
;  :arith-assert-upper      83
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               103
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1014
;  :mk-clause               190
;  :num-allocs              4349591
;  :num-checks              154
;  :propagations            119
;  :quant-instantiations    63
;  :rlimit-count            150545)
(push) ; 6
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      41
;  :arith-assert-lower      122
;  :arith-assert-upper      83
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1014
;  :mk-clause               190
;  :num-allocs              4349591
;  :num-checks              155
;  :propagations            119
;  :quant-instantiations    63
;  :rlimit-count            150593)
(push) ; 6
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      41
;  :arith-assert-lower      122
;  :arith-assert-upper      83
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               105
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1014
;  :mk-clause               190
;  :num-allocs              4349591
;  :num-checks              156
;  :propagations            119
;  :quant-instantiations    63
;  :rlimit-count            150641)
(push) ; 6
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      41
;  :arith-assert-lower      122
;  :arith-assert-upper      83
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1014
;  :mk-clause               190
;  :num-allocs              4349591
;  :num-checks              157
;  :propagations            119
;  :quant-instantiations    63
;  :rlimit-count            150689)
(declare-const $k@73@08 $Perm)
(assert ($Perm.isReadVar $k@73@08 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      84
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               107
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1018
;  :mk-clause               192
;  :num-allocs              4349591
;  :num-checks              158
;  :propagations            120
;  :quant-instantiations    63
;  :rlimit-count            150885)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@73@08 $Perm.No) (< $Perm.No $k@73@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      84
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1018
;  :mk-clause               192
;  :num-allocs              4349591
;  :num-checks              159
;  :propagations            120
;  :quant-instantiations    63
;  :rlimit-count            150935)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@61@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      84
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1018
;  :mk-clause               192
;  :num-allocs              4349591
;  :num-checks              160
;  :propagations            120
;  :quant-instantiations    63
;  :rlimit-count            150946)
(assert (< $k@73@08 $k@61@08))
(assert (<= $Perm.No (- $k@61@08 $k@73@08)))
(assert (<= (- $k@61@08 $k@73@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@61@08 $k@73@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
      $Ref.null))))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 6
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      42
;  :arith-assert-lower      126
;  :arith-assert-upper      85
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1021
;  :mk-clause               192
;  :num-allocs              4349591
;  :num-checks              161
;  :propagations            120
;  :quant-instantiations    63
;  :rlimit-count            151160)
(push) ; 6
(assert (not (< $Perm.No $k@61@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      42
;  :arith-assert-lower      126
;  :arith-assert-upper      85
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               110
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1021
;  :mk-clause               192
;  :num-allocs              4349591
;  :num-checks              162
;  :propagations            120
;  :quant-instantiations    63
;  :rlimit-count            151208)
(declare-const $k@74@08 $Perm)
(assert ($Perm.isReadVar $k@74@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@74@08 $Perm.No) (< $Perm.No $k@74@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      43
;  :arith-assert-lower      128
;  :arith-assert-upper      86
;  :arith-conflicts         8
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1025
;  :mk-clause               194
;  :num-allocs              4349591
;  :num-checks              163
;  :propagations            121
;  :quant-instantiations    63
;  :rlimit-count            151407)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@62@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      43
;  :arith-assert-lower      128
;  :arith-assert-upper      86
;  :arith-conflicts         8
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1025
;  :mk-clause               194
;  :num-allocs              4349591
;  :num-checks              164
;  :propagations            121
;  :quant-instantiations    63
;  :rlimit-count            151418)
(assert (< $k@74@08 $k@62@08))
(assert (<= $Perm.No (- $k@62@08 $k@74@08)))
(assert (<= (- $k@62@08 $k@74@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@62@08 $k@74@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
; [eval] diz.Main_adder_prc != null
(push) ; 6
(assert (not (< $Perm.No $k@62@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      43
;  :arith-assert-lower      130
;  :arith-assert-upper      87
;  :arith-conflicts         8
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1028
;  :mk-clause               194
;  :num-allocs              4349591
;  :num-checks              165
;  :propagations            121
;  :quant-instantiations    63
;  :rlimit-count            151626)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      43
;  :arith-assert-lower      130
;  :arith-assert-upper      87
;  :arith-conflicts         8
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1028
;  :mk-clause               194
;  :num-allocs              4349591
;  :num-checks              166
;  :propagations            121
;  :quant-instantiations    63
;  :rlimit-count            151639)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@62@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      43
;  :arith-assert-lower      130
;  :arith-assert-upper      87
;  :arith-conflicts         8
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1028
;  :mk-clause               194
;  :num-allocs              4349591
;  :num-checks              167
;  :propagations            121
;  :quant-instantiations    63
;  :rlimit-count            151687)
(declare-const $k@75@08 $Perm)
(assert ($Perm.isReadVar $k@75@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@75@08 $Perm.No) (< $Perm.No $k@75@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      132
;  :arith-assert-upper      88
;  :arith-conflicts         8
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1032
;  :mk-clause               196
;  :num-allocs              4349591
;  :num-checks              168
;  :propagations            122
;  :quant-instantiations    63
;  :rlimit-count            151886)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@63@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      132
;  :arith-assert-upper      88
;  :arith-conflicts         8
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1032
;  :mk-clause               196
;  :num-allocs              4349591
;  :num-checks              169
;  :propagations            122
;  :quant-instantiations    63
;  :rlimit-count            151897)
(assert (< $k@75@08 $k@63@08))
(assert (<= $Perm.No (- $k@63@08 $k@75@08)))
(assert (<= (- $k@63@08 $k@75@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@63@08 $k@75@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
; [eval] diz.Main_adder_half_adder1 != null
(push) ; 6
(assert (not (< $Perm.No $k@63@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      134
;  :arith-assert-upper      89
;  :arith-conflicts         8
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1035
;  :mk-clause               196
;  :num-allocs              4349591
;  :num-checks              170
;  :propagations            122
;  :quant-instantiations    63
;  :rlimit-count            152111)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      134
;  :arith-assert-upper      89
;  :arith-conflicts         8
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1035
;  :mk-clause               196
;  :num-allocs              4349591
;  :num-checks              171
;  :propagations            122
;  :quant-instantiations    63
;  :rlimit-count            152124)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@63@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1541
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      134
;  :arith-assert-upper      89
;  :arith-conflicts         8
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 299
;  :datatype-occurs-check   66
;  :datatype-splits         221
;  :decisions               286
;  :del-clause              135
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1035
;  :mk-clause               196
;  :num-allocs              4349591
;  :num-checks              172
;  :propagations            122
;  :quant-instantiations    63
;  :rlimit-count            152172)
(push) ; 6
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1669
;  :arith-add-rows          7
;  :arith-assert-diseq      46
;  :arith-assert-lower      141
;  :arith-assert-upper      92
;  :arith-conflicts         8
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         13
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 343
;  :datatype-occurs-check   75
;  :datatype-splits         262
;  :decisions               328
;  :del-clause              145
;  :final-checks            32
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1089
;  :mk-clause               206
;  :num-allocs              4349591
;  :num-checks              173
;  :propagations            130
;  :quant-instantiations    66
;  :rlimit-count            153375
;  :time                    0.00)
(declare-const $k@76@08 $Perm)
(assert ($Perm.isReadVar $k@76@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@76@08 $Perm.No) (< $Perm.No $k@76@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1669
;  :arith-add-rows          7
;  :arith-assert-diseq      47
;  :arith-assert-lower      143
;  :arith-assert-upper      93
;  :arith-conflicts         8
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         13
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 343
;  :datatype-occurs-check   75
;  :datatype-splits         262
;  :decisions               328
;  :del-clause              145
;  :final-checks            32
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1093
;  :mk-clause               208
;  :num-allocs              4349591
;  :num-checks              174
;  :propagations            131
;  :quant-instantiations    66
;  :rlimit-count            153574)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@64@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1669
;  :arith-add-rows          7
;  :arith-assert-diseq      47
;  :arith-assert-lower      143
;  :arith-assert-upper      93
;  :arith-conflicts         8
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         13
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 343
;  :datatype-occurs-check   75
;  :datatype-splits         262
;  :decisions               328
;  :del-clause              145
;  :final-checks            32
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1093
;  :mk-clause               208
;  :num-allocs              4349591
;  :num-checks              175
;  :propagations            131
;  :quant-instantiations    66
;  :rlimit-count            153585)
(assert (< $k@76@08 $k@64@08))
(assert (<= $Perm.No (- $k@64@08 $k@76@08)))
(assert (<= (- $k@64@08 $k@76@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@64@08 $k@76@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
; [eval] diz.Main_adder_half_adder2 != null
(push) ; 6
(assert (not (< $Perm.No $k@64@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1669
;  :arith-add-rows          7
;  :arith-assert-diseq      47
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-conflicts         8
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         13
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 343
;  :datatype-occurs-check   75
;  :datatype-splits         262
;  :decisions               328
;  :del-clause              145
;  :final-checks            32
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1096
;  :mk-clause               208
;  :num-allocs              4349591
;  :num-checks              176
;  :propagations            131
;  :quant-instantiations    66
;  :rlimit-count            153799)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1669
;  :arith-add-rows          7
;  :arith-assert-diseq      47
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-conflicts         8
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         13
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 343
;  :datatype-occurs-check   75
;  :datatype-splits         262
;  :decisions               328
;  :del-clause              145
;  :final-checks            32
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1096
;  :mk-clause               208
;  :num-allocs              4349591
;  :num-checks              177
;  :propagations            131
;  :quant-instantiations    66
;  :rlimit-count            153812)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@64@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1669
;  :arith-add-rows          7
;  :arith-assert-diseq      47
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-conflicts         8
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         13
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 343
;  :datatype-occurs-check   75
;  :datatype-splits         262
;  :decisions               328
;  :del-clause              145
;  :final-checks            32
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1096
;  :mk-clause               208
;  :num-allocs              4349591
;  :num-checks              178
;  :propagations            131
;  :quant-instantiations    66
;  :rlimit-count            153860)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) globals@11@08))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
(declare-const $t@77@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
(assert (= $t@77@08 ($Snap.combine ($Snap.first $t@77@08) ($Snap.second $t@77@08))))
(assert (= ($Snap.first $t@77@08) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@77@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@77@08))
    ($Snap.second ($Snap.second $t@77@08)))))
(assert (= ($Snap.first ($Snap.second $t@77@08)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@77@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@77@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@77@08))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@77@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@78@08 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 20 | 0 <= i@78@08 | live]
; [else-branch: 20 | !(0 <= i@78@08) | live]
(push) ; 8
; [then-branch: 20 | 0 <= i@78@08]
(assert (<= 0 i@78@08))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 20 | !(0 <= i@78@08)]
(assert (not (<= 0 i@78@08)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 21 | i@78@08 < |First:(Second:(Second:(Second:($t@77@08))))| && 0 <= i@78@08 | live]
; [else-branch: 21 | !(i@78@08 < |First:(Second:(Second:(Second:($t@77@08))))| && 0 <= i@78@08) | live]
(push) ; 8
; [then-branch: 21 | i@78@08 < |First:(Second:(Second:(Second:($t@77@08))))| && 0 <= i@78@08]
(assert (and
  (<
    i@78@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))
  (<= 0 i@78@08)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@78@08 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1907
;  :arith-add-rows          7
;  :arith-assert-diseq      49
;  :arith-assert-lower      157
;  :arith-assert-upper      100
;  :arith-conflicts         8
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         14
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              165
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1177
;  :mk-clause               218
;  :num-allocs              4498227
;  :num-checks              180
;  :propagations            139
;  :quant-instantiations    73
;  :rlimit-count            157518)
; [eval] -1
(push) ; 9
; [then-branch: 22 | First:(Second:(Second:(Second:($t@77@08))))[i@78@08] == -1 | live]
; [else-branch: 22 | First:(Second:(Second:(Second:($t@77@08))))[i@78@08] != -1 | live]
(push) ; 10
; [then-branch: 22 | First:(Second:(Second:(Second:($t@77@08))))[i@78@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
    i@78@08)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 22 | First:(Second:(Second:(Second:($t@77@08))))[i@78@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
      i@78@08)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@78@08 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1907
;  :arith-add-rows          7
;  :arith-assert-diseq      49
;  :arith-assert-lower      157
;  :arith-assert-upper      100
;  :arith-conflicts         8
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         14
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              165
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1178
;  :mk-clause               218
;  :num-allocs              4498227
;  :num-checks              181
;  :propagations            139
;  :quant-instantiations    73
;  :rlimit-count            157693)
(push) ; 11
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@77@08))))[i@78@08] | live]
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@77@08))))[i@78@08]) | live]
(push) ; 12
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@77@08))))[i@78@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
    i@78@08)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@78@08 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1907
;  :arith-add-rows          7
;  :arith-assert-diseq      50
;  :arith-assert-lower      160
;  :arith-assert-upper      100
;  :arith-conflicts         8
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         14
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              165
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1181
;  :mk-clause               219
;  :num-allocs              4498227
;  :num-checks              182
;  :propagations            139
;  :quant-instantiations    73
;  :rlimit-count            157817)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@77@08))))[i@78@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
      i@78@08))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 21 | !(i@78@08 < |First:(Second:(Second:(Second:($t@77@08))))| && 0 <= i@78@08)]
(assert (not
  (and
    (<
      i@78@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))
    (<= 0 i@78@08))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@78@08 Int)) (!
  (implies
    (and
      (<
        i@78@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))
      (<= 0 i@78@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
          i@78@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
            i@78@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
            i@78@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
    i@78@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))
(declare-const $k@79@08 $Perm)
(assert ($Perm.isReadVar $k@79@08 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@79@08 $Perm.No) (< $Perm.No $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1912
;  :arith-add-rows          7
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      101
;  :arith-conflicts         8
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         14
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               120
;  :datatype-accessor-ax    168
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1187
;  :mk-clause               221
;  :num-allocs              4498227
;  :num-checks              183
;  :propagations            140
;  :quant-instantiations    73
;  :rlimit-count            158586)
(declare-const $t@80@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@60@08 $k@72@08))
    (=
      $t@80@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))
  (implies
    (< $Perm.No $k@79@08)
    (=
      $t@80@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))
(assert (<= $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08)))
(assert (<= (+ (- $k@60@08 $k@72@08) $k@79@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))
  $Snap.unit))
; [eval] diz.Main_adder != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1922
;  :arith-add-rows          8
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      103
;  :arith-conflicts         9
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         15
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1195
;  :mk-clause               221
;  :num-allocs              4498227
;  :num-checks              184
;  :propagations            140
;  :quant-instantiations    74
;  :rlimit-count            159266)
(assert (not (= $t@80@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1928
;  :arith-add-rows          8
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      104
;  :arith-conflicts         10
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         16
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               122
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1198
;  :mk-clause               221
;  :num-allocs              4498227
;  :num-checks              185
;  :propagations            140
;  :quant-instantiations    74
;  :rlimit-count            159588)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1933
;  :arith-add-rows          8
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      105
;  :arith-conflicts         11
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         17
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               123
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1200
;  :mk-clause               221
;  :num-allocs              4498227
;  :num-checks              186
;  :propagations            140
;  :quant-instantiations    74
;  :rlimit-count            159875)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1938
;  :arith-add-rows          8
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      106
;  :arith-conflicts         12
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         18
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               124
;  :datatype-accessor-ax    172
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1202
;  :mk-clause               221
;  :num-allocs              4498227
;  :num-checks              187
;  :propagations            140
;  :quant-instantiations    74
;  :rlimit-count            160172)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1943
;  :arith-add-rows          8
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      107
;  :arith-conflicts         13
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         19
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               125
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1204
;  :mk-clause               221
;  :num-allocs              4498227
;  :num-checks              188
;  :propagations            140
;  :quant-instantiations    74
;  :rlimit-count            160479)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1948
;  :arith-add-rows          8
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      108
;  :arith-conflicts         14
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         20
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               126
;  :datatype-accessor-ax    174
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1206
;  :mk-clause               221
;  :num-allocs              4498227
;  :num-checks              189
;  :propagations            140
;  :quant-instantiations    74
;  :rlimit-count            160796)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1953
;  :arith-add-rows          8
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      109
;  :arith-conflicts         15
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         21
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1208
;  :mk-clause               221
;  :num-allocs              4498227
;  :num-checks              190
;  :propagations            140
;  :quant-instantiations    74
;  :rlimit-count            161123)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1958
;  :arith-add-rows          8
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      110
;  :arith-conflicts         16
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         22
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               128
;  :datatype-accessor-ax    176
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1210
;  :mk-clause               221
;  :num-allocs              4498227
;  :num-checks              191
;  :propagations            140
;  :quant-instantiations    74
;  :rlimit-count            161460)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1963
;  :arith-add-rows          8
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      111
;  :arith-conflicts         17
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         23
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               129
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1212
;  :mk-clause               221
;  :num-allocs              4498227
;  :num-checks              192
;  :propagations            140
;  :quant-instantiations    74
;  :rlimit-count            161807)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1968
;  :arith-add-rows          8
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      112
;  :arith-conflicts         18
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         24
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    178
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1214
;  :mk-clause               221
;  :num-allocs              4498227
;  :num-checks              193
;  :propagations            140
;  :quant-instantiations    74
;  :rlimit-count            162164)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1973
;  :arith-add-rows          8
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      113
;  :arith-conflicts         19
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         25
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               131
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1216
;  :mk-clause               221
;  :num-allocs              4498227
;  :num-checks              194
;  :propagations            140
;  :quant-instantiations    74
;  :rlimit-count            162531)
(declare-const $k@81@08 $Perm)
(assert ($Perm.isReadVar $k@81@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@81@08 $Perm.No) (< $Perm.No $k@81@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1973
;  :arith-add-rows          8
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      114
;  :arith-conflicts         19
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         25
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1220
;  :mk-clause               223
;  :num-allocs              4498227
;  :num-checks              195
;  :propagations            141
;  :quant-instantiations    74
;  :rlimit-count            162729)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
  $t@80@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1973
;  :arith-add-rows          8
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      114
;  :arith-conflicts         19
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         25
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1220
;  :mk-clause               223
;  :num-allocs              4498227
;  :num-checks              196
;  :propagations            141
;  :quant-instantiations    74
;  :rlimit-count            162740)
(declare-const $t@82@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@61@08 $k@73@08))
    (=
      $t@82@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@81@08)
    (=
      $t@82@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@61@08 $k@73@08) $k@81@08)))
(assert (<= (+ (- $k@61@08 $k@73@08) $k@81@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@61@08 $k@73@08) $k@81@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1983
;  :arith-add-rows          9
;  :arith-assert-diseq      52
;  :arith-assert-lower      166
;  :arith-assert-upper      116
;  :arith-conflicts         20
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         26
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1228
;  :mk-clause               223
;  :num-allocs              4498227
;  :num-checks              197
;  :propagations            141
;  :quant-instantiations    75
;  :rlimit-count            163462)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
  $t@80@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1983
;  :arith-add-rows          9
;  :arith-assert-diseq      52
;  :arith-assert-lower      166
;  :arith-assert-upper      116
;  :arith-conflicts         20
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         26
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1228
;  :mk-clause               223
;  :num-allocs              4498227
;  :num-checks              198
;  :propagations            141
;  :quant-instantiations    75
;  :rlimit-count            163473)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@61@08 $k@73@08) $k@81@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1983
;  :arith-add-rows          9
;  :arith-assert-diseq      52
;  :arith-assert-lower      166
;  :arith-assert-upper      117
;  :arith-conflicts         21
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         27
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1229
;  :mk-clause               223
;  :num-allocs              4498227
;  :num-checks              199
;  :propagations            141
;  :quant-instantiations    75
;  :rlimit-count            163557)
(assert (= $t@82@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))))
(declare-const $k@83@08 $Perm)
(assert ($Perm.isReadVar $k@83@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@83@08 $Perm.No) (< $Perm.No $k@83@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1988
;  :arith-add-rows          9
;  :arith-assert-diseq      53
;  :arith-assert-lower      168
;  :arith-assert-upper      118
;  :arith-conflicts         21
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         27
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1234
;  :mk-clause               225
;  :num-allocs              4498227
;  :num-checks              200
;  :propagations            142
;  :quant-instantiations    75
;  :rlimit-count            164056)
(declare-const $t@84@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@62@08 $k@74@08))
    (=
      $t@84@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@83@08)
    (=
      $t@84@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@62@08 $k@74@08) $k@83@08)))
(assert (<= (+ (- $k@62@08 $k@74@08) $k@83@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@62@08 $k@74@08) $k@83@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@62@08 $k@74@08) $k@83@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1998
;  :arith-add-rows          10
;  :arith-assert-diseq      53
;  :arith-assert-lower      169
;  :arith-assert-upper      120
;  :arith-conflicts         22
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         28
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               136
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1242
;  :mk-clause               225
;  :num-allocs              4498227
;  :num-checks              201
;  :propagations            142
;  :quant-instantiations    76
;  :rlimit-count            165031)
(assert (not (= $t@84@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@62@08 $k@74@08) $k@83@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2004
;  :arith-add-rows          11
;  :arith-assert-diseq      53
;  :arith-assert-lower      169
;  :arith-assert-upper      121
;  :arith-conflicts         23
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         29
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1245
;  :mk-clause               225
;  :num-allocs              4498227
;  :num-checks              202
;  :propagations            142
;  :quant-instantiations    76
;  :rlimit-count            165518)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2004
;  :arith-add-rows          11
;  :arith-assert-diseq      53
;  :arith-assert-lower      169
;  :arith-assert-upper      121
;  :arith-conflicts         23
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         29
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1245
;  :mk-clause               225
;  :num-allocs              4498227
;  :num-checks              203
;  :propagations            142
;  :quant-instantiations    76
;  :rlimit-count            165531)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))))))
(declare-const $k@85@08 $Perm)
(assert ($Perm.isReadVar $k@85@08 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@85@08 $Perm.No) (< $Perm.No $k@85@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2009
;  :arith-add-rows          11
;  :arith-assert-diseq      54
;  :arith-assert-lower      171
;  :arith-assert-upper      122
;  :arith-conflicts         23
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         29
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1250
;  :mk-clause               227
;  :num-allocs              4498227
;  :num-checks              204
;  :propagations            143
;  :quant-instantiations    76
;  :rlimit-count            166062)
(declare-const $t@86@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@63@08 $k@75@08))
    (=
      $t@86@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@85@08)
    (=
      $t@86@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@63@08 $k@75@08) $k@85@08)))
(assert (<= (+ (- $k@63@08 $k@75@08) $k@85@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@63@08 $k@75@08) $k@85@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@63@08 $k@75@08) $k@85@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2019
;  :arith-add-rows          12
;  :arith-assert-diseq      54
;  :arith-assert-lower      172
;  :arith-assert-upper      124
;  :arith-conflicts         24
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         30
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    185
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1258
;  :mk-clause               227
;  :num-allocs              4498227
;  :num-checks              205
;  :propagations            143
;  :quant-instantiations    77
;  :rlimit-count            166808)
(assert (not (= $t@86@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@63@08 $k@75@08) $k@85@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2024
;  :arith-add-rows          12
;  :arith-assert-diseq      54
;  :arith-assert-lower      172
;  :arith-assert-upper      125
;  :arith-conflicts         25
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         31
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1260
;  :mk-clause               227
;  :num-allocs              4498227
;  :num-checks              206
;  :propagations            143
;  :quant-instantiations    77
;  :rlimit-count            167263)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2024
;  :arith-add-rows          12
;  :arith-assert-diseq      54
;  :arith-assert-lower      172
;  :arith-assert-upper      125
;  :arith-conflicts         25
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         31
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1260
;  :mk-clause               227
;  :num-allocs              4498227
;  :num-checks              207
;  :propagations            143
;  :quant-instantiations    77
;  :rlimit-count            167276)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
  $t@86@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2024
;  :arith-add-rows          12
;  :arith-assert-diseq      54
;  :arith-assert-lower      172
;  :arith-assert-upper      125
;  :arith-conflicts         25
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         31
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1260
;  :mk-clause               227
;  :num-allocs              4498227
;  :num-checks              208
;  :propagations            143
;  :quant-instantiations    77
;  :rlimit-count            167287)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))))))))))
(declare-const $k@87@08 $Perm)
(assert ($Perm.isReadVar $k@87@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@87@08 $Perm.No) (< $Perm.No $k@87@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2032
;  :arith-add-rows          12
;  :arith-assert-diseq      55
;  :arith-assert-lower      174
;  :arith-assert-upper      126
;  :arith-conflicts         25
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         31
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               141
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1267
;  :mk-clause               229
;  :num-allocs              4498227
;  :num-checks              209
;  :propagations            144
;  :quant-instantiations    78
;  :rlimit-count            167925)
(declare-const $t@88@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@64@08 $k@76@08))
    (=
      $t@88@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@87@08)
    (=
      $t@88@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@64@08 $k@76@08) $k@87@08)))
(assert (<= (+ (- $k@64@08 $k@76@08) $k@87@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@64@08 $k@76@08) $k@87@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@64@08 $k@76@08) $k@87@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2042
;  :arith-add-rows          13
;  :arith-assert-diseq      55
;  :arith-assert-lower      175
;  :arith-assert-upper      128
;  :arith-conflicts         26
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         32
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1275
;  :mk-clause               229
;  :num-allocs              4498227
;  :num-checks              210
;  :propagations            144
;  :quant-instantiations    79
;  :rlimit-count            168981)
(assert (not (= $t@88@08 $Ref.null)))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@64@08 $k@76@08) $k@87@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2043
;  :arith-add-rows          13
;  :arith-assert-diseq      55
;  :arith-assert-lower      175
;  :arith-assert-upper      129
;  :arith-conflicts         27
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         33
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1277
;  :mk-clause               229
;  :num-allocs              4498227
;  :num-checks              211
;  :propagations            144
;  :quant-instantiations    79
;  :rlimit-count            169115)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2043
;  :arith-add-rows          13
;  :arith-assert-diseq      55
;  :arith-assert-lower      175
;  :arith-assert-upper      129
;  :arith-conflicts         27
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         33
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 387
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               370
;  :del-clause              166
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.53
;  :memory                  4.53
;  :mk-bool-var             1277
;  :mk-clause               229
;  :num-allocs              4498227
;  :num-checks              212
;  :propagations            144
;  :quant-instantiations    79
;  :rlimit-count            169128)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@77@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) globals@11@08))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
(declare-const $t@89@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2542
;  :arith-add-rows          14
;  :arith-assert-diseq      63
;  :arith-assert-lower      205
;  :arith-assert-upper      143
;  :arith-conflicts         27
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         39
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              220
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1454
;  :mk-clause               274
;  :num-allocs              4810911
;  :num-checks              215
;  :propagations            173
;  :quant-instantiations    89
;  :rlimit-count            172854)
; [eval] diz.Prc_half_adder_1_m != null
; [eval] |diz.Prc_half_adder_1_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] |diz.Prc_half_adder_1_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] (forall i__13: Int :: { diz.Prc_half_adder_1_m.Main_process_state[i__13] } 0 <= i__13 && i__13 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__13] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13] && diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|)
(declare-const i__13@90@08 Int)
(push) ; 6
; [eval] 0 <= i__13 && i__13 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__13] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13] && diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= i__13 && i__13 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] 0 <= i__13
(push) ; 7
; [then-branch: 24 | 0 <= i__13@90@08 | live]
; [else-branch: 24 | !(0 <= i__13@90@08) | live]
(push) ; 8
; [then-branch: 24 | 0 <= i__13@90@08]
(assert (<= 0 i__13@90@08))
; [eval] i__13 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 24 | !(0 <= i__13@90@08)]
(assert (not (<= 0 i__13@90@08)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 25 | i__13@90@08 < |First:(Second:(Second:(Second:($t@77@08))))| && 0 <= i__13@90@08 | live]
; [else-branch: 25 | !(i__13@90@08 < |First:(Second:(Second:(Second:($t@77@08))))| && 0 <= i__13@90@08) | live]
(push) ; 8
; [then-branch: 25 | i__13@90@08 < |First:(Second:(Second:(Second:($t@77@08))))| && 0 <= i__13@90@08]
(assert (and
  (<
    i__13@90@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))
  (<= 0 i__13@90@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13] && diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13] == -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13]
(push) ; 9
(assert (not (>= i__13@90@08 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2542
;  :arith-add-rows          14
;  :arith-assert-diseq      63
;  :arith-assert-lower      206
;  :arith-assert-upper      144
;  :arith-conflicts         27
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         39
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              220
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1456
;  :mk-clause               274
;  :num-allocs              4810911
;  :num-checks              216
;  :propagations            173
;  :quant-instantiations    89
;  :rlimit-count            172990)
; [eval] -1
(push) ; 9
; [then-branch: 26 | First:(Second:(Second:(Second:($t@77@08))))[i__13@90@08] == -1 | live]
; [else-branch: 26 | First:(Second:(Second:(Second:($t@77@08))))[i__13@90@08] != -1 | live]
(push) ; 10
; [then-branch: 26 | First:(Second:(Second:(Second:($t@77@08))))[i__13@90@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
    i__13@90@08)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 26 | First:(Second:(Second:(Second:($t@77@08))))[i__13@90@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
      i__13@90@08)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13] && diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__13]
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13]
(push) ; 11
(assert (not (>= i__13@90@08 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2542
;  :arith-add-rows          14
;  :arith-assert-diseq      64
;  :arith-assert-lower      209
;  :arith-assert-upper      145
;  :arith-conflicts         27
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         39
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              220
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1462
;  :mk-clause               278
;  :num-allocs              4810911
;  :num-checks              217
;  :propagations            175
;  :quant-instantiations    90
;  :rlimit-count            173222)
(push) ; 11
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@77@08))))[i__13@90@08] | live]
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@77@08))))[i__13@90@08]) | live]
(push) ; 12
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@77@08))))[i__13@90@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
    i__13@90@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__13]
(push) ; 13
(assert (not (>= i__13@90@08 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2542
;  :arith-add-rows          14
;  :arith-assert-diseq      64
;  :arith-assert-lower      209
;  :arith-assert-upper      145
;  :arith-conflicts         27
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         39
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              220
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1462
;  :mk-clause               278
;  :num-allocs              4810911
;  :num-checks              218
;  :propagations            175
;  :quant-instantiations    90
;  :rlimit-count            173336)
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@77@08))))[i__13@90@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
      i__13@90@08))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 25 | !(i__13@90@08 < |First:(Second:(Second:(Second:($t@77@08))))| && 0 <= i__13@90@08)]
(assert (not
  (and
    (<
      i__13@90@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))
    (<= 0 i__13@90@08))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i__13@90@08 Int)) (!
  (implies
    (and
      (<
        i__13@90@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))
      (<= 0 i__13@90@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
          i__13@90@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
            i__13@90@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
            i__13@90@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
    i__13@90@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2542
;  :arith-add-rows          14
;  :arith-assert-diseq      66
;  :arith-assert-lower      210
;  :arith-assert-upper      146
;  :arith-conflicts         27
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         39
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              238
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1470
;  :mk-clause               292
;  :num-allocs              4810911
;  :num-checks              219
;  :propagations            177
;  :quant-instantiations    91
;  :rlimit-count            173782)
(assert (forall ((i__13@90@08 Int)) (!
  (implies
    (and
      (<
        i__13@90@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))
      (<= 0 i__13@90@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
          i__13@90@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
            i__13@90@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
            i__13@90@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@08)))))
    i__13@90@08))
  :qid |prog.l<no position>|)))
(declare-const $k@91@08 $Perm)
(assert ($Perm.isReadVar $k@91@08 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@91@08 $Perm.No) (< $Perm.No $k@91@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2542
;  :arith-add-rows          14
;  :arith-assert-diseq      67
;  :arith-assert-lower      212
;  :arith-assert-upper      147
;  :arith-conflicts         27
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         39
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              238
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1475
;  :mk-clause               294
;  :num-allocs              4810911
;  :num-checks              220
;  :propagations            178
;  :quant-instantiations    91
;  :rlimit-count            174342)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@60@08 $k@72@08) $k@79@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          14
;  :arith-assert-diseq      67
;  :arith-assert-lower      212
;  :arith-assert-upper      148
;  :arith-conflicts         28
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         39
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               147
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1477
;  :mk-clause               296
;  :num-allocs              4810911
;  :num-checks              221
;  :propagations            179
;  :quant-instantiations    91
;  :rlimit-count            174420)
(assert (< $k@91@08 (+ (- $k@60@08 $k@72@08) $k@79@08)))
(assert (<= $Perm.No (- (+ (- $k@60@08 $k@72@08) $k@79@08) $k@91@08)))
(assert (<= (- (+ (- $k@60@08 $k@72@08) $k@79@08) $k@91@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@60@08 $k@72@08) $k@79@08) $k@91@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder != null
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          15
;  :arith-assert-diseq      67
;  :arith-assert-lower      214
;  :arith-assert-upper      150
;  :arith-conflicts         29
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         40
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               148
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1481
;  :mk-clause               296
;  :num-allocs              4810911
;  :num-checks              222
;  :propagations            179
;  :quant-instantiations    91
;  :rlimit-count            174692)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          15
;  :arith-assert-diseq      67
;  :arith-assert-lower      214
;  :arith-assert-upper      151
;  :arith-conflicts         30
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         41
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               149
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1482
;  :mk-clause               296
;  :num-allocs              4810911
;  :num-checks              223
;  :propagations            179
;  :quant-instantiations    91
;  :rlimit-count            174770)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          15
;  :arith-assert-diseq      67
;  :arith-assert-lower      214
;  :arith-assert-upper      152
;  :arith-conflicts         31
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         42
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1483
;  :mk-clause               296
;  :num-allocs              4810911
;  :num-checks              224
;  :propagations            179
;  :quant-instantiations    91
;  :rlimit-count            174848)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          15
;  :arith-assert-diseq      67
;  :arith-assert-lower      214
;  :arith-assert-upper      153
;  :arith-conflicts         32
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         43
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               151
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1484
;  :mk-clause               296
;  :num-allocs              4810911
;  :num-checks              225
;  :propagations            179
;  :quant-instantiations    91
;  :rlimit-count            174926)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          15
;  :arith-assert-diseq      67
;  :arith-assert-lower      214
;  :arith-assert-upper      154
;  :arith-conflicts         33
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         44
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1485
;  :mk-clause               296
;  :num-allocs              4810911
;  :num-checks              226
;  :propagations            179
;  :quant-instantiations    91
;  :rlimit-count            175004)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          15
;  :arith-assert-diseq      67
;  :arith-assert-lower      214
;  :arith-assert-upper      155
;  :arith-conflicts         34
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         45
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               153
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1486
;  :mk-clause               296
;  :num-allocs              4810911
;  :num-checks              227
;  :propagations            179
;  :quant-instantiations    91
;  :rlimit-count            175082)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          15
;  :arith-assert-diseq      67
;  :arith-assert-lower      214
;  :arith-assert-upper      156
;  :arith-conflicts         35
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         46
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               154
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1487
;  :mk-clause               296
;  :num-allocs              4810911
;  :num-checks              228
;  :propagations            179
;  :quant-instantiations    91
;  :rlimit-count            175160)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          15
;  :arith-assert-diseq      67
;  :arith-assert-lower      214
;  :arith-assert-upper      157
;  :arith-conflicts         36
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         47
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               155
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1488
;  :mk-clause               296
;  :num-allocs              4810911
;  :num-checks              229
;  :propagations            179
;  :quant-instantiations    91
;  :rlimit-count            175238
;  :time                    0.00)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          15
;  :arith-assert-diseq      67
;  :arith-assert-lower      214
;  :arith-assert-upper      158
;  :arith-conflicts         37
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         48
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               156
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1489
;  :mk-clause               296
;  :num-allocs              4810911
;  :num-checks              230
;  :propagations            179
;  :quant-instantiations    91
;  :rlimit-count            175316)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          15
;  :arith-assert-diseq      67
;  :arith-assert-lower      214
;  :arith-assert-upper      159
;  :arith-conflicts         38
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         49
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               157
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1490
;  :mk-clause               296
;  :num-allocs              4810911
;  :num-checks              231
;  :propagations            179
;  :quant-instantiations    91
;  :rlimit-count            175394)
(declare-const $k@92@08 $Perm)
(assert ($Perm.isReadVar $k@92@08 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      161
;  :arith-conflicts         39
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         50
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1495
;  :mk-clause               298
;  :num-allocs              4810911
;  :num-checks              232
;  :propagations            180
;  :quant-instantiations    91
;  :rlimit-count            175621)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@92@08 $Perm.No) (< $Perm.No $k@92@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      161
;  :arith-conflicts         39
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         50
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1495
;  :mk-clause               298
;  :num-allocs              4810911
;  :num-checks              233
;  :propagations            180
;  :quant-instantiations    91
;  :rlimit-count            175671)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
  $t@80@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      161
;  :arith-conflicts         39
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         50
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              240
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1495
;  :mk-clause               298
;  :num-allocs              4810911
;  :num-checks              234
;  :propagations            180
;  :quant-instantiations    91
;  :rlimit-count            175682)
(push) ; 6
(assert (not (not (= (+ (- $k@61@08 $k@73@08) $k@81@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2544
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      162
;  :arith-conflicts         40
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         50
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              242
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1497
;  :mk-clause               300
;  :num-allocs              4810911
;  :num-checks              235
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            175762)
(assert (< $k@92@08 (+ (- $k@61@08 $k@73@08) $k@81@08)))
(assert (<= $Perm.No (- (+ (- $k@61@08 $k@73@08) $k@81@08) $k@92@08)))
(assert (<= (- (+ (- $k@61@08 $k@73@08) $k@81@08) $k@92@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@61@08 $k@73@08) $k@81@08) $k@92@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
      $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder.Full_adder_m == diz.Prc_half_adder_1_m
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@60@08 $k@72@08) $k@79@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2544
;  :arith-add-rows          17
;  :arith-assert-diseq      68
;  :arith-assert-lower      218
;  :arith-assert-upper      164
;  :arith-conflicts         41
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         51
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              242
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1501
;  :mk-clause               300
;  :num-allocs              4810911
;  :num-checks              236
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            176028)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
  $t@80@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2544
;  :arith-add-rows          17
;  :arith-assert-diseq      68
;  :arith-assert-lower      218
;  :arith-assert-upper      164
;  :arith-conflicts         41
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         51
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              242
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1501
;  :mk-clause               300
;  :num-allocs              4810911
;  :num-checks              237
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            176039)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@61@08 $k@73@08) $k@81@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2544
;  :arith-add-rows          17
;  :arith-assert-diseq      68
;  :arith-assert-lower      218
;  :arith-assert-upper      165
;  :arith-conflicts         42
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         52
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              242
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1502
;  :mk-clause               300
;  :num-allocs              4810911
;  :num-checks              238
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            176120)
(declare-const $k@93@08 $Perm)
(assert ($Perm.isReadVar $k@93@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@93@08 $Perm.No) (< $Perm.No $k@93@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2544
;  :arith-add-rows          17
;  :arith-assert-diseq      69
;  :arith-assert-lower      220
;  :arith-assert-upper      166
;  :arith-conflicts         42
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         52
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              242
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1506
;  :mk-clause               302
;  :num-allocs              4810911
;  :num-checks              239
;  :propagations            182
;  :quant-instantiations    91
;  :rlimit-count            176318)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@62@08 $k@74@08) $k@83@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2545
;  :arith-add-rows          18
;  :arith-assert-diseq      69
;  :arith-assert-lower      220
;  :arith-assert-upper      167
;  :arith-conflicts         43
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         52
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               164
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              244
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1508
;  :mk-clause               304
;  :num-allocs              4810911
;  :num-checks              240
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            176426)
(assert (< $k@93@08 (+ (- $k@62@08 $k@74@08) $k@83@08)))
(assert (<= $Perm.No (- (+ (- $k@62@08 $k@74@08) $k@83@08) $k@93@08)))
(assert (<= (- (+ (- $k@62@08 $k@74@08) $k@83@08) $k@93@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@62@08 $k@74@08) $k@83@08) $k@93@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_prc != null
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@62@08 $k@74@08) $k@83@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2545
;  :arith-add-rows          20
;  :arith-assert-diseq      69
;  :arith-assert-lower      222
;  :arith-assert-upper      169
;  :arith-conflicts         44
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         53
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              244
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1512
;  :mk-clause               304
;  :num-allocs              4810911
;  :num-checks              241
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            176727)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2545
;  :arith-add-rows          20
;  :arith-assert-diseq      69
;  :arith-assert-lower      222
;  :arith-assert-upper      169
;  :arith-conflicts         44
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         53
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              244
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1512
;  :mk-clause               304
;  :num-allocs              4810911
;  :num-checks              242
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            176740)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@62@08 $k@74@08) $k@83@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2545
;  :arith-add-rows          21
;  :arith-assert-diseq      69
;  :arith-assert-lower      222
;  :arith-assert-upper      170
;  :arith-conflicts         45
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         54
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              244
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1513
;  :mk-clause               304
;  :num-allocs              4810911
;  :num-checks              243
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            176849)
(declare-const $k@94@08 $Perm)
(assert ($Perm.isReadVar $k@94@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@94@08 $Perm.No) (< $Perm.No $k@94@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2545
;  :arith-add-rows          21
;  :arith-assert-diseq      70
;  :arith-assert-lower      224
;  :arith-assert-upper      171
;  :arith-conflicts         45
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         54
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              244
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1517
;  :mk-clause               306
;  :num-allocs              4810911
;  :num-checks              244
;  :propagations            184
;  :quant-instantiations    91
;  :rlimit-count            177047)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@63@08 $k@75@08) $k@85@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2546
;  :arith-add-rows          21
;  :arith-assert-diseq      70
;  :arith-assert-lower      224
;  :arith-assert-upper      172
;  :arith-conflicts         46
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         54
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              246
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1519
;  :mk-clause               308
;  :num-allocs              4810911
;  :num-checks              245
;  :propagations            185
;  :quant-instantiations    91
;  :rlimit-count            177125)
(assert (< $k@94@08 (+ (- $k@63@08 $k@75@08) $k@85@08)))
(assert (<= $Perm.No (- (+ (- $k@63@08 $k@75@08) $k@85@08) $k@94@08)))
(assert (<= (- (+ (- $k@63@08 $k@75@08) $k@85@08) $k@94@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@63@08 $k@75@08) $k@85@08) $k@94@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 != null
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@63@08 $k@75@08) $k@85@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2546
;  :arith-add-rows          22
;  :arith-assert-diseq      70
;  :arith-assert-lower      226
;  :arith-assert-upper      174
;  :arith-conflicts         47
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         55
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              246
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1523
;  :mk-clause               308
;  :num-allocs              4810911
;  :num-checks              246
;  :propagations            185
;  :quant-instantiations    91
;  :rlimit-count            177397)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2546
;  :arith-add-rows          22
;  :arith-assert-diseq      70
;  :arith-assert-lower      226
;  :arith-assert-upper      174
;  :arith-conflicts         47
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         55
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              246
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1523
;  :mk-clause               308
;  :num-allocs              4810911
;  :num-checks              247
;  :propagations            185
;  :quant-instantiations    91
;  :rlimit-count            177410)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@63@08 $k@75@08) $k@85@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2546
;  :arith-add-rows          22
;  :arith-assert-diseq      70
;  :arith-assert-lower      226
;  :arith-assert-upper      175
;  :arith-conflicts         48
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         56
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               170
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              246
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1524
;  :mk-clause               308
;  :num-allocs              4810911
;  :num-checks              248
;  :propagations            185
;  :quant-instantiations    91
;  :rlimit-count            177488)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))))))))))))))))))
  $t@86@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2546
;  :arith-add-rows          22
;  :arith-assert-diseq      70
;  :arith-assert-lower      226
;  :arith-assert-upper      175
;  :arith-conflicts         48
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         56
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               170
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               515
;  :del-clause              246
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1524
;  :mk-clause               308
;  :num-allocs              4810911
;  :num-checks              249
;  :propagations            185
;  :quant-instantiations    91
;  :rlimit-count            177499)
(push) ; 6
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2746
;  :arith-add-rows          23
;  :arith-assert-diseq      73
;  :arith-assert-lower      237
;  :arith-assert-upper      180
;  :arith-conflicts         48
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         58
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               170
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               571
;  :del-clause              263
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1602
;  :mk-clause               325
;  :num-allocs              4975191
;  :num-checks              250
;  :propagations            197
;  :quant-instantiations    96
;  :rlimit-count            179139
;  :time                    0.00)
(declare-const $k@95@08 $Perm)
(assert ($Perm.isReadVar $k@95@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@95@08 $Perm.No) (< $Perm.No $k@95@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2746
;  :arith-add-rows          23
;  :arith-assert-diseq      74
;  :arith-assert-lower      239
;  :arith-assert-upper      181
;  :arith-conflicts         48
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         58
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               571
;  :del-clause              263
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1606
;  :mk-clause               327
;  :num-allocs              4975191
;  :num-checks              251
;  :propagations            198
;  :quant-instantiations    96
;  :rlimit-count            179337)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@64@08 $k@76@08) $k@87@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2747
;  :arith-add-rows          23
;  :arith-assert-diseq      74
;  :arith-assert-lower      239
;  :arith-assert-upper      182
;  :arith-conflicts         49
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         58
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               571
;  :del-clause              265
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1608
;  :mk-clause               329
;  :num-allocs              4975191
;  :num-checks              252
;  :propagations            199
;  :quant-instantiations    96
;  :rlimit-count            179415)
(assert (< $k@95@08 (+ (- $k@64@08 $k@76@08) $k@87@08)))
(assert (<= $Perm.No (- (+ (- $k@64@08 $k@76@08) $k@87@08) $k@95@08)))
(assert (<= (- (+ (- $k@64@08 $k@76@08) $k@87@08) $k@95@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@64@08 $k@76@08) $k@87@08) $k@95@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder2 != null
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@64@08 $k@76@08) $k@87@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2747
;  :arith-add-rows          24
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      184
;  :arith-conflicts         50
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         59
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               571
;  :del-clause              265
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1612
;  :mk-clause               329
;  :num-allocs              4975191
;  :num-checks              253
;  :propagations            199
;  :quant-instantiations    96
;  :rlimit-count            179687)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2747
;  :arith-add-rows          24
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      184
;  :arith-conflicts         50
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         59
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               571
;  :del-clause              265
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1612
;  :mk-clause               329
;  :num-allocs              4975191
;  :num-checks              254
;  :propagations            199
;  :quant-instantiations    96
;  :rlimit-count            179700)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@64@08 $k@76@08) $k@87@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2747
;  :arith-add-rows          24
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      185
;  :arith-conflicts         51
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         60
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               571
;  :del-clause              265
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1613
;  :mk-clause               329
;  :num-allocs              4975191
;  :num-checks              255
;  :propagations            199
;  :quant-instantiations    96
;  :rlimit-count            179778)
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@63@08 $k@75@08) $k@85@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2747
;  :arith-add-rows          24
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      186
;  :arith-conflicts         52
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         61
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               571
;  :del-clause              265
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1614
;  :mk-clause               329
;  :num-allocs              4975191
;  :num-checks              256
;  :propagations            199
;  :quant-instantiations    96
;  :rlimit-count            179856)
(set-option :timeout 0)
(push) ; 6
(assert (not (= $t@86@08 diz@10@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2747
;  :arith-add-rows          24
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      186
;  :arith-conflicts         52
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         61
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               571
;  :del-clause              265
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1614
;  :mk-clause               329
;  :num-allocs              4975191
;  :num-checks              257
;  :propagations            199
;  :quant-instantiations    96
;  :rlimit-count            179867)
(assert (= $t@86@08 diz@10@08))
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2747
;  :arith-add-rows          24
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      186
;  :arith-conflicts         52
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         61
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               571
;  :del-clause              265
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1614
;  :mk-clause               329
;  :num-allocs              4975191
;  :num-checks              258
;  :propagations            199
;  :quant-instantiations    96
;  :rlimit-count            179883)
(pop) ; 5
(push) ; 5
; [else-branch: 15 | !(First:(Second:(Second:(Second:($t@58@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@08))))))[2] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
          2)
        (- 0 2))))))
(pop) ; 5
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2970
;  :arith-add-rows          25
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      186
;  :arith-conflicts         52
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         61
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 676
;  :datatype-occurs-check   320
;  :datatype-splits         548
;  :decisions               643
;  :del-clause              278
;  :final-checks            48
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             1693
;  :mk-clause               330
;  :num-allocs              5140595
;  :num-checks              259
;  :propagations            205
;  :quant-instantiations    96
;  :rlimit-count            181513
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3193
;  :arith-add-rows          25
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      186
;  :arith-conflicts         52
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         61
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    214
;  :datatype-constructor-ax 755
;  :datatype-occurs-check   332
;  :datatype-splits         625
;  :decisions               715
;  :del-clause              279
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             1772
;  :mk-clause               331
;  :num-allocs              5140595
;  :num-checks              260
;  :propagations            211
;  :quant-instantiations    96
;  :rlimit-count            183046
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3416
;  :arith-add-rows          25
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      186
;  :arith-conflicts         52
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         61
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 834
;  :datatype-occurs-check   344
;  :datatype-splits         702
;  :decisions               787
;  :del-clause              280
;  :final-checks            56
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             1851
;  :mk-clause               332
;  :num-allocs              5140595
;  :num-checks              261
;  :propagations            217
;  :quant-instantiations    96
;  :rlimit-count            184579
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3590
;  :arith-add-rows          25
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      186
;  :arith-conflicts         52
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         61
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               179
;  :datatype-accessor-ax    225
;  :datatype-constructor-ax 896
;  :datatype-occurs-check   353
;  :datatype-splits         745
;  :decisions               845
;  :del-clause              281
;  :final-checks            59
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             1897
;  :mk-clause               333
;  :num-allocs              5140595
;  :num-checks              262
;  :propagations            220
;  :quant-instantiations    96
;  :rlimit-count            186084
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3813
;  :arith-add-rows          25
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      186
;  :arith-conflicts         52
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         61
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 975
;  :datatype-occurs-check   365
;  :datatype-splits         822
;  :decisions               917
;  :del-clause              282
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             1976
;  :mk-clause               334
;  :num-allocs              5140595
;  :num-checks              263
;  :propagations            226
;  :quant-instantiations    96
;  :rlimit-count            187617
;  :time                    0.00)
; [eval] !(diz.Prc_half_adder_1_m.Main_process_state[1] != -1 || diz.Prc_half_adder_1_m.Main_event_state[2] != -2)
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1 || diz.Prc_half_adder_1_m.Main_event_state[2] != -2
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3813
;  :arith-add-rows          25
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      186
;  :arith-conflicts         52
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         61
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 975
;  :datatype-occurs-check   365
;  :datatype-splits         822
;  :decisions               917
;  :del-clause              282
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             1976
;  :mk-clause               334
;  :num-allocs              5140595
;  :num-checks              264
;  :propagations            226
;  :quant-instantiations    96
;  :rlimit-count            187632)
; [eval] -1
(push) ; 5
; [then-branch: 28 | First:(Second:(Second:(Second:($t@58@08))))[1] != -1 | live]
; [else-branch: 28 | First:(Second:(Second:(Second:($t@58@08))))[1] == -1 | live]
(push) ; 6
; [then-branch: 28 | First:(Second:(Second:(Second:($t@58@08))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
      1)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 28 | First:(Second:(Second:(Second:($t@58@08))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    1)
  (- 0 1)))
; [eval] diz.Prc_half_adder_1_m.Main_event_state[2] != -2
; [eval] diz.Prc_half_adder_1_m.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3814
;  :arith-add-rows          25
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      186
;  :arith-conflicts         52
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         61
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 975
;  :datatype-occurs-check   365
;  :datatype-splits         822
;  :decisions               917
;  :del-clause              282
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             1977
;  :mk-clause               334
;  :num-allocs              5140595
;  :num-checks              265
;  :propagations            226
;  :quant-instantiations    96
;  :rlimit-count            187790)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
        2)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3940
;  :arith-add-rows          25
;  :arith-assert-diseq      74
;  :arith-assert-lower      241
;  :arith-assert-upper      186
;  :arith-conflicts         52
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         61
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 1019
;  :datatype-occurs-check   374
;  :datatype-splits         863
;  :decisions               958
;  :del-clause              282
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2019
;  :mk-clause               334
;  :num-allocs              5140595
;  :num-checks              266
;  :propagations            229
;  :quant-instantiations    96
;  :rlimit-count            189012
;  :time                    0.00)
(push) ; 5
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
          2)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4068
;  :arith-add-rows          25
;  :arith-assert-diseq      76
;  :arith-assert-lower      248
;  :arith-assert-upper      189
;  :arith-conflicts         52
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    238
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              293
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2075
;  :mk-clause               345
;  :num-allocs              5140595
;  :num-checks              267
;  :propagations            237
;  :quant-instantiations    98
;  :rlimit-count            190379
;  :time                    0.00)
; [then-branch: 29 | !(First:(Second:(Second:(Second:($t@58@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@08))))))[2] != -2) | live]
; [else-branch: 29 | First:(Second:(Second:(Second:($t@58@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@08))))))[2] != -2 | live]
(push) ; 5
; [then-branch: 29 | !(First:(Second:(Second:(Second:($t@58@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@08))))))[2] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
          2)
        (- 0 2))))))
(declare-const __flatten_8__15@96@08 $Ref)
(declare-const __flatten_7__14@97@08 $Ref)
(declare-const __flatten_10__17@98@08 $Ref)
(declare-const __flatten_12__19@99@08 $Ref)
(declare-const __flatten_11__18@100@08 $Ref)
(declare-const __flatten_14__21@101@08 $Ref)
(declare-const __flatten_13__20@102@08 $Ref)
(declare-const __flatten_9__16@103@08 Bool)
(declare-const __flatten_17__23@104@08 $Ref)
(declare-const __flatten_16__22@105@08 $Ref)
(declare-const __flatten_20__26@106@08 $Ref)
(declare-const __flatten_19__25@107@08 $Ref)
(declare-const __flatten_22__28@108@08 $Ref)
(declare-const __flatten_21__27@109@08 $Ref)
(declare-const __flatten_18__24@110@08 Bool)
(declare-const __flatten_23__29@111@08 $Ref)
(declare-const __flatten_25__31@112@08 $Ref)
(declare-const __flatten_24__30@113@08 Seq<Int>)
(declare-const __flatten_26__32@114@08 $Ref)
(declare-const __flatten_28__34@115@08 $Ref)
(declare-const __flatten_27__33@116@08 Seq<Int>)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@117@08 $Snap)
(assert (= $t@117@08 ($Snap.combine ($Snap.first $t@117@08) ($Snap.second $t@117@08))))
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4075
;  :arith-add-rows          25
;  :arith-assert-diseq      76
;  :arith-assert-lower      248
;  :arith-assert-upper      189
;  :arith-conflicts         52
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    239
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              293
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2078
;  :mk-clause               345
;  :num-allocs              5140595
;  :num-checks              268
;  :propagations            237
;  :quant-instantiations    98
;  :rlimit-count            190696)
(assert (=
  ($Snap.second $t@117@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@117@08))
    ($Snap.second ($Snap.second $t@117@08)))))
(assert (= ($Snap.first ($Snap.second $t@117@08)) $Snap.unit))
; [eval] diz.Prc_half_adder_1_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@117@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@117@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@117@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
  $Snap.unit))
; [eval] |diz.Prc_half_adder_1_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
  $Snap.unit))
; [eval] |diz.Prc_half_adder_1_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))
  $Snap.unit))
; [eval] (forall i__35: Int :: { diz.Prc_half_adder_1_m.Main_process_state[i__35] } 0 <= i__35 && i__35 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__35] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35] && diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|)
(declare-const i__35@118@08 Int)
(push) ; 7
; [eval] 0 <= i__35 && i__35 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__35] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35] && diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= i__35 && i__35 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] 0 <= i__35
(push) ; 8
; [then-branch: 30 | 0 <= i__35@118@08 | live]
; [else-branch: 30 | !(0 <= i__35@118@08) | live]
(push) ; 9
; [then-branch: 30 | 0 <= i__35@118@08]
(assert (<= 0 i__35@118@08))
; [eval] i__35 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 30 | !(0 <= i__35@118@08)]
(assert (not (<= 0 i__35@118@08)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 31 | i__35@118@08 < |First:(Second:(Second:(Second:($t@117@08))))| && 0 <= i__35@118@08 | live]
; [else-branch: 31 | !(i__35@118@08 < |First:(Second:(Second:(Second:($t@117@08))))| && 0 <= i__35@118@08) | live]
(push) ; 9
; [then-branch: 31 | i__35@118@08 < |First:(Second:(Second:(Second:($t@117@08))))| && 0 <= i__35@118@08]
(assert (and
  (<
    i__35@118@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
  (<= 0 i__35@118@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35] && diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35] == -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35]
(push) ; 10
(assert (not (>= i__35@118@08 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4119
;  :arith-add-rows          25
;  :arith-assert-diseq      76
;  :arith-assert-lower      253
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    246
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              293
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2103
;  :mk-clause               345
;  :num-allocs              5140595
;  :num-checks              269
;  :propagations            237
;  :quant-instantiations    103
;  :rlimit-count            191975)
; [eval] -1
(push) ; 10
; [then-branch: 32 | First:(Second:(Second:(Second:($t@117@08))))[i__35@118@08] == -1 | live]
; [else-branch: 32 | First:(Second:(Second:(Second:($t@117@08))))[i__35@118@08] != -1 | live]
(push) ; 11
; [then-branch: 32 | First:(Second:(Second:(Second:($t@117@08))))[i__35@118@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
    i__35@118@08)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 32 | First:(Second:(Second:(Second:($t@117@08))))[i__35@118@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
      i__35@118@08)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35] && diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35]
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35]
(push) ; 12
(assert (not (>= i__35@118@08 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4119
;  :arith-add-rows          25
;  :arith-assert-diseq      76
;  :arith-assert-lower      253
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    246
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              293
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2104
;  :mk-clause               345
;  :num-allocs              5140595
;  :num-checks              270
;  :propagations            237
;  :quant-instantiations    103
;  :rlimit-count            192150)
(push) ; 12
; [then-branch: 33 | 0 <= First:(Second:(Second:(Second:($t@117@08))))[i__35@118@08] | live]
; [else-branch: 33 | !(0 <= First:(Second:(Second:(Second:($t@117@08))))[i__35@118@08]) | live]
(push) ; 13
; [then-branch: 33 | 0 <= First:(Second:(Second:(Second:($t@117@08))))[i__35@118@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
    i__35@118@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35]
(push) ; 14
(assert (not (>= i__35@118@08 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4119
;  :arith-add-rows          25
;  :arith-assert-diseq      77
;  :arith-assert-lower      256
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    246
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              293
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2107
;  :mk-clause               346
;  :num-allocs              5140595
;  :num-checks              271
;  :propagations            237
;  :quant-instantiations    103
;  :rlimit-count            192273)
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 33 | !(0 <= First:(Second:(Second:(Second:($t@117@08))))[i__35@118@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
      i__35@118@08))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 31 | !(i__35@118@08 < |First:(Second:(Second:(Second:($t@117@08))))| && 0 <= i__35@118@08)]
(assert (not
  (and
    (<
      i__35@118@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
    (<= 0 i__35@118@08))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__35@118@08 Int)) (!
  (implies
    (and
      (<
        i__35@118@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
      (<= 0 i__35@118@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
          i__35@118@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
            i__35@118@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
            i__35@118@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
    i__35@118@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))
(declare-const $k@119@08 $Perm)
(assert ($Perm.isReadVar $k@119@08 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@119@08 $Perm.No) (< $Perm.No $k@119@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4124
;  :arith-add-rows          25
;  :arith-assert-diseq      78
;  :arith-assert-lower      258
;  :arith-assert-upper      193
;  :arith-conflicts         52
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               181
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2113
;  :mk-clause               348
;  :num-allocs              5140595
;  :num-checks              272
;  :propagations            238
;  :quant-instantiations    103
;  :rlimit-count            193041)
(assert (<= $Perm.No $k@119@08))
(assert (<= $k@119@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@119@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4130
;  :arith-add-rows          25
;  :arith-assert-diseq      78
;  :arith-assert-lower      258
;  :arith-assert-upper      194
;  :arith-conflicts         52
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    248
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2116
;  :mk-clause               348
;  :num-allocs              5140595
;  :num-checks              273
;  :propagations            238
;  :quant-instantiations    103
;  :rlimit-count            193364)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4136
;  :arith-add-rows          25
;  :arith-assert-diseq      78
;  :arith-assert-lower      258
;  :arith-assert-upper      194
;  :arith-conflicts         52
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2119
;  :mk-clause               348
;  :num-allocs              5140595
;  :num-checks              274
;  :propagations            238
;  :quant-instantiations    104
;  :rlimit-count            193720)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4141
;  :arith-add-rows          25
;  :arith-assert-diseq      78
;  :arith-assert-lower      258
;  :arith-assert-upper      194
;  :arith-conflicts         52
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               184
;  :datatype-accessor-ax    250
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2120
;  :mk-clause               348
;  :num-allocs              5140595
;  :num-checks              275
;  :propagations            238
;  :quant-instantiations    104
;  :rlimit-count            193977)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4146
;  :arith-add-rows          25
;  :arith-assert-diseq      78
;  :arith-assert-lower      258
;  :arith-assert-upper      194
;  :arith-conflicts         52
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    251
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2121
;  :mk-clause               348
;  :num-allocs              5140595
;  :num-checks              276
;  :propagations            238
;  :quant-instantiations    104
;  :rlimit-count            194244)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4151
;  :arith-add-rows          25
;  :arith-assert-diseq      78
;  :arith-assert-lower      258
;  :arith-assert-upper      194
;  :arith-conflicts         52
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               186
;  :datatype-accessor-ax    252
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2122
;  :mk-clause               348
;  :num-allocs              5140595
;  :num-checks              277
;  :propagations            238
;  :quant-instantiations    104
;  :rlimit-count            194521)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4156
;  :arith-add-rows          25
;  :arith-assert-diseq      78
;  :arith-assert-lower      258
;  :arith-assert-upper      194
;  :arith-conflicts         52
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               187
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2123
;  :mk-clause               348
;  :num-allocs              5140595
;  :num-checks              278
;  :propagations            238
;  :quant-instantiations    104
;  :rlimit-count            194808)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4161
;  :arith-add-rows          25
;  :arith-assert-diseq      78
;  :arith-assert-lower      258
;  :arith-assert-upper      194
;  :arith-conflicts         52
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    254
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2124
;  :mk-clause               348
;  :num-allocs              5140595
;  :num-checks              279
;  :propagations            238
;  :quant-instantiations    104
;  :rlimit-count            195105)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4166
;  :arith-add-rows          25
;  :arith-assert-diseq      78
;  :arith-assert-lower      258
;  :arith-assert-upper      194
;  :arith-conflicts         52
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               189
;  :datatype-accessor-ax    255
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2125
;  :mk-clause               348
;  :num-allocs              5140595
;  :num-checks              280
;  :propagations            238
;  :quant-instantiations    104
;  :rlimit-count            195412)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4171
;  :arith-add-rows          25
;  :arith-assert-diseq      78
;  :arith-assert-lower      258
;  :arith-assert-upper      194
;  :arith-conflicts         52
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               190
;  :datatype-accessor-ax    256
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2126
;  :mk-clause               348
;  :num-allocs              5140595
;  :num-checks              281
;  :propagations            238
;  :quant-instantiations    104
;  :rlimit-count            195729)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4176
;  :arith-add-rows          25
;  :arith-assert-diseq      78
;  :arith-assert-lower      258
;  :arith-assert-upper      194
;  :arith-conflicts         52
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2127
;  :mk-clause               348
;  :num-allocs              5140595
;  :num-checks              282
;  :propagations            238
;  :quant-instantiations    104
;  :rlimit-count            196056)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4181
;  :arith-add-rows          25
;  :arith-assert-diseq      78
;  :arith-assert-lower      258
;  :arith-assert-upper      194
;  :arith-conflicts         52
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               192
;  :datatype-accessor-ax    258
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2128
;  :mk-clause               348
;  :num-allocs              5140595
;  :num-checks              283
;  :propagations            238
;  :quant-instantiations    104
;  :rlimit-count            196393)
(declare-const $k@120@08 $Perm)
(assert ($Perm.isReadVar $k@120@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@120@08 $Perm.No) (< $Perm.No $k@120@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4181
;  :arith-add-rows          25
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      195
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    258
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2132
;  :mk-clause               350
;  :num-allocs              5140595
;  :num-checks              284
;  :propagations            239
;  :quant-instantiations    104
;  :rlimit-count            196592)
(assert (<= $Perm.No $k@120@08))
(assert (<= $k@120@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@120@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder.Full_adder_m == diz.Prc_half_adder_1_m
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4187
;  :arith-add-rows          25
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      196
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               194
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2135
;  :mk-clause               350
;  :num-allocs              5140595
;  :num-checks              285
;  :propagations            239
;  :quant-instantiations    104
;  :rlimit-count            197025)
(push) ; 7
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4187
;  :arith-add-rows          25
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      196
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2135
;  :mk-clause               350
;  :num-allocs              5140595
;  :num-checks              286
;  :propagations            239
;  :quant-instantiations    104
;  :rlimit-count            197073)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))
(declare-const $k@121@08 $Perm)
(assert ($Perm.isReadVar $k@121@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@121@08 $Perm.No) (< $Perm.No $k@121@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4195
;  :arith-add-rows          25
;  :arith-assert-diseq      80
;  :arith-assert-lower      262
;  :arith-assert-upper      197
;  :arith-conflicts         52
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               196
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2142
;  :mk-clause               352
;  :num-allocs              5140595
;  :num-checks              287
;  :propagations            240
;  :quant-instantiations    105
;  :rlimit-count            197704)
(assert (<= $Perm.No $k@121@08))
(assert (<= $k@121@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@121@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@121@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4201
;  :arith-add-rows          25
;  :arith-assert-diseq      80
;  :arith-assert-lower      262
;  :arith-assert-upper      198
;  :arith-conflicts         52
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               197
;  :datatype-accessor-ax    261
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2145
;  :mk-clause               352
;  :num-allocs              5140595
;  :num-checks              288
;  :propagations            240
;  :quant-instantiations    105
;  :rlimit-count            198157)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@121@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4207
;  :arith-add-rows          25
;  :arith-assert-diseq      80
;  :arith-assert-lower      262
;  :arith-assert-upper      198
;  :arith-conflicts         52
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               198
;  :datatype-accessor-ax    262
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2148
;  :mk-clause               352
;  :num-allocs              5140595
;  :num-checks              289
;  :propagations            240
;  :quant-instantiations    106
;  :rlimit-count            198641)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4207
;  :arith-add-rows          25
;  :arith-assert-diseq      80
;  :arith-assert-lower      262
;  :arith-assert-upper      198
;  :arith-conflicts         52
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               198
;  :datatype-accessor-ax    262
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2148
;  :mk-clause               352
;  :num-allocs              5140595
;  :num-checks              290
;  :propagations            240
;  :quant-instantiations    106
;  :rlimit-count            198654)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))
(declare-const $k@122@08 $Perm)
(assert ($Perm.isReadVar $k@122@08 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@122@08 $Perm.No) (< $Perm.No $k@122@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4212
;  :arith-add-rows          25
;  :arith-assert-diseq      81
;  :arith-assert-lower      264
;  :arith-assert-upper      199
;  :arith-conflicts         52
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2153
;  :mk-clause               354
;  :num-allocs              5140595
;  :num-checks              291
;  :propagations            241
;  :quant-instantiations    106
;  :rlimit-count            199185)
(assert (<= $Perm.No $k@122@08))
(assert (<= $k@122@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@122@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@122@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4218
;  :arith-add-rows          25
;  :arith-assert-diseq      81
;  :arith-assert-lower      264
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               200
;  :datatype-accessor-ax    264
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2156
;  :mk-clause               354
;  :num-allocs              5140595
;  :num-checks              292
;  :propagations            241
;  :quant-instantiations    106
;  :rlimit-count            199668)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@122@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4224
;  :arith-add-rows          25
;  :arith-assert-diseq      81
;  :arith-assert-lower      264
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               201
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2159
;  :mk-clause               354
;  :num-allocs              5140595
;  :num-checks              293
;  :propagations            241
;  :quant-instantiations    107
;  :rlimit-count            200184)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4224
;  :arith-add-rows          25
;  :arith-assert-diseq      81
;  :arith-assert-lower      264
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               201
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2159
;  :mk-clause               354
;  :num-allocs              5140595
;  :num-checks              294
;  :propagations            241
;  :quant-instantiations    107
;  :rlimit-count            200197)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))
(declare-const $k@123@08 $Perm)
(assert ($Perm.isReadVar $k@123@08 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@123@08 $Perm.No) (< $Perm.No $k@123@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4229
;  :arith-add-rows          25
;  :arith-assert-diseq      82
;  :arith-assert-lower      266
;  :arith-assert-upper      201
;  :arith-conflicts         52
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2164
;  :mk-clause               356
;  :num-allocs              5140595
;  :num-checks              295
;  :propagations            242
;  :quant-instantiations    107
;  :rlimit-count            200758)
(assert (<= $Perm.No $k@123@08))
(assert (<= $k@123@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@123@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@123@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4235
;  :arith-add-rows          25
;  :arith-assert-diseq      82
;  :arith-assert-lower      266
;  :arith-assert-upper      202
;  :arith-conflicts         52
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    267
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2167
;  :mk-clause               356
;  :num-allocs              5140595
;  :num-checks              296
;  :propagations            242
;  :quant-instantiations    107
;  :rlimit-count            201271)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@123@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4241
;  :arith-add-rows          25
;  :arith-assert-diseq      82
;  :arith-assert-lower      266
;  :arith-assert-upper      202
;  :arith-conflicts         52
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2170
;  :mk-clause               356
;  :num-allocs              5140595
;  :num-checks              297
;  :propagations            242
;  :quant-instantiations    108
;  :rlimit-count            201817)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4241
;  :arith-add-rows          25
;  :arith-assert-diseq      82
;  :arith-assert-lower      266
;  :arith-assert-upper      202
;  :arith-conflicts         52
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2170
;  :mk-clause               356
;  :num-allocs              5140595
;  :num-checks              298
;  :propagations            242
;  :quant-instantiations    108
;  :rlimit-count            201830)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@122@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4247
;  :arith-add-rows          25
;  :arith-assert-diseq      82
;  :arith-assert-lower      266
;  :arith-assert-upper      202
;  :arith-conflicts         52
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    269
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2172
;  :mk-clause               356
;  :num-allocs              5140595
;  :num-checks              299
;  :propagations            242
;  :quant-instantiations    108
;  :rlimit-count            202309)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
  diz@10@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4255
;  :arith-add-rows          25
;  :arith-assert-diseq      82
;  :arith-assert-lower      266
;  :arith-assert-upper      202
;  :arith-conflicts         52
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              294
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2174
;  :mk-clause               356
;  :num-allocs              5140595
;  :num-checks              300
;  :propagations            242
;  :quant-instantiations    108
;  :rlimit-count            202783)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
(pop) ; 7
(push) ; 7
; [eval] !true
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      82
;  :arith-assert-lower      266
;  :arith-assert-upper      202
;  :arith-conflicts         52
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              304
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2179
;  :mk-clause               356
;  :num-allocs              5140595
;  :num-checks              301
;  :propagations            242
;  :quant-instantiations    110
;  :rlimit-count            203340)
; [eval] diz.Prc_half_adder_1_m != null
; [eval] |diz.Prc_half_adder_1_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] |diz.Prc_half_adder_1_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] (forall i__35: Int :: { diz.Prc_half_adder_1_m.Main_process_state[i__35] } 0 <= i__35 && i__35 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__35] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35] && diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|)
(declare-const i__35@124@08 Int)
(push) ; 7
; [eval] 0 <= i__35 && i__35 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__35] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35] && diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= i__35 && i__35 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] 0 <= i__35
(push) ; 8
; [then-branch: 34 | 0 <= i__35@124@08 | live]
; [else-branch: 34 | !(0 <= i__35@124@08) | live]
(push) ; 9
; [then-branch: 34 | 0 <= i__35@124@08]
(assert (<= 0 i__35@124@08))
; [eval] i__35 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 34 | !(0 <= i__35@124@08)]
(assert (not (<= 0 i__35@124@08)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 35 | i__35@124@08 < |First:(Second:(Second:(Second:($t@58@08))))| && 0 <= i__35@124@08 | live]
; [else-branch: 35 | !(i__35@124@08 < |First:(Second:(Second:(Second:($t@58@08))))| && 0 <= i__35@124@08) | live]
(push) ; 9
; [then-branch: 35 | i__35@124@08 < |First:(Second:(Second:(Second:($t@58@08))))| && 0 <= i__35@124@08]
(assert (and
  (<
    i__35@124@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
  (<= 0 i__35@124@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35] && diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35] == -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35]
(push) ; 10
(assert (not (>= i__35@124@08 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      203
;  :arith-conflicts         52
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              304
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2181
;  :mk-clause               356
;  :num-allocs              5140595
;  :num-checks              302
;  :propagations            242
;  :quant-instantiations    110
;  :rlimit-count            203476)
; [eval] -1
(push) ; 10
; [then-branch: 36 | First:(Second:(Second:(Second:($t@58@08))))[i__35@124@08] == -1 | live]
; [else-branch: 36 | First:(Second:(Second:(Second:($t@58@08))))[i__35@124@08] != -1 | live]
(push) ; 11
; [then-branch: 36 | First:(Second:(Second:(Second:($t@58@08))))[i__35@124@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    i__35@124@08)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 36 | First:(Second:(Second:(Second:($t@58@08))))[i__35@124@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
      i__35@124@08)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35] && diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35]
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35]
(push) ; 12
(assert (not (>= i__35@124@08 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      83
;  :arith-assert-lower      270
;  :arith-assert-upper      204
;  :arith-conflicts         52
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              304
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2187
;  :mk-clause               360
;  :num-allocs              5140595
;  :num-checks              303
;  :propagations            244
;  :quant-instantiations    111
;  :rlimit-count            203708)
(push) ; 12
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@58@08))))[i__35@124@08] | live]
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@58@08))))[i__35@124@08]) | live]
(push) ; 13
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@58@08))))[i__35@124@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    i__35@124@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35]
(push) ; 14
(assert (not (>= i__35@124@08 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      83
;  :arith-assert-lower      270
;  :arith-assert-upper      204
;  :arith-conflicts         52
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              304
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2187
;  :mk-clause               360
;  :num-allocs              5140595
;  :num-checks              304
;  :propagations            244
;  :quant-instantiations    111
;  :rlimit-count            203822)
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@58@08))))[i__35@124@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
      i__35@124@08))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 35 | !(i__35@124@08 < |First:(Second:(Second:(Second:($t@58@08))))| && 0 <= i__35@124@08)]
(assert (not
  (and
    (<
      i__35@124@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
    (<= 0 i__35@124@08))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((i__35@124@08 Int)) (!
  (implies
    (and
      (<
        i__35@124@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
      (<= 0 i__35@124@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
          i__35@124@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
            i__35@124@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
            i__35@124@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    i__35@124@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      85
;  :arith-assert-lower      271
;  :arith-assert-upper      205
;  :arith-conflicts         52
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               206
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2195
;  :mk-clause               374
;  :num-allocs              5140595
;  :num-checks              305
;  :propagations            246
;  :quant-instantiations    112
;  :rlimit-count            204268)
(assert (forall ((i__35@124@08 Int)) (!
  (implies
    (and
      (<
        i__35@124@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
      (<= 0 i__35@124@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
          i__35@124@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
            i__35@124@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
            i__35@124@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
    i__35@124@08))
  :qid |prog.l<no position>|)))
(declare-const $k@125@08 $Perm)
(assert ($Perm.isReadVar $k@125@08 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@125@08 $Perm.No) (< $Perm.No $k@125@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      86
;  :arith-assert-lower      273
;  :arith-assert-upper      206
;  :arith-conflicts         52
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2200
;  :mk-clause               376
;  :num-allocs              5140595
;  :num-checks              306
;  :propagations            247
;  :quant-instantiations    112
;  :rlimit-count            204829)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@60@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      86
;  :arith-assert-lower      273
;  :arith-assert-upper      206
;  :arith-conflicts         52
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2200
;  :mk-clause               376
;  :num-allocs              5140595
;  :num-checks              307
;  :propagations            247
;  :quant-instantiations    112
;  :rlimit-count            204840)
(assert (< $k@125@08 $k@60@08))
(assert (<= $Perm.No (- $k@60@08 $k@125@08)))
(assert (<= (- $k@60@08 $k@125@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@60@08 $k@125@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder != null
(push) ; 7
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      207
;  :arith-conflicts         52
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               208
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2203
;  :mk-clause               376
;  :num-allocs              5140595
;  :num-checks              308
;  :propagations            247
;  :quant-instantiations    112
;  :rlimit-count            205054)
(push) ; 7
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      207
;  :arith-conflicts         52
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2203
;  :mk-clause               376
;  :num-allocs              5140595
;  :num-checks              309
;  :propagations            247
;  :quant-instantiations    112
;  :rlimit-count            205102)
(push) ; 7
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      207
;  :arith-conflicts         52
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2203
;  :mk-clause               376
;  :num-allocs              5140595
;  :num-checks              310
;  :propagations            247
;  :quant-instantiations    112
;  :rlimit-count            205150)
(push) ; 7
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      207
;  :arith-conflicts         52
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               211
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2203
;  :mk-clause               376
;  :num-allocs              5140595
;  :num-checks              311
;  :propagations            247
;  :quant-instantiations    112
;  :rlimit-count            205198)
(push) ; 7
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      207
;  :arith-conflicts         52
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2203
;  :mk-clause               376
;  :num-allocs              5140595
;  :num-checks              312
;  :propagations            247
;  :quant-instantiations    112
;  :rlimit-count            205246)
(push) ; 7
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      207
;  :arith-conflicts         52
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               213
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2203
;  :mk-clause               376
;  :num-allocs              5140595
;  :num-checks              313
;  :propagations            247
;  :quant-instantiations    112
;  :rlimit-count            205294)
(push) ; 7
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      207
;  :arith-conflicts         52
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               214
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2203
;  :mk-clause               376
;  :num-allocs              5140595
;  :num-checks              314
;  :propagations            247
;  :quant-instantiations    112
;  :rlimit-count            205342)
(push) ; 7
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      207
;  :arith-conflicts         52
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2203
;  :mk-clause               376
;  :num-allocs              5140595
;  :num-checks              315
;  :propagations            247
;  :quant-instantiations    112
;  :rlimit-count            205390)
(push) ; 7
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      207
;  :arith-conflicts         52
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               216
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2203
;  :mk-clause               376
;  :num-allocs              5140595
;  :num-checks              316
;  :propagations            247
;  :quant-instantiations    112
;  :rlimit-count            205438)
(push) ; 7
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      207
;  :arith-conflicts         52
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               217
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2203
;  :mk-clause               376
;  :num-allocs              5140595
;  :num-checks              317
;  :propagations            247
;  :quant-instantiations    112
;  :rlimit-count            205486)
(declare-const $k@126@08 $Perm)
(assert ($Perm.isReadVar $k@126@08 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      87
;  :arith-assert-lower      277
;  :arith-assert-upper      208
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2207
;  :mk-clause               378
;  :num-allocs              5140595
;  :num-checks              318
;  :propagations            248
;  :quant-instantiations    112
;  :rlimit-count            205683)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@126@08 $Perm.No) (< $Perm.No $k@126@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      87
;  :arith-assert-lower      277
;  :arith-assert-upper      208
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2207
;  :mk-clause               378
;  :num-allocs              5140595
;  :num-checks              319
;  :propagations            248
;  :quant-instantiations    112
;  :rlimit-count            205733)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@61@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      87
;  :arith-assert-lower      277
;  :arith-assert-upper      208
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2207
;  :mk-clause               378
;  :num-allocs              5140595
;  :num-checks              320
;  :propagations            248
;  :quant-instantiations    112
;  :rlimit-count            205744)
(assert (< $k@126@08 $k@61@08))
(assert (<= $Perm.No (- $k@61@08 $k@126@08)))
(assert (<= (- $k@61@08 $k@126@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@61@08 $k@126@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
      $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder.Full_adder_m == diz.Prc_half_adder_1_m
(push) ; 7
(assert (not (< $Perm.No $k@60@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      209
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               220
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2210
;  :mk-clause               378
;  :num-allocs              5140595
;  :num-checks              321
;  :propagations            248
;  :quant-instantiations    112
;  :rlimit-count            205952)
(push) ; 7
(assert (not (< $Perm.No $k@61@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      209
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               221
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2210
;  :mk-clause               378
;  :num-allocs              5140595
;  :num-checks              322
;  :propagations            248
;  :quant-instantiations    112
;  :rlimit-count            206000)
(declare-const $k@127@08 $Perm)
(assert ($Perm.isReadVar $k@127@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@127@08 $Perm.No) (< $Perm.No $k@127@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      88
;  :arith-assert-lower      281
;  :arith-assert-upper      210
;  :arith-conflicts         52
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               222
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2214
;  :mk-clause               380
;  :num-allocs              5140595
;  :num-checks              323
;  :propagations            249
;  :quant-instantiations    112
;  :rlimit-count            206198)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@62@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      88
;  :arith-assert-lower      281
;  :arith-assert-upper      210
;  :arith-conflicts         52
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               222
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2214
;  :mk-clause               380
;  :num-allocs              5140595
;  :num-checks              324
;  :propagations            249
;  :quant-instantiations    112
;  :rlimit-count            206209)
(assert (< $k@127@08 $k@62@08))
(assert (<= $Perm.No (- $k@62@08 $k@127@08)))
(assert (<= (- $k@62@08 $k@127@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@62@08 $k@127@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_prc != null
(push) ; 7
(assert (not (< $Perm.No $k@62@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      88
;  :arith-assert-lower      283
;  :arith-assert-upper      211
;  :arith-conflicts         52
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2217
;  :mk-clause               380
;  :num-allocs              5140595
;  :num-checks              325
;  :propagations            249
;  :quant-instantiations    112
;  :rlimit-count            206423)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      88
;  :arith-assert-lower      283
;  :arith-assert-upper      211
;  :arith-conflicts         52
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2217
;  :mk-clause               380
;  :num-allocs              5140595
;  :num-checks              326
;  :propagations            249
;  :quant-instantiations    112
;  :rlimit-count            206436)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@62@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      88
;  :arith-assert-lower      283
;  :arith-assert-upper      211
;  :arith-conflicts         52
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               224
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2217
;  :mk-clause               380
;  :num-allocs              5140595
;  :num-checks              327
;  :propagations            249
;  :quant-instantiations    112
;  :rlimit-count            206484)
(declare-const $k@128@08 $Perm)
(assert ($Perm.isReadVar $k@128@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@128@08 $Perm.No) (< $Perm.No $k@128@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      89
;  :arith-assert-lower      285
;  :arith-assert-upper      212
;  :arith-conflicts         52
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2221
;  :mk-clause               382
;  :num-allocs              5140595
;  :num-checks              328
;  :propagations            250
;  :quant-instantiations    112
;  :rlimit-count            206683)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@63@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      89
;  :arith-assert-lower      285
;  :arith-assert-upper      212
;  :arith-conflicts         52
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2221
;  :mk-clause               382
;  :num-allocs              5140595
;  :num-checks              329
;  :propagations            250
;  :quant-instantiations    112
;  :rlimit-count            206694)
(assert (< $k@128@08 $k@63@08))
(assert (<= $Perm.No (- $k@63@08 $k@128@08)))
(assert (<= (- $k@63@08 $k@128@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@63@08 $k@128@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 != null
(push) ; 7
(assert (not (< $Perm.No $k@63@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      89
;  :arith-assert-lower      287
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2224
;  :mk-clause               382
;  :num-allocs              5140595
;  :num-checks              330
;  :propagations            250
;  :quant-instantiations    112
;  :rlimit-count            206902)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      89
;  :arith-assert-lower      287
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2224
;  :mk-clause               382
;  :num-allocs              5140595
;  :num-checks              331
;  :propagations            250
;  :quant-instantiations    112
;  :rlimit-count            206915)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@63@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          25
;  :arith-assert-diseq      89
;  :arith-assert-lower      287
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               227
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1063
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               1000
;  :del-clause              322
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2224
;  :mk-clause               382
;  :num-allocs              5140595
;  :num-checks              332
;  :propagations            250
;  :quant-instantiations    112
;  :rlimit-count            206963)
(push) ; 7
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4388
;  :arith-add-rows          25
;  :arith-assert-diseq      89
;  :arith-assert-lower      287
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               227
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1107
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1041
;  :del-clause              322
;  :final-checks            72
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2264
;  :mk-clause               382
;  :num-allocs              5140595
;  :num-checks              333
;  :propagations            253
;  :quant-instantiations    112
;  :rlimit-count            208020
;  :time                    0.00)
(declare-const $k@129@08 $Perm)
(assert ($Perm.isReadVar $k@129@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@129@08 $Perm.No) (< $Perm.No $k@129@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4388
;  :arith-add-rows          25
;  :arith-assert-diseq      90
;  :arith-assert-lower      289
;  :arith-assert-upper      214
;  :arith-conflicts         52
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1107
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1041
;  :del-clause              322
;  :final-checks            72
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2268
;  :mk-clause               384
;  :num-allocs              5140595
;  :num-checks              334
;  :propagations            254
;  :quant-instantiations    112
;  :rlimit-count            208218)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@64@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4388
;  :arith-add-rows          25
;  :arith-assert-diseq      90
;  :arith-assert-lower      289
;  :arith-assert-upper      214
;  :arith-conflicts         52
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1107
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1041
;  :del-clause              322
;  :final-checks            72
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2268
;  :mk-clause               384
;  :num-allocs              5140595
;  :num-checks              335
;  :propagations            254
;  :quant-instantiations    112
;  :rlimit-count            208229)
(assert (< $k@129@08 $k@64@08))
(assert (<= $Perm.No (- $k@64@08 $k@129@08)))
(assert (<= (- $k@64@08 $k@129@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@64@08 $k@129@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder2 != null
(push) ; 7
(assert (not (< $Perm.No $k@64@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4388
;  :arith-add-rows          25
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      215
;  :arith-conflicts         52
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1107
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1041
;  :del-clause              322
;  :final-checks            72
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2271
;  :mk-clause               384
;  :num-allocs              5140595
;  :num-checks              336
;  :propagations            254
;  :quant-instantiations    112
;  :rlimit-count            208443)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4388
;  :arith-add-rows          25
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      215
;  :arith-conflicts         52
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1107
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1041
;  :del-clause              322
;  :final-checks            72
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2271
;  :mk-clause               384
;  :num-allocs              5140595
;  :num-checks              337
;  :propagations            254
;  :quant-instantiations    112
;  :rlimit-count            208456)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@64@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4388
;  :arith-add-rows          25
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      215
;  :arith-conflicts         52
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1107
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1041
;  :del-clause              322
;  :final-checks            72
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2271
;  :mk-clause               384
;  :num-allocs              5140595
;  :num-checks              338
;  :propagations            254
;  :quant-instantiations    112
;  :rlimit-count            208504)
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(push) ; 7
(assert (not (< $Perm.No $k@63@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4388
;  :arith-add-rows          25
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      215
;  :arith-conflicts         52
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1107
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1041
;  :del-clause              322
;  :final-checks            72
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2271
;  :mk-clause               384
;  :num-allocs              5140595
;  :num-checks              339
;  :propagations            254
;  :quant-instantiations    112
;  :rlimit-count            208552)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4388
;  :arith-add-rows          25
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      215
;  :arith-conflicts         52
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1107
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1041
;  :del-clause              322
;  :final-checks            72
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.75
;  :mk-bool-var             2271
;  :mk-clause               384
;  :num-allocs              5140595
;  :num-checks              340
;  :propagations            254
;  :quant-instantiations    112
;  :rlimit-count            208565)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@119@08 $Perm.Write))
(assert ($Perm.isReadVar $k@120@08 $Perm.Write))
(assert ($Perm.isReadVar $k@121@08 $Perm.Write))
(assert ($Perm.isReadVar $k@122@08 $Perm.Write))
(assert ($Perm.isReadVar $k@123@08 $Perm.Write))
(assert (= $t@117@08 ($Snap.combine ($Snap.first $t@117@08) ($Snap.second $t@117@08))))
(assert (=
  ($Snap.second $t@117@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@117@08))
    ($Snap.second ($Snap.second $t@117@08)))))
(assert (= ($Snap.first ($Snap.second $t@117@08)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@117@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@117@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@117@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))
  $Snap.unit))
(assert (forall ((i__35@118@08 Int)) (!
  (implies
    (and
      (<
        i__35@118@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
      (<= 0 i__35@118@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
          i__35@118@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
            i__35@118@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
            i__35@118@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
    i__35@118@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))
(assert (<= $Perm.No $k@119@08))
(assert (<= $k@119@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@119@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))
(assert (<= $Perm.No $k@120@08))
(assert (<= $k@120@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@120@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))
(assert (<= $Perm.No $k@121@08))
(assert (<= $k@121@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@121@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@122@08))
(assert (<= $k@122@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@122@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@123@08))
(assert (<= $k@123@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@123@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
  diz@10@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 8
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5297
;  :arith-add-rows          25
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      227
;  :arith-conflicts         52
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2548
;  :mk-clause               397
;  :num-allocs              5329394
;  :num-checks              343
;  :propagations            270
;  :quant-instantiations    124
;  :rlimit-count            218456
;  :time                    0.00)
; [then-branch: 38 | True | live]
; [else-branch: 38 | False | dead]
(push) ; 8
; [then-branch: 38 | True]
; [exec]
; __flatten_8__15 := diz.Prc_half_adder_1_m
(declare-const __flatten_8__15@130@08 $Ref)
(assert (= __flatten_8__15@130@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
; [exec]
; __flatten_7__14 := __flatten_8__15.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) __flatten_8__15@130@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5298
;  :arith-add-rows          25
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      227
;  :arith-conflicts         52
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2549
;  :mk-clause               397
;  :num-allocs              5329394
;  :num-checks              344
;  :propagations            270
;  :quant-instantiations    124
;  :rlimit-count            218529)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5298
;  :arith-add-rows          25
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      227
;  :arith-conflicts         52
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2549
;  :mk-clause               397
;  :num-allocs              5329394
;  :num-checks              345
;  :propagations            270
;  :quant-instantiations    124
;  :rlimit-count            218577)
(declare-const __flatten_7__14@131@08 $Ref)
(assert (=
  __flatten_7__14@131@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))
; [exec]
; __flatten_10__17 := diz.Prc_half_adder_1_m
(declare-const __flatten_10__17@132@08 $Ref)
(assert (= __flatten_10__17@132@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
; [exec]
; __flatten_12__19 := diz.Prc_half_adder_1_m
(declare-const __flatten_12__19@133@08 $Ref)
(assert (= __flatten_12__19@133@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
; [exec]
; __flatten_11__18 := __flatten_12__19.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) __flatten_12__19@133@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5301
;  :arith-add-rows          25
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      227
;  :arith-conflicts         52
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2552
;  :mk-clause               397
;  :num-allocs              5329394
;  :num-checks              346
;  :propagations            270
;  :quant-instantiations    124
;  :rlimit-count            218785)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5301
;  :arith-add-rows          25
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      227
;  :arith-conflicts         52
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2552
;  :mk-clause               397
;  :num-allocs              5329394
;  :num-checks              347
;  :propagations            270
;  :quant-instantiations    124
;  :rlimit-count            218833)
(declare-const __flatten_11__18@134@08 $Ref)
(assert (=
  __flatten_11__18@134@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))
; [exec]
; __flatten_14__21 := diz.Prc_half_adder_1_m
(declare-const __flatten_14__21@135@08 $Ref)
(assert (= __flatten_14__21@135@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
; [exec]
; __flatten_13__20 := __flatten_14__21.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) __flatten_14__21@135@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5303
;  :arith-add-rows          25
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      227
;  :arith-conflicts         52
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2554
;  :mk-clause               397
;  :num-allocs              5329394
;  :num-checks              348
;  :propagations            270
;  :quant-instantiations    124
;  :rlimit-count            218911)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5303
;  :arith-add-rows          25
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      227
;  :arith-conflicts         52
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2554
;  :mk-clause               397
;  :num-allocs              5329394
;  :num-checks              349
;  :propagations            270
;  :quant-instantiations    124
;  :rlimit-count            218959)
(declare-const __flatten_13__20@136@08 $Ref)
(assert (=
  __flatten_13__20@136@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))
; [exec]
; __flatten_9__16 := Full_adder_sum__EncodedGlobalVariables_Boolean_Boolean(__flatten_10__17.Main_adder, globals, __flatten_11__18.Full_adder_a, __flatten_13__20.Full_adder_b)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) __flatten_10__17@132@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      227
;  :arith-conflicts         52
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2555
;  :mk-clause               397
;  :num-allocs              5329394
;  :num-checks              350
;  :propagations            270
;  :quant-instantiations    124
;  :rlimit-count            219007)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      227
;  :arith-conflicts         52
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2555
;  :mk-clause               397
;  :num-allocs              5329394
;  :num-checks              351
;  :propagations            270
;  :quant-instantiations    124
;  :rlimit-count            219055)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
  __flatten_11__18@134@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      227
;  :arith-conflicts         52
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2555
;  :mk-clause               397
;  :num-allocs              5329394
;  :num-checks              352
;  :propagations            270
;  :quant-instantiations    124
;  :rlimit-count            219066)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
  __flatten_13__20@136@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      227
;  :arith-conflicts         52
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2555
;  :mk-clause               397
;  :num-allocs              5329394
;  :num-checks              353
;  :propagations            270
;  :quant-instantiations    124
;  :rlimit-count            219077)
; [eval] diz != null
(declare-const $k@137@08 $Perm)
(assert ($Perm.isReadVar $k@137@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@137@08 $Perm.No) (< $Perm.No $k@137@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      307
;  :arith-assert-upper      228
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2559
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              354
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219276)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@120@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      307
;  :arith-assert-upper      228
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2559
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              355
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219287)
(assert (< $k@137@08 $k@120@08))
(assert (<= $Perm.No (- $k@120@08 $k@137@08)))
(assert (<= (- $k@120@08 $k@137@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@120@08 $k@137@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
      $Ref.null))))
; [eval] diz.Full_adder_m != null
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2562
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              356
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219501)
(set-option :timeout 0)
(push) ; 9
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2562
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              357
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219519)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))
    $Ref.null)))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               239
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2562
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              358
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219587)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               239
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2562
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              359
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219606)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2562
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              360
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219654)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2562
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              361
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219673)
; [eval] |diz.Full_adder_m.Main_process_state| == 3
; [eval] |diz.Full_adder_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2562
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              362
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219721)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2562
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              363
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219740)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2562
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              364
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219788)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2562
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              365
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219807)
; [eval] |diz.Full_adder_m.Main_event_state| == 6
; [eval] |diz.Full_adder_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2562
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              366
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219855)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2562
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              367
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219874)
; [eval] (forall i: Int :: { diz.Full_adder_m.Main_process_state[i] } 0 <= i && i < |diz.Full_adder_m.Main_process_state| ==> diz.Full_adder_m.Main_process_state[i] == -1 || 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|)
(declare-const i@138@08 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Full_adder_m.Main_process_state| ==> diz.Full_adder_m.Main_process_state[i] == -1 || 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Full_adder_m.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 39 | 0 <= i@138@08 | live]
; [else-branch: 39 | !(0 <= i@138@08) | live]
(push) ; 11
; [then-branch: 39 | 0 <= i@138@08]
(assert (<= 0 i@138@08))
; [eval] i < |diz.Full_adder_m.Main_process_state|
; [eval] |diz.Full_adder_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      309
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2563
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              368
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219974)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      309
;  :arith-assert-upper      230
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2563
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              369
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            219993)
(pop) ; 11
(push) ; 11
; [else-branch: 39 | !(0 <= i@138@08)]
(assert (not (<= 0 i@138@08)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 40 | i@138@08 < |First:(Second:(Second:(Second:($t@117@08))))| && 0 <= i@138@08 | live]
; [else-branch: 40 | !(i@138@08 < |First:(Second:(Second:(Second:($t@117@08))))| && 0 <= i@138@08) | live]
(push) ; 11
; [then-branch: 40 | i@138@08 < |First:(Second:(Second:(Second:($t@117@08))))| && 0 <= i@138@08]
(assert (and
  (<
    i@138@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
  (<= 0 i@138@08)))
; [eval] diz.Full_adder_m.Main_process_state[i] == -1 || 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] diz.Full_adder_m.Main_process_state[i] == -1
; [eval] diz.Full_adder_m.Main_process_state[i]
(push) ; 12
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      231
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2565
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              370
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            220150)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      231
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2565
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              371
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            220169)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@138@08 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      231
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2565
;  :mk-clause               399
;  :num-allocs              5329394
;  :num-checks              372
;  :propagations            271
;  :quant-instantiations    124
;  :rlimit-count            220178)
; [eval] -1
(push) ; 12
; [then-branch: 41 | First:(Second:(Second:(Second:($t@117@08))))[i@138@08] == -1 | live]
; [else-branch: 41 | First:(Second:(Second:(Second:($t@117@08))))[i@138@08] != -1 | live]
(push) ; 13
; [then-branch: 41 | First:(Second:(Second:(Second:($t@117@08))))[i@138@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
    i@138@08)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 41 | First:(Second:(Second:(Second:($t@117@08))))[i@138@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
      i@138@08)
    (- 0 1))))
; [eval] 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] 0 <= diz.Full_adder_m.Main_process_state[i]
; [eval] diz.Full_adder_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      97
;  :arith-assert-lower      313
;  :arith-assert-upper      232
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2571
;  :mk-clause               403
;  :num-allocs              5329394
;  :num-checks              373
;  :propagations            273
;  :quant-instantiations    125
;  :rlimit-count            220449)
(push) ; 14
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      97
;  :arith-assert-lower      313
;  :arith-assert-upper      232
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2571
;  :mk-clause               403
;  :num-allocs              5329394
;  :num-checks              374
;  :propagations            273
;  :quant-instantiations    125
;  :rlimit-count            220468)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i@138@08 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      97
;  :arith-assert-lower      313
;  :arith-assert-upper      232
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2571
;  :mk-clause               403
;  :num-allocs              5329394
;  :num-checks              375
;  :propagations            273
;  :quant-instantiations    125
;  :rlimit-count            220477)
(push) ; 14
; [then-branch: 42 | 0 <= First:(Second:(Second:(Second:($t@117@08))))[i@138@08] | live]
; [else-branch: 42 | !(0 <= First:(Second:(Second:(Second:($t@117@08))))[i@138@08]) | live]
(push) ; 15
; [then-branch: 42 | 0 <= First:(Second:(Second:(Second:($t@117@08))))[i@138@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
    i@138@08)))
; [eval] diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] diz.Full_adder_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      97
;  :arith-assert-lower      313
;  :arith-assert-upper      232
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2571
;  :mk-clause               403
;  :num-allocs              5329394
;  :num-checks              376
;  :propagations            273
;  :quant-instantiations    125
;  :rlimit-count            220630)
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      97
;  :arith-assert-lower      313
;  :arith-assert-upper      232
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2571
;  :mk-clause               403
;  :num-allocs              5329394
;  :num-checks              377
;  :propagations            273
;  :quant-instantiations    125
;  :rlimit-count            220649)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@138@08 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      97
;  :arith-assert-lower      313
;  :arith-assert-upper      232
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2571
;  :mk-clause               403
;  :num-allocs              5329394
;  :num-checks              378
;  :propagations            273
;  :quant-instantiations    125
;  :rlimit-count            220658)
; [eval] |diz.Full_adder_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      97
;  :arith-assert-lower      313
;  :arith-assert-upper      232
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2571
;  :mk-clause               403
;  :num-allocs              5329394
;  :num-checks              379
;  :propagations            273
;  :quant-instantiations    125
;  :rlimit-count            220706)
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      97
;  :arith-assert-lower      313
;  :arith-assert-upper      232
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              334
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2571
;  :mk-clause               403
;  :num-allocs              5329394
;  :num-checks              380
;  :propagations            273
;  :quant-instantiations    125
;  :rlimit-count            220725)
(pop) ; 15
(push) ; 15
; [else-branch: 42 | !(0 <= First:(Second:(Second:(Second:($t@117@08))))[i@138@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
      i@138@08))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 40 | !(i@138@08 < |First:(Second:(Second:(Second:($t@117@08))))| && 0 <= i@138@08)]
(assert (not
  (and
    (<
      i@138@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
    (<= 0 i@138@08))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 9
(assert (not (forall ((i@138@08 Int)) (!
  (implies
    (and
      (<
        i@138@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
      (<= 0 i@138@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
          i@138@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
            i@138@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
            i@138@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
    i@138@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      98
;  :arith-assert-lower      314
;  :arith-assert-upper      233
;  :arith-conflicts         52
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2579
;  :mk-clause               415
;  :num-allocs              5329394
;  :num-checks              381
;  :propagations            275
;  :quant-instantiations    126
;  :rlimit-count            221171)
(assert (forall ((i@138@08 Int)) (!
  (implies
    (and
      (<
        i@138@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))
      (<= 0 i@138@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
          i@138@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
            i@138@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
            i@138@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))
    i@138@08))
  :qid |prog.l<no position>|)))
(declare-const $k@139@08 $Perm)
(assert ($Perm.isReadVar $k@139@08 $Perm.Write))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      316
;  :arith-assert-upper      234
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2584
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              382
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            221729)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@139@08 $Perm.No) (< $Perm.No $k@139@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      316
;  :arith-assert-upper      234
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2584
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              383
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            221779)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      316
;  :arith-assert-upper      234
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2584
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              384
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            221798)
(push) ; 9
(assert (not (not (= $k@119@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      316
;  :arith-assert-upper      234
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2584
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              385
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            221809)
(assert (< $k@139@08 $k@119@08))
(assert (<= $Perm.No (- $k@119@08 $k@139@08)))
(assert (<= (- $k@119@08 $k@139@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@119@08 $k@139@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
; [eval] diz.Full_adder_m.Main_adder != null
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              386
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222029)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              387
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222048)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              388
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222096)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              389
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222144)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              390
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222163)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              391
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222211)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              392
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222259)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              393
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222278)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               257
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              394
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222326)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              395
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222374)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              396
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222393)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               259
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              397
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222441)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               260
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              398
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222489)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               260
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              399
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222508)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               261
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              400
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222556)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              401
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222604)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              402
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222623)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               263
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              403
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222671)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              404
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222719)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              405
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222738)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               265
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              406
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222786)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               266
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              407
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222834)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               266
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              408
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222853)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              409
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222901)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               268
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              410
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222949)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               268
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              411
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            222968)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               269
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              412
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            223016)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              413
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            223064)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              414
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            223083)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      99
;  :arith-assert-lower      317
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               271
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2587
;  :mk-clause               417
;  :num-allocs              5329394
;  :num-checks              415
;  :propagations            276
;  :quant-instantiations    126
;  :rlimit-count            223131)
(declare-const $k@140@08 $Perm)
(assert ($Perm.isReadVar $k@140@08 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      100
;  :arith-assert-lower      319
;  :arith-assert-upper      237
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               272
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2591
;  :mk-clause               419
;  :num-allocs              5329394
;  :num-checks              416
;  :propagations            277
;  :quant-instantiations    126
;  :rlimit-count            223327)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      100
;  :arith-assert-lower      319
;  :arith-assert-upper      237
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               272
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2591
;  :mk-clause               419
;  :num-allocs              5329394
;  :num-checks              417
;  :propagations            277
;  :quant-instantiations    126
;  :rlimit-count            223346)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      100
;  :arith-assert-lower      319
;  :arith-assert-upper      237
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               273
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2591
;  :mk-clause               419
;  :num-allocs              5329394
;  :num-checks              418
;  :propagations            277
;  :quant-instantiations    126
;  :rlimit-count            223394)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@140@08 $Perm.No) (< $Perm.No $k@140@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      100
;  :arith-assert-lower      319
;  :arith-assert-upper      237
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2591
;  :mk-clause               419
;  :num-allocs              5329394
;  :num-checks              419
;  :propagations            277
;  :quant-instantiations    126
;  :rlimit-count            223444)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (- $k@120@08 $k@137@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          25
;  :arith-assert-diseq      100
;  :arith-assert-lower      319
;  :arith-assert-upper      237
;  :arith-conflicts         52
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               275
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2592
;  :mk-clause               419
;  :num-allocs              5329394
;  :num-checks              420
;  :propagations            277
;  :quant-instantiations    126
;  :rlimit-count            223512)
(assert (< $k@140@08 (- $k@120@08 $k@137@08)))
(assert (<= $Perm.No (- (- $k@120@08 $k@137@08) $k@140@08)))
(assert (<= (- (- $k@120@08 $k@137@08) $k@140@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@120@08 $k@137@08) $k@140@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
      $Ref.null))))
; [eval] diz.Full_adder_m.Main_adder.Full_adder_m == diz.Full_adder_m
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      239
;  :arith-conflicts         52
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2595
;  :mk-clause               419
;  :num-allocs              5329394
;  :num-checks              421
;  :propagations            277
;  :quant-instantiations    126
;  :rlimit-count            223760)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      239
;  :arith-conflicts         52
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2595
;  :mk-clause               419
;  :num-allocs              5329394
;  :num-checks              422
;  :propagations            277
;  :quant-instantiations    126
;  :rlimit-count            223779)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      239
;  :arith-conflicts         52
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               277
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2595
;  :mk-clause               419
;  :num-allocs              5329394
;  :num-checks              423
;  :propagations            277
;  :quant-instantiations    126
;  :rlimit-count            223827)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      239
;  :arith-conflicts         52
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               278
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2595
;  :mk-clause               419
;  :num-allocs              5329394
;  :num-checks              424
;  :propagations            277
;  :quant-instantiations    126
;  :rlimit-count            223875)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      239
;  :arith-conflicts         52
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               279
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2595
;  :mk-clause               419
;  :num-allocs              5329394
;  :num-checks              425
;  :propagations            277
;  :quant-instantiations    126
;  :rlimit-count            223923)
(declare-const $k@141@08 $Perm)
(assert ($Perm.isReadVar $k@141@08 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      240
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               280
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2599
;  :mk-clause               421
;  :num-allocs              5329394
;  :num-checks              426
;  :propagations            278
;  :quant-instantiations    126
;  :rlimit-count            224119)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@141@08 $Perm.No) (< $Perm.No $k@141@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      240
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2599
;  :mk-clause               421
;  :num-allocs              5329394
;  :num-checks              427
;  :propagations            278
;  :quant-instantiations    126
;  :rlimit-count            224169)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      240
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2599
;  :mk-clause               421
;  :num-allocs              5329394
;  :num-checks              428
;  :propagations            278
;  :quant-instantiations    126
;  :rlimit-count            224188)
(push) ; 9
(assert (not (not (= $k@121@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      240
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2599
;  :mk-clause               421
;  :num-allocs              5329394
;  :num-checks              429
;  :propagations            278
;  :quant-instantiations    126
;  :rlimit-count            224199)
(assert (< $k@141@08 $k@121@08))
(assert (<= $Perm.No (- $k@121@08 $k@141@08)))
(assert (<= (- $k@121@08 $k@141@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@121@08 $k@141@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
; [eval] diz.Full_adder_m.Main_adder_prc != null
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      101
;  :arith-assert-lower      324
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2602
;  :mk-clause               421
;  :num-allocs              5329394
;  :num-checks              430
;  :propagations            278
;  :quant-instantiations    126
;  :rlimit-count            224419)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      101
;  :arith-assert-lower      324
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2602
;  :mk-clause               421
;  :num-allocs              5329394
;  :num-checks              431
;  :propagations            278
;  :quant-instantiations    126
;  :rlimit-count            224438)
(push) ; 9
(assert (not (< $Perm.No $k@121@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      101
;  :arith-assert-lower      324
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2602
;  :mk-clause               421
;  :num-allocs              5329394
;  :num-checks              432
;  :propagations            278
;  :quant-instantiations    126
;  :rlimit-count            224486)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      101
;  :arith-assert-lower      324
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2602
;  :mk-clause               421
;  :num-allocs              5329394
;  :num-checks              433
;  :propagations            278
;  :quant-instantiations    126
;  :rlimit-count            224499)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      101
;  :arith-assert-lower      324
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               284
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2602
;  :mk-clause               421
;  :num-allocs              5329394
;  :num-checks              434
;  :propagations            278
;  :quant-instantiations    126
;  :rlimit-count            224547)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      101
;  :arith-assert-lower      324
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               284
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2602
;  :mk-clause               421
;  :num-allocs              5329394
;  :num-checks              435
;  :propagations            278
;  :quant-instantiations    126
;  :rlimit-count            224566)
(push) ; 9
(assert (not (< $Perm.No $k@121@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      101
;  :arith-assert-lower      324
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               285
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2602
;  :mk-clause               421
;  :num-allocs              5329394
;  :num-checks              436
;  :propagations            278
;  :quant-instantiations    126
;  :rlimit-count            224614)
(declare-const $k@142@08 $Perm)
(assert ($Perm.isReadVar $k@142@08 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      102
;  :arith-assert-lower      326
;  :arith-assert-upper      242
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2606
;  :mk-clause               423
;  :num-allocs              5329394
;  :num-checks              437
;  :propagations            279
;  :quant-instantiations    126
;  :rlimit-count            224810)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@142@08 $Perm.No) (< $Perm.No $k@142@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      102
;  :arith-assert-lower      326
;  :arith-assert-upper      242
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2606
;  :mk-clause               423
;  :num-allocs              5329394
;  :num-checks              438
;  :propagations            279
;  :quant-instantiations    126
;  :rlimit-count            224860)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      102
;  :arith-assert-lower      326
;  :arith-assert-upper      242
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2606
;  :mk-clause               423
;  :num-allocs              5329394
;  :num-checks              439
;  :propagations            279
;  :quant-instantiations    126
;  :rlimit-count            224879)
(push) ; 9
(assert (not (not (= $k@122@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      102
;  :arith-assert-lower      326
;  :arith-assert-upper      242
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2606
;  :mk-clause               423
;  :num-allocs              5329394
;  :num-checks              440
;  :propagations            279
;  :quant-instantiations    126
;  :rlimit-count            224890)
(assert (< $k@142@08 $k@122@08))
(assert (<= $Perm.No (- $k@122@08 $k@142@08)))
(assert (<= (- $k@122@08 $k@142@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@122@08 $k@142@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
; [eval] diz.Full_adder_m.Main_adder_half_adder1 != null
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      102
;  :arith-assert-lower      328
;  :arith-assert-upper      243
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               288
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2609
;  :mk-clause               423
;  :num-allocs              5329394
;  :num-checks              441
;  :propagations            279
;  :quant-instantiations    126
;  :rlimit-count            225104)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      102
;  :arith-assert-lower      328
;  :arith-assert-upper      243
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               288
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2609
;  :mk-clause               423
;  :num-allocs              5329394
;  :num-checks              442
;  :propagations            279
;  :quant-instantiations    126
;  :rlimit-count            225123)
(push) ; 9
(assert (not (< $Perm.No $k@122@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      102
;  :arith-assert-lower      328
;  :arith-assert-upper      243
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2609
;  :mk-clause               423
;  :num-allocs              5329394
;  :num-checks              443
;  :propagations            279
;  :quant-instantiations    126
;  :rlimit-count            225171)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      102
;  :arith-assert-lower      328
;  :arith-assert-upper      243
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2609
;  :mk-clause               423
;  :num-allocs              5329394
;  :num-checks              444
;  :propagations            279
;  :quant-instantiations    126
;  :rlimit-count            225184)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      102
;  :arith-assert-lower      328
;  :arith-assert-upper      243
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2609
;  :mk-clause               423
;  :num-allocs              5329394
;  :num-checks              445
;  :propagations            279
;  :quant-instantiations    126
;  :rlimit-count            225232)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      102
;  :arith-assert-lower      328
;  :arith-assert-upper      243
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2609
;  :mk-clause               423
;  :num-allocs              5329394
;  :num-checks              446
;  :propagations            279
;  :quant-instantiations    126
;  :rlimit-count            225251)
(push) ; 9
(assert (not (< $Perm.No $k@122@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5304
;  :arith-add-rows          27
;  :arith-assert-diseq      102
;  :arith-assert-lower      328
;  :arith-assert-upper      243
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1333
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1255
;  :del-clause              350
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2609
;  :mk-clause               423
;  :num-allocs              5329394
;  :num-checks              447
;  :propagations            279
;  :quant-instantiations    126
;  :rlimit-count            225299)
(push) ; 9
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      102
;  :arith-assert-lower      328
;  :arith-assert-upper      243
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2669
;  :mk-clause               423
;  :num-allocs              5329394
;  :num-checks              448
;  :propagations            283
;  :quant-instantiations    126
;  :rlimit-count            226759
;  :time                    0.00)
(declare-const $k@143@08 $Perm)
(assert ($Perm.isReadVar $k@143@08 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      103
;  :arith-assert-lower      330
;  :arith-assert-upper      244
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2673
;  :mk-clause               425
;  :num-allocs              5329394
;  :num-checks              449
;  :propagations            284
;  :quant-instantiations    126
;  :rlimit-count            226956)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@143@08 $Perm.No) (< $Perm.No $k@143@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      103
;  :arith-assert-lower      330
;  :arith-assert-upper      244
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2673
;  :mk-clause               425
;  :num-allocs              5329394
;  :num-checks              450
;  :propagations            284
;  :quant-instantiations    126
;  :rlimit-count            227006)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      103
;  :arith-assert-lower      330
;  :arith-assert-upper      244
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2673
;  :mk-clause               425
;  :num-allocs              5329394
;  :num-checks              451
;  :propagations            284
;  :quant-instantiations    126
;  :rlimit-count            227025)
(push) ; 9
(assert (not (not (= $k@123@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      103
;  :arith-assert-lower      330
;  :arith-assert-upper      244
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2673
;  :mk-clause               425
;  :num-allocs              5329394
;  :num-checks              452
;  :propagations            284
;  :quant-instantiations    126
;  :rlimit-count            227036)
(assert (< $k@143@08 $k@123@08))
(assert (<= $Perm.No (- $k@123@08 $k@143@08)))
(assert (<= (- $k@123@08 $k@143@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@123@08 $k@143@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
; [eval] diz.Full_adder_m.Main_adder_half_adder2 != null
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      103
;  :arith-assert-lower      332
;  :arith-assert-upper      245
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2676
;  :mk-clause               425
;  :num-allocs              5329394
;  :num-checks              453
;  :propagations            284
;  :quant-instantiations    126
;  :rlimit-count            227250)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      103
;  :arith-assert-lower      332
;  :arith-assert-upper      245
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2676
;  :mk-clause               425
;  :num-allocs              5329394
;  :num-checks              454
;  :propagations            284
;  :quant-instantiations    126
;  :rlimit-count            227269)
(push) ; 9
(assert (not (< $Perm.No $k@123@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      103
;  :arith-assert-lower      332
;  :arith-assert-upper      245
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2676
;  :mk-clause               425
;  :num-allocs              5329394
;  :num-checks              455
;  :propagations            284
;  :quant-instantiations    126
;  :rlimit-count            227317)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      103
;  :arith-assert-lower      332
;  :arith-assert-upper      245
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2676
;  :mk-clause               425
;  :num-allocs              5329394
;  :num-checks              456
;  :propagations            284
;  :quant-instantiations    126
;  :rlimit-count            227330)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      103
;  :arith-assert-lower      332
;  :arith-assert-upper      245
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2676
;  :mk-clause               425
;  :num-allocs              5329394
;  :num-checks              457
;  :propagations            284
;  :quant-instantiations    126
;  :rlimit-count            227378)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      103
;  :arith-assert-lower      332
;  :arith-assert-upper      245
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2676
;  :mk-clause               425
;  :num-allocs              5329394
;  :num-checks              458
;  :propagations            284
;  :quant-instantiations    126
;  :rlimit-count            227397)
(push) ; 9
(assert (not (< $Perm.No $k@123@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      103
;  :arith-assert-lower      332
;  :arith-assert-upper      245
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2676
;  :mk-clause               425
;  :num-allocs              5329394
;  :num-checks              459
;  :propagations            284
;  :quant-instantiations    126
;  :rlimit-count            227445)
(declare-const $k@144@08 $Perm)
(assert ($Perm.isReadVar $k@144@08 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      104
;  :arith-assert-lower      334
;  :arith-assert-upper      246
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2680
;  :mk-clause               427
;  :num-allocs              5329394
;  :num-checks              460
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            227642)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@144@08 $Perm.No) (< $Perm.No $k@144@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      104
;  :arith-assert-lower      334
;  :arith-assert-upper      246
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2680
;  :mk-clause               427
;  :num-allocs              5329394
;  :num-checks              461
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            227692)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      104
;  :arith-assert-lower      334
;  :arith-assert-upper      246
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2680
;  :mk-clause               427
;  :num-allocs              5329394
;  :num-checks              462
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            227711)
(push) ; 9
(assert (not (not (= (- $k@119@08 $k@139@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          27
;  :arith-assert-diseq      104
;  :arith-assert-lower      334
;  :arith-assert-upper      246
;  :arith-conflicts         52
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               300
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2681
;  :mk-clause               427
;  :num-allocs              5329394
;  :num-checks              463
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            227779)
(assert (< $k@144@08 (- $k@119@08 $k@139@08)))
(assert (<= $Perm.No (- (- $k@119@08 $k@139@08) $k@144@08)))
(assert (<= (- (- $k@119@08 $k@139@08) $k@144@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@119@08 $k@139@08) $k@144@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
; [eval] diz.Full_adder_m.Main_adder == diz
(push) ; 9
(assert (not (< $Perm.No $k@120@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      335
;  :arith-assert-upper      248
;  :arith-conflicts         52
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2684
;  :mk-clause               427
;  :num-allocs              5329394
;  :num-checks              464
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            228021)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      335
;  :arith-assert-upper      248
;  :arith-conflicts         52
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2684
;  :mk-clause               427
;  :num-allocs              5329394
;  :num-checks              465
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            228040)
(push) ; 9
(assert (not (< $Perm.No $k@119@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      335
;  :arith-assert-upper      248
;  :arith-conflicts         52
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2684
;  :mk-clause               427
;  :num-allocs              5329394
;  :num-checks              466
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            228088)
(declare-const sys__result@145@08 Bool)
(declare-const $t@146@08 $Snap)
(assert (= $t@146@08 ($Snap.combine ($Snap.first $t@146@08) ($Snap.second $t@146@08))))
(declare-const $k@147@08 $Perm)
(assert ($Perm.isReadVar $k@147@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@147@08 $Perm.No) (< $Perm.No $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5517
;  :arith-add-rows          29
;  :arith-assert-diseq      105
;  :arith-assert-lower      337
;  :arith-assert-upper      249
;  :arith-conflicts         52
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    322
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2689
;  :mk-clause               429
;  :num-allocs              5329394
;  :num-checks              467
;  :propagations            286
;  :quant-instantiations    126
;  :rlimit-count            228374)
(declare-const $t@148@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@120@08 $k@137@08) $k@140@08))
    (=
      $t@148@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@147@08)
    (= $t@148@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@146@08))))))
(assert (<= $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08)))
(assert (<= (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second $t@146@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@146@08))
    ($Snap.second ($Snap.second $t@146@08)))))
(assert (= ($Snap.first ($Snap.second $t@146@08)) $Snap.unit))
; [eval] diz.Full_adder_m != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5527
;  :arith-add-rows          30
;  :arith-assert-diseq      105
;  :arith-assert-lower      339
;  :arith-assert-upper      250
;  :arith-conflicts         53
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         63
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               304
;  :datatype-accessor-ax    323
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2697
;  :mk-clause               429
;  :num-allocs              5329394
;  :num-checks              468
;  :propagations            286
;  :quant-instantiations    127
;  :rlimit-count            228924)
(assert (not (= $t@148@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@146@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@146@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5533
;  :arith-add-rows          30
;  :arith-assert-diseq      105
;  :arith-assert-lower      340
;  :arith-assert-upper      250
;  :arith-conflicts         54
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         64
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2700
;  :mk-clause               429
;  :num-allocs              5329394
;  :num-checks              469
;  :propagations            286
;  :quant-instantiations    127
;  :rlimit-count            229186)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@146@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5538
;  :arith-add-rows          30
;  :arith-assert-diseq      105
;  :arith-assert-lower      341
;  :arith-assert-upper      250
;  :arith-conflicts         55
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         65
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               306
;  :datatype-accessor-ax    325
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2702
;  :mk-clause               429
;  :num-allocs              5329394
;  :num-checks              470
;  :propagations            286
;  :quant-instantiations    127
;  :rlimit-count            229413)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))
  $Snap.unit))
; [eval] |diz.Full_adder_m.Main_process_state| == 3
; [eval] |diz.Full_adder_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5544
;  :arith-add-rows          30
;  :arith-assert-diseq      105
;  :arith-assert-lower      342
;  :arith-assert-upper      250
;  :arith-conflicts         56
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         66
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    326
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2705
;  :mk-clause               429
;  :num-allocs              5329394
;  :num-checks              471
;  :propagations            286
;  :quant-instantiations    127
;  :rlimit-count            229682)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5551
;  :arith-add-rows          30
;  :arith-assert-diseq      105
;  :arith-assert-lower      345
;  :arith-assert-upper      251
;  :arith-conflicts         57
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         67
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    327
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2712
;  :mk-clause               429
;  :num-allocs              5329394
;  :num-checks              472
;  :propagations            286
;  :quant-instantiations    129
;  :rlimit-count            230061)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))
  $Snap.unit))
; [eval] |diz.Full_adder_m.Main_event_state| == 6
; [eval] |diz.Full_adder_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5557
;  :arith-add-rows          30
;  :arith-assert-diseq      105
;  :arith-assert-lower      346
;  :arith-assert-upper      251
;  :arith-conflicts         58
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         68
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               309
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2715
;  :mk-clause               429
;  :num-allocs              5329394
;  :num-checks              473
;  :propagations            286
;  :quant-instantiations    129
;  :rlimit-count            230350)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Full_adder_m.Main_process_state[i] } 0 <= i && i < |diz.Full_adder_m.Main_process_state| ==> diz.Full_adder_m.Main_process_state[i] == -1 || 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|)
(declare-const i@149@08 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Full_adder_m.Main_process_state| ==> diz.Full_adder_m.Main_process_state[i] == -1 || 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Full_adder_m.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 43 | 0 <= i@149@08 | live]
; [else-branch: 43 | !(0 <= i@149@08) | live]
(push) ; 11
; [then-branch: 43 | 0 <= i@149@08]
(assert (<= 0 i@149@08))
; [eval] i < |diz.Full_adder_m.Main_process_state|
; [eval] |diz.Full_adder_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5565
;  :arith-add-rows          30
;  :arith-assert-diseq      105
;  :arith-assert-lower      350
;  :arith-assert-upper      252
;  :arith-conflicts         59
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         69
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2724
;  :mk-clause               429
;  :num-allocs              5329394
;  :num-checks              474
;  :propagations            286
;  :quant-instantiations    131
;  :rlimit-count            230839)
(pop) ; 11
(push) ; 11
; [else-branch: 43 | !(0 <= i@149@08)]
(assert (not (<= 0 i@149@08)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 44 | i@149@08 < |First:(Second:(Second:(Second:($t@146@08))))| && 0 <= i@149@08 | live]
; [else-branch: 44 | !(i@149@08 < |First:(Second:(Second:(Second:($t@146@08))))| && 0 <= i@149@08) | live]
(push) ; 11
; [then-branch: 44 | i@149@08 < |First:(Second:(Second:(Second:($t@146@08))))| && 0 <= i@149@08]
(assert (and
  (<
    i@149@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))
  (<= 0 i@149@08)))
; [eval] diz.Full_adder_m.Main_process_state[i] == -1 || 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] diz.Full_adder_m.Main_process_state[i] == -1
; [eval] diz.Full_adder_m.Main_process_state[i]
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5565
;  :arith-add-rows          30
;  :arith-assert-diseq      105
;  :arith-assert-lower      352
;  :arith-assert-upper      253
;  :arith-conflicts         60
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         70
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               311
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2727
;  :mk-clause               429
;  :num-allocs              5329394
;  :num-checks              475
;  :propagations            286
;  :quant-instantiations    131
;  :rlimit-count            231046)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@149@08 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5565
;  :arith-add-rows          30
;  :arith-assert-diseq      105
;  :arith-assert-lower      352
;  :arith-assert-upper      253
;  :arith-conflicts         60
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         70
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               311
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2727
;  :mk-clause               429
;  :num-allocs              5329394
;  :num-checks              476
;  :propagations            286
;  :quant-instantiations    131
;  :rlimit-count            231055)
; [eval] -1
(push) ; 12
; [then-branch: 45 | First:(Second:(Second:(Second:($t@146@08))))[i@149@08] == -1 | live]
; [else-branch: 45 | First:(Second:(Second:(Second:($t@146@08))))[i@149@08] != -1 | live]
(push) ; 13
; [then-branch: 45 | First:(Second:(Second:(Second:($t@146@08))))[i@149@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))
    i@149@08)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 45 | First:(Second:(Second:(Second:($t@146@08))))[i@149@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))
      i@149@08)
    (- 0 1))))
; [eval] 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] 0 <= diz.Full_adder_m.Main_process_state[i]
; [eval] diz.Full_adder_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5565
;  :arith-add-rows          30
;  :arith-assert-diseq      105
;  :arith-assert-lower      353
;  :arith-assert-upper      253
;  :arith-conflicts         61
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         71
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2729
;  :mk-clause               429
;  :num-allocs              5329394
;  :num-checks              477
;  :propagations            286
;  :quant-instantiations    131
;  :rlimit-count            231319)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i@149@08 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5565
;  :arith-add-rows          30
;  :arith-assert-diseq      105
;  :arith-assert-lower      353
;  :arith-assert-upper      253
;  :arith-conflicts         61
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         71
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2729
;  :mk-clause               429
;  :num-allocs              5329394
;  :num-checks              478
;  :propagations            286
;  :quant-instantiations    131
;  :rlimit-count            231328)
(push) ; 14
; [then-branch: 46 | 0 <= First:(Second:(Second:(Second:($t@146@08))))[i@149@08] | live]
; [else-branch: 46 | !(0 <= First:(Second:(Second:(Second:($t@146@08))))[i@149@08]) | live]
(push) ; 15
; [then-branch: 46 | 0 <= First:(Second:(Second:(Second:($t@146@08))))[i@149@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))
    i@149@08)))
; [eval] diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] diz.Full_adder_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5565
;  :arith-add-rows          30
;  :arith-assert-diseq      106
;  :arith-assert-lower      357
;  :arith-assert-upper      253
;  :arith-conflicts         62
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         72
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2733
;  :mk-clause               430
;  :num-allocs              5329394
;  :num-checks              479
;  :propagations            286
;  :quant-instantiations    131
;  :rlimit-count            231541)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@149@08 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5565
;  :arith-add-rows          30
;  :arith-assert-diseq      106
;  :arith-assert-lower      357
;  :arith-assert-upper      253
;  :arith-conflicts         62
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         72
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2733
;  :mk-clause               430
;  :num-allocs              5329394
;  :num-checks              480
;  :propagations            286
;  :quant-instantiations    131
;  :rlimit-count            231550)
; [eval] |diz.Full_adder_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5565
;  :arith-add-rows          30
;  :arith-assert-diseq      106
;  :arith-assert-lower      358
;  :arith-assert-upper      253
;  :arith-conflicts         63
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         73
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               314
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              350
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2734
;  :mk-clause               430
;  :num-allocs              5329394
;  :num-checks              481
;  :propagations            286
;  :quant-instantiations    131
;  :rlimit-count            231648)
(pop) ; 15
(push) ; 15
; [else-branch: 46 | !(0 <= First:(Second:(Second:(Second:($t@146@08))))[i@149@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))
      i@149@08))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 44 | !(i@149@08 < |First:(Second:(Second:(Second:($t@146@08))))| && 0 <= i@149@08)]
(assert (not
  (and
    (<
      i@149@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))
    (<= 0 i@149@08))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@149@08 Int)) (!
  (implies
    (and
      (<
        i@149@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))
      (<= 0 i@149@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))
          i@149@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))
            i@149@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))
            i@149@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))
    i@149@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5570
;  :arith-add-rows          30
;  :arith-assert-diseq      106
;  :arith-assert-lower      359
;  :arith-assert-upper      253
;  :arith-conflicts         64
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         74
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    330
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2737
;  :mk-clause               430
;  :num-allocs              5329394
;  :num-checks              482
;  :propagations            286
;  :quant-instantiations    131
;  :rlimit-count            232323)
(declare-const $k@150@08 $Perm)
(assert ($Perm.isReadVar $k@150@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@150@08 $Perm.No) (< $Perm.No $k@150@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5570
;  :arith-add-rows          30
;  :arith-assert-diseq      107
;  :arith-assert-lower      361
;  :arith-assert-upper      254
;  :arith-conflicts         64
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         74
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    330
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2741
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              483
;  :propagations            287
;  :quant-instantiations    131
;  :rlimit-count            232521)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@148@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5570
;  :arith-add-rows          30
;  :arith-assert-diseq      107
;  :arith-assert-lower      361
;  :arith-assert-upper      254
;  :arith-conflicts         64
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         74
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    330
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2741
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              484
;  :propagations            287
;  :quant-instantiations    131
;  :rlimit-count            232532)
(declare-const $t@151@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@119@08 $k@139@08) $k@144@08))
    (=
      $t@151@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))
  (implies
    (< $Perm.No $k@150@08)
    (=
      $t@151@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))
(assert (<= $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08)))
(assert (<= (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))
  $Snap.unit))
; [eval] diz.Full_adder_m.Main_adder != null
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5580
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      363
;  :arith-assert-upper      255
;  :arith-conflicts         65
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         75
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2749
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              485
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            233162)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@148@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5580
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      363
;  :arith-assert-upper      255
;  :arith-conflicts         65
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         75
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2749
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              486
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            233173)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5580
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      364
;  :arith-assert-upper      255
;  :arith-conflicts         66
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         76
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2750
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              487
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            233275)
(assert (not (= $t@151@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5586
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      365
;  :arith-assert-upper      255
;  :arith-conflicts         67
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         77
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    332
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2753
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              488
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            233617)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@148@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5586
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      365
;  :arith-assert-upper      255
;  :arith-conflicts         67
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         77
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    332
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2753
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              489
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            233628)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5586
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      366
;  :arith-assert-upper      255
;  :arith-conflicts         68
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         78
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               320
;  :datatype-accessor-ax    332
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2754
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              490
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            233726)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5591
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      367
;  :arith-assert-upper      255
;  :arith-conflicts         69
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         79
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               321
;  :datatype-accessor-ax    333
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2756
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              491
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            234033)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@148@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5591
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      367
;  :arith-assert-upper      255
;  :arith-conflicts         69
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         79
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               321
;  :datatype-accessor-ax    333
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2756
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              492
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            234044)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5591
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      368
;  :arith-assert-upper      255
;  :arith-conflicts         70
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         80
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               322
;  :datatype-accessor-ax    333
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2757
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              493
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            234142)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5596
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      369
;  :arith-assert-upper      255
;  :arith-conflicts         71
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         81
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               323
;  :datatype-accessor-ax    334
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2759
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              494
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            234459)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@148@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5596
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      369
;  :arith-assert-upper      255
;  :arith-conflicts         71
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         81
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               323
;  :datatype-accessor-ax    334
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2759
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              495
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            234470)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5596
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      370
;  :arith-assert-upper      255
;  :arith-conflicts         72
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         82
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    334
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2760
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              496
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            234568)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5601
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      371
;  :arith-assert-upper      255
;  :arith-conflicts         73
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         83
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    335
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2762
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              497
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            234895)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@148@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5601
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      371
;  :arith-assert-upper      255
;  :arith-conflicts         73
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         83
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    335
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2762
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              498
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            234906)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5601
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      372
;  :arith-assert-upper      255
;  :arith-conflicts         74
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         84
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    335
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2763
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              499
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            235004)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5606
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      373
;  :arith-assert-upper      255
;  :arith-conflicts         75
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         85
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2765
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              500
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            235341)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@148@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5606
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      373
;  :arith-assert-upper      255
;  :arith-conflicts         75
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         85
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2765
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              501
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            235352)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5606
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      374
;  :arith-assert-upper      255
;  :arith-conflicts         76
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         86
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               328
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2766
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              502
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            235450)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5611
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      375
;  :arith-assert-upper      255
;  :arith-conflicts         77
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         87
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               329
;  :datatype-accessor-ax    337
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2768
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              503
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            235797)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@148@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5611
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      375
;  :arith-assert-upper      255
;  :arith-conflicts         77
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         87
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               329
;  :datatype-accessor-ax    337
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2768
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              504
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            235808)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5611
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      376
;  :arith-assert-upper      255
;  :arith-conflicts         78
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         88
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               330
;  :datatype-accessor-ax    337
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2769
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              505
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            235906)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5616
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      377
;  :arith-assert-upper      255
;  :arith-conflicts         79
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         89
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    338
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2771
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              506
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            236263)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@148@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5616
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      377
;  :arith-assert-upper      255
;  :arith-conflicts         79
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         89
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    338
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2771
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              507
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            236274)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5616
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      378
;  :arith-assert-upper      255
;  :arith-conflicts         80
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         90
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               332
;  :datatype-accessor-ax    338
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2772
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              508
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            236372)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5621
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      379
;  :arith-assert-upper      255
;  :arith-conflicts         81
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         91
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2774
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              509
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            236739)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@148@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5621
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      379
;  :arith-assert-upper      255
;  :arith-conflicts         81
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         91
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2774
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              510
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            236750)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5621
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      380
;  :arith-assert-upper      255
;  :arith-conflicts         82
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         92
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               334
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2775
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              511
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            236848)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5626
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      381
;  :arith-assert-upper      255
;  :arith-conflicts         83
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         93
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2777
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              512
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            237225)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@148@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5626
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      381
;  :arith-assert-upper      255
;  :arith-conflicts         83
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         93
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2777
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              513
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            237236)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5626
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      382
;  :arith-assert-upper      255
;  :arith-conflicts         84
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         94
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               336
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2778
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              514
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            237334)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5631
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      383
;  :arith-assert-upper      255
;  :arith-conflicts         85
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         95
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2780
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              515
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            237721)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@148@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5631
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      383
;  :arith-assert-upper      255
;  :arith-conflicts         85
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         95
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2780
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              516
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            237732)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5631
;  :arith-add-rows          31
;  :arith-assert-diseq      107
;  :arith-assert-lower      384
;  :arith-assert-upper      255
;  :arith-conflicts         86
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         96
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               338
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2781
;  :mk-clause               432
;  :num-allocs              5329394
;  :num-checks              517
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            237830)
(declare-const $k@152@08 $Perm)
(assert ($Perm.isReadVar $k@152@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@152@08 $Perm.No) (< $Perm.No $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5631
;  :arith-add-rows          31
;  :arith-assert-diseq      108
;  :arith-assert-lower      386
;  :arith-assert-upper      256
;  :arith-conflicts         86
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         96
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2785
;  :mk-clause               434
;  :num-allocs              5329394
;  :num-checks              518
;  :propagations            288
;  :quant-instantiations    132
;  :rlimit-count            238029)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
  $t@151@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5631
;  :arith-add-rows          31
;  :arith-assert-diseq      108
;  :arith-assert-lower      386
;  :arith-assert-upper      256
;  :arith-conflicts         86
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         96
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2785
;  :mk-clause               434
;  :num-allocs              5329394
;  :num-checks              519
;  :propagations            288
;  :quant-instantiations    132
;  :rlimit-count            238040)
(declare-const $t@153@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08))
    (= $t@153@08 $t@148@08))
  (implies
    (< $Perm.No $k@152@08)
    (=
      $t@153@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))
(assert (<= $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08)))
(assert (<=
  (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08)
  $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Full_adder_m.Main_adder.Full_adder_m == diz.Full_adder_m
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5639
;  :arith-add-rows          34
;  :arith-assert-diseq      108
;  :arith-assert-lower      388
;  :arith-assert-upper      257
;  :arith-conflicts         87
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         97
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               340
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2794
;  :mk-clause               435
;  :num-allocs              5329394
;  :num-checks              520
;  :propagations            288
;  :quant-instantiations    133
;  :rlimit-count            238882)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@153@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5640
;  :arith-add-rows          35
;  :arith-assert-diseq      108
;  :arith-assert-lower      389
;  :arith-assert-upper      257
;  :arith-conflicts         88
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         98
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2795
;  :mk-clause               435
;  :num-allocs              5329394
;  :num-checks              521
;  :propagations            289
;  :quant-instantiations    133
;  :rlimit-count            238972)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5640
;  :arith-add-rows          35
;  :arith-assert-diseq      108
;  :arith-assert-lower      390
;  :arith-assert-upper      257
;  :arith-conflicts         89
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         99
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               342
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2796
;  :mk-clause               435
;  :num-allocs              5329394
;  :num-checks              522
;  :propagations            289
;  :quant-instantiations    133
;  :rlimit-count            239070)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
  $t@151@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5640
;  :arith-add-rows          35
;  :arith-assert-diseq      108
;  :arith-assert-lower      390
;  :arith-assert-upper      257
;  :arith-conflicts         89
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         99
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               342
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2796
;  :mk-clause               435
;  :num-allocs              5329394
;  :num-checks              523
;  :propagations            289
;  :quant-instantiations    133
;  :rlimit-count            239081)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5640
;  :arith-add-rows          36
;  :arith-assert-diseq      108
;  :arith-assert-lower      391
;  :arith-assert-upper      257
;  :arith-conflicts         90
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         100
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2797
;  :mk-clause               435
;  :num-allocs              5329394
;  :num-checks              524
;  :propagations            289
;  :quant-instantiations    133
;  :rlimit-count            239210)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5640
;  :arith-add-rows          36
;  :arith-assert-diseq      108
;  :arith-assert-lower      392
;  :arith-assert-upper      257
;  :arith-conflicts         91
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         101
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               344
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2798
;  :mk-clause               435
;  :num-allocs              5329394
;  :num-checks              525
;  :propagations            289
;  :quant-instantiations    133
;  :rlimit-count            239321)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5645
;  :arith-add-rows          36
;  :arith-assert-diseq      108
;  :arith-assert-lower      393
;  :arith-assert-upper      257
;  :arith-conflicts         92
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         102
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               345
;  :datatype-accessor-ax    343
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2800
;  :mk-clause               435
;  :num-allocs              5329394
;  :num-checks              526
;  :propagations            289
;  :quant-instantiations    133
;  :rlimit-count            239737)
(declare-const $k@154@08 $Perm)
(assert ($Perm.isReadVar $k@154@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@154@08 $Perm.No) (< $Perm.No $k@154@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5645
;  :arith-add-rows          36
;  :arith-assert-diseq      109
;  :arith-assert-lower      395
;  :arith-assert-upper      258
;  :arith-conflicts         92
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         102
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    343
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2804
;  :mk-clause               437
;  :num-allocs              5329394
;  :num-checks              527
;  :propagations            290
;  :quant-instantiations    133
;  :rlimit-count            239936)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@153@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5646
;  :arith-add-rows          37
;  :arith-assert-diseq      109
;  :arith-assert-lower      396
;  :arith-assert-upper      258
;  :arith-conflicts         93
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         103
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               347
;  :datatype-accessor-ax    343
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2805
;  :mk-clause               437
;  :num-allocs              5329394
;  :num-checks              528
;  :propagations            291
;  :quant-instantiations    133
;  :rlimit-count            240026)
(declare-const $t@155@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@121@08 $k@141@08))
    (=
      $t@155@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@154@08)
    (=
      $t@155@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@121@08 $k@141@08) $k@154@08)))
(assert (<= (+ (- $k@121@08 $k@141@08) $k@154@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@121@08 $k@141@08) $k@154@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Full_adder_m.Main_adder_prc != null
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5656
;  :arith-add-rows          39
;  :arith-assert-diseq      109
;  :arith-assert-lower      398
;  :arith-assert-upper      259
;  :arith-conflicts         94
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         104
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               348
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2813
;  :mk-clause               437
;  :num-allocs              5329394
;  :num-checks              529
;  :propagations            291
;  :quant-instantiations    134
;  :rlimit-count            241015)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@153@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5657
;  :arith-add-rows          40
;  :arith-assert-diseq      109
;  :arith-assert-lower      399
;  :arith-assert-upper      259
;  :arith-conflicts         95
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         105
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               349
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2814
;  :mk-clause               437
;  :num-allocs              5329394
;  :num-checks              530
;  :propagations            292
;  :quant-instantiations    134
;  :rlimit-count            241105)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@121@08 $k@141@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5657
;  :arith-add-rows          40
;  :arith-assert-diseq      109
;  :arith-assert-lower      399
;  :arith-assert-upper      260
;  :arith-conflicts         96
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         106
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               350
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2815
;  :mk-clause               437
;  :num-allocs              5329394
;  :num-checks              531
;  :propagations            292
;  :quant-instantiations    134
;  :rlimit-count            241183)
(assert (not (= $t@155@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5663
;  :arith-add-rows          41
;  :arith-assert-diseq      109
;  :arith-assert-lower      400
;  :arith-assert-upper      260
;  :arith-conflicts         97
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         107
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2818
;  :mk-clause               437
;  :num-allocs              5329394
;  :num-checks              532
;  :propagations            292
;  :quant-instantiations    134
;  :rlimit-count            241688)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@153@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5664
;  :arith-add-rows          42
;  :arith-assert-diseq      109
;  :arith-assert-lower      401
;  :arith-assert-upper      260
;  :arith-conflicts         98
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         108
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               352
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2819
;  :mk-clause               437
;  :num-allocs              5329394
;  :num-checks              533
;  :propagations            293
;  :quant-instantiations    134
;  :rlimit-count            241778)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@121@08 $k@141@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5664
;  :arith-add-rows          42
;  :arith-assert-diseq      109
;  :arith-assert-lower      401
;  :arith-assert-upper      261
;  :arith-conflicts         99
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         109
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               353
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2820
;  :mk-clause               437
;  :num-allocs              5329394
;  :num-checks              534
;  :propagations            293
;  :quant-instantiations    134
;  :rlimit-count            241856)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5664
;  :arith-add-rows          42
;  :arith-assert-diseq      109
;  :arith-assert-lower      401
;  :arith-assert-upper      261
;  :arith-conflicts         99
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         109
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               353
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2820
;  :mk-clause               437
;  :num-allocs              5329394
;  :num-checks              535
;  :propagations            293
;  :quant-instantiations    134
;  :rlimit-count            241869)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5669
;  :arith-add-rows          43
;  :arith-assert-diseq      109
;  :arith-assert-lower      402
;  :arith-assert-upper      261
;  :arith-conflicts         100
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         110
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               354
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2822
;  :mk-clause               437
;  :num-allocs              5329394
;  :num-checks              536
;  :propagations            293
;  :quant-instantiations    134
;  :rlimit-count            242337)
(declare-const $k@156@08 $Perm)
(assert ($Perm.isReadVar $k@156@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@156@08 $Perm.No) (< $Perm.No $k@156@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5669
;  :arith-add-rows          43
;  :arith-assert-diseq      110
;  :arith-assert-lower      404
;  :arith-assert-upper      262
;  :arith-conflicts         100
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         110
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               355
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2826
;  :mk-clause               439
;  :num-allocs              5329394
;  :num-checks              537
;  :propagations            294
;  :quant-instantiations    134
;  :rlimit-count            242535)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@153@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5670
;  :arith-add-rows          44
;  :arith-assert-diseq      110
;  :arith-assert-lower      405
;  :arith-assert-upper      262
;  :arith-conflicts         101
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         111
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               356
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2827
;  :mk-clause               439
;  :num-allocs              5329394
;  :num-checks              538
;  :propagations            295
;  :quant-instantiations    134
;  :rlimit-count            242625)
(declare-const $t@157@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@122@08 $k@142@08))
    (=
      $t@157@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@156@08)
    (=
      $t@157@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@122@08 $k@142@08) $k@156@08)))
(assert (<= (+ (- $k@122@08 $k@142@08) $k@156@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@122@08 $k@142@08) $k@156@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Full_adder_m.Main_adder_half_adder1 != null
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5680
;  :arith-add-rows          46
;  :arith-assert-diseq      110
;  :arith-assert-lower      407
;  :arith-assert-upper      263
;  :arith-conflicts         102
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         112
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               357
;  :datatype-accessor-ax    347
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2835
;  :mk-clause               439
;  :num-allocs              5329394
;  :num-checks              539
;  :propagations            295
;  :quant-instantiations    135
;  :rlimit-count            243424)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@153@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5681
;  :arith-add-rows          47
;  :arith-assert-diseq      110
;  :arith-assert-lower      408
;  :arith-assert-upper      263
;  :arith-conflicts         103
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         113
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               358
;  :datatype-accessor-ax    347
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2836
;  :mk-clause               439
;  :num-allocs              5329394
;  :num-checks              540
;  :propagations            296
;  :quant-instantiations    135
;  :rlimit-count            243514)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@122@08 $k@142@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5681
;  :arith-add-rows          47
;  :arith-assert-diseq      110
;  :arith-assert-lower      408
;  :arith-assert-upper      264
;  :arith-conflicts         104
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         114
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    347
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2837
;  :mk-clause               439
;  :num-allocs              5329394
;  :num-checks              541
;  :propagations            296
;  :quant-instantiations    135
;  :rlimit-count            243598)
(assert (not (= $t@157@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5686
;  :arith-add-rows          48
;  :arith-assert-diseq      110
;  :arith-assert-lower      409
;  :arith-assert-upper      264
;  :arith-conflicts         105
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         115
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               360
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2839
;  :mk-clause               439
;  :num-allocs              5329394
;  :num-checks              542
;  :propagations            296
;  :quant-instantiations    135
;  :rlimit-count            244106)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@153@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5687
;  :arith-add-rows          49
;  :arith-assert-diseq      110
;  :arith-assert-lower      410
;  :arith-assert-upper      264
;  :arith-conflicts         106
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         116
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               361
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2840
;  :mk-clause               439
;  :num-allocs              5329394
;  :num-checks              543
;  :propagations            297
;  :quant-instantiations    135
;  :rlimit-count            244196)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@122@08 $k@142@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5687
;  :arith-add-rows          49
;  :arith-assert-diseq      110
;  :arith-assert-lower      410
;  :arith-assert-upper      265
;  :arith-conflicts         107
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         117
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2841
;  :mk-clause               439
;  :num-allocs              5329394
;  :num-checks              544
;  :propagations            297
;  :quant-instantiations    135
;  :rlimit-count            244276)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5687
;  :arith-add-rows          49
;  :arith-assert-diseq      110
;  :arith-assert-lower      410
;  :arith-assert-upper      265
;  :arith-conflicts         107
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         117
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2841
;  :mk-clause               439
;  :num-allocs              5329394
;  :num-checks              545
;  :propagations            297
;  :quant-instantiations    135
;  :rlimit-count            244289)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
  $t@157@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5687
;  :arith-add-rows          49
;  :arith-assert-diseq      110
;  :arith-assert-lower      410
;  :arith-assert-upper      265
;  :arith-conflicts         107
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         117
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2841
;  :mk-clause               439
;  :num-allocs              5329394
;  :num-checks              546
;  :propagations            297
;  :quant-instantiations    135
;  :rlimit-count            244300)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5695
;  :arith-add-rows          50
;  :arith-assert-diseq      110
;  :arith-assert-lower      411
;  :arith-assert-upper      265
;  :arith-conflicts         108
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         118
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               363
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2845
;  :mk-clause               439
;  :num-allocs              5329394
;  :num-checks              547
;  :propagations            297
;  :quant-instantiations    136
;  :rlimit-count            244877)
(declare-const $k@158@08 $Perm)
(assert ($Perm.isReadVar $k@158@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@158@08 $Perm.No) (< $Perm.No $k@158@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5695
;  :arith-add-rows          50
;  :arith-assert-diseq      111
;  :arith-assert-lower      413
;  :arith-assert-upper      266
;  :arith-conflicts         108
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         118
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               364
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2849
;  :mk-clause               441
;  :num-allocs              5329394
;  :num-checks              548
;  :propagations            298
;  :quant-instantiations    136
;  :rlimit-count            245075)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@153@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5696
;  :arith-add-rows          51
;  :arith-assert-diseq      111
;  :arith-assert-lower      414
;  :arith-assert-upper      266
;  :arith-conflicts         109
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         119
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2850
;  :mk-clause               441
;  :num-allocs              5329394
;  :num-checks              549
;  :propagations            299
;  :quant-instantiations    136
;  :rlimit-count            245165)
(declare-const $t@159@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@123@08 $k@143@08))
    (=
      $t@159@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@158@08)
    (=
      $t@159@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@123@08 $k@143@08) $k@158@08)))
(assert (<= (+ (- $k@123@08 $k@143@08) $k@158@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@123@08 $k@143@08) $k@158@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Full_adder_m.Main_adder_half_adder2 != null
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5706
;  :arith-add-rows          53
;  :arith-assert-diseq      111
;  :arith-assert-lower      416
;  :arith-assert-upper      267
;  :arith-conflicts         110
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               366
;  :datatype-accessor-ax    350
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2858
;  :mk-clause               441
;  :num-allocs              5329394
;  :num-checks              550
;  :propagations            299
;  :quant-instantiations    137
;  :rlimit-count            246274)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@153@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5707
;  :arith-add-rows          54
;  :arith-assert-diseq      111
;  :arith-assert-lower      417
;  :arith-assert-upper      267
;  :arith-conflicts         111
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         121
;  :arith-pivots            98
;  :binary-propagations     22
;  :conflicts               367
;  :datatype-accessor-ax    350
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2859
;  :mk-clause               441
;  :num-allocs              5329394
;  :num-checks              551
;  :propagations            300
;  :quant-instantiations    137
;  :rlimit-count            246364)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@123@08 $k@143@08) $k@158@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5707
;  :arith-add-rows          54
;  :arith-assert-diseq      111
;  :arith-assert-lower      417
;  :arith-assert-upper      268
;  :arith-conflicts         112
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         122
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               368
;  :datatype-accessor-ax    350
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2860
;  :mk-clause               441
;  :num-allocs              5329394
;  :num-checks              552
;  :propagations            300
;  :quant-instantiations    137
;  :rlimit-count            246448)
(assert (not (= $t@159@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5713
;  :arith-add-rows          55
;  :arith-assert-diseq      111
;  :arith-assert-lower      418
;  :arith-assert-upper      268
;  :arith-conflicts         113
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         123
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               369
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2863
;  :mk-clause               441
;  :num-allocs              5329394
;  :num-checks              553
;  :propagations            300
;  :quant-instantiations    137
;  :rlimit-count            247013)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@153@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5714
;  :arith-add-rows          56
;  :arith-assert-diseq      111
;  :arith-assert-lower      419
;  :arith-assert-upper      268
;  :arith-conflicts         114
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         124
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               370
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2864
;  :mk-clause               441
;  :num-allocs              5329394
;  :num-checks              554
;  :propagations            301
;  :quant-instantiations    137
;  :rlimit-count            247103)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@123@08 $k@143@08) $k@158@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5714
;  :arith-add-rows          56
;  :arith-assert-diseq      111
;  :arith-assert-lower      419
;  :arith-assert-upper      269
;  :arith-conflicts         115
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         125
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               371
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2865
;  :mk-clause               441
;  :num-allocs              5329394
;  :num-checks              555
;  :propagations            301
;  :quant-instantiations    137
;  :rlimit-count            247183)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5714
;  :arith-add-rows          56
;  :arith-assert-diseq      111
;  :arith-assert-lower      419
;  :arith-assert-upper      269
;  :arith-conflicts         115
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         125
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               371
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2865
;  :mk-clause               441
;  :num-allocs              5329394
;  :num-checks              556
;  :propagations            301
;  :quant-instantiations    137
;  :rlimit-count            247196)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5719
;  :arith-add-rows          57
;  :arith-assert-diseq      111
;  :arith-assert-lower      420
;  :arith-assert-upper      269
;  :arith-conflicts         116
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         126
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               372
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2867
;  :mk-clause               441
;  :num-allocs              5329394
;  :num-checks              557
;  :propagations            301
;  :quant-instantiations    137
;  :rlimit-count            247724)
(declare-const $k@160@08 $Perm)
(assert ($Perm.isReadVar $k@160@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@160@08 $Perm.No) (< $Perm.No $k@160@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5719
;  :arith-add-rows          57
;  :arith-assert-diseq      112
;  :arith-assert-lower      422
;  :arith-assert-upper      270
;  :arith-conflicts         116
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         126
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2871
;  :mk-clause               443
;  :num-allocs              5329394
;  :num-checks              558
;  :propagations            302
;  :quant-instantiations    137
;  :rlimit-count            247922)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@153@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5720
;  :arith-add-rows          58
;  :arith-assert-diseq      112
;  :arith-assert-lower      423
;  :arith-assert-upper      270
;  :arith-conflicts         117
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         127
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2872
;  :mk-clause               443
;  :num-allocs              5329394
;  :num-checks              559
;  :propagations            303
;  :quant-instantiations    137
;  :rlimit-count            248012)
(declare-const $t@161@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08))
    (= $t@161@08 $t@151@08))
  (implies
    (< $Perm.No $k@160@08)
    (=
      $t@161@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08)))
(assert (<=
  (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08)
  $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Full_adder_m.Main_adder == diz
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5723
;  :arith-add-rows          62
;  :arith-assert-diseq      112
;  :arith-assert-lower      425
;  :arith-assert-upper      271
;  :arith-conflicts         118
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         128
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2880
;  :mk-clause               444
;  :num-allocs              5329394
;  :num-checks              560
;  :propagations            303
;  :quant-instantiations    138
;  :rlimit-count            248868)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $t@153@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5724
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      426
;  :arith-assert-upper      271
;  :arith-conflicts         119
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         129
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2881
;  :mk-clause               444
;  :num-allocs              5329394
;  :num-checks              561
;  :propagations            304
;  :quant-instantiations    138
;  :rlimit-count            248958)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5724
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      427
;  :arith-assert-upper      271
;  :arith-conflicts         120
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         130
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1397
;  :datatype-occurs-check   436
;  :datatype-splits         1189
;  :decisions               1315
;  :del-clause              351
;  :final-checks            84
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2882
;  :mk-clause               444
;  :num-allocs              5329394
;  :num-checks              562
;  :propagations            304
;  :quant-instantiations    138
;  :rlimit-count            249069)
(assert (=
  $t@161@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_7__14.Full_adder_s1 := __flatten_9__16
(set-option :timeout 10)
(push) ; 9
(assert (not (= $t@151@08 __flatten_7__14@131@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6103
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      427
;  :arith-assert-upper      271
;  :arith-conflicts         120
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         130
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               378
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2960
;  :mk-clause               445
;  :num-allocs              5763710
;  :num-checks              564
;  :propagations            308
;  :quant-instantiations    138
;  :rlimit-count            251524)
(assert (not (= __flatten_7__14@131@08 $Ref.null)))
; [exec]
; __flatten_17__23 := diz.Prc_half_adder_1_m
(declare-const __flatten_17__23@162@08 $Ref)
(assert (= __flatten_17__23@162@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
; [exec]
; __flatten_16__22 := __flatten_17__23.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) __flatten_17__23@162@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6104
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      427
;  :arith-assert-upper      271
;  :arith-conflicts         120
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         130
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               378
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2961
;  :mk-clause               445
;  :num-allocs              5763710
;  :num-checks              565
;  :propagations            308
;  :quant-instantiations    138
;  :rlimit-count            251575)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6104
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      428
;  :arith-assert-upper      271
;  :arith-conflicts         121
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         131
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               379
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2962
;  :mk-clause               445
;  :num-allocs              5763710
;  :num-checks              566
;  :propagations            308
;  :quant-instantiations    138
;  :rlimit-count            251686)
; [exec]
; __flatten_20__26 := diz.Prc_half_adder_1_m
(declare-const __flatten_20__26@163@08 $Ref)
(assert (= __flatten_20__26@163@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
; [exec]
; __flatten_19__25 := __flatten_20__26.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) __flatten_20__26@163@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6105
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      428
;  :arith-assert-upper      271
;  :arith-conflicts         121
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         131
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               379
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2963
;  :mk-clause               445
;  :num-allocs              5763710
;  :num-checks              567
;  :propagations            308
;  :quant-instantiations    138
;  :rlimit-count            251734)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6105
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      429
;  :arith-assert-upper      271
;  :arith-conflicts         122
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         132
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2964
;  :mk-clause               445
;  :num-allocs              5763710
;  :num-checks              568
;  :propagations            308
;  :quant-instantiations    138
;  :rlimit-count            251845)
; [exec]
; __flatten_22__28 := diz.Prc_half_adder_1_m
(declare-const __flatten_22__28@164@08 $Ref)
(assert (= __flatten_22__28@164@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
; [exec]
; __flatten_21__27 := __flatten_22__28.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) __flatten_22__28@164@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6106
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      429
;  :arith-assert-upper      271
;  :arith-conflicts         122
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         132
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2965
;  :mk-clause               445
;  :num-allocs              5763710
;  :num-checks              569
;  :propagations            308
;  :quant-instantiations    138
;  :rlimit-count            251893)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6106
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      430
;  :arith-assert-upper      271
;  :arith-conflicts         123
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         133
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2966
;  :mk-clause               445
;  :num-allocs              5763710
;  :num-checks              570
;  :propagations            308
;  :quant-instantiations    138
;  :rlimit-count            252004)
; [exec]
; __flatten_18__24 := __flatten_19__25.Full_adder_a && __flatten_21__27.Full_adder_b
; [eval] __flatten_19__25.Full_adder_a && __flatten_21__27.Full_adder_b
(push) ; 9
(assert (not (= $t@151@08 $t@161@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6106
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      430
;  :arith-assert-upper      271
;  :arith-conflicts         123
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         133
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2966
;  :mk-clause               445
;  :num-allocs              5763710
;  :num-checks              571
;  :propagations            308
;  :quant-instantiations    138
;  :rlimit-count            252015)
(push) ; 9
; [then-branch: 47 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@146@08))))))))))) | live]
; [else-branch: 47 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@146@08)))))))))))) | live]
(push) ; 10
; [then-branch: 47 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@146@08)))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))
(push) ; 11
(assert (not (= $t@151@08 $t@161@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6109
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      430
;  :arith-assert-upper      271
;  :arith-conflicts         123
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         133
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2968
;  :mk-clause               445
;  :num-allocs              5763710
;  :num-checks              572
;  :propagations            308
;  :quant-instantiations    139
;  :rlimit-count            252214)
(pop) ; 10
(push) ; 10
; [else-branch: 47 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@146@08))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(declare-const __flatten_18__24@165@08 Bool)
(assert (=
  __flatten_18__24@165@08
  (and
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))))))
; [exec]
; __flatten_16__22.Full_adder_c1 := __flatten_18__24
(push) ; 9
(assert (not (= $t@151@08 $t@161@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6109
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      430
;  :arith-assert-upper      271
;  :arith-conflicts         123
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         133
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2972
;  :mk-clause               450
;  :num-allocs              5763710
;  :num-checks              573
;  :propagations            308
;  :quant-instantiations    139
;  :rlimit-count            252498)
(assert (not (= $t@161@08 $Ref.null)))
; [exec]
; __flatten_23__29 := diz.Prc_half_adder_1_m
(declare-const __flatten_23__29@166@08 $Ref)
(assert (= __flatten_23__29@166@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
; [exec]
; __flatten_25__31 := diz.Prc_half_adder_1_m
(declare-const __flatten_25__31@167@08 $Ref)
(assert (= __flatten_25__31@167@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
; [exec]
; __flatten_24__30 := __flatten_25__31.Main_process_state[1 := 3]
; [eval] __flatten_25__31.Main_process_state[1 := 3]
(push) ; 9
(assert (not (= $t@148@08 __flatten_25__31@167@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6111
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      430
;  :arith-assert-upper      271
;  :arith-conflicts         123
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         133
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2974
;  :mk-clause               450
;  :num-allocs              5763710
;  :num-checks              574
;  :propagations            308
;  :quant-instantiations    139
;  :rlimit-count            252595)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6111
;  :arith-add-rows          63
;  :arith-assert-diseq      112
;  :arith-assert-lower      430
;  :arith-assert-upper      271
;  :arith-conflicts         123
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         133
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2974
;  :mk-clause               450
;  :num-allocs              5763710
;  :num-checks              575
;  :propagations            308
;  :quant-instantiations    139
;  :rlimit-count            252610)
(declare-const __flatten_24__30@168@08 Seq<Int>)
(assert (Seq_equal
  __flatten_24__30@168@08
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))
    1
    3)))
; [exec]
; __flatten_23__29.Main_process_state := __flatten_24__30
(set-option :timeout 10)
(push) ; 9
(assert (not (= $t@148@08 __flatten_23__29@166@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6121
;  :arith-add-rows          66
;  :arith-assert-diseq      113
;  :arith-assert-lower      434
;  :arith-assert-upper      273
;  :arith-conflicts         123
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         135
;  :arith-pivots            109
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2997
;  :mk-clause               469
;  :num-allocs              5763710
;  :num-checks              576
;  :propagations            317
;  :quant-instantiations    144
;  :rlimit-count            253091)
(assert (not (= __flatten_23__29@166@08 $Ref.null)))
; [exec]
; __flatten_26__32 := diz.Prc_half_adder_1_m
(declare-const __flatten_26__32@169@08 $Ref)
(assert (= __flatten_26__32@169@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
; [exec]
; __flatten_28__34 := diz.Prc_half_adder_1_m
(declare-const __flatten_28__34@170@08 $Ref)
(assert (= __flatten_28__34@170@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
; [exec]
; __flatten_27__33 := __flatten_28__34.Main_event_state[3 := 5]
; [eval] __flatten_28__34.Main_event_state[3 := 5]
(push) ; 9
(assert (not (= $t@148@08 __flatten_28__34@170@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6123
;  :arith-add-rows          66
;  :arith-assert-diseq      113
;  :arith-assert-lower      434
;  :arith-assert-upper      273
;  :arith-conflicts         123
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         135
;  :arith-pivots            109
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2999
;  :mk-clause               469
;  :num-allocs              5763710
;  :num-checks              577
;  :propagations            317
;  :quant-instantiations    144
;  :rlimit-count            253188)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6123
;  :arith-add-rows          66
;  :arith-assert-diseq      113
;  :arith-assert-lower      434
;  :arith-assert-upper      273
;  :arith-conflicts         123
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         135
;  :arith-pivots            109
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2999
;  :mk-clause               469
;  :num-allocs              5763710
;  :num-checks              578
;  :propagations            317
;  :quant-instantiations    144
;  :rlimit-count            253203)
(declare-const __flatten_27__33@171@08 Seq<Int>)
(assert (Seq_equal
  __flatten_27__33@171@08
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@08)))))))
    3
    5)))
; [exec]
; __flatten_26__32.Main_event_state := __flatten_27__33
(set-option :timeout 10)
(push) ; 9
(assert (not (= $t@148@08 __flatten_26__32@169@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6133
;  :arith-add-rows          69
;  :arith-assert-diseq      114
;  :arith-assert-lower      438
;  :arith-assert-upper      275
;  :arith-conflicts         123
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3022
;  :mk-clause               488
;  :num-allocs              5763710
;  :num-checks              579
;  :propagations            326
;  :quant-instantiations    149
;  :rlimit-count            253716)
(assert (not (= __flatten_26__32@169@08 $Ref.null)))
(push) ; 9
; Loop head block: Check well-definedness of invariant
(declare-const $t@172@08 $Snap)
(assert (= $t@172@08 ($Snap.combine ($Snap.first $t@172@08) ($Snap.second $t@172@08))))
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6138
;  :arith-add-rows          69
;  :arith-assert-diseq      114
;  :arith-assert-lower      438
;  :arith-assert-upper      275
;  :arith-conflicts         123
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    358
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3023
;  :mk-clause               488
;  :num-allocs              5763710
;  :num-checks              580
;  :propagations            326
;  :quant-instantiations    149
;  :rlimit-count            253849)
(assert (=
  ($Snap.second $t@172@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@172@08))
    ($Snap.second ($Snap.second $t@172@08)))))
(assert (= ($Snap.first ($Snap.second $t@172@08)) $Snap.unit))
; [eval] diz.Prc_half_adder_1_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@172@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@172@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@172@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
  $Snap.unit))
; [eval] |diz.Prc_half_adder_1_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
  $Snap.unit))
; [eval] |diz.Prc_half_adder_1_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))
  $Snap.unit))
; [eval] (forall i__36: Int :: { diz.Prc_half_adder_1_m.Main_process_state[i__36] } 0 <= i__36 && i__36 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__36] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36] && diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|)
(declare-const i__36@173@08 Int)
(push) ; 10
; [eval] 0 <= i__36 && i__36 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__36] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36] && diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= i__36 && i__36 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] 0 <= i__36
(push) ; 11
; [then-branch: 48 | 0 <= i__36@173@08 | live]
; [else-branch: 48 | !(0 <= i__36@173@08) | live]
(push) ; 12
; [then-branch: 48 | 0 <= i__36@173@08]
(assert (<= 0 i__36@173@08))
; [eval] i__36 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(pop) ; 12
(push) ; 12
; [else-branch: 48 | !(0 <= i__36@173@08)]
(assert (not (<= 0 i__36@173@08)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 49 | i__36@173@08 < |First:(Second:(Second:(Second:($t@172@08))))| && 0 <= i__36@173@08 | live]
; [else-branch: 49 | !(i__36@173@08 < |First:(Second:(Second:(Second:($t@172@08))))| && 0 <= i__36@173@08) | live]
(push) ; 12
; [then-branch: 49 | i__36@173@08 < |First:(Second:(Second:(Second:($t@172@08))))| && 0 <= i__36@173@08]
(assert (and
  (<
    i__36@173@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
  (<= 0 i__36@173@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36] && diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36] == -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36]
(push) ; 13
(assert (not (>= i__36@173@08 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6182
;  :arith-add-rows          69
;  :arith-assert-diseq      114
;  :arith-assert-lower      443
;  :arith-assert-upper      278
;  :arith-conflicts         123
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    365
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3048
;  :mk-clause               488
;  :num-allocs              5763710
;  :num-checks              581
;  :propagations            326
;  :quant-instantiations    154
;  :rlimit-count            255127)
; [eval] -1
(push) ; 13
; [then-branch: 50 | First:(Second:(Second:(Second:($t@172@08))))[i__36@173@08] == -1 | live]
; [else-branch: 50 | First:(Second:(Second:(Second:($t@172@08))))[i__36@173@08] != -1 | live]
(push) ; 14
; [then-branch: 50 | First:(Second:(Second:(Second:($t@172@08))))[i__36@173@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    i__36@173@08)
  (- 0 1)))
(pop) ; 14
(push) ; 14
; [else-branch: 50 | First:(Second:(Second:(Second:($t@172@08))))[i__36@173@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
      i__36@173@08)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36] && diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36]
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36]
(push) ; 15
(assert (not (>= i__36@173@08 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6182
;  :arith-add-rows          69
;  :arith-assert-diseq      114
;  :arith-assert-lower      443
;  :arith-assert-upper      278
;  :arith-conflicts         123
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    365
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3049
;  :mk-clause               488
;  :num-allocs              5763710
;  :num-checks              582
;  :propagations            326
;  :quant-instantiations    154
;  :rlimit-count            255302)
(push) ; 15
; [then-branch: 51 | 0 <= First:(Second:(Second:(Second:($t@172@08))))[i__36@173@08] | live]
; [else-branch: 51 | !(0 <= First:(Second:(Second:(Second:($t@172@08))))[i__36@173@08]) | live]
(push) ; 16
; [then-branch: 51 | 0 <= First:(Second:(Second:(Second:($t@172@08))))[i__36@173@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    i__36@173@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36]
(push) ; 17
(assert (not (>= i__36@173@08 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6182
;  :arith-add-rows          69
;  :arith-assert-diseq      115
;  :arith-assert-lower      446
;  :arith-assert-upper      278
;  :arith-conflicts         123
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    365
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              380
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3052
;  :mk-clause               489
;  :num-allocs              6204480
;  :num-checks              583
;  :propagations            326
;  :quant-instantiations    154
;  :rlimit-count            255426)
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(pop) ; 16
(push) ; 16
; [else-branch: 51 | !(0 <= First:(Second:(Second:(Second:($t@172@08))))[i__36@173@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
      i__36@173@08))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 49 | !(i__36@173@08 < |First:(Second:(Second:(Second:($t@172@08))))| && 0 <= i__36@173@08)]
(assert (not
  (and
    (<
      i__36@173@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
    (<= 0 i__36@173@08))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__36@173@08 Int)) (!
  (implies
    (and
      (<
        i__36@173@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
      (<= 0 i__36@173@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
          i__36@173@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
            i__36@173@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
            i__36@173@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    i__36@173@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))
(declare-const $k@174@08 $Perm)
(assert ($Perm.isReadVar $k@174@08 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@174@08 $Perm.No) (< $Perm.No $k@174@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6187
;  :arith-add-rows          69
;  :arith-assert-diseq      116
;  :arith-assert-lower      448
;  :arith-assert-upper      279
;  :arith-conflicts         123
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               382
;  :datatype-accessor-ax    366
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3058
;  :mk-clause               491
;  :num-allocs              6204480
;  :num-checks              584
;  :propagations            327
;  :quant-instantiations    154
;  :rlimit-count            256194)
(assert (<= $Perm.No $k@174@08))
(assert (<= $k@174@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@174@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6193
;  :arith-add-rows          69
;  :arith-assert-diseq      116
;  :arith-assert-lower      448
;  :arith-assert-upper      280
;  :arith-conflicts         123
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    367
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3061
;  :mk-clause               491
;  :num-allocs              6204480
;  :num-checks              585
;  :propagations            327
;  :quant-instantiations    154
;  :rlimit-count            256517)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6199
;  :arith-add-rows          69
;  :arith-assert-diseq      116
;  :arith-assert-lower      448
;  :arith-assert-upper      280
;  :arith-conflicts         123
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    368
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3064
;  :mk-clause               491
;  :num-allocs              6204480
;  :num-checks              586
;  :propagations            327
;  :quant-instantiations    155
;  :rlimit-count            256873)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6204
;  :arith-add-rows          69
;  :arith-assert-diseq      116
;  :arith-assert-lower      448
;  :arith-assert-upper      280
;  :arith-conflicts         123
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               385
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3065
;  :mk-clause               491
;  :num-allocs              6204480
;  :num-checks              587
;  :propagations            327
;  :quant-instantiations    155
;  :rlimit-count            257130)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6209
;  :arith-add-rows          69
;  :arith-assert-diseq      116
;  :arith-assert-lower      448
;  :arith-assert-upper      280
;  :arith-conflicts         123
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    370
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3066
;  :mk-clause               491
;  :num-allocs              6204480
;  :num-checks              588
;  :propagations            327
;  :quant-instantiations    155
;  :rlimit-count            257397)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6214
;  :arith-add-rows          69
;  :arith-assert-diseq      116
;  :arith-assert-lower      448
;  :arith-assert-upper      280
;  :arith-conflicts         123
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               387
;  :datatype-accessor-ax    371
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3067
;  :mk-clause               491
;  :num-allocs              6204480
;  :num-checks              589
;  :propagations            327
;  :quant-instantiations    155
;  :rlimit-count            257674)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6219
;  :arith-add-rows          69
;  :arith-assert-diseq      116
;  :arith-assert-lower      448
;  :arith-assert-upper      280
;  :arith-conflicts         123
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3068
;  :mk-clause               491
;  :num-allocs              6204480
;  :num-checks              590
;  :propagations            327
;  :quant-instantiations    155
;  :rlimit-count            257961)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6224
;  :arith-add-rows          69
;  :arith-assert-diseq      116
;  :arith-assert-lower      448
;  :arith-assert-upper      280
;  :arith-conflicts         123
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               389
;  :datatype-accessor-ax    373
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3069
;  :mk-clause               491
;  :num-allocs              6204480
;  :num-checks              591
;  :propagations            327
;  :quant-instantiations    155
;  :rlimit-count            258258)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6229
;  :arith-add-rows          69
;  :arith-assert-diseq      116
;  :arith-assert-lower      448
;  :arith-assert-upper      280
;  :arith-conflicts         123
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    374
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3070
;  :mk-clause               491
;  :num-allocs              6204480
;  :num-checks              592
;  :propagations            327
;  :quant-instantiations    155
;  :rlimit-count            258565)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6234
;  :arith-add-rows          69
;  :arith-assert-diseq      116
;  :arith-assert-lower      448
;  :arith-assert-upper      280
;  :arith-conflicts         123
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    375
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3071
;  :mk-clause               491
;  :num-allocs              6204480
;  :num-checks              593
;  :propagations            327
;  :quant-instantiations    155
;  :rlimit-count            258882)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6239
;  :arith-add-rows          69
;  :arith-assert-diseq      116
;  :arith-assert-lower      448
;  :arith-assert-upper      280
;  :arith-conflicts         123
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               392
;  :datatype-accessor-ax    376
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3072
;  :mk-clause               491
;  :num-allocs              6204480
;  :num-checks              594
;  :propagations            327
;  :quant-instantiations    155
;  :rlimit-count            259209)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6244
;  :arith-add-rows          69
;  :arith-assert-diseq      116
;  :arith-assert-lower      448
;  :arith-assert-upper      280
;  :arith-conflicts         123
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    377
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3073
;  :mk-clause               491
;  :num-allocs              6204480
;  :num-checks              595
;  :propagations            327
;  :quant-instantiations    155
;  :rlimit-count            259546)
(declare-const $k@175@08 $Perm)
(assert ($Perm.isReadVar $k@175@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@175@08 $Perm.No) (< $Perm.No $k@175@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6244
;  :arith-add-rows          69
;  :arith-assert-diseq      117
;  :arith-assert-lower      450
;  :arith-assert-upper      281
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               394
;  :datatype-accessor-ax    377
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3077
;  :mk-clause               493
;  :num-allocs              6204480
;  :num-checks              596
;  :propagations            328
;  :quant-instantiations    155
;  :rlimit-count            259745)
(assert (<= $Perm.No $k@175@08))
(assert (<= $k@175@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@175@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder.Full_adder_m == diz.Prc_half_adder_1_m
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6250
;  :arith-add-rows          69
;  :arith-assert-diseq      117
;  :arith-assert-lower      450
;  :arith-assert-upper      282
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    378
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3080
;  :mk-clause               493
;  :num-allocs              6204480
;  :num-checks              597
;  :propagations            328
;  :quant-instantiations    155
;  :rlimit-count            260178)
(push) ; 10
(assert (not (< $Perm.No $k@175@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6250
;  :arith-add-rows          69
;  :arith-assert-diseq      117
;  :arith-assert-lower      450
;  :arith-assert-upper      282
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               396
;  :datatype-accessor-ax    378
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3080
;  :mk-clause               493
;  :num-allocs              6204480
;  :num-checks              598
;  :propagations            328
;  :quant-instantiations    155
;  :rlimit-count            260226)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))
(declare-const $k@176@08 $Perm)
(assert ($Perm.isReadVar $k@176@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@176@08 $Perm.No) (< $Perm.No $k@176@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6258
;  :arith-add-rows          69
;  :arith-assert-diseq      118
;  :arith-assert-lower      452
;  :arith-assert-upper      283
;  :arith-conflicts         123
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    379
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3087
;  :mk-clause               495
;  :num-allocs              6204480
;  :num-checks              599
;  :propagations            329
;  :quant-instantiations    156
;  :rlimit-count            260857)
(assert (<= $Perm.No $k@176@08))
(assert (<= $k@176@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@176@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@176@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6264
;  :arith-add-rows          69
;  :arith-assert-diseq      118
;  :arith-assert-lower      452
;  :arith-assert-upper      284
;  :arith-conflicts         123
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               398
;  :datatype-accessor-ax    380
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3090
;  :mk-clause               495
;  :num-allocs              6204480
;  :num-checks              600
;  :propagations            329
;  :quant-instantiations    156
;  :rlimit-count            261310)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@176@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6270
;  :arith-add-rows          69
;  :arith-assert-diseq      118
;  :arith-assert-lower      452
;  :arith-assert-upper      284
;  :arith-conflicts         123
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               399
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3093
;  :mk-clause               495
;  :num-allocs              6204480
;  :num-checks              601
;  :propagations            329
;  :quant-instantiations    157
;  :rlimit-count            261794)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6270
;  :arith-add-rows          69
;  :arith-assert-diseq      118
;  :arith-assert-lower      452
;  :arith-assert-upper      284
;  :arith-conflicts         123
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               399
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3093
;  :mk-clause               495
;  :num-allocs              6204480
;  :num-checks              602
;  :propagations            329
;  :quant-instantiations    157
;  :rlimit-count            261807)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))
(declare-const $k@177@08 $Perm)
(assert ($Perm.isReadVar $k@177@08 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@177@08 $Perm.No) (< $Perm.No $k@177@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6275
;  :arith-add-rows          69
;  :arith-assert-diseq      119
;  :arith-assert-lower      454
;  :arith-assert-upper      285
;  :arith-conflicts         123
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               400
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3098
;  :mk-clause               497
;  :num-allocs              6204480
;  :num-checks              603
;  :propagations            330
;  :quant-instantiations    157
;  :rlimit-count            262337)
(assert (<= $Perm.No $k@177@08))
(assert (<= $k@177@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@177@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@177@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6281
;  :arith-add-rows          69
;  :arith-assert-diseq      119
;  :arith-assert-lower      454
;  :arith-assert-upper      286
;  :arith-conflicts         123
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    383
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3101
;  :mk-clause               497
;  :num-allocs              6204480
;  :num-checks              604
;  :propagations            330
;  :quant-instantiations    157
;  :rlimit-count            262820)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@177@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6287
;  :arith-add-rows          69
;  :arith-assert-diseq      119
;  :arith-assert-lower      454
;  :arith-assert-upper      286
;  :arith-conflicts         123
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    384
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3104
;  :mk-clause               497
;  :num-allocs              6204480
;  :num-checks              605
;  :propagations            330
;  :quant-instantiations    158
;  :rlimit-count            263336)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6287
;  :arith-add-rows          69
;  :arith-assert-diseq      119
;  :arith-assert-lower      454
;  :arith-assert-upper      286
;  :arith-conflicts         123
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    384
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3104
;  :mk-clause               497
;  :num-allocs              6204480
;  :num-checks              606
;  :propagations            330
;  :quant-instantiations    158
;  :rlimit-count            263349)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))
(declare-const $k@178@08 $Perm)
(assert ($Perm.isReadVar $k@178@08 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@178@08 $Perm.No) (< $Perm.No $k@178@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6292
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      456
;  :arith-assert-upper      287
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               403
;  :datatype-accessor-ax    385
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3109
;  :mk-clause               499
;  :num-allocs              6204480
;  :num-checks              607
;  :propagations            331
;  :quant-instantiations    158
;  :rlimit-count            263910)
(assert (<= $Perm.No $k@178@08))
(assert (<= $k@178@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@178@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@178@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6298
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      456
;  :arith-assert-upper      288
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    386
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3112
;  :mk-clause               499
;  :num-allocs              6204480
;  :num-checks              608
;  :propagations            331
;  :quant-instantiations    158
;  :rlimit-count            264423)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@178@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6304
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      456
;  :arith-assert-upper      288
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3115
;  :mk-clause               499
;  :num-allocs              6204480
;  :num-checks              609
;  :propagations            331
;  :quant-instantiations    159
;  :rlimit-count            264969)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6304
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      456
;  :arith-assert-upper      288
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3115
;  :mk-clause               499
;  :num-allocs              6204480
;  :num-checks              610
;  :propagations            331
;  :quant-instantiations    159
;  :rlimit-count            264982)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@177@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6310
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      456
;  :arith-assert-upper      288
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    388
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3117
;  :mk-clause               499
;  :num-allocs              6204480
;  :num-checks              611
;  :propagations            331
;  :quant-instantiations    159
;  :rlimit-count            265461)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
  diz@10@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6318
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      456
;  :arith-assert-upper      288
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.20
;  :mk-bool-var             3119
;  :mk-clause               499
;  :num-allocs              6204480
;  :num-checks              612
;  :propagations            331
;  :quant-instantiations    159
;  :rlimit-count            265935)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 10
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1 || diz.Prc_half_adder_1_m.Main_event_state[3] != -2
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1]
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6327
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      456
;  :arith-assert-upper      288
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3124
;  :mk-clause               499
;  :num-allocs              6430743
;  :num-checks              613
;  :propagations            331
;  :quant-instantiations    161
;  :rlimit-count            266484)
; [eval] -1
(push) ; 11
; [then-branch: 52 | First:(Second:(Second:(Second:($t@172@08))))[1] != -1 | live]
; [else-branch: 52 | First:(Second:(Second:(Second:($t@172@08))))[1] == -1 | live]
(push) ; 12
; [then-branch: 52 | First:(Second:(Second:(Second:($t@172@08))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
      1)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 52 | First:(Second:(Second:(Second:($t@172@08))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    1)
  (- 0 1)))
; [eval] diz.Prc_half_adder_1_m.Main_event_state[3] != -2
; [eval] diz.Prc_half_adder_1_m.Main_event_state[3]
(push) ; 13
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6328
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      456
;  :arith-assert-upper      288
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3125
;  :mk-clause               499
;  :num-allocs              6430743
;  :num-checks              614
;  :propagations            331
;  :quant-instantiations    161
;  :rlimit-count            266646)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [eval] !(diz.Prc_half_adder_1_m.Main_process_state[1] != -1 || diz.Prc_half_adder_1_m.Main_event_state[3] != -2)
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1 || diz.Prc_half_adder_1_m.Main_event_state[3] != -2
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1]
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6328
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      456
;  :arith-assert-upper      288
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3125
;  :mk-clause               499
;  :num-allocs              6430743
;  :num-checks              615
;  :propagations            331
;  :quant-instantiations    161
;  :rlimit-count            266666)
; [eval] -1
(push) ; 11
; [then-branch: 53 | First:(Second:(Second:(Second:($t@172@08))))[1] != -1 | live]
; [else-branch: 53 | First:(Second:(Second:(Second:($t@172@08))))[1] == -1 | live]
(push) ; 12
; [then-branch: 53 | First:(Second:(Second:(Second:($t@172@08))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
      1)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 53 | First:(Second:(Second:(Second:($t@172@08))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    1)
  (- 0 1)))
; [eval] diz.Prc_half_adder_1_m.Main_event_state[3] != -2
; [eval] diz.Prc_half_adder_1_m.Main_event_state[3]
(push) ; 13
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6329
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      456
;  :arith-assert-upper      288
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              381
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3126
;  :mk-clause               499
;  :num-allocs              6430743
;  :num-checks              616
;  :propagations            331
;  :quant-instantiations    161
;  :rlimit-count            266824)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
(push) ; 9
; Loop head block: Establish invariant
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6329
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      456
;  :arith-assert-upper      288
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              391
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3126
;  :mk-clause               499
;  :num-allocs              6430743
;  :num-checks              617
;  :propagations            331
;  :quant-instantiations    161
;  :rlimit-count            266842)
; [eval] diz.Prc_half_adder_1_m != null
(set-option :timeout 10)
(push) ; 10
(assert (not (= $t@148@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6329
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      456
;  :arith-assert-upper      288
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              391
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3126
;  :mk-clause               499
;  :num-allocs              6430743
;  :num-checks              618
;  :propagations            331
;  :quant-instantiations    161
;  :rlimit-count            266853)
; [eval] |diz.Prc_half_adder_1_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(set-option :timeout 0)
(push) ; 10
(assert (not (= (Seq_length __flatten_24__30@168@08) 3)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6329
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      456
;  :arith-assert-upper      288
;  :arith-conflicts         123
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              391
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3129
;  :mk-clause               499
;  :num-allocs              6430743
;  :num-checks              619
;  :propagations            331
;  :quant-instantiations    161
;  :rlimit-count            266927)
(assert (= (Seq_length __flatten_24__30@168@08) 3))
; [eval] |diz.Prc_half_adder_1_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(push) ; 10
(assert (not (= (Seq_length __flatten_27__33@171@08) 6)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6330
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      457
;  :arith-assert-upper      289
;  :arith-conflicts         123
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              391
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3135
;  :mk-clause               499
;  :num-allocs              6430743
;  :num-checks              620
;  :propagations            331
;  :quant-instantiations    161
;  :rlimit-count            267052)
(assert (= (Seq_length __flatten_27__33@171@08) 6))
; [eval] (forall i__36: Int :: { diz.Prc_half_adder_1_m.Main_process_state[i__36] } 0 <= i__36 && i__36 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__36] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36] && diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|)
(declare-const i__36@179@08 Int)
(push) ; 10
; [eval] 0 <= i__36 && i__36 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__36] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36] && diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= i__36 && i__36 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] 0 <= i__36
(push) ; 11
; [then-branch: 54 | 0 <= i__36@179@08 | live]
; [else-branch: 54 | !(0 <= i__36@179@08) | live]
(push) ; 12
; [then-branch: 54 | 0 <= i__36@179@08]
(assert (<= 0 i__36@179@08))
; [eval] i__36 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(pop) ; 12
(push) ; 12
; [else-branch: 54 | !(0 <= i__36@179@08)]
(assert (not (<= 0 i__36@179@08)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 55 | i__36@179@08 < |__flatten_24__30@168@08| && 0 <= i__36@179@08 | live]
; [else-branch: 55 | !(i__36@179@08 < |__flatten_24__30@168@08| && 0 <= i__36@179@08) | live]
(push) ; 12
; [then-branch: 55 | i__36@179@08 < |__flatten_24__30@168@08| && 0 <= i__36@179@08]
(assert (and (< i__36@179@08 (Seq_length __flatten_24__30@168@08)) (<= 0 i__36@179@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36] && diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36] == -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36]
(push) ; 13
(assert (not (>= i__36@179@08 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6331
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      459
;  :arith-assert-upper      291
;  :arith-conflicts         123
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              391
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3140
;  :mk-clause               499
;  :num-allocs              6430743
;  :num-checks              621
;  :propagations            331
;  :quant-instantiations    161
;  :rlimit-count            267239)
; [eval] -1
(push) ; 13
; [then-branch: 56 | __flatten_24__30@168@08[i__36@179@08] == -1 | live]
; [else-branch: 56 | __flatten_24__30@168@08[i__36@179@08] != -1 | live]
(push) ; 14
; [then-branch: 56 | __flatten_24__30@168@08[i__36@179@08] == -1]
(assert (= (Seq_index __flatten_24__30@168@08 i__36@179@08) (- 0 1)))
(pop) ; 14
(push) ; 14
; [else-branch: 56 | __flatten_24__30@168@08[i__36@179@08] != -1]
(assert (not (= (Seq_index __flatten_24__30@168@08 i__36@179@08) (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36] && diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36]
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36]
(push) ; 15
(assert (not (>= i__36@179@08 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6332
;  :arith-add-rows          69
;  :arith-assert-diseq      120
;  :arith-assert-lower      459
;  :arith-assert-upper      291
;  :arith-conflicts         123
;  :arith-eq-adapter        174
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              391
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3148
;  :mk-clause               509
;  :num-allocs              6430743
;  :num-checks              622
;  :propagations            331
;  :quant-instantiations    162
;  :rlimit-count            267402)
(push) ; 15
; [then-branch: 57 | 0 <= __flatten_24__30@168@08[i__36@179@08] | live]
; [else-branch: 57 | !(0 <= __flatten_24__30@168@08[i__36@179@08]) | live]
(push) ; 16
; [then-branch: 57 | 0 <= __flatten_24__30@168@08[i__36@179@08]]
(assert (<= 0 (Seq_index __flatten_24__30@168@08 i__36@179@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36]
(push) ; 17
(assert (not (>= i__36@179@08 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6332
;  :arith-add-rows          69
;  :arith-assert-diseq      121
;  :arith-assert-lower      462
;  :arith-assert-upper      291
;  :arith-conflicts         123
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         137
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1525
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1439
;  :del-clause              391
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3151
;  :mk-clause               510
;  :num-allocs              6430743
;  :num-checks              623
;  :propagations            331
;  :quant-instantiations    162
;  :rlimit-count            267475)
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(pop) ; 16
(push) ; 16
; [else-branch: 57 | !(0 <= __flatten_24__30@168@08[i__36@179@08])]
(assert (not (<= 0 (Seq_index __flatten_24__30@168@08 i__36@179@08))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 55 | !(i__36@179@08 < |__flatten_24__30@168@08| && 0 <= i__36@179@08)]
(assert (not
  (and (< i__36@179@08 (Seq_length __flatten_24__30@168@08)) (<= 0 i__36@179@08))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((i__36@179@08 Int)) (!
  (implies
    (and
      (< i__36@179@08 (Seq_length __flatten_24__30@168@08))
      (<= 0 i__36@179@08))
    (or
      (= (Seq_index __flatten_24__30@168@08 i__36@179@08) (- 0 1))
      (and
        (<
          (Seq_index __flatten_24__30@168@08 i__36@179@08)
          (Seq_length __flatten_27__33@171@08))
        (<= 0 (Seq_index __flatten_24__30@168@08 i__36@179@08)))))
  :pattern ((Seq_index __flatten_24__30@168@08 i__36@179@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6356
;  :arith-add-rows          69
;  :arith-assert-diseq      127
;  :arith-assert-lower      476
;  :arith-assert-upper      300
;  :arith-conflicts         125
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         139
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               418
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              451
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3190
;  :mk-clause               559
;  :num-allocs              6430743
;  :num-checks              624
;  :propagations            363
;  :quant-instantiations    166
;  :rlimit-count            268165)
(assert (forall ((i__36@179@08 Int)) (!
  (implies
    (and
      (< i__36@179@08 (Seq_length __flatten_24__30@168@08))
      (<= 0 i__36@179@08))
    (or
      (= (Seq_index __flatten_24__30@168@08 i__36@179@08) (- 0 1))
      (and
        (<
          (Seq_index __flatten_24__30@168@08 i__36@179@08)
          (Seq_length __flatten_27__33@171@08))
        (<= 0 (Seq_index __flatten_24__30@168@08 i__36@179@08)))))
  :pattern ((Seq_index __flatten_24__30@168@08 i__36@179@08))
  :qid |prog.l<no position>|)))
(declare-const $k@180@08 $Perm)
(assert ($Perm.isReadVar $k@180@08 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@180@08 $Perm.No) (< $Perm.No $k@180@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6356
;  :arith-add-rows          69
;  :arith-assert-diseq      128
;  :arith-assert-lower      478
;  :arith-assert-upper      301
;  :arith-conflicts         125
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         139
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               419
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              451
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3195
;  :mk-clause               561
;  :num-allocs              6430743
;  :num-checks              625
;  :propagations            364
;  :quant-instantiations    166
;  :rlimit-count            268636)
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (= (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          69
;  :arith-assert-diseq      128
;  :arith-assert-lower      479
;  :arith-assert-upper      301
;  :arith-conflicts         126
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         139
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3197
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              626
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            268747)
(assert (< $k@180@08 (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08)))
(assert (<=
  $Perm.No
  (- (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08) $k@180@08)))
(assert (<=
  (- (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08) $k@180@08)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08)
      $k@180@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder != null
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      481
;  :arith-assert-upper      303
;  :arith-conflicts         127
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         140
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3201
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              627
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269067)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      482
;  :arith-assert-upper      303
;  :arith-conflicts         128
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         141
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3202
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              628
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269179)
(push) ; 10
(assert (not (= $t@151@08 $t@161@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      482
;  :arith-assert-upper      303
;  :arith-conflicts         128
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         141
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3202
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              629
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269190)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      483
;  :arith-assert-upper      303
;  :arith-conflicts         129
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         142
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3203
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              630
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269302)
(push) ; 10
(assert (not (= $t@151@08 $t@161@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      483
;  :arith-assert-upper      303
;  :arith-conflicts         129
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         142
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3203
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              631
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269313)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      484
;  :arith-assert-upper      303
;  :arith-conflicts         130
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         143
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               424
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3204
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              632
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269425)
(push) ; 10
(assert (not (= $t@151@08 $t@161@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      484
;  :arith-assert-upper      303
;  :arith-conflicts         130
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         143
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               424
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3204
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              633
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269436)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      485
;  :arith-assert-upper      303
;  :arith-conflicts         131
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         144
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3205
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              634
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269548)
(push) ; 10
(assert (not (= $t@151@08 $t@161@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      485
;  :arith-assert-upper      303
;  :arith-conflicts         131
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         144
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3205
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              635
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269559)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      486
;  :arith-assert-upper      303
;  :arith-conflicts         132
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         145
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               426
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3206
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              636
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269671)
(push) ; 10
(assert (not (= $t@151@08 $t@161@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      486
;  :arith-assert-upper      303
;  :arith-conflicts         132
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         145
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               426
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3206
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              637
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269682)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      487
;  :arith-assert-upper      303
;  :arith-conflicts         133
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         146
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3207
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              638
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269794)
(push) ; 10
(assert (not (= $t@151@08 $t@161@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      487
;  :arith-assert-upper      303
;  :arith-conflicts         133
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         146
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3207
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              639
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269805)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      488
;  :arith-assert-upper      303
;  :arith-conflicts         134
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         147
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3208
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              640
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            269917)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      489
;  :arith-assert-upper      303
;  :arith-conflicts         135
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         148
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3209
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              641
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            270029)
(push) ; 10
(assert (not (= __flatten_7__14@131@08 $t@161@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      489
;  :arith-assert-upper      303
;  :arith-conflicts         135
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         148
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3209
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              642
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            270040)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      490
;  :arith-assert-upper      303
;  :arith-conflicts         136
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         149
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3210
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              643
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            270152)
(push) ; 10
(assert (not (= $t@151@08 $t@161@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      128
;  :arith-assert-lower      490
;  :arith-assert-upper      303
;  :arith-conflicts         136
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         149
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3210
;  :mk-clause               563
;  :num-allocs              6430743
;  :num-checks              644
;  :propagations            365
;  :quant-instantiations    166
;  :rlimit-count            270163)
(declare-const $k@181@08 $Perm)
(assert ($Perm.isReadVar $k@181@08 $Perm.Write))
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      129
;  :arith-assert-lower      493
;  :arith-assert-upper      304
;  :arith-conflicts         137
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         150
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3215
;  :mk-clause               565
;  :num-allocs              6430743
;  :num-checks              645
;  :propagations            366
;  :quant-instantiations    166
;  :rlimit-count            270423)
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@181@08 $Perm.No) (< $Perm.No $k@181@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      129
;  :arith-assert-lower      493
;  :arith-assert-upper      304
;  :arith-conflicts         137
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         150
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3215
;  :mk-clause               565
;  :num-allocs              6430743
;  :num-checks              646
;  :propagations            366
;  :quant-instantiations    166
;  :rlimit-count            270473)
(set-option :timeout 10)
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
  $t@161@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6357
;  :arith-add-rows          71
;  :arith-assert-diseq      129
;  :arith-assert-lower      493
;  :arith-assert-upper      304
;  :arith-conflicts         137
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         150
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              453
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3215
;  :mk-clause               565
;  :num-allocs              6430743
;  :num-checks              647
;  :propagations            366
;  :quant-instantiations    166
;  :rlimit-count            270484)
(push) ; 10
(assert (not (not
  (= (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6358
;  :arith-add-rows          72
;  :arith-assert-diseq      129
;  :arith-assert-lower      494
;  :arith-assert-upper      304
;  :arith-conflicts         138
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         150
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              455
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3217
;  :mk-clause               567
;  :num-allocs              6430743
;  :num-checks              648
;  :propagations            367
;  :quant-instantiations    166
;  :rlimit-count            270613)
(assert (< $k@181@08 (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08)))
(assert (<=
  $Perm.No
  (- (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08) $k@181@08)))
(assert (<=
  (- (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08) $k@181@08)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08)
      $k@181@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
      $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder.Full_adder_m == diz.Prc_half_adder_1_m
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@119@08 $k@139@08) $k@144@08) $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6358
;  :arith-add-rows          74
;  :arith-assert-diseq      129
;  :arith-assert-lower      496
;  :arith-assert-upper      306
;  :arith-conflicts         139
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         151
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              455
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3221
;  :mk-clause               567
;  :num-allocs              6430743
;  :num-checks              649
;  :propagations            367
;  :quant-instantiations    166
;  :rlimit-count            270933)
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
  $t@161@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6358
;  :arith-add-rows          74
;  :arith-assert-diseq      129
;  :arith-assert-lower      496
;  :arith-assert-upper      306
;  :arith-conflicts         139
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         151
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              455
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3221
;  :mk-clause               567
;  :num-allocs              6430743
;  :num-checks              650
;  :propagations            367
;  :quant-instantiations    166
;  :rlimit-count            270944)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@120@08 $k@137@08) $k@140@08) $k@147@08) $k@152@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6358
;  :arith-add-rows          74
;  :arith-assert-diseq      129
;  :arith-assert-lower      497
;  :arith-assert-upper      306
;  :arith-conflicts         140
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         152
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              455
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3222
;  :mk-clause               567
;  :num-allocs              6430743
;  :num-checks              651
;  :propagations            367
;  :quant-instantiations    166
;  :rlimit-count            271056)
(set-option :timeout 0)
(push) ; 10
(assert (not (= $t@153@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6358
;  :arith-add-rows          75
;  :arith-assert-diseq      129
;  :arith-assert-lower      498
;  :arith-assert-upper      306
;  :arith-conflicts         141
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         153
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              455
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3222
;  :mk-clause               567
;  :num-allocs              6430743
;  :num-checks              652
;  :propagations            368
;  :quant-instantiations    166
;  :rlimit-count            271135)
(assert (= $t@153@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))))
(declare-const $k@182@08 $Perm)
(assert ($Perm.isReadVar $k@182@08 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@182@08 $Perm.No) (< $Perm.No $k@182@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6360
;  :arith-add-rows          75
;  :arith-assert-diseq      130
;  :arith-assert-lower      500
;  :arith-assert-upper      307
;  :arith-conflicts         141
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         153
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              455
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3226
;  :mk-clause               569
;  :num-allocs              6430743
;  :num-checks              653
;  :propagations            369
;  :quant-instantiations    166
;  :rlimit-count            271365)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= (+ (- $k@121@08 $k@141@08) $k@154@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6361
;  :arith-add-rows          75
;  :arith-assert-diseq      130
;  :arith-assert-lower      500
;  :arith-assert-upper      308
;  :arith-conflicts         142
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         153
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               438
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              457
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3228
;  :mk-clause               571
;  :num-allocs              6430743
;  :num-checks              654
;  :propagations            370
;  :quant-instantiations    166
;  :rlimit-count            271443)
(assert (< $k@182@08 (+ (- $k@121@08 $k@141@08) $k@154@08)))
(assert (<= $Perm.No (- (+ (- $k@121@08 $k@141@08) $k@154@08) $k@182@08)))
(assert (<= (- (+ (- $k@121@08 $k@141@08) $k@154@08) $k@182@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@121@08 $k@141@08) $k@154@08) $k@182@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_prc != null
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@121@08 $k@141@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6361
;  :arith-add-rows          76
;  :arith-assert-diseq      130
;  :arith-assert-lower      502
;  :arith-assert-upper      310
;  :arith-conflicts         143
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         154
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               439
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              457
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3232
;  :mk-clause               571
;  :num-allocs              6430743
;  :num-checks              655
;  :propagations            370
;  :quant-instantiations    166
;  :rlimit-count            271708)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6361
;  :arith-add-rows          76
;  :arith-assert-diseq      130
;  :arith-assert-lower      502
;  :arith-assert-upper      310
;  :arith-conflicts         143
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         154
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               439
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              457
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3232
;  :mk-clause               571
;  :num-allocs              6430743
;  :num-checks              656
;  :propagations            370
;  :quant-instantiations    166
;  :rlimit-count            271721)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@121@08 $k@141@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6361
;  :arith-add-rows          76
;  :arith-assert-diseq      130
;  :arith-assert-lower      502
;  :arith-assert-upper      311
;  :arith-conflicts         144
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               440
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              457
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3233
;  :mk-clause               571
;  :num-allocs              6430743
;  :num-checks              657
;  :propagations            370
;  :quant-instantiations    166
;  :rlimit-count            271799)
(declare-const $k@183@08 $Perm)
(assert ($Perm.isReadVar $k@183@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@183@08 $Perm.No) (< $Perm.No $k@183@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6361
;  :arith-add-rows          76
;  :arith-assert-diseq      131
;  :arith-assert-lower      504
;  :arith-assert-upper      312
;  :arith-conflicts         144
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              457
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3237
;  :mk-clause               573
;  :num-allocs              6430743
;  :num-checks              658
;  :propagations            371
;  :quant-instantiations    166
;  :rlimit-count            271997)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= (+ (- $k@122@08 $k@142@08) $k@156@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6362
;  :arith-add-rows          76
;  :arith-assert-diseq      131
;  :arith-assert-lower      504
;  :arith-assert-upper      313
;  :arith-conflicts         145
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              459
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3239
;  :mk-clause               575
;  :num-allocs              6430743
;  :num-checks              659
;  :propagations            372
;  :quant-instantiations    166
;  :rlimit-count            272077)
(assert (< $k@183@08 (+ (- $k@122@08 $k@142@08) $k@156@08)))
(assert (<= $Perm.No (- (+ (- $k@122@08 $k@142@08) $k@156@08) $k@183@08)))
(assert (<= (- (+ (- $k@122@08 $k@142@08) $k@156@08) $k@183@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@122@08 $k@142@08) $k@156@08) $k@183@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 != null
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@122@08 $k@142@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6362
;  :arith-add-rows          78
;  :arith-assert-diseq      131
;  :arith-assert-lower      506
;  :arith-assert-upper      315
;  :arith-conflicts         146
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         156
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              459
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3243
;  :mk-clause               575
;  :num-allocs              6430743
;  :num-checks              660
;  :propagations            372
;  :quant-instantiations    166
;  :rlimit-count            272346)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6362
;  :arith-add-rows          78
;  :arith-assert-diseq      131
;  :arith-assert-lower      506
;  :arith-assert-upper      315
;  :arith-conflicts         146
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         156
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              459
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3243
;  :mk-clause               575
;  :num-allocs              6430743
;  :num-checks              661
;  :propagations            372
;  :quant-instantiations    166
;  :rlimit-count            272359)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@122@08 $k@142@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6362
;  :arith-add-rows          78
;  :arith-assert-diseq      131
;  :arith-assert-lower      506
;  :arith-assert-upper      316
;  :arith-conflicts         147
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         157
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               444
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              459
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3244
;  :mk-clause               575
;  :num-allocs              6430743
;  :num-checks              662
;  :propagations            372
;  :quant-instantiations    166
;  :rlimit-count            272440)
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))))))))))))))))))
  $t@157@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6362
;  :arith-add-rows          78
;  :arith-assert-diseq      131
;  :arith-assert-lower      506
;  :arith-assert-upper      316
;  :arith-conflicts         147
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         157
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               444
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1528
;  :datatype-occurs-check   450
;  :datatype-splits         1266
;  :decisions               1448
;  :del-clause              459
;  :final-checks            87
;  :max-generation          2
;  :max-memory              5.36
;  :memory                  5.30
;  :mk-bool-var             3244
;  :mk-clause               575
;  :num-allocs              6430743
;  :num-checks              663
;  :propagations            372
;  :quant-instantiations    166
;  :rlimit-count            272451)
(push) ; 10
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6614
;  :arith-add-rows          78
;  :arith-assert-diseq      131
;  :arith-assert-lower      506
;  :arith-assert-upper      316
;  :arith-conflicts         147
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         157
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               444
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 1607
;  :datatype-occurs-check   464
;  :datatype-splits         1342
;  :decisions               1524
;  :del-clause              459
;  :final-checks            90
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.41
;  :mk-bool-var             3320
;  :mk-clause               575
;  :num-allocs              6664188
;  :num-checks              664
;  :propagations            378
;  :quant-instantiations    167
;  :rlimit-count            274300
;  :time                    0.00)
(declare-const $k@184@08 $Perm)
(assert ($Perm.isReadVar $k@184@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@184@08 $Perm.No) (< $Perm.No $k@184@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6614
;  :arith-add-rows          78
;  :arith-assert-diseq      132
;  :arith-assert-lower      508
;  :arith-assert-upper      317
;  :arith-conflicts         147
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         157
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               445
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 1607
;  :datatype-occurs-check   464
;  :datatype-splits         1342
;  :decisions               1524
;  :del-clause              459
;  :final-checks            90
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.41
;  :mk-bool-var             3324
;  :mk-clause               577
;  :num-allocs              6664188
;  :num-checks              665
;  :propagations            379
;  :quant-instantiations    167
;  :rlimit-count            274499)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= (+ (- $k@123@08 $k@143@08) $k@158@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6615
;  :arith-add-rows          78
;  :arith-assert-diseq      132
;  :arith-assert-lower      508
;  :arith-assert-upper      318
;  :arith-conflicts         148
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         157
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               446
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 1607
;  :datatype-occurs-check   464
;  :datatype-splits         1342
;  :decisions               1524
;  :del-clause              461
;  :final-checks            90
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.41
;  :mk-bool-var             3326
;  :mk-clause               579
;  :num-allocs              6664188
;  :num-checks              666
;  :propagations            380
;  :quant-instantiations    167
;  :rlimit-count            274579)
(assert (< $k@184@08 (+ (- $k@123@08 $k@143@08) $k@158@08)))
(assert (<= $Perm.No (- (+ (- $k@123@08 $k@143@08) $k@158@08) $k@184@08)))
(assert (<= (- (+ (- $k@123@08 $k@143@08) $k@158@08) $k@184@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@123@08 $k@143@08) $k@158@08) $k@184@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder2 != null
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@123@08 $k@143@08) $k@158@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6615
;  :arith-add-rows          80
;  :arith-assert-diseq      132
;  :arith-assert-lower      510
;  :arith-assert-upper      320
;  :arith-conflicts         149
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         158
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               447
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 1607
;  :datatype-occurs-check   464
;  :datatype-splits         1342
;  :decisions               1524
;  :del-clause              461
;  :final-checks            90
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.41
;  :mk-bool-var             3330
;  :mk-clause               579
;  :num-allocs              6664188
;  :num-checks              667
;  :propagations            380
;  :quant-instantiations    167
;  :rlimit-count            274848)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6615
;  :arith-add-rows          80
;  :arith-assert-diseq      132
;  :arith-assert-lower      510
;  :arith-assert-upper      320
;  :arith-conflicts         149
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         158
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               447
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 1607
;  :datatype-occurs-check   464
;  :datatype-splits         1342
;  :decisions               1524
;  :del-clause              461
;  :final-checks            90
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.41
;  :mk-bool-var             3330
;  :mk-clause               579
;  :num-allocs              6664188
;  :num-checks              668
;  :propagations            380
;  :quant-instantiations    167
;  :rlimit-count            274861)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@123@08 $k@143@08) $k@158@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6615
;  :arith-add-rows          80
;  :arith-assert-diseq      132
;  :arith-assert-lower      510
;  :arith-assert-upper      321
;  :arith-conflicts         150
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         159
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               448
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 1607
;  :datatype-occurs-check   464
;  :datatype-splits         1342
;  :decisions               1524
;  :del-clause              461
;  :final-checks            90
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.41
;  :mk-bool-var             3331
;  :mk-clause               579
;  :num-allocs              6664188
;  :num-checks              669
;  :propagations            380
;  :quant-instantiations    167
;  :rlimit-count            274942)
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@122@08 $k@142@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6615
;  :arith-add-rows          80
;  :arith-assert-diseq      132
;  :arith-assert-lower      510
;  :arith-assert-upper      322
;  :arith-conflicts         151
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 1607
;  :datatype-occurs-check   464
;  :datatype-splits         1342
;  :decisions               1524
;  :del-clause              461
;  :final-checks            90
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.41
;  :mk-bool-var             3332
;  :mk-clause               579
;  :num-allocs              6664188
;  :num-checks              670
;  :propagations            380
;  :quant-instantiations    167
;  :rlimit-count            275023)
(set-option :timeout 0)
(push) ; 10
(assert (not (= $t@157@08 diz@10@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6615
;  :arith-add-rows          80
;  :arith-assert-diseq      132
;  :arith-assert-lower      510
;  :arith-assert-upper      322
;  :arith-conflicts         151
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 1607
;  :datatype-occurs-check   464
;  :datatype-splits         1342
;  :decisions               1524
;  :del-clause              461
;  :final-checks            90
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.41
;  :mk-bool-var             3332
;  :mk-clause               579
;  :num-allocs              6664188
;  :num-checks              671
;  :propagations            380
;  :quant-instantiations    167
;  :rlimit-count            275034)
(assert (= $t@157@08 diz@10@08))
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6615
;  :arith-add-rows          80
;  :arith-assert-diseq      132
;  :arith-assert-lower      510
;  :arith-assert-upper      322
;  :arith-conflicts         151
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 1607
;  :datatype-occurs-check   464
;  :datatype-splits         1342
;  :decisions               1524
;  :del-clause              461
;  :final-checks            90
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.41
;  :mk-bool-var             3332
;  :mk-clause               579
;  :num-allocs              6664188
;  :num-checks              672
;  :propagations            380
;  :quant-instantiations    167
;  :rlimit-count            275050)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 10
(assert ($Perm.isReadVar $k@174@08 $Perm.Write))
(assert ($Perm.isReadVar $k@175@08 $Perm.Write))
(assert ($Perm.isReadVar $k@176@08 $Perm.Write))
(assert ($Perm.isReadVar $k@177@08 $Perm.Write))
(assert ($Perm.isReadVar $k@178@08 $Perm.Write))
(assert (= $t@172@08 ($Snap.combine ($Snap.first $t@172@08) ($Snap.second $t@172@08))))
(assert (=
  ($Snap.second $t@172@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@172@08))
    ($Snap.second ($Snap.second $t@172@08)))))
(assert (= ($Snap.first ($Snap.second $t@172@08)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@172@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@172@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@172@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))
  $Snap.unit))
(assert (forall ((i__36@173@08 Int)) (!
  (implies
    (and
      (<
        i__36@173@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
      (<= 0 i__36@173@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
          i__36@173@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
            i__36@173@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
            i__36@173@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    i__36@173@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))
(assert (<= $Perm.No $k@174@08))
(assert (<= $k@174@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@174@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))
(assert (<= $Perm.No $k@175@08))
(assert (<= $k@175@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@175@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))
(assert (<= $Perm.No $k@176@08))
(assert (<= $k@176@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@176@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@177@08))
(assert (<= $k@177@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@177@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@178@08))
(assert (<= $k@178@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@178@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
  diz@10@08))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1 || diz.Prc_half_adder_1_m.Main_event_state[3] != -2
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7669
;  :arith-add-rows          80
;  :arith-assert-diseq      137
;  :arith-assert-lower      524
;  :arith-assert-upper      334
;  :arith-conflicts         151
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    438
;  :datatype-constructor-ax 1868
;  :datatype-occurs-check   496
;  :datatype-splits         1534
;  :decisions               1777
;  :del-clause              473
;  :final-checks            96
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3621
;  :mk-clause               592
;  :num-allocs              6902085
;  :num-checks              675
;  :propagations            398
;  :quant-instantiations    181
;  :rlimit-count            285534)
; [eval] -1
(push) ; 11
; [then-branch: 58 | First:(Second:(Second:(Second:($t@172@08))))[1] != -1 | live]
; [else-branch: 58 | First:(Second:(Second:(Second:($t@172@08))))[1] == -1 | live]
(push) ; 12
; [then-branch: 58 | First:(Second:(Second:(Second:($t@172@08))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
      1)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 58 | First:(Second:(Second:(Second:($t@172@08))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    1)
  (- 0 1)))
; [eval] diz.Prc_half_adder_1_m.Main_event_state[3] != -2
; [eval] diz.Prc_half_adder_1_m.Main_event_state[3]
(push) ; 13
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7670
;  :arith-add-rows          80
;  :arith-assert-diseq      137
;  :arith-assert-lower      524
;  :arith-assert-upper      334
;  :arith-conflicts         151
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    438
;  :datatype-constructor-ax 1868
;  :datatype-occurs-check   496
;  :datatype-splits         1534
;  :decisions               1777
;  :del-clause              473
;  :final-checks            96
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3622
;  :mk-clause               592
;  :num-allocs              6902085
;  :num-checks              676
;  :propagations            398
;  :quant-instantiations    181
;  :rlimit-count            285692)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
          3)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8163
;  :arith-add-rows          80
;  :arith-assert-diseq      138
;  :arith-assert-lower      527
;  :arith-assert-upper      335
;  :arith-conflicts         151
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    446
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   518
;  :datatype-splits         1634
;  :decisions               1922
;  :del-clause              480
;  :final-checks            100
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3739
;  :mk-clause               599
;  :num-allocs              6902085
;  :num-checks              677
;  :propagations            407
;  :quant-instantiations    183
;  :rlimit-count            288904
;  :time                    0.00)
(push) ; 11
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
        3)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      138
;  :arith-assert-lower      527
;  :arith-assert-upper      335
;  :arith-conflicts         151
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              480
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3837
;  :mk-clause               599
;  :num-allocs              6902085
;  :num-checks              678
;  :propagations            414
;  :quant-instantiations    184
;  :rlimit-count            291312
;  :time                    0.00)
; [then-branch: 59 | First:(Second:(Second:(Second:($t@172@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@172@08))))))[3] != -2 | live]
; [else-branch: 59 | !(First:(Second:(Second:(Second:($t@172@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@172@08))))))[3] != -2) | live]
(push) ; 11
; [then-branch: 59 | First:(Second:(Second:(Second:($t@172@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@172@08))))))[3] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
        3)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@185@08 Int)
(push) ; 12
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 13
; [then-branch: 60 | 0 <= i@185@08 | live]
; [else-branch: 60 | !(0 <= i@185@08) | live]
(push) ; 14
; [then-branch: 60 | 0 <= i@185@08]
(assert (<= 0 i@185@08))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 60 | !(0 <= i@185@08)]
(assert (not (<= 0 i@185@08)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 61 | i@185@08 < |First:(Second:(Second:(Second:($t@172@08))))| && 0 <= i@185@08 | live]
; [else-branch: 61 | !(i@185@08 < |First:(Second:(Second:(Second:($t@172@08))))| && 0 <= i@185@08) | live]
(push) ; 14
; [then-branch: 61 | i@185@08 < |First:(Second:(Second:(Second:($t@172@08))))| && 0 <= i@185@08]
(assert (and
  (<
    i@185@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
  (<= 0 i@185@08)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@185@08 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      138
;  :arith-assert-lower      528
;  :arith-assert-upper      336
;  :arith-conflicts         151
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              480
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3841
;  :mk-clause               600
;  :num-allocs              6902085
;  :num-checks              679
;  :propagations            414
;  :quant-instantiations    184
;  :rlimit-count            291678)
; [eval] -1
(push) ; 15
; [then-branch: 62 | First:(Second:(Second:(Second:($t@172@08))))[i@185@08] == -1 | live]
; [else-branch: 62 | First:(Second:(Second:(Second:($t@172@08))))[i@185@08] != -1 | live]
(push) ; 16
; [then-branch: 62 | First:(Second:(Second:(Second:($t@172@08))))[i@185@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    i@185@08)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 62 | First:(Second:(Second:(Second:($t@172@08))))[i@185@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
      i@185@08)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 17
(assert (not (>= i@185@08 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      139
;  :arith-assert-lower      531
;  :arith-assert-upper      337
;  :arith-conflicts         151
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              480
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3847
;  :mk-clause               604
;  :num-allocs              6902085
;  :num-checks              680
;  :propagations            416
;  :quant-instantiations    185
;  :rlimit-count            291910)
(push) ; 17
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@172@08))))[i@185@08] | live]
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@172@08))))[i@185@08]) | live]
(push) ; 18
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@172@08))))[i@185@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    i@185@08)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 19
(assert (not (>= i@185@08 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      139
;  :arith-assert-lower      531
;  :arith-assert-upper      337
;  :arith-conflicts         151
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              480
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3847
;  :mk-clause               604
;  :num-allocs              6902085
;  :num-checks              681
;  :propagations            416
;  :quant-instantiations    185
;  :rlimit-count            292024)
; [eval] |diz.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@172@08))))[i@185@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
      i@185@08))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 61 | !(i@185@08 < |First:(Second:(Second:(Second:($t@172@08))))| && 0 <= i@185@08)]
(assert (not
  (and
    (<
      i@185@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
    (<= 0 i@185@08))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((i@185@08 Int)) (!
  (implies
    (and
      (<
        i@185@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
      (<= 0 i@185@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
          i@185@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
            i@185@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
            i@185@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    i@185@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      141
;  :arith-assert-lower      532
;  :arith-assert-upper      338
;  :arith-conflicts         151
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               453
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3855
;  :mk-clause               618
;  :num-allocs              6902085
;  :num-checks              682
;  :propagations            418
;  :quant-instantiations    186
;  :rlimit-count            292470)
(assert (forall ((i@185@08 Int)) (!
  (implies
    (and
      (<
        i@185@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
      (<= 0 i@185@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
          i@185@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
            i@185@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
            i@185@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    i@185@08))
  :qid |prog.l<no position>|)))
(declare-const $k@186@08 $Perm)
(assert ($Perm.isReadVar $k@186@08 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@186@08 $Perm.No) (< $Perm.No $k@186@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      142
;  :arith-assert-lower      534
;  :arith-assert-upper      339
;  :arith-conflicts         151
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3860
;  :mk-clause               620
;  :num-allocs              6902085
;  :num-checks              683
;  :propagations            419
;  :quant-instantiations    186
;  :rlimit-count            293030)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@174@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      142
;  :arith-assert-lower      534
;  :arith-assert-upper      339
;  :arith-conflicts         151
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3860
;  :mk-clause               620
;  :num-allocs              6902085
;  :num-checks              684
;  :propagations            419
;  :quant-instantiations    186
;  :rlimit-count            293041)
(assert (< $k@186@08 $k@174@08))
(assert (<= $Perm.No (- $k@174@08 $k@186@08)))
(assert (<= (- $k@174@08 $k@186@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@174@08 $k@186@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
; [eval] diz.Main_adder != null
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      142
;  :arith-assert-lower      536
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3863
;  :mk-clause               620
;  :num-allocs              6902085
;  :num-checks              685
;  :propagations            419
;  :quant-instantiations    186
;  :rlimit-count            293261)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      142
;  :arith-assert-lower      536
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3863
;  :mk-clause               620
;  :num-allocs              6902085
;  :num-checks              686
;  :propagations            419
;  :quant-instantiations    186
;  :rlimit-count            293309)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      142
;  :arith-assert-lower      536
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               457
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3863
;  :mk-clause               620
;  :num-allocs              6902085
;  :num-checks              687
;  :propagations            419
;  :quant-instantiations    186
;  :rlimit-count            293357)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      142
;  :arith-assert-lower      536
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               458
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3863
;  :mk-clause               620
;  :num-allocs              6902085
;  :num-checks              688
;  :propagations            419
;  :quant-instantiations    186
;  :rlimit-count            293405)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      142
;  :arith-assert-lower      536
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3863
;  :mk-clause               620
;  :num-allocs              6902085
;  :num-checks              689
;  :propagations            419
;  :quant-instantiations    186
;  :rlimit-count            293453)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      142
;  :arith-assert-lower      536
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               460
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3863
;  :mk-clause               620
;  :num-allocs              6902085
;  :num-checks              690
;  :propagations            419
;  :quant-instantiations    186
;  :rlimit-count            293501)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      142
;  :arith-assert-lower      536
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               461
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3863
;  :mk-clause               620
;  :num-allocs              6902085
;  :num-checks              691
;  :propagations            419
;  :quant-instantiations    186
;  :rlimit-count            293549)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      142
;  :arith-assert-lower      536
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               462
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3863
;  :mk-clause               620
;  :num-allocs              6902085
;  :num-checks              692
;  :propagations            419
;  :quant-instantiations    186
;  :rlimit-count            293597)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      142
;  :arith-assert-lower      536
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               463
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3863
;  :mk-clause               620
;  :num-allocs              6902085
;  :num-checks              693
;  :propagations            419
;  :quant-instantiations    186
;  :rlimit-count            293645)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      142
;  :arith-assert-lower      536
;  :arith-assert-upper      340
;  :arith-conflicts         151
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3863
;  :mk-clause               620
;  :num-allocs              6902085
;  :num-checks              694
;  :propagations            419
;  :quant-instantiations    186
;  :rlimit-count            293693)
(declare-const $k@187@08 $Perm)
(assert ($Perm.isReadVar $k@187@08 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      143
;  :arith-assert-lower      538
;  :arith-assert-upper      341
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3867
;  :mk-clause               622
;  :num-allocs              6902085
;  :num-checks              695
;  :propagations            420
;  :quant-instantiations    186
;  :rlimit-count            293889)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@187@08 $Perm.No) (< $Perm.No $k@187@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      143
;  :arith-assert-lower      538
;  :arith-assert-upper      341
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3867
;  :mk-clause               622
;  :num-allocs              6902085
;  :num-checks              696
;  :propagations            420
;  :quant-instantiations    186
;  :rlimit-count            293939)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@175@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      143
;  :arith-assert-lower      538
;  :arith-assert-upper      341
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3867
;  :mk-clause               622
;  :num-allocs              6902085
;  :num-checks              697
;  :propagations            420
;  :quant-instantiations    186
;  :rlimit-count            293950)
(assert (< $k@187@08 $k@175@08))
(assert (<= $Perm.No (- $k@175@08 $k@187@08)))
(assert (<= (- $k@175@08 $k@187@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@175@08 $k@187@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
      $Ref.null))))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      143
;  :arith-assert-lower      540
;  :arith-assert-upper      342
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            116
;  :binary-propagations     22
;  :conflicts               467
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3870
;  :mk-clause               622
;  :num-allocs              6902085
;  :num-checks              698
;  :propagations            420
;  :quant-instantiations    186
;  :rlimit-count            294164)
(push) ; 12
(assert (not (< $Perm.No $k@175@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      143
;  :arith-assert-lower      540
;  :arith-assert-upper      342
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            116
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3870
;  :mk-clause               622
;  :num-allocs              6902085
;  :num-checks              699
;  :propagations            420
;  :quant-instantiations    186
;  :rlimit-count            294212)
(declare-const $k@188@08 $Perm)
(assert ($Perm.isReadVar $k@188@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@188@08 $Perm.No) (< $Perm.No $k@188@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      144
;  :arith-assert-lower      542
;  :arith-assert-upper      343
;  :arith-conflicts         151
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         160
;  :arith-pivots            116
;  :binary-propagations     22
;  :conflicts               469
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3874
;  :mk-clause               624
;  :num-allocs              6902085
;  :num-checks              700
;  :propagations            421
;  :quant-instantiations    186
;  :rlimit-count            294410)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@176@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      144
;  :arith-assert-lower      542
;  :arith-assert-upper      343
;  :arith-conflicts         151
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         160
;  :arith-pivots            116
;  :binary-propagations     22
;  :conflicts               469
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3874
;  :mk-clause               624
;  :num-allocs              6902085
;  :num-checks              701
;  :propagations            421
;  :quant-instantiations    186
;  :rlimit-count            294421)
(assert (< $k@188@08 $k@176@08))
(assert (<= $Perm.No (- $k@176@08 $k@188@08)))
(assert (<= (- $k@176@08 $k@188@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@176@08 $k@188@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
; [eval] diz.Main_adder_prc != null
(push) ; 12
(assert (not (< $Perm.No $k@176@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      144
;  :arith-assert-lower      544
;  :arith-assert-upper      344
;  :arith-conflicts         151
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         160
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               470
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3877
;  :mk-clause               624
;  :num-allocs              6902085
;  :num-checks              702
;  :propagations            421
;  :quant-instantiations    186
;  :rlimit-count            294641)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      144
;  :arith-assert-lower      544
;  :arith-assert-upper      344
;  :arith-conflicts         151
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         160
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               470
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3877
;  :mk-clause               624
;  :num-allocs              6902085
;  :num-checks              703
;  :propagations            421
;  :quant-instantiations    186
;  :rlimit-count            294654)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@176@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      144
;  :arith-assert-lower      544
;  :arith-assert-upper      344
;  :arith-conflicts         151
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         160
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               471
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3877
;  :mk-clause               624
;  :num-allocs              6902085
;  :num-checks              704
;  :propagations            421
;  :quant-instantiations    186
;  :rlimit-count            294702)
(declare-const $k@189@08 $Perm)
(assert ($Perm.isReadVar $k@189@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@189@08 $Perm.No) (< $Perm.No $k@189@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      145
;  :arith-assert-lower      546
;  :arith-assert-upper      345
;  :arith-conflicts         151
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         160
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3881
;  :mk-clause               626
;  :num-allocs              6902085
;  :num-checks              705
;  :propagations            422
;  :quant-instantiations    186
;  :rlimit-count            294900)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@177@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      145
;  :arith-assert-lower      546
;  :arith-assert-upper      345
;  :arith-conflicts         151
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         160
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3881
;  :mk-clause               626
;  :num-allocs              6902085
;  :num-checks              706
;  :propagations            422
;  :quant-instantiations    186
;  :rlimit-count            294911)
(assert (< $k@189@08 $k@177@08))
(assert (<= $Perm.No (- $k@177@08 $k@189@08)))
(assert (<= (- $k@177@08 $k@189@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@177@08 $k@189@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
; [eval] diz.Main_adder_half_adder1 != null
(push) ; 12
(assert (not (< $Perm.No $k@177@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      145
;  :arith-assert-lower      548
;  :arith-assert-upper      346
;  :arith-conflicts         151
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               473
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3884
;  :mk-clause               626
;  :num-allocs              6902085
;  :num-checks              707
;  :propagations            422
;  :quant-instantiations    186
;  :rlimit-count            295131)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      145
;  :arith-assert-lower      548
;  :arith-assert-upper      346
;  :arith-conflicts         151
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               473
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3884
;  :mk-clause               626
;  :num-allocs              6902085
;  :num-checks              708
;  :propagations            422
;  :quant-instantiations    186
;  :rlimit-count            295144)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@177@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8501
;  :arith-add-rows          80
;  :arith-assert-diseq      145
;  :arith-assert-lower      548
;  :arith-assert-upper      346
;  :arith-conflicts         151
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               474
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   534
;  :datatype-splits         1730
;  :decisions               2017
;  :del-clause              498
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3884
;  :mk-clause               626
;  :num-allocs              6902085
;  :num-checks              709
;  :propagations            422
;  :quant-instantiations    186
;  :rlimit-count            295192)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8994
;  :arith-add-rows          80
;  :arith-assert-diseq      146
;  :arith-assert-lower      551
;  :arith-assert-upper      347
;  :arith-conflicts         151
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               476
;  :datatype-accessor-ax    460
;  :datatype-constructor-ax 2267
;  :datatype-occurs-check   556
;  :datatype-splits         1830
;  :decisions               2162
;  :del-clause              504
;  :final-checks            107
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             3999
;  :mk-clause               632
;  :num-allocs              6902085
;  :num-checks              710
;  :propagations            431
;  :quant-instantiations    189
;  :rlimit-count            298214
;  :time                    0.00)
(declare-const $k@190@08 $Perm)
(assert ($Perm.isReadVar $k@190@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@190@08 $Perm.No) (< $Perm.No $k@190@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8994
;  :arith-add-rows          80
;  :arith-assert-diseq      147
;  :arith-assert-lower      553
;  :arith-assert-upper      348
;  :arith-conflicts         151
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               477
;  :datatype-accessor-ax    460
;  :datatype-constructor-ax 2267
;  :datatype-occurs-check   556
;  :datatype-splits         1830
;  :decisions               2162
;  :del-clause              504
;  :final-checks            107
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             4003
;  :mk-clause               634
;  :num-allocs              6902085
;  :num-checks              711
;  :propagations            432
;  :quant-instantiations    189
;  :rlimit-count            298412)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@178@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8994
;  :arith-add-rows          80
;  :arith-assert-diseq      147
;  :arith-assert-lower      553
;  :arith-assert-upper      348
;  :arith-conflicts         151
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               477
;  :datatype-accessor-ax    460
;  :datatype-constructor-ax 2267
;  :datatype-occurs-check   556
;  :datatype-splits         1830
;  :decisions               2162
;  :del-clause              504
;  :final-checks            107
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             4003
;  :mk-clause               634
;  :num-allocs              6902085
;  :num-checks              712
;  :propagations            432
;  :quant-instantiations    189
;  :rlimit-count            298423)
(assert (< $k@190@08 $k@178@08))
(assert (<= $Perm.No (- $k@178@08 $k@190@08)))
(assert (<= (- $k@178@08 $k@190@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@178@08 $k@190@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
; [eval] diz.Main_adder_half_adder2 != null
(push) ; 12
(assert (not (< $Perm.No $k@178@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8994
;  :arith-add-rows          80
;  :arith-assert-diseq      147
;  :arith-assert-lower      555
;  :arith-assert-upper      349
;  :arith-conflicts         151
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               478
;  :datatype-accessor-ax    460
;  :datatype-constructor-ax 2267
;  :datatype-occurs-check   556
;  :datatype-splits         1830
;  :decisions               2162
;  :del-clause              504
;  :final-checks            107
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             4006
;  :mk-clause               634
;  :num-allocs              6902085
;  :num-checks              713
;  :propagations            432
;  :quant-instantiations    189
;  :rlimit-count            298643)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8994
;  :arith-add-rows          80
;  :arith-assert-diseq      147
;  :arith-assert-lower      555
;  :arith-assert-upper      349
;  :arith-conflicts         151
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               478
;  :datatype-accessor-ax    460
;  :datatype-constructor-ax 2267
;  :datatype-occurs-check   556
;  :datatype-splits         1830
;  :decisions               2162
;  :del-clause              504
;  :final-checks            107
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             4006
;  :mk-clause               634
;  :num-allocs              6902085
;  :num-checks              714
;  :propagations            432
;  :quant-instantiations    189
;  :rlimit-count            298656)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@178@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8994
;  :arith-add-rows          80
;  :arith-assert-diseq      147
;  :arith-assert-lower      555
;  :arith-assert-upper      349
;  :arith-conflicts         151
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               479
;  :datatype-accessor-ax    460
;  :datatype-constructor-ax 2267
;  :datatype-occurs-check   556
;  :datatype-splits         1830
;  :decisions               2162
;  :del-clause              504
;  :final-checks            107
;  :max-generation          2
;  :max-memory              5.50
;  :memory                  5.50
;  :mk-bool-var             4006
;  :mk-clause               634
;  :num-allocs              6902085
;  :num-checks              715
;  :propagations            432
;  :quant-instantiations    189
;  :rlimit-count            298704)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) globals@11@08))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
(declare-const $t@191@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
(assert (= $t@191@08 ($Snap.combine ($Snap.first $t@191@08) ($Snap.second $t@191@08))))
(assert (= ($Snap.first $t@191@08) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@191@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@191@08))
    ($Snap.second ($Snap.second $t@191@08)))))
(assert (= ($Snap.first ($Snap.second $t@191@08)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@191@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@191@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@191@08))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@191@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@192@08 Int)
(push) ; 12
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 13
; [then-branch: 64 | 0 <= i@192@08 | live]
; [else-branch: 64 | !(0 <= i@192@08) | live]
(push) ; 14
; [then-branch: 64 | 0 <= i@192@08]
(assert (<= 0 i@192@08))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 64 | !(0 <= i@192@08)]
(assert (not (<= 0 i@192@08)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 65 | i@192@08 < |First:(Second:(Second:(Second:($t@191@08))))| && 0 <= i@192@08 | live]
; [else-branch: 65 | !(i@192@08 < |First:(Second:(Second:(Second:($t@191@08))))| && 0 <= i@192@08) | live]
(push) ; 14
; [then-branch: 65 | i@192@08 < |First:(Second:(Second:(Second:($t@191@08))))| && 0 <= i@192@08]
(assert (and
  (<
    i@192@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))
  (<= 0 i@192@08)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@192@08 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9597
;  :arith-add-rows          80
;  :arith-assert-diseq      148
;  :arith-assert-lower      563
;  :arith-assert-upper      353
;  :arith-conflicts         151
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               481
;  :datatype-accessor-ax    505
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              518
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4148
;  :mk-clause               640
;  :num-allocs              7153966
;  :num-checks              717
;  :propagations            441
;  :quant-instantiations    196
;  :rlimit-count            304185)
; [eval] -1
(push) ; 15
; [then-branch: 66 | First:(Second:(Second:(Second:($t@191@08))))[i@192@08] == -1 | live]
; [else-branch: 66 | First:(Second:(Second:(Second:($t@191@08))))[i@192@08] != -1 | live]
(push) ; 16
; [then-branch: 66 | First:(Second:(Second:(Second:($t@191@08))))[i@192@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
    i@192@08)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 66 | First:(Second:(Second:(Second:($t@191@08))))[i@192@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
      i@192@08)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 17
(assert (not (>= i@192@08 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9597
;  :arith-add-rows          80
;  :arith-assert-diseq      148
;  :arith-assert-lower      563
;  :arith-assert-upper      353
;  :arith-conflicts         151
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               481
;  :datatype-accessor-ax    505
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              518
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4149
;  :mk-clause               640
;  :num-allocs              7153966
;  :num-checks              718
;  :propagations            441
;  :quant-instantiations    196
;  :rlimit-count            304360)
(push) ; 17
; [then-branch: 67 | 0 <= First:(Second:(Second:(Second:($t@191@08))))[i@192@08] | live]
; [else-branch: 67 | !(0 <= First:(Second:(Second:(Second:($t@191@08))))[i@192@08]) | live]
(push) ; 18
; [then-branch: 67 | 0 <= First:(Second:(Second:(Second:($t@191@08))))[i@192@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
    i@192@08)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 19
(assert (not (>= i@192@08 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9597
;  :arith-add-rows          80
;  :arith-assert-diseq      149
;  :arith-assert-lower      566
;  :arith-assert-upper      353
;  :arith-conflicts         151
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               481
;  :datatype-accessor-ax    505
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              518
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4152
;  :mk-clause               641
;  :num-allocs              7153966
;  :num-checks              719
;  :propagations            441
;  :quant-instantiations    196
;  :rlimit-count            304484)
; [eval] |diz.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 67 | !(0 <= First:(Second:(Second:(Second:($t@191@08))))[i@192@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
      i@192@08))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 65 | !(i@192@08 < |First:(Second:(Second:(Second:($t@191@08))))| && 0 <= i@192@08)]
(assert (not
  (and
    (<
      i@192@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))
    (<= 0 i@192@08))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@192@08 Int)) (!
  (implies
    (and
      (<
        i@192@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))
      (<= 0 i@192@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
          i@192@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
            i@192@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
            i@192@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
    i@192@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))
(declare-const $k@193@08 $Perm)
(assert ($Perm.isReadVar $k@193@08 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@193@08 $Perm.No) (< $Perm.No $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9602
;  :arith-add-rows          80
;  :arith-assert-diseq      150
;  :arith-assert-lower      568
;  :arith-assert-upper      354
;  :arith-conflicts         151
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               482
;  :datatype-accessor-ax    506
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4158
;  :mk-clause               643
;  :num-allocs              7153966
;  :num-checks              720
;  :propagations            442
;  :quant-instantiations    196
;  :rlimit-count            305252)
(declare-const $t@194@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@174@08 $k@186@08))
    (=
      $t@194@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))
  (implies
    (< $Perm.No $k@193@08)
    (=
      $t@194@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))
(assert (<= $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08)))
(assert (<= (+ (- $k@174@08 $k@186@08) $k@193@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))
  $Snap.unit))
; [eval] diz.Main_adder != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9612
;  :arith-add-rows          81
;  :arith-assert-diseq      150
;  :arith-assert-lower      569
;  :arith-assert-upper      356
;  :arith-conflicts         152
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         161
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4166
;  :mk-clause               643
;  :num-allocs              7153966
;  :num-checks              721
;  :propagations            442
;  :quant-instantiations    197
;  :rlimit-count            305938)
(assert (not (= $t@194@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9618
;  :arith-add-rows          81
;  :arith-assert-diseq      150
;  :arith-assert-lower      569
;  :arith-assert-upper      357
;  :arith-conflicts         153
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         162
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               484
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4169
;  :mk-clause               643
;  :num-allocs              7153966
;  :num-checks              722
;  :propagations            442
;  :quant-instantiations    197
;  :rlimit-count            306262)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9623
;  :arith-add-rows          81
;  :arith-assert-diseq      150
;  :arith-assert-lower      569
;  :arith-assert-upper      358
;  :arith-conflicts         154
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         163
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               485
;  :datatype-accessor-ax    509
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4171
;  :mk-clause               643
;  :num-allocs              7153966
;  :num-checks              723
;  :propagations            442
;  :quant-instantiations    197
;  :rlimit-count            306551)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9628
;  :arith-add-rows          81
;  :arith-assert-diseq      150
;  :arith-assert-lower      569
;  :arith-assert-upper      359
;  :arith-conflicts         155
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         164
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               486
;  :datatype-accessor-ax    510
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4173
;  :mk-clause               643
;  :num-allocs              7153966
;  :num-checks              724
;  :propagations            442
;  :quant-instantiations    197
;  :rlimit-count            306850)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9633
;  :arith-add-rows          81
;  :arith-assert-diseq      150
;  :arith-assert-lower      569
;  :arith-assert-upper      360
;  :arith-conflicts         156
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         165
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               487
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4175
;  :mk-clause               643
;  :num-allocs              7153966
;  :num-checks              725
;  :propagations            442
;  :quant-instantiations    197
;  :rlimit-count            307159)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9638
;  :arith-add-rows          81
;  :arith-assert-diseq      150
;  :arith-assert-lower      569
;  :arith-assert-upper      361
;  :arith-conflicts         157
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         166
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               488
;  :datatype-accessor-ax    512
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4177
;  :mk-clause               643
;  :num-allocs              7153966
;  :num-checks              726
;  :propagations            442
;  :quant-instantiations    197
;  :rlimit-count            307478)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9643
;  :arith-add-rows          81
;  :arith-assert-diseq      150
;  :arith-assert-lower      569
;  :arith-assert-upper      362
;  :arith-conflicts         158
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         167
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               489
;  :datatype-accessor-ax    513
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4179
;  :mk-clause               643
;  :num-allocs              7153966
;  :num-checks              727
;  :propagations            442
;  :quant-instantiations    197
;  :rlimit-count            307807)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9648
;  :arith-add-rows          81
;  :arith-assert-diseq      150
;  :arith-assert-lower      569
;  :arith-assert-upper      363
;  :arith-conflicts         159
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         168
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               490
;  :datatype-accessor-ax    514
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4181
;  :mk-clause               643
;  :num-allocs              7153966
;  :num-checks              728
;  :propagations            442
;  :quant-instantiations    197
;  :rlimit-count            308146)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9653
;  :arith-add-rows          81
;  :arith-assert-diseq      150
;  :arith-assert-lower      569
;  :arith-assert-upper      364
;  :arith-conflicts         160
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         169
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               491
;  :datatype-accessor-ax    515
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4183
;  :mk-clause               643
;  :num-allocs              7153966
;  :num-checks              729
;  :propagations            442
;  :quant-instantiations    197
;  :rlimit-count            308495)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9658
;  :arith-add-rows          81
;  :arith-assert-diseq      150
;  :arith-assert-lower      569
;  :arith-assert-upper      365
;  :arith-conflicts         161
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         170
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               492
;  :datatype-accessor-ax    516
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4185
;  :mk-clause               643
;  :num-allocs              7153966
;  :num-checks              730
;  :propagations            442
;  :quant-instantiations    197
;  :rlimit-count            308854)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9663
;  :arith-add-rows          81
;  :arith-assert-diseq      150
;  :arith-assert-lower      569
;  :arith-assert-upper      366
;  :arith-conflicts         162
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         171
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               493
;  :datatype-accessor-ax    517
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4187
;  :mk-clause               643
;  :num-allocs              7153966
;  :num-checks              731
;  :propagations            442
;  :quant-instantiations    197
;  :rlimit-count            309223)
(declare-const $k@195@08 $Perm)
(assert ($Perm.isReadVar $k@195@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@195@08 $Perm.No) (< $Perm.No $k@195@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9663
;  :arith-add-rows          81
;  :arith-assert-diseq      151
;  :arith-assert-lower      571
;  :arith-assert-upper      367
;  :arith-conflicts         162
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         171
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               494
;  :datatype-accessor-ax    517
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4191
;  :mk-clause               645
;  :num-allocs              7153966
;  :num-checks              732
;  :propagations            443
;  :quant-instantiations    197
;  :rlimit-count            309422)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
  $t@194@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9663
;  :arith-add-rows          81
;  :arith-assert-diseq      151
;  :arith-assert-lower      571
;  :arith-assert-upper      367
;  :arith-conflicts         162
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         171
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               494
;  :datatype-accessor-ax    517
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4191
;  :mk-clause               645
;  :num-allocs              7153966
;  :num-checks              733
;  :propagations            443
;  :quant-instantiations    197
;  :rlimit-count            309433)
(declare-const $t@196@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@175@08 $k@187@08))
    (=
      $t@196@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@195@08)
    (=
      $t@196@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@175@08 $k@187@08) $k@195@08)))
(assert (<= (+ (- $k@175@08 $k@187@08) $k@195@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@175@08 $k@187@08) $k@195@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9673
;  :arith-add-rows          82
;  :arith-assert-diseq      151
;  :arith-assert-lower      572
;  :arith-assert-upper      369
;  :arith-conflicts         163
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         172
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               495
;  :datatype-accessor-ax    518
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4199
;  :mk-clause               645
;  :num-allocs              7153966
;  :num-checks              734
;  :propagations            443
;  :quant-instantiations    198
;  :rlimit-count            310157)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
  $t@194@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9673
;  :arith-add-rows          82
;  :arith-assert-diseq      151
;  :arith-assert-lower      572
;  :arith-assert-upper      369
;  :arith-conflicts         163
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         172
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               495
;  :datatype-accessor-ax    518
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4199
;  :mk-clause               645
;  :num-allocs              7153966
;  :num-checks              735
;  :propagations            443
;  :quant-instantiations    198
;  :rlimit-count            310168)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@175@08 $k@187@08) $k@195@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9673
;  :arith-add-rows          82
;  :arith-assert-diseq      151
;  :arith-assert-lower      572
;  :arith-assert-upper      370
;  :arith-conflicts         164
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         173
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               496
;  :datatype-accessor-ax    518
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4200
;  :mk-clause               645
;  :num-allocs              7153966
;  :num-checks              736
;  :propagations            443
;  :quant-instantiations    198
;  :rlimit-count            310246)
(assert (= $t@196@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))))
(declare-const $k@197@08 $Perm)
(assert ($Perm.isReadVar $k@197@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@197@08 $Perm.No) (< $Perm.No $k@197@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9678
;  :arith-add-rows          82
;  :arith-assert-diseq      152
;  :arith-assert-lower      574
;  :arith-assert-upper      371
;  :arith-conflicts         164
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         173
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               497
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4205
;  :mk-clause               647
;  :num-allocs              7153966
;  :num-checks              737
;  :propagations            444
;  :quant-instantiations    198
;  :rlimit-count            310745)
(declare-const $t@198@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@176@08 $k@188@08))
    (=
      $t@198@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@197@08)
    (=
      $t@198@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@176@08 $k@188@08) $k@197@08)))
(assert (<= (+ (- $k@176@08 $k@188@08) $k@197@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@176@08 $k@188@08) $k@197@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@176@08 $k@188@08) $k@197@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9688
;  :arith-add-rows          83
;  :arith-assert-diseq      152
;  :arith-assert-lower      575
;  :arith-assert-upper      373
;  :arith-conflicts         165
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         174
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               498
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4213
;  :mk-clause               647
;  :num-allocs              7153966
;  :num-checks              738
;  :propagations            444
;  :quant-instantiations    199
;  :rlimit-count            311689)
(assert (not (= $t@198@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@176@08 $k@188@08) $k@197@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9694
;  :arith-add-rows          83
;  :arith-assert-diseq      152
;  :arith-assert-lower      575
;  :arith-assert-upper      374
;  :arith-conflicts         166
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         175
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               499
;  :datatype-accessor-ax    521
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4216
;  :mk-clause               647
;  :num-allocs              7153966
;  :num-checks              739
;  :propagations            444
;  :quant-instantiations    199
;  :rlimit-count            312143)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9694
;  :arith-add-rows          83
;  :arith-assert-diseq      152
;  :arith-assert-lower      575
;  :arith-assert-upper      374
;  :arith-conflicts         166
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         175
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               499
;  :datatype-accessor-ax    521
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4216
;  :mk-clause               647
;  :num-allocs              7153966
;  :num-checks              740
;  :propagations            444
;  :quant-instantiations    199
;  :rlimit-count            312156)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))))))
(declare-const $k@199@08 $Perm)
(assert ($Perm.isReadVar $k@199@08 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@199@08 $Perm.No) (< $Perm.No $k@199@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9699
;  :arith-add-rows          83
;  :arith-assert-diseq      153
;  :arith-assert-lower      577
;  :arith-assert-upper      375
;  :arith-conflicts         166
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         175
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               500
;  :datatype-accessor-ax    522
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4221
;  :mk-clause               649
;  :num-allocs              7153966
;  :num-checks              741
;  :propagations            445
;  :quant-instantiations    199
;  :rlimit-count            312687)
(declare-const $t@200@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@177@08 $k@189@08))
    (=
      $t@200@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@199@08)
    (=
      $t@200@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@177@08 $k@189@08) $k@199@08)))
(assert (<= (+ (- $k@177@08 $k@189@08) $k@199@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@177@08 $k@189@08) $k@199@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@177@08 $k@189@08) $k@199@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9709
;  :arith-add-rows          84
;  :arith-assert-diseq      153
;  :arith-assert-lower      578
;  :arith-assert-upper      377
;  :arith-conflicts         167
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         176
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               501
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4229
;  :mk-clause               649
;  :num-allocs              7153966
;  :num-checks              742
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            313433)
(assert (not (= $t@200@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@177@08 $k@189@08) $k@199@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9714
;  :arith-add-rows          84
;  :arith-assert-diseq      153
;  :arith-assert-lower      578
;  :arith-assert-upper      378
;  :arith-conflicts         168
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         177
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               502
;  :datatype-accessor-ax    524
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4231
;  :mk-clause               649
;  :num-allocs              7153966
;  :num-checks              743
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            313888)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9714
;  :arith-add-rows          84
;  :arith-assert-diseq      153
;  :arith-assert-lower      578
;  :arith-assert-upper      378
;  :arith-conflicts         168
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         177
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               502
;  :datatype-accessor-ax    524
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4231
;  :mk-clause               649
;  :num-allocs              7153966
;  :num-checks              744
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            313901)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
  $t@200@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9714
;  :arith-add-rows          84
;  :arith-assert-diseq      153
;  :arith-assert-lower      578
;  :arith-assert-upper      378
;  :arith-conflicts         168
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         177
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               502
;  :datatype-accessor-ax    524
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4231
;  :mk-clause               649
;  :num-allocs              7153966
;  :num-checks              745
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            313912)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))))))))))
(declare-const $k@201@08 $Perm)
(assert ($Perm.isReadVar $k@201@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@201@08 $Perm.No) (< $Perm.No $k@201@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9722
;  :arith-add-rows          84
;  :arith-assert-diseq      154
;  :arith-assert-lower      580
;  :arith-assert-upper      379
;  :arith-conflicts         168
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         177
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               503
;  :datatype-accessor-ax    525
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.60
;  :memory                  5.60
;  :mk-bool-var             4238
;  :mk-clause               651
;  :num-allocs              7153966
;  :num-checks              746
;  :propagations            446
;  :quant-instantiations    201
;  :rlimit-count            314550)
(declare-const $t@202@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@178@08 $k@190@08))
    (=
      $t@202@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@201@08)
    (=
      $t@202@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@178@08 $k@190@08) $k@201@08)))
(assert (<= (+ (- $k@178@08 $k@190@08) $k@201@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@178@08 $k@190@08) $k@201@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@178@08 $k@190@08) $k@201@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9732
;  :arith-add-rows          85
;  :arith-assert-diseq      154
;  :arith-assert-lower      581
;  :arith-assert-upper      381
;  :arith-conflicts         169
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         178
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               504
;  :datatype-accessor-ax    526
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.74
;  :memory                  5.74
;  :mk-bool-var             4246
;  :mk-clause               651
;  :num-allocs              7413408
;  :num-checks              747
;  :propagations            446
;  :quant-instantiations    202
;  :rlimit-count            315606)
(assert (not (= $t@202@08 $Ref.null)))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@178@08 $k@190@08) $k@201@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9733
;  :arith-add-rows          85
;  :arith-assert-diseq      154
;  :arith-assert-lower      581
;  :arith-assert-upper      382
;  :arith-conflicts         170
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         179
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               505
;  :datatype-accessor-ax    526
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.74
;  :memory                  5.74
;  :mk-bool-var             4248
;  :mk-clause               651
;  :num-allocs              7413408
;  :num-checks              748
;  :propagations            446
;  :quant-instantiations    202
;  :rlimit-count            315740)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9733
;  :arith-add-rows          85
;  :arith-assert-diseq      154
;  :arith-assert-lower      581
;  :arith-assert-upper      382
;  :arith-conflicts         170
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         179
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               505
;  :datatype-accessor-ax    526
;  :datatype-constructor-ax 2417
;  :datatype-occurs-check   688
;  :datatype-splits         1930
;  :decisions               2307
;  :del-clause              519
;  :final-checks            111
;  :max-generation          2
;  :max-memory              5.74
;  :memory                  5.74
;  :mk-bool-var             4248
;  :mk-clause               651
;  :num-allocs              7413408
;  :num-checks              749
;  :propagations            446
;  :quant-instantiations    202
;  :rlimit-count            315753)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@191@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) globals@11@08))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_half_adder_1_m, globals), write)
(declare-const $t@203@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10927
;  :arith-add-rows          85
;  :arith-assert-diseq      156
;  :arith-assert-lower      587
;  :arith-assert-upper      384
;  :arith-conflicts         170
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         179
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               511
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              537
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4510
;  :mk-clause               665
;  :num-allocs              8726153
;  :num-checks              752
;  :propagations            476
;  :quant-instantiations    208
;  :rlimit-count            322577)
; [eval] diz.Prc_half_adder_1_m != null
; [eval] |diz.Prc_half_adder_1_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] |diz.Prc_half_adder_1_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] (forall i__36: Int :: { diz.Prc_half_adder_1_m.Main_process_state[i__36] } 0 <= i__36 && i__36 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__36] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36] && diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|)
(declare-const i__36@204@08 Int)
(push) ; 12
; [eval] 0 <= i__36 && i__36 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__36] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36] && diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= i__36 && i__36 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] 0 <= i__36
(push) ; 13
; [then-branch: 68 | 0 <= i__36@204@08 | live]
; [else-branch: 68 | !(0 <= i__36@204@08) | live]
(push) ; 14
; [then-branch: 68 | 0 <= i__36@204@08]
(assert (<= 0 i__36@204@08))
; [eval] i__36 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 68 | !(0 <= i__36@204@08)]
(assert (not (<= 0 i__36@204@08)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 69 | i__36@204@08 < |First:(Second:(Second:(Second:($t@191@08))))| && 0 <= i__36@204@08 | live]
; [else-branch: 69 | !(i__36@204@08 < |First:(Second:(Second:(Second:($t@191@08))))| && 0 <= i__36@204@08) | live]
(push) ; 14
; [then-branch: 69 | i__36@204@08 < |First:(Second:(Second:(Second:($t@191@08))))| && 0 <= i__36@204@08]
(assert (and
  (<
    i__36@204@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))
  (<= 0 i__36@204@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36] && diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36] == -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36]
(push) ; 15
(assert (not (>= i__36@204@08 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10927
;  :arith-add-rows          85
;  :arith-assert-diseq      156
;  :arith-assert-lower      588
;  :arith-assert-upper      385
;  :arith-conflicts         170
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         179
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               511
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              537
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4512
;  :mk-clause               665
;  :num-allocs              8726153
;  :num-checks              753
;  :propagations            476
;  :quant-instantiations    208
;  :rlimit-count            322713)
; [eval] -1
(push) ; 15
; [then-branch: 70 | First:(Second:(Second:(Second:($t@191@08))))[i__36@204@08] == -1 | live]
; [else-branch: 70 | First:(Second:(Second:(Second:($t@191@08))))[i__36@204@08] != -1 | live]
(push) ; 16
; [then-branch: 70 | First:(Second:(Second:(Second:($t@191@08))))[i__36@204@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
    i__36@204@08)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 70 | First:(Second:(Second:(Second:($t@191@08))))[i__36@204@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
      i__36@204@08)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36] && diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__36]
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36]
(push) ; 17
(assert (not (>= i__36@204@08 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10927
;  :arith-add-rows          85
;  :arith-assert-diseq      157
;  :arith-assert-lower      591
;  :arith-assert-upper      386
;  :arith-conflicts         170
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         179
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               511
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              537
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4518
;  :mk-clause               669
;  :num-allocs              8726153
;  :num-checks              754
;  :propagations            478
;  :quant-instantiations    209
;  :rlimit-count            322945)
(push) ; 17
; [then-branch: 71 | 0 <= First:(Second:(Second:(Second:($t@191@08))))[i__36@204@08] | live]
; [else-branch: 71 | !(0 <= First:(Second:(Second:(Second:($t@191@08))))[i__36@204@08]) | live]
(push) ; 18
; [then-branch: 71 | 0 <= First:(Second:(Second:(Second:($t@191@08))))[i__36@204@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
    i__36@204@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__36]
(push) ; 19
(assert (not (>= i__36@204@08 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10927
;  :arith-add-rows          85
;  :arith-assert-diseq      157
;  :arith-assert-lower      591
;  :arith-assert-upper      386
;  :arith-conflicts         170
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         179
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               511
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              537
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4518
;  :mk-clause               669
;  :num-allocs              8726153
;  :num-checks              755
;  :propagations            478
;  :quant-instantiations    209
;  :rlimit-count            323059)
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 71 | !(0 <= First:(Second:(Second:(Second:($t@191@08))))[i__36@204@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
      i__36@204@08))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 69 | !(i__36@204@08 < |First:(Second:(Second:(Second:($t@191@08))))| && 0 <= i__36@204@08)]
(assert (not
  (and
    (<
      i__36@204@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))
    (<= 0 i__36@204@08))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((i__36@204@08 Int)) (!
  (implies
    (and
      (<
        i__36@204@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))
      (<= 0 i__36@204@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
          i__36@204@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
            i__36@204@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
            i__36@204@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
    i__36@204@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10927
;  :arith-add-rows          85
;  :arith-assert-diseq      159
;  :arith-assert-lower      592
;  :arith-assert-upper      387
;  :arith-conflicts         170
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         179
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               512
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              555
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4526
;  :mk-clause               683
;  :num-allocs              8726153
;  :num-checks              756
;  :propagations            480
;  :quant-instantiations    210
;  :rlimit-count            323505)
(assert (forall ((i__36@204@08 Int)) (!
  (implies
    (and
      (<
        i__36@204@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))
      (<= 0 i__36@204@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
          i__36@204@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
            i__36@204@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
            i__36@204@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@08)))))
    i__36@204@08))
  :qid |prog.l<no position>|)))
(declare-const $k@205@08 $Perm)
(assert ($Perm.isReadVar $k@205@08 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@205@08 $Perm.No) (< $Perm.No $k@205@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10927
;  :arith-add-rows          85
;  :arith-assert-diseq      160
;  :arith-assert-lower      594
;  :arith-assert-upper      388
;  :arith-conflicts         170
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         179
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              555
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4531
;  :mk-clause               685
;  :num-allocs              8726153
;  :num-checks              757
;  :propagations            481
;  :quant-instantiations    210
;  :rlimit-count            324066)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@174@08 $k@186@08) $k@193@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          85
;  :arith-assert-diseq      160
;  :arith-assert-lower      594
;  :arith-assert-upper      389
;  :arith-conflicts         171
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         179
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               514
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4533
;  :mk-clause               687
;  :num-allocs              8726153
;  :num-checks              758
;  :propagations            482
;  :quant-instantiations    210
;  :rlimit-count            324146)
(assert (< $k@205@08 (+ (- $k@174@08 $k@186@08) $k@193@08)))
(assert (<= $Perm.No (- (+ (- $k@174@08 $k@186@08) $k@193@08) $k@205@08)))
(assert (<= (- (+ (- $k@174@08 $k@186@08) $k@193@08) $k@205@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@174@08 $k@186@08) $k@193@08) $k@205@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      596
;  :arith-assert-upper      391
;  :arith-conflicts         172
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         180
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               515
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4537
;  :mk-clause               687
;  :num-allocs              8726153
;  :num-checks              759
;  :propagations            482
;  :quant-instantiations    210
;  :rlimit-count            324415)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      596
;  :arith-assert-upper      392
;  :arith-conflicts         173
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         181
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               516
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4538
;  :mk-clause               687
;  :num-allocs              8726153
;  :num-checks              760
;  :propagations            482
;  :quant-instantiations    210
;  :rlimit-count            324496)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      596
;  :arith-assert-upper      393
;  :arith-conflicts         174
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         182
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               517
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4539
;  :mk-clause               687
;  :num-allocs              8726153
;  :num-checks              761
;  :propagations            482
;  :quant-instantiations    210
;  :rlimit-count            324577)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      596
;  :arith-assert-upper      394
;  :arith-conflicts         175
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         183
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               518
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4540
;  :mk-clause               687
;  :num-allocs              8726153
;  :num-checks              762
;  :propagations            482
;  :quant-instantiations    210
;  :rlimit-count            324658)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      596
;  :arith-assert-upper      395
;  :arith-conflicts         176
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         184
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               519
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4541
;  :mk-clause               687
;  :num-allocs              8726153
;  :num-checks              763
;  :propagations            482
;  :quant-instantiations    210
;  :rlimit-count            324739)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      596
;  :arith-assert-upper      396
;  :arith-conflicts         177
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         185
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4542
;  :mk-clause               687
;  :num-allocs              8726153
;  :num-checks              764
;  :propagations            482
;  :quant-instantiations    210
;  :rlimit-count            324820)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      596
;  :arith-assert-upper      397
;  :arith-conflicts         178
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         186
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4543
;  :mk-clause               687
;  :num-allocs              8726153
;  :num-checks              765
;  :propagations            482
;  :quant-instantiations    210
;  :rlimit-count            324901)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      596
;  :arith-assert-upper      398
;  :arith-conflicts         179
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         187
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               522
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4544
;  :mk-clause               687
;  :num-allocs              8726153
;  :num-checks              766
;  :propagations            482
;  :quant-instantiations    210
;  :rlimit-count            324982)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      596
;  :arith-assert-upper      399
;  :arith-conflicts         180
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         188
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               523
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4545
;  :mk-clause               687
;  :num-allocs              8726153
;  :num-checks              767
;  :propagations            482
;  :quant-instantiations    210
;  :rlimit-count            325063)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      596
;  :arith-assert-upper      400
;  :arith-conflicts         181
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         189
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               524
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4546
;  :mk-clause               687
;  :num-allocs              8726153
;  :num-checks              768
;  :propagations            482
;  :quant-instantiations    210
;  :rlimit-count            325144)
(declare-const $k@206@08 $Perm)
(assert ($Perm.isReadVar $k@206@08 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          87
;  :arith-assert-diseq      161
;  :arith-assert-lower      598
;  :arith-assert-upper      402
;  :arith-conflicts         182
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         190
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               525
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4551
;  :mk-clause               689
;  :num-allocs              8726153
;  :num-checks              769
;  :propagations            483
;  :quant-instantiations    210
;  :rlimit-count            325374)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@206@08 $Perm.No) (< $Perm.No $k@206@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          87
;  :arith-assert-diseq      161
;  :arith-assert-lower      598
;  :arith-assert-upper      402
;  :arith-conflicts         182
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         190
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               526
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4551
;  :mk-clause               689
;  :num-allocs              8726153
;  :num-checks              770
;  :propagations            483
;  :quant-instantiations    210
;  :rlimit-count            325424)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
  $t@194@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          87
;  :arith-assert-diseq      161
;  :arith-assert-lower      598
;  :arith-assert-upper      402
;  :arith-conflicts         182
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         190
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               526
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              557
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4551
;  :mk-clause               689
;  :num-allocs              8726153
;  :num-checks              771
;  :propagations            483
;  :quant-instantiations    210
;  :rlimit-count            325435)
(push) ; 12
(assert (not (not (= (+ (- $k@175@08 $k@187@08) $k@195@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10929
;  :arith-add-rows          87
;  :arith-assert-diseq      161
;  :arith-assert-lower      598
;  :arith-assert-upper      403
;  :arith-conflicts         183
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         190
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               527
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              559
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4553
;  :mk-clause               691
;  :num-allocs              8726153
;  :num-checks              772
;  :propagations            484
;  :quant-instantiations    210
;  :rlimit-count            325513)
(assert (< $k@206@08 (+ (- $k@175@08 $k@187@08) $k@195@08)))
(assert (<= $Perm.No (- (+ (- $k@175@08 $k@187@08) $k@195@08) $k@206@08)))
(assert (<= (- (+ (- $k@175@08 $k@187@08) $k@195@08) $k@206@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@175@08 $k@187@08) $k@195@08) $k@206@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
      $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder.Full_adder_m == diz.Prc_half_adder_1_m
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@174@08 $k@186@08) $k@193@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10929
;  :arith-add-rows          88
;  :arith-assert-diseq      161
;  :arith-assert-lower      600
;  :arith-assert-upper      405
;  :arith-conflicts         184
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         191
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               528
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              559
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4557
;  :mk-clause               691
;  :num-allocs              8726153
;  :num-checks              773
;  :propagations            484
;  :quant-instantiations    210
;  :rlimit-count            325781)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
  $t@194@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10929
;  :arith-add-rows          88
;  :arith-assert-diseq      161
;  :arith-assert-lower      600
;  :arith-assert-upper      405
;  :arith-conflicts         184
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         191
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               528
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              559
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4557
;  :mk-clause               691
;  :num-allocs              8726153
;  :num-checks              774
;  :propagations            484
;  :quant-instantiations    210
;  :rlimit-count            325792)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@175@08 $k@187@08) $k@195@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10929
;  :arith-add-rows          88
;  :arith-assert-diseq      161
;  :arith-assert-lower      600
;  :arith-assert-upper      406
;  :arith-conflicts         185
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         192
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               529
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              559
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4558
;  :mk-clause               691
;  :num-allocs              8726153
;  :num-checks              775
;  :propagations            484
;  :quant-instantiations    210
;  :rlimit-count            325870)
(declare-const $k@207@08 $Perm)
(assert ($Perm.isReadVar $k@207@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@207@08 $Perm.No) (< $Perm.No $k@207@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10929
;  :arith-add-rows          88
;  :arith-assert-diseq      162
;  :arith-assert-lower      602
;  :arith-assert-upper      407
;  :arith-conflicts         185
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         192
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               530
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              559
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4562
;  :mk-clause               693
;  :num-allocs              8726153
;  :num-checks              776
;  :propagations            485
;  :quant-instantiations    210
;  :rlimit-count            326069)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@176@08 $k@188@08) $k@197@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10930
;  :arith-add-rows          88
;  :arith-assert-diseq      162
;  :arith-assert-lower      602
;  :arith-assert-upper      408
;  :arith-conflicts         186
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         192
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               531
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              561
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4564
;  :mk-clause               695
;  :num-allocs              8726153
;  :num-checks              777
;  :propagations            486
;  :quant-instantiations    210
;  :rlimit-count            326149)
(assert (< $k@207@08 (+ (- $k@176@08 $k@188@08) $k@197@08)))
(assert (<= $Perm.No (- (+ (- $k@176@08 $k@188@08) $k@197@08) $k@207@08)))
(assert (<= (- (+ (- $k@176@08 $k@188@08) $k@197@08) $k@207@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@176@08 $k@188@08) $k@197@08) $k@207@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_prc != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@176@08 $k@188@08) $k@197@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10930
;  :arith-add-rows          90
;  :arith-assert-diseq      162
;  :arith-assert-lower      604
;  :arith-assert-upper      410
;  :arith-conflicts         187
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         193
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              561
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4568
;  :mk-clause               695
;  :num-allocs              8726153
;  :num-checks              778
;  :propagations            486
;  :quant-instantiations    210
;  :rlimit-count            326418)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10930
;  :arith-add-rows          90
;  :arith-assert-diseq      162
;  :arith-assert-lower      604
;  :arith-assert-upper      410
;  :arith-conflicts         187
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         193
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              561
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4568
;  :mk-clause               695
;  :num-allocs              8726153
;  :num-checks              779
;  :propagations            486
;  :quant-instantiations    210
;  :rlimit-count            326431)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@176@08 $k@188@08) $k@197@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10930
;  :arith-add-rows          90
;  :arith-assert-diseq      162
;  :arith-assert-lower      604
;  :arith-assert-upper      411
;  :arith-conflicts         188
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         194
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               533
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              561
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4569
;  :mk-clause               695
;  :num-allocs              8726153
;  :num-checks              780
;  :propagations            486
;  :quant-instantiations    210
;  :rlimit-count            326512)
(declare-const $k@208@08 $Perm)
(assert ($Perm.isReadVar $k@208@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@208@08 $Perm.No) (< $Perm.No $k@208@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10930
;  :arith-add-rows          90
;  :arith-assert-diseq      163
;  :arith-assert-lower      606
;  :arith-assert-upper      412
;  :arith-conflicts         188
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         194
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              561
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4573
;  :mk-clause               697
;  :num-allocs              8726153
;  :num-checks              781
;  :propagations            487
;  :quant-instantiations    210
;  :rlimit-count            326710)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@177@08 $k@189@08) $k@199@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10931
;  :arith-add-rows          90
;  :arith-assert-diseq      163
;  :arith-assert-lower      606
;  :arith-assert-upper      413
;  :arith-conflicts         189
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         194
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               535
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              563
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4575
;  :mk-clause               699
;  :num-allocs              8726153
;  :num-checks              782
;  :propagations            488
;  :quant-instantiations    210
;  :rlimit-count            326788)
(assert (< $k@208@08 (+ (- $k@177@08 $k@189@08) $k@199@08)))
(assert (<= $Perm.No (- (+ (- $k@177@08 $k@189@08) $k@199@08) $k@208@08)))
(assert (<= (- (+ (- $k@177@08 $k@189@08) $k@199@08) $k@208@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@177@08 $k@189@08) $k@199@08) $k@208@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@177@08 $k@189@08) $k@199@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10931
;  :arith-add-rows          91
;  :arith-assert-diseq      163
;  :arith-assert-lower      608
;  :arith-assert-upper      415
;  :arith-conflicts         190
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         195
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              563
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4579
;  :mk-clause               699
;  :num-allocs              8726153
;  :num-checks              783
;  :propagations            488
;  :quant-instantiations    210
;  :rlimit-count            327060)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10931
;  :arith-add-rows          91
;  :arith-assert-diseq      163
;  :arith-assert-lower      608
;  :arith-assert-upper      415
;  :arith-conflicts         190
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         195
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              563
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4579
;  :mk-clause               699
;  :num-allocs              8726153
;  :num-checks              784
;  :propagations            488
;  :quant-instantiations    210
;  :rlimit-count            327073)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@177@08 $k@189@08) $k@199@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10931
;  :arith-add-rows          91
;  :arith-assert-diseq      163
;  :arith-assert-lower      608
;  :arith-assert-upper      416
;  :arith-conflicts         191
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         196
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               537
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              563
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4580
;  :mk-clause               699
;  :num-allocs              8726153
;  :num-checks              785
;  :propagations            488
;  :quant-instantiations    210
;  :rlimit-count            327151)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))))))))))))))))))
  $t@200@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10931
;  :arith-add-rows          91
;  :arith-assert-diseq      163
;  :arith-assert-lower      608
;  :arith-assert-upper      416
;  :arith-conflicts         191
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         196
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               537
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2761
;  :datatype-occurs-check   837
;  :datatype-splits         2180
;  :decisions               2627
;  :del-clause              563
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.90
;  :mk-bool-var             4580
;  :mk-clause               699
;  :num-allocs              8726153
;  :num-checks              786
;  :propagations            488
;  :quant-instantiations    210
;  :rlimit-count            327162)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11381
;  :arith-add-rows          91
;  :arith-assert-diseq      164
;  :arith-assert-lower      611
;  :arith-assert-upper      417
;  :arith-conflicts         191
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         196
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               537
;  :datatype-accessor-ax    570
;  :datatype-constructor-ax 2889
;  :datatype-occurs-check   910
;  :datatype-splits         2305
;  :decisions               2744
;  :del-clause              567
;  :final-checks            121
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.92
;  :mk-bool-var             4694
;  :mk-clause               703
;  :num-allocs              9267747
;  :num-checks              787
;  :propagations            505
;  :quant-instantiations    213
;  :rlimit-count            329967
;  :time                    0.00)
(declare-const $k@209@08 $Perm)
(assert ($Perm.isReadVar $k@209@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@209@08 $Perm.No) (< $Perm.No $k@209@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11381
;  :arith-add-rows          91
;  :arith-assert-diseq      165
;  :arith-assert-lower      613
;  :arith-assert-upper      418
;  :arith-conflicts         191
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         196
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               538
;  :datatype-accessor-ax    570
;  :datatype-constructor-ax 2889
;  :datatype-occurs-check   910
;  :datatype-splits         2305
;  :decisions               2744
;  :del-clause              567
;  :final-checks            121
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.92
;  :mk-bool-var             4698
;  :mk-clause               705
;  :num-allocs              9267747
;  :num-checks              788
;  :propagations            506
;  :quant-instantiations    213
;  :rlimit-count            330165)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@178@08 $k@190@08) $k@201@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          91
;  :arith-assert-diseq      165
;  :arith-assert-lower      613
;  :arith-assert-upper      419
;  :arith-conflicts         192
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         196
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               539
;  :datatype-accessor-ax    570
;  :datatype-constructor-ax 2889
;  :datatype-occurs-check   910
;  :datatype-splits         2305
;  :decisions               2744
;  :del-clause              569
;  :final-checks            121
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.92
;  :mk-bool-var             4700
;  :mk-clause               707
;  :num-allocs              9267747
;  :num-checks              789
;  :propagations            507
;  :quant-instantiations    213
;  :rlimit-count            330243)
(assert (< $k@209@08 (+ (- $k@178@08 $k@190@08) $k@201@08)))
(assert (<= $Perm.No (- (+ (- $k@178@08 $k@190@08) $k@201@08) $k@209@08)))
(assert (<= (- (+ (- $k@178@08 $k@190@08) $k@201@08) $k@209@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@178@08 $k@190@08) $k@201@08) $k@209@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder2 != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@178@08 $k@190@08) $k@201@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      421
;  :arith-conflicts         193
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         197
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               540
;  :datatype-accessor-ax    570
;  :datatype-constructor-ax 2889
;  :datatype-occurs-check   910
;  :datatype-splits         2305
;  :decisions               2744
;  :del-clause              569
;  :final-checks            121
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.92
;  :mk-bool-var             4704
;  :mk-clause               707
;  :num-allocs              9267747
;  :num-checks              790
;  :propagations            507
;  :quant-instantiations    213
;  :rlimit-count            330515)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      421
;  :arith-conflicts         193
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         197
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               540
;  :datatype-accessor-ax    570
;  :datatype-constructor-ax 2889
;  :datatype-occurs-check   910
;  :datatype-splits         2305
;  :decisions               2744
;  :del-clause              569
;  :final-checks            121
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.92
;  :mk-bool-var             4704
;  :mk-clause               707
;  :num-allocs              9267747
;  :num-checks              791
;  :propagations            507
;  :quant-instantiations    213
;  :rlimit-count            330528)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@178@08 $k@190@08) $k@201@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      422
;  :arith-conflicts         194
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         198
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               541
;  :datatype-accessor-ax    570
;  :datatype-constructor-ax 2889
;  :datatype-occurs-check   910
;  :datatype-splits         2305
;  :decisions               2744
;  :del-clause              569
;  :final-checks            121
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.92
;  :mk-bool-var             4705
;  :mk-clause               707
;  :num-allocs              9267747
;  :num-checks              792
;  :propagations            507
;  :quant-instantiations    213
;  :rlimit-count            330606)
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@177@08 $k@189@08) $k@199@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      423
;  :arith-conflicts         195
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    570
;  :datatype-constructor-ax 2889
;  :datatype-occurs-check   910
;  :datatype-splits         2305
;  :decisions               2744
;  :del-clause              569
;  :final-checks            121
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.92
;  :mk-bool-var             4706
;  :mk-clause               707
;  :num-allocs              9267747
;  :num-checks              793
;  :propagations            507
;  :quant-instantiations    213
;  :rlimit-count            330684)
(set-option :timeout 0)
(push) ; 12
(assert (not (= $t@200@08 diz@10@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      423
;  :arith-conflicts         195
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    570
;  :datatype-constructor-ax 2889
;  :datatype-occurs-check   910
;  :datatype-splits         2305
;  :decisions               2744
;  :del-clause              569
;  :final-checks            121
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.92
;  :mk-bool-var             4706
;  :mk-clause               707
;  :num-allocs              9267747
;  :num-checks              794
;  :propagations            507
;  :quant-instantiations    213
;  :rlimit-count            330695)
(assert (= $t@200@08 diz@10@08))
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      423
;  :arith-conflicts         195
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    570
;  :datatype-constructor-ax 2889
;  :datatype-occurs-check   910
;  :datatype-splits         2305
;  :decisions               2744
;  :del-clause              569
;  :final-checks            121
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.92
;  :mk-bool-var             4706
;  :mk-clause               707
;  :num-allocs              9267747
;  :num-checks              795
;  :propagations            507
;  :quant-instantiations    213
;  :rlimit-count            330711)
(pop) ; 11
(push) ; 11
; [else-branch: 59 | !(First:(Second:(Second:(Second:($t@172@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@172@08))))))[3] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
          3)
        (- 0 2))))))
(pop) ; 11
(set-option :timeout 10)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11804
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      423
;  :arith-conflicts         195
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    577
;  :datatype-constructor-ax 3020
;  :datatype-occurs-check   927
;  :datatype-splits         2403
;  :decisions               2870
;  :del-clause              589
;  :final-checks            124
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             4808
;  :mk-clause               708
;  :num-allocs              9539765
;  :num-checks              796
;  :propagations            514
;  :quant-instantiations    214
;  :rlimit-count            333495
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12226
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      423
;  :arith-conflicts         195
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    584
;  :datatype-constructor-ax 3151
;  :datatype-occurs-check   944
;  :datatype-splits         2501
;  :decisions               2996
;  :del-clause              590
;  :final-checks            127
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             4910
;  :mk-clause               709
;  :num-allocs              9539765
;  :num-checks              797
;  :propagations            521
;  :quant-instantiations    215
;  :rlimit-count            336198
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12648
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      423
;  :arith-conflicts         195
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               545
;  :datatype-accessor-ax    591
;  :datatype-constructor-ax 3282
;  :datatype-occurs-check   961
;  :datatype-splits         2599
;  :decisions               3122
;  :del-clause              591
;  :final-checks            130
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5012
;  :mk-clause               710
;  :num-allocs              9539765
;  :num-checks              798
;  :propagations            528
;  :quant-instantiations    216
;  :rlimit-count            338901
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08)))))))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13043
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      423
;  :arith-conflicts         195
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               546
;  :datatype-accessor-ax    598
;  :datatype-constructor-ax 3398
;  :datatype-occurs-check   978
;  :datatype-splits         2697
;  :decisions               3233
;  :del-clause              592
;  :final-checks            133
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5114
;  :mk-clause               711
;  :num-allocs              9539765
;  :num-checks              799
;  :propagations            535
;  :quant-instantiations    217
;  :rlimit-count            341500
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13465
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      423
;  :arith-conflicts         195
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               547
;  :datatype-accessor-ax    605
;  :datatype-constructor-ax 3529
;  :datatype-occurs-check   995
;  :datatype-splits         2795
;  :decisions               3359
;  :del-clause              593
;  :final-checks            136
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5216
;  :mk-clause               712
;  :num-allocs              9539765
;  :num-checks              800
;  :propagations            542
;  :quant-instantiations    218
;  :rlimit-count            344203
;  :time                    0.00)
; [eval] !(diz.Prc_half_adder_1_m.Main_process_state[1] != -1 || diz.Prc_half_adder_1_m.Main_event_state[3] != -2)
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1 || diz.Prc_half_adder_1_m.Main_event_state[3] != -2
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1] != -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[1]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13465
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      423
;  :arith-conflicts         195
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               547
;  :datatype-accessor-ax    605
;  :datatype-constructor-ax 3529
;  :datatype-occurs-check   995
;  :datatype-splits         2795
;  :decisions               3359
;  :del-clause              593
;  :final-checks            136
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5216
;  :mk-clause               712
;  :num-allocs              9539765
;  :num-checks              801
;  :propagations            542
;  :quant-instantiations    218
;  :rlimit-count            344218)
; [eval] -1
(push) ; 11
; [then-branch: 72 | First:(Second:(Second:(Second:($t@172@08))))[1] != -1 | live]
; [else-branch: 72 | First:(Second:(Second:(Second:($t@172@08))))[1] == -1 | live]
(push) ; 12
; [then-branch: 72 | First:(Second:(Second:(Second:($t@172@08))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
      1)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 72 | First:(Second:(Second:(Second:($t@172@08))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    1)
  (- 0 1)))
; [eval] diz.Prc_half_adder_1_m.Main_event_state[3] != -2
; [eval] diz.Prc_half_adder_1_m.Main_event_state[3]
(push) ; 13
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13466
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      423
;  :arith-conflicts         195
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               547
;  :datatype-accessor-ax    605
;  :datatype-constructor-ax 3529
;  :datatype-occurs-check   995
;  :datatype-splits         2795
;  :decisions               3359
;  :del-clause              593
;  :final-checks            136
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5217
;  :mk-clause               712
;  :num-allocs              9539765
;  :num-checks              802
;  :propagations            542
;  :quant-instantiations    218
;  :rlimit-count            344376)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
        3)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13804
;  :arith-add-rows          92
;  :arith-assert-diseq      165
;  :arith-assert-lower      615
;  :arith-assert-upper      423
;  :arith-conflicts         195
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               547
;  :datatype-accessor-ax    611
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1011
;  :datatype-splits         2891
;  :decisions               3454
;  :del-clause              593
;  :final-checks            139
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5315
;  :mk-clause               712
;  :num-allocs              9539765
;  :num-checks              803
;  :propagations            549
;  :quant-instantiations    219
;  :rlimit-count            346784
;  :time                    0.00)
(push) ; 11
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
          3)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14297
;  :arith-add-rows          92
;  :arith-assert-diseq      166
;  :arith-assert-lower      618
;  :arith-assert-upper      424
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              600
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5432
;  :mk-clause               719
;  :num-allocs              9539765
;  :num-checks              804
;  :propagations            558
;  :quant-instantiations    221
;  :rlimit-count            349970
;  :time                    0.00)
; [then-branch: 73 | !(First:(Second:(Second:(Second:($t@172@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@172@08))))))[3] != -2) | live]
; [else-branch: 73 | First:(Second:(Second:(Second:($t@172@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@172@08))))))[3] != -2 | live]
(push) ; 11
; [then-branch: 73 | !(First:(Second:(Second:(Second:($t@172@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@172@08))))))[3] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
          3)
        (- 0 2))))))
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      166
;  :arith-assert-lower      618
;  :arith-assert-upper      424
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              600
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5434
;  :mk-clause               719
;  :num-allocs              9539765
;  :num-checks              805
;  :propagations            558
;  :quant-instantiations    221
;  :rlimit-count            350187)
; [eval] diz.Prc_half_adder_1_m != null
; [eval] |diz.Prc_half_adder_1_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] |diz.Prc_half_adder_1_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] (forall i__35: Int :: { diz.Prc_half_adder_1_m.Main_process_state[i__35] } 0 <= i__35 && i__35 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__35] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35] && diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|)
(declare-const i__35@210@08 Int)
(push) ; 12
; [eval] 0 <= i__35 && i__35 < |diz.Prc_half_adder_1_m.Main_process_state| ==> diz.Prc_half_adder_1_m.Main_process_state[i__35] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35] && diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= i__35 && i__35 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] 0 <= i__35
(push) ; 13
; [then-branch: 74 | 0 <= i__35@210@08 | live]
; [else-branch: 74 | !(0 <= i__35@210@08) | live]
(push) ; 14
; [then-branch: 74 | 0 <= i__35@210@08]
(assert (<= 0 i__35@210@08))
; [eval] i__35 < |diz.Prc_half_adder_1_m.Main_process_state|
; [eval] |diz.Prc_half_adder_1_m.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 74 | !(0 <= i__35@210@08)]
(assert (not (<= 0 i__35@210@08)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 75 | i__35@210@08 < |First:(Second:(Second:(Second:($t@172@08))))| && 0 <= i__35@210@08 | live]
; [else-branch: 75 | !(i__35@210@08 < |First:(Second:(Second:(Second:($t@172@08))))| && 0 <= i__35@210@08) | live]
(push) ; 14
; [then-branch: 75 | i__35@210@08 < |First:(Second:(Second:(Second:($t@172@08))))| && 0 <= i__35@210@08]
(assert (and
  (<
    i__35@210@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
  (<= 0 i__35@210@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35] == -1 || 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35] && diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35] == -1
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35]
(push) ; 15
(assert (not (>= i__35@210@08 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      166
;  :arith-assert-lower      619
;  :arith-assert-upper      425
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              600
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5436
;  :mk-clause               719
;  :num-allocs              9539765
;  :num-checks              806
;  :propagations            558
;  :quant-instantiations    221
;  :rlimit-count            350323)
; [eval] -1
(push) ; 15
; [then-branch: 76 | First:(Second:(Second:(Second:($t@172@08))))[i__35@210@08] == -1 | live]
; [else-branch: 76 | First:(Second:(Second:(Second:($t@172@08))))[i__35@210@08] != -1 | live]
(push) ; 16
; [then-branch: 76 | First:(Second:(Second:(Second:($t@172@08))))[i__35@210@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    i__35@210@08)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 76 | First:(Second:(Second:(Second:($t@172@08))))[i__35@210@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
      i__35@210@08)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35] && diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_1_m.Main_process_state[i__35]
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35]
(push) ; 17
(assert (not (>= i__35@210@08 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      167
;  :arith-assert-lower      622
;  :arith-assert-upper      426
;  :arith-conflicts         195
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              600
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5442
;  :mk-clause               723
;  :num-allocs              9539765
;  :num-checks              807
;  :propagations            560
;  :quant-instantiations    222
;  :rlimit-count            350555)
(push) ; 17
; [then-branch: 77 | 0 <= First:(Second:(Second:(Second:($t@172@08))))[i__35@210@08] | live]
; [else-branch: 77 | !(0 <= First:(Second:(Second:(Second:($t@172@08))))[i__35@210@08]) | live]
(push) ; 18
; [then-branch: 77 | 0 <= First:(Second:(Second:(Second:($t@172@08))))[i__35@210@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    i__35@210@08)))
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35] < |diz.Prc_half_adder_1_m.Main_event_state|
; [eval] diz.Prc_half_adder_1_m.Main_process_state[i__35]
(push) ; 19
(assert (not (>= i__35@210@08 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      167
;  :arith-assert-lower      622
;  :arith-assert-upper      426
;  :arith-conflicts         195
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              600
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5442
;  :mk-clause               723
;  :num-allocs              9539765
;  :num-checks              808
;  :propagations            560
;  :quant-instantiations    222
;  :rlimit-count            350669)
; [eval] |diz.Prc_half_adder_1_m.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 77 | !(0 <= First:(Second:(Second:(Second:($t@172@08))))[i__35@210@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
      i__35@210@08))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 75 | !(i__35@210@08 < |First:(Second:(Second:(Second:($t@172@08))))| && 0 <= i__35@210@08)]
(assert (not
  (and
    (<
      i__35@210@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
    (<= 0 i__35@210@08))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((i__35@210@08 Int)) (!
  (implies
    (and
      (<
        i__35@210@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
      (<= 0 i__35@210@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
          i__35@210@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
            i__35@210@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
            i__35@210@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    i__35@210@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      169
;  :arith-assert-lower      623
;  :arith-assert-upper      427
;  :arith-conflicts         195
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               550
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5450
;  :mk-clause               737
;  :num-allocs              9539765
;  :num-checks              809
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            351115)
(assert (forall ((i__35@210@08 Int)) (!
  (implies
    (and
      (<
        i__35@210@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
      (<= 0 i__35@210@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
          i__35@210@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
            i__35@210@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
            i__35@210@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
    i__35@210@08))
  :qid |prog.l<no position>|)))
(declare-const $k@211@08 $Perm)
(assert ($Perm.isReadVar $k@211@08 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@211@08 $Perm.No) (< $Perm.No $k@211@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      170
;  :arith-assert-lower      625
;  :arith-assert-upper      428
;  :arith-conflicts         195
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5455
;  :mk-clause               739
;  :num-allocs              9539765
;  :num-checks              810
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            351677)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@174@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      170
;  :arith-assert-lower      625
;  :arith-assert-upper      428
;  :arith-conflicts         195
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5455
;  :mk-clause               739
;  :num-allocs              9539765
;  :num-checks              811
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            351688)
(assert (< $k@211@08 $k@174@08))
(assert (<= $Perm.No (- $k@174@08 $k@211@08)))
(assert (<= (- $k@174@08 $k@211@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@174@08 $k@211@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder != null
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      170
;  :arith-assert-lower      627
;  :arith-assert-upper      429
;  :arith-conflicts         195
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               552
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5458
;  :mk-clause               739
;  :num-allocs              9539765
;  :num-checks              812
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            351896)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      170
;  :arith-assert-lower      627
;  :arith-assert-upper      429
;  :arith-conflicts         195
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               553
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5458
;  :mk-clause               739
;  :num-allocs              9539765
;  :num-checks              813
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            351944)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      170
;  :arith-assert-lower      627
;  :arith-assert-upper      429
;  :arith-conflicts         195
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5458
;  :mk-clause               739
;  :num-allocs              9539765
;  :num-checks              814
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            351992)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      170
;  :arith-assert-lower      627
;  :arith-assert-upper      429
;  :arith-conflicts         195
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               555
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5458
;  :mk-clause               739
;  :num-allocs              9539765
;  :num-checks              815
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            352040)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      170
;  :arith-assert-lower      627
;  :arith-assert-upper      429
;  :arith-conflicts         195
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               556
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5458
;  :mk-clause               739
;  :num-allocs              9539765
;  :num-checks              816
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            352088)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      170
;  :arith-assert-lower      627
;  :arith-assert-upper      429
;  :arith-conflicts         195
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5458
;  :mk-clause               739
;  :num-allocs              9539765
;  :num-checks              817
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            352136)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      170
;  :arith-assert-lower      627
;  :arith-assert-upper      429
;  :arith-conflicts         195
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               558
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5458
;  :mk-clause               739
;  :num-allocs              9539765
;  :num-checks              818
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            352184)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      170
;  :arith-assert-lower      627
;  :arith-assert-upper      429
;  :arith-conflicts         195
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5458
;  :mk-clause               739
;  :num-allocs              9539765
;  :num-checks              819
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            352232)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      170
;  :arith-assert-lower      627
;  :arith-assert-upper      429
;  :arith-conflicts         195
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               560
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5458
;  :mk-clause               739
;  :num-allocs              9539765
;  :num-checks              820
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            352280)
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      170
;  :arith-assert-lower      627
;  :arith-assert-upper      429
;  :arith-conflicts         195
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               561
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5458
;  :mk-clause               739
;  :num-allocs              9539765
;  :num-checks              821
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            352328)
(declare-const $k@212@08 $Perm)
(assert ($Perm.isReadVar $k@212@08 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      171
;  :arith-assert-lower      629
;  :arith-assert-upper      430
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               562
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5462
;  :mk-clause               741
;  :num-allocs              9539765
;  :num-checks              822
;  :propagations            564
;  :quant-instantiations    223
;  :rlimit-count            352524)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@212@08 $Perm.No) (< $Perm.No $k@212@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      171
;  :arith-assert-lower      629
;  :arith-assert-upper      430
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               563
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5462
;  :mk-clause               741
;  :num-allocs              9539765
;  :num-checks              823
;  :propagations            564
;  :quant-instantiations    223
;  :rlimit-count            352574)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@175@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      171
;  :arith-assert-lower      629
;  :arith-assert-upper      430
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               563
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5462
;  :mk-clause               741
;  :num-allocs              9539765
;  :num-checks              824
;  :propagations            564
;  :quant-instantiations    223
;  :rlimit-count            352585)
(assert (< $k@212@08 $k@175@08))
(assert (<= $Perm.No (- $k@175@08 $k@212@08)))
(assert (<= (- $k@175@08 $k@212@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@175@08 $k@212@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08))))))))))
      $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder.Full_adder_m == diz.Prc_half_adder_1_m
(push) ; 12
(assert (not (< $Perm.No $k@174@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      171
;  :arith-assert-lower      631
;  :arith-assert-upper      431
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               564
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5465
;  :mk-clause               741
;  :num-allocs              9539765
;  :num-checks              825
;  :propagations            564
;  :quant-instantiations    223
;  :rlimit-count            352799)
(push) ; 12
(assert (not (< $Perm.No $k@175@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      171
;  :arith-assert-lower      631
;  :arith-assert-upper      431
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               565
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5465
;  :mk-clause               741
;  :num-allocs              9539765
;  :num-checks              826
;  :propagations            564
;  :quant-instantiations    223
;  :rlimit-count            352847)
(declare-const $k@213@08 $Perm)
(assert ($Perm.isReadVar $k@213@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@213@08 $Perm.No) (< $Perm.No $k@213@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      172
;  :arith-assert-lower      633
;  :arith-assert-upper      432
;  :arith-conflicts         195
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               566
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5469
;  :mk-clause               743
;  :num-allocs              9539765
;  :num-checks              827
;  :propagations            565
;  :quant-instantiations    223
;  :rlimit-count            353046)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@176@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      172
;  :arith-assert-lower      633
;  :arith-assert-upper      432
;  :arith-conflicts         195
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               566
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5469
;  :mk-clause               743
;  :num-allocs              9539765
;  :num-checks              828
;  :propagations            565
;  :quant-instantiations    223
;  :rlimit-count            353057)
(assert (< $k@213@08 $k@176@08))
(assert (<= $Perm.No (- $k@176@08 $k@213@08)))
(assert (<= (- $k@176@08 $k@213@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@176@08 $k@213@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_prc != null
(push) ; 12
(assert (not (< $Perm.No $k@176@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      172
;  :arith-assert-lower      635
;  :arith-assert-upper      433
;  :arith-conflicts         195
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               567
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5472
;  :mk-clause               743
;  :num-allocs              9539765
;  :num-checks              829
;  :propagations            565
;  :quant-instantiations    223
;  :rlimit-count            353265)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      172
;  :arith-assert-lower      635
;  :arith-assert-upper      433
;  :arith-conflicts         195
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               567
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5472
;  :mk-clause               743
;  :num-allocs              9539765
;  :num-checks              830
;  :propagations            565
;  :quant-instantiations    223
;  :rlimit-count            353278)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@176@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      172
;  :arith-assert-lower      635
;  :arith-assert-upper      433
;  :arith-conflicts         195
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               568
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5472
;  :mk-clause               743
;  :num-allocs              9539765
;  :num-checks              831
;  :propagations            565
;  :quant-instantiations    223
;  :rlimit-count            353326)
(declare-const $k@214@08 $Perm)
(assert ($Perm.isReadVar $k@214@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@214@08 $Perm.No) (< $Perm.No $k@214@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      173
;  :arith-assert-lower      637
;  :arith-assert-upper      434
;  :arith-conflicts         195
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               569
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5476
;  :mk-clause               745
;  :num-allocs              9539765
;  :num-checks              832
;  :propagations            566
;  :quant-instantiations    223
;  :rlimit-count            353525)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@177@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      173
;  :arith-assert-lower      637
;  :arith-assert-upper      434
;  :arith-conflicts         195
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               569
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5476
;  :mk-clause               745
;  :num-allocs              9539765
;  :num-checks              833
;  :propagations            566
;  :quant-instantiations    223
;  :rlimit-count            353536)
(assert (< $k@214@08 $k@177@08))
(assert (<= $Perm.No (- $k@177@08 $k@214@08)))
(assert (<= (- $k@177@08 $k@214@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@177@08 $k@214@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 != null
(push) ; 12
(assert (not (< $Perm.No $k@177@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      173
;  :arith-assert-lower      639
;  :arith-assert-upper      435
;  :arith-conflicts         195
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               570
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5479
;  :mk-clause               745
;  :num-allocs              9539765
;  :num-checks              834
;  :propagations            566
;  :quant-instantiations    223
;  :rlimit-count            353744)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      173
;  :arith-assert-lower      639
;  :arith-assert-upper      435
;  :arith-conflicts         195
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               570
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5479
;  :mk-clause               745
;  :num-allocs              9539765
;  :num-checks              835
;  :propagations            566
;  :quant-instantiations    223
;  :rlimit-count            353757)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@177@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14299
;  :arith-add-rows          92
;  :arith-assert-diseq      173
;  :arith-assert-lower      639
;  :arith-assert-upper      435
;  :arith-conflicts         195
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               571
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3778
;  :datatype-occurs-check   1033
;  :datatype-splits         2991
;  :decisions               3599
;  :del-clause              618
;  :final-checks            143
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5479
;  :mk-clause               745
;  :num-allocs              9539765
;  :num-checks              836
;  :propagations            566
;  :quant-instantiations    223
;  :rlimit-count            353805)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14635
;  :arith-add-rows          92
;  :arith-assert-diseq      173
;  :arith-assert-lower      639
;  :arith-assert-upper      435
;  :arith-conflicts         195
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               571
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 3877
;  :datatype-occurs-check   1049
;  :datatype-splits         3087
;  :decisions               3694
;  :del-clause              618
;  :final-checks            146
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5575
;  :mk-clause               745
;  :num-allocs              9539765
;  :num-checks              837
;  :propagations            573
;  :quant-instantiations    224
;  :rlimit-count            356049
;  :time                    0.00)
(declare-const $k@215@08 $Perm)
(assert ($Perm.isReadVar $k@215@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@215@08 $Perm.No) (< $Perm.No $k@215@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14635
;  :arith-add-rows          92
;  :arith-assert-diseq      174
;  :arith-assert-lower      641
;  :arith-assert-upper      436
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               572
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 3877
;  :datatype-occurs-check   1049
;  :datatype-splits         3087
;  :decisions               3694
;  :del-clause              618
;  :final-checks            146
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5579
;  :mk-clause               747
;  :num-allocs              9539765
;  :num-checks              838
;  :propagations            574
;  :quant-instantiations    224
;  :rlimit-count            356248)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@178@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14635
;  :arith-add-rows          92
;  :arith-assert-diseq      174
;  :arith-assert-lower      641
;  :arith-assert-upper      436
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               572
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 3877
;  :datatype-occurs-check   1049
;  :datatype-splits         3087
;  :decisions               3694
;  :del-clause              618
;  :final-checks            146
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5579
;  :mk-clause               747
;  :num-allocs              9539765
;  :num-checks              839
;  :propagations            574
;  :quant-instantiations    224
;  :rlimit-count            356259)
(assert (< $k@215@08 $k@178@08))
(assert (<= $Perm.No (- $k@178@08 $k@215@08)))
(assert (<= (- $k@178@08 $k@215@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@178@08 $k@215@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@172@08)) $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder2 != null
(push) ; 12
(assert (not (< $Perm.No $k@178@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14635
;  :arith-add-rows          92
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               573
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 3877
;  :datatype-occurs-check   1049
;  :datatype-splits         3087
;  :decisions               3694
;  :del-clause              618
;  :final-checks            146
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5582
;  :mk-clause               747
;  :num-allocs              9539765
;  :num-checks              840
;  :propagations            574
;  :quant-instantiations    224
;  :rlimit-count            356467)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14635
;  :arith-add-rows          92
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               573
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 3877
;  :datatype-occurs-check   1049
;  :datatype-splits         3087
;  :decisions               3694
;  :del-clause              618
;  :final-checks            146
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5582
;  :mk-clause               747
;  :num-allocs              9539765
;  :num-checks              841
;  :propagations            574
;  :quant-instantiations    224
;  :rlimit-count            356480)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@178@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14635
;  :arith-add-rows          92
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               574
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 3877
;  :datatype-occurs-check   1049
;  :datatype-splits         3087
;  :decisions               3694
;  :del-clause              618
;  :final-checks            146
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5582
;  :mk-clause               747
;  :num-allocs              9539765
;  :num-checks              842
;  :propagations            574
;  :quant-instantiations    224
;  :rlimit-count            356528)
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(push) ; 12
(assert (not (< $Perm.No $k@177@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14635
;  :arith-add-rows          92
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 3877
;  :datatype-occurs-check   1049
;  :datatype-splits         3087
;  :decisions               3694
;  :del-clause              618
;  :final-checks            146
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5582
;  :mk-clause               747
;  :num-allocs              9539765
;  :num-checks              843
;  :propagations            574
;  :quant-instantiations    224
;  :rlimit-count            356576)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14635
;  :arith-add-rows          92
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 3877
;  :datatype-occurs-check   1049
;  :datatype-splits         3087
;  :decisions               3694
;  :del-clause              618
;  :final-checks            146
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5582
;  :mk-clause               747
;  :num-allocs              9539765
;  :num-checks              844
;  :propagations            574
;  :quant-instantiations    224
;  :rlimit-count            356589)
(pop) ; 11
(push) ; 11
; [else-branch: 73 | First:(Second:(Second:(Second:($t@172@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@172@08))))))[3] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@172@08)))))))
        3)
      (- 0 2)))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14871
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               576
;  :datatype-accessor-ax    630
;  :datatype-constructor-ax 3960
;  :datatype-occurs-check   1061
;  :datatype-splits         3150
;  :decisions               3772
;  :del-clause              685
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.83
;  :mk-bool-var             5648
;  :mk-clause               748
;  :num-allocs              10125333
;  :num-checks              845
;  :propagations            578
;  :quant-instantiations    224
;  :rlimit-count            358489
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15107
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               577
;  :datatype-accessor-ax    635
;  :datatype-constructor-ax 4043
;  :datatype-occurs-check   1073
;  :datatype-splits         3213
;  :decisions               3850
;  :del-clause              686
;  :final-checks            152
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5714
;  :mk-clause               749
;  :num-allocs              10713622
;  :num-checks              846
;  :propagations            582
;  :quant-instantiations    224
;  :rlimit-count            360219
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15343
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               578
;  :datatype-accessor-ax    640
;  :datatype-constructor-ax 4126
;  :datatype-occurs-check   1085
;  :datatype-splits         3276
;  :decisions               3928
;  :del-clause              687
;  :final-checks            155
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5780
;  :mk-clause               750
;  :num-allocs              11304626
;  :num-checks              847
;  :propagations            586
;  :quant-instantiations    224
;  :rlimit-count            361949
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15590
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               579
;  :datatype-accessor-ax    645
;  :datatype-constructor-ax 4209
;  :datatype-occurs-check   1097
;  :datatype-splits         3339
;  :decisions               4006
;  :del-clause              688
;  :final-checks            158
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5846
;  :mk-clause               751
;  :num-allocs              11898348
;  :num-checks              848
;  :propagations            590
;  :quant-instantiations    224
;  :rlimit-count            363850
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15826
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               580
;  :datatype-accessor-ax    650
;  :datatype-constructor-ax 4292
;  :datatype-occurs-check   1109
;  :datatype-splits         3402
;  :decisions               4084
;  :del-clause              689
;  :final-checks            161
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5912
;  :mk-clause               752
;  :num-allocs              12494762
;  :num-checks              849
;  :propagations            594
;  :quant-instantiations    224
;  :rlimit-count            365580
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16118
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               581
;  :datatype-accessor-ax    659
;  :datatype-constructor-ax 4392
;  :datatype-occurs-check   1125
;  :datatype-splits         3517
;  :decisions               4175
;  :del-clause              690
;  :final-checks            165
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             6029
;  :mk-clause               753
;  :num-allocs              13094112
;  :num-checks              850
;  :propagations            602
;  :quant-instantiations    224
;  :rlimit-count            367502
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16453
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               582
;  :datatype-accessor-ax    668
;  :datatype-constructor-ax 4509
;  :datatype-occurs-check   1141
;  :datatype-splits         3632
;  :decisions               4283
;  :del-clause              691
;  :final-checks            169
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             6146
;  :mk-clause               754
;  :num-allocs              13696400
;  :num-checks              851
;  :propagations            610
;  :quant-instantiations    224
;  :rlimit-count            369644
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16745
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               583
;  :datatype-accessor-ax    677
;  :datatype-constructor-ax 4609
;  :datatype-occurs-check   1157
;  :datatype-splits         3747
;  :decisions               4374
;  :del-clause              692
;  :final-checks            173
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             6263
;  :mk-clause               755
;  :num-allocs              14301624
;  :num-checks              852
;  :propagations            618
;  :quant-instantiations    224
;  :rlimit-count            371566
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17080
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               584
;  :datatype-accessor-ax    686
;  :datatype-constructor-ax 4726
;  :datatype-occurs-check   1173
;  :datatype-splits         3862
;  :decisions               4482
;  :del-clause              693
;  :final-checks            177
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             6380
;  :mk-clause               756
;  :num-allocs              14909784
;  :num-checks              853
;  :propagations            626
;  :quant-instantiations    224
;  :rlimit-count            373708
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17372
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               585
;  :datatype-accessor-ax    695
;  :datatype-constructor-ax 4826
;  :datatype-occurs-check   1189
;  :datatype-splits         3977
;  :decisions               4573
;  :del-clause              694
;  :final-checks            181
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             6497
;  :mk-clause               757
;  :num-allocs              15520880
;  :num-checks              854
;  :propagations            634
;  :quant-instantiations    224
;  :rlimit-count            375630
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17707
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               586
;  :datatype-accessor-ax    704
;  :datatype-constructor-ax 4943
;  :datatype-occurs-check   1205
;  :datatype-splits         4092
;  :decisions               4681
;  :del-clause              695
;  :final-checks            185
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             6614
;  :mk-clause               758
;  :num-allocs              16134912
;  :num-checks              855
;  :propagations            642
;  :quant-instantiations    224
;  :rlimit-count            377772
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17956
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               587
;  :datatype-accessor-ax    709
;  :datatype-constructor-ax 5025
;  :datatype-occurs-check   1217
;  :datatype-splits         4155
;  :decisions               4758
;  :del-clause              696
;  :final-checks            188
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             6680
;  :mk-clause               759
;  :num-allocs              16751662
;  :num-checks              856
;  :propagations            646
;  :quant-instantiations    224
;  :rlimit-count            379666
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@117@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@08)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18248
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               588
;  :datatype-accessor-ax    714
;  :datatype-constructor-ax 5124
;  :datatype-occurs-check   1229
;  :datatype-splits         4218
;  :decisions               4852
;  :del-clause              697
;  :final-checks            191
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             6746
;  :mk-clause               760
;  :num-allocs              17371108
;  :num-checks              857
;  :propagations            650
;  :quant-instantiations    224
;  :rlimit-count            381780
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@58@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18540
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               589
;  :datatype-accessor-ax    723
;  :datatype-constructor-ax 5224
;  :datatype-occurs-check   1245
;  :datatype-splits         4333
;  :decisions               4943
;  :del-clause              698
;  :final-checks            195
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             6863
;  :mk-clause               761
;  :num-allocs              17993468
;  :num-checks              858
;  :propagations            658
;  :quant-instantiations    224
;  :rlimit-count            383702
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@117@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@12@08))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18875
;  :arith-add-rows          97
;  :arith-assert-diseq      174
;  :arith-assert-lower      643
;  :arith-assert-upper      437
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               590
;  :datatype-accessor-ax    732
;  :datatype-constructor-ax 5341
;  :datatype-occurs-check   1261
;  :datatype-splits         4448
;  :decisions               5051
;  :del-clause              699
;  :final-checks            199
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             6980
;  :mk-clause               762
;  :num-allocs              18618764
;  :num-checks              859
;  :propagations            666
;  :quant-instantiations    224
;  :rlimit-count            385844
;  :time                    0.00)
; [eval] !true
; [then-branch: 78 | False | dead]
; [else-branch: 78 | True | live]
(push) ; 8
; [else-branch: 78 | True]
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 29 | First:(Second:(Second:(Second:($t@58@08))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@58@08))))))[2] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@08)))))))
        2)
      (- 0 2)))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
