(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-22 16:09:08
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
(declare-const class_Sensor<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Controller<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Sensor_m: Ref]
(declare-fun $FVF.domain_Sensor_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Sensor_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Sensor_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Sensor_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Sensor_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Sensor_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Controller_m: Ref]
(declare-fun $FVF.domain_Controller_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Controller_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Controller_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Controller_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Controller_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Controller_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Sensor_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Sensor_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Controller_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Controller_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Sensor<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Controller<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Sensor<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Controller<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Sensor_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Sensor_m vs) ($FVF.domain_Sensor_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Sensor_m vs))
            (= ($FVF.lookup_Sensor_m vs x) ($FVF.lookup_Sensor_m ws x)))
          :pattern (($FVF.lookup_Sensor_m vs x) ($FVF.lookup_Sensor_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Sensor_m pm r))
    :pattern ($FVF.perm_Sensor_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Sensor_m f r) true)
    :pattern ($FVF.loc_Sensor_m f r))))
; /field_value_functions_axioms.smt2 [Controller_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Controller_m vs) ($FVF.domain_Controller_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Controller_m vs))
            (= ($FVF.lookup_Controller_m vs x) ($FVF.lookup_Controller_m ws x)))
          :pattern (($FVF.lookup_Controller_m vs x) ($FVF.lookup_Controller_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Controller_m pm r))
    :pattern ($FVF.perm_Controller_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Controller_m f r) true)
    :pattern ($FVF.loc_Controller_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@0@00 vals@1@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (let ((result@2@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))) (implies
    (and (not (= diz@0@00 $Ref.null)) (= (Seq_length vals@1@00) 3))
    (and
      (and
        (and
          (or
            (< (Seq_index vals@1@00 0) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 0)))
          (or
            (< (Seq_index vals@1@00 1) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 1))))
        (or
          (< (Seq_index vals@1@00 2) (- 0 1))
          (<= result@2@00 (Seq_index vals@1@00 2))))
      (and
        (implies
          (and
            (and
              (< (Seq_index vals@1@00 0) (- 0 1))
              (< (Seq_index vals@1@00 1) (- 0 1)))
            (< (Seq_index vals@1@00 2) (- 0 1)))
          (= result@2@00 0))
        (implies
          (or
            (or
              (<= (- 0 1) (Seq_index vals@1@00 0))
              (<= (- 0 1) (Seq_index vals@1@00 1)))
            (<= (- 0 1) (Seq_index vals@1@00 2)))
          (or
            (or
              (and
                (<= (- 0 1) (Seq_index vals@1@00 0))
                (= result@2@00 (Seq_index vals@1@00 0)))
              (and
                (<= (- 0 1) (Seq_index vals@1@00 1))
                (= result@2@00 (Seq_index vals@1@00 1))))
            (and
              (<= (- 0 1) (Seq_index vals@1@00 2))
              (= result@2@00 (Seq_index vals@1@00 2)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00)
    (instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@3@00 u@4@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (let ((result@5@00 (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))) (=
    result@5@00
    (or (= t@3@00 u@4@00) (= (directSuperclass<TYPE> t@3@00) u@4@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (= (new_frac%limited s@$ x@6@00) (new_frac s@$ x@6@00))
  :pattern ((new_frac s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (new_frac%stateless x@6@00)
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (let ((result@7@00 (new_frac%limited s@$ x@6@00))) (implies
    (and (< $Perm.No x@6@00) (<= x@6@00 $Perm.Write))
    (= (frac_val<Perm> result@7@00) x@6@00)))
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@8@00) (new_zfrac s@$ x@8@00))
  :pattern ((new_zfrac s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (new_zfrac%stateless x@8@00)
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (let ((result@9@00 (new_zfrac%limited s@$ x@8@00))) (implies
    (and (<= $Perm.No x@8@00) (<= x@8@00 $Perm.Write))
    (= (zfrac_val<Perm> result@9@00) x@8@00)))
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Sensor_getDistance_EncodedGlobalVariables ----------
(declare-const diz@0@06 $Ref)
(declare-const globals@1@06 $Ref)
(declare-const sys__result@2@06 Int)
(declare-const diz@3@06 $Ref)
(declare-const globals@4@06 $Ref)
(declare-const sys__result@5@06 Int)
(push) ; 1
(declare-const $t@6@06 $Snap)
(assert (= $t@6@06 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@3@06 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@7@06 $Snap)
(assert (= $t@7@06 ($Snap.combine ($Snap.first $t@7@06) ($Snap.second $t@7@06))))
(assert (= ($Snap.first $t@7@06) $Snap.unit))
; [eval] 0 <= sys__result
(assert (<= 0 sys__result@5@06))
(assert (= ($Snap.second $t@7@06) $Snap.unit))
; [eval] sys__result < 256
(assert (< sys__result@5@06 256))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Controller_Controller_EncodedGlobalVariables_Main ----------
(declare-const globals@8@06 $Ref)
(declare-const m0@9@06 $Ref)
(declare-const sys__result@10@06 $Ref)
(declare-const globals@11@06 $Ref)
(declare-const m0@12@06 $Ref)
(declare-const sys__result@13@06 $Ref)
(push) ; 1
; State saturation: after contract
(check-sat)
; unknown
(push) ; 2
(declare-const $t@14@06 $Snap)
(assert (= $t@14@06 ($Snap.combine ($Snap.first $t@14@06) ($Snap.second $t@14@06))))
(assert (= ($Snap.first $t@14@06) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@13@06 $Ref.null)))
(assert (=
  ($Snap.second $t@14@06)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@14@06))
    ($Snap.second ($Snap.second $t@14@06)))))
(assert (= ($Snap.first ($Snap.second $t@14@06)) $Snap.unit))
; [eval] type_of(sys__result) == class_Controller()
; [eval] type_of(sys__result)
; [eval] class_Controller()
(assert (= (type_of<TYPE> sys__result@13@06) (as class_Controller<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@14@06))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@14@06)))
    ($Snap.second ($Snap.second ($Snap.second $t@14@06))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@14@06)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@06))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06)))))
  $Snap.unit))
; [eval] sys__result.Controller_m == m0
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@06)))))
  m0@12@06))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06)))))))
  $Snap.unit))
; [eval] !sys__result.Controller_alarm_flag
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06))))))))
  $Snap.unit))
; [eval] !sys__result.Controller_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@06)))))))))))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__21: Ref
(declare-const diz__21@15@06 $Ref)
; [exec]
; diz__21 := new(Controller_m, Controller_init, Controller_alarm_flag)
(declare-const diz__21@16@06 $Ref)
(assert (not (= diz__21@16@06 $Ref.null)))
(declare-const Controller_m@17@06 $Ref)
(declare-const Controller_init@18@06 Bool)
(declare-const Controller_alarm_flag@19@06 Bool)
(assert (not (= diz__21@16@06 diz__21@15@06)))
(assert (not (= diz__21@16@06 m0@12@06)))
(assert (not (= diz__21@16@06 globals@11@06)))
(assert (not (= diz__21@16@06 sys__result@13@06)))
; [exec]
; inhale type_of(diz__21) == class_Controller()
(declare-const $t@20@06 $Snap)
(assert (= $t@20@06 $Snap.unit))
; [eval] type_of(diz__21) == class_Controller()
; [eval] type_of(diz__21)
; [eval] class_Controller()
(assert (= (type_of<TYPE> diz__21@16@06) (as class_Controller<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz__21.Controller_m := m0
; [exec]
; diz__21.Controller_alarm_flag := false
; [exec]
; diz__21.Controller_init := false
; [exec]
; inhale acc(Controller_idleToken_EncodedGlobalVariables(diz__21, globals), write)
(declare-const $t@21@06 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; sys__result := diz__21
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Controller() && acc(Controller_idleToken_EncodedGlobalVariables(sys__result, globals), write) && acc(sys__result.Controller_m, write) && sys__result.Controller_m == m0 && acc(sys__result.Controller_alarm_flag, write) && !sys__result.Controller_alarm_flag && acc(sys__result.Controller_init, write) && !sys__result.Controller_init
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Controller()
; [eval] type_of(sys__result)
; [eval] class_Controller()
; [eval] sys__result.Controller_m == m0
; [eval] !sys__result.Controller_alarm_flag
; [eval] !sys__result.Controller_init
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Main___contract_unsatisfiable__Main_EncodedGlobalVariables_Integer ----------
(declare-const diz@22@06 $Ref)
(declare-const globals@23@06 $Ref)
(declare-const md0@24@06 Int)
(declare-const diz@25@06 $Ref)
(declare-const globals@26@06 $Ref)
(declare-const md0@27@06 Int)
(push) ; 1
(declare-const $t@28@06 $Snap)
(assert (= $t@28@06 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@25@06 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && 0 < md0
(declare-const $t@29@06 $Snap)
(assert (= $t@29@06 ($Snap.combine ($Snap.first $t@29@06) ($Snap.second $t@29@06))))
(assert (= ($Snap.first $t@29@06) $Snap.unit))
(assert (= ($Snap.second $t@29@06) $Snap.unit))
; [eval] 0 < md0
(assert (< 0 md0@27@06))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Main_main_EncodedGlobalVariables ----------
(declare-const diz@30@06 $Ref)
(declare-const globals@31@06 $Ref)
(declare-const diz@32@06 $Ref)
(declare-const globals@33@06 $Ref)
(push) ; 1
(declare-const $t@34@06 $Snap)
(assert (= $t@34@06 ($Snap.combine ($Snap.first $t@34@06) ($Snap.second $t@34@06))))
(assert (= ($Snap.first $t@34@06) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@32@06 $Ref.null)))
(assert (=
  ($Snap.second $t@34@06)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@34@06))
    ($Snap.second ($Snap.second $t@34@06)))))
(declare-const $k@35@06 $Perm)
(assert ($Perm.isReadVar $k@35@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@35@06 $Perm.No) (< $Perm.No $k@35@06))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             27
;  :arith-assert-diseq    1
;  :arith-assert-lower    4
;  :arith-assert-upper    2
;  :arith-eq-adapter      2
;  :binary-propagations   11
;  :conflicts             1
;  :datatype-accessor-ax  7
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           270
;  :mk-clause             3
;  :num-allocs            3404233
;  :num-checks            10
;  :propagations          12
;  :quant-instantiations  1
;  :rlimit-count          113526)
(assert (<= $Perm.No $k@35@06))
(assert (<= $k@35@06 $Perm.Write))
(assert (implies (< $Perm.No $k@35@06) (not (= diz@32@06 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@34@06))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@34@06)))
    ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@34@06))) $Snap.unit))
; [eval] diz.Main_sensor != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@35@06)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             33
;  :arith-assert-diseq    1
;  :arith-assert-lower    4
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   11
;  :conflicts             2
;  :datatype-accessor-ax  8
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           273
;  :mk-clause             3
;  :num-allocs            3404233
;  :num-checks            11
;  :propagations          12
;  :quant-instantiations  1
;  :rlimit-count          113779)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@34@06))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@34@06)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@06))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))
(push) ; 2
(assert (not (< $Perm.No $k@35@06)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             39
;  :arith-assert-diseq    1
;  :arith-assert-lower    4
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   11
;  :conflicts             3
;  :datatype-accessor-ax  9
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           276
;  :mk-clause             3
;  :num-allocs            3404233
;  :num-checks            12
;  :propagations          12
;  :quant-instantiations  2
;  :rlimit-count          114063)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             39
;  :arith-assert-diseq    1
;  :arith-assert-lower    4
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   11
;  :conflicts             3
;  :datatype-accessor-ax  9
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           276
;  :mk-clause             3
;  :num-allocs            3404233
;  :num-checks            13
;  :propagations          12
;  :quant-instantiations  2
;  :rlimit-count          114076)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))
  $Snap.unit))
; [eval] diz.Main_sensor.Sensor_m == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@35@06)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             45
;  :arith-assert-diseq    1
;  :arith-assert-lower    4
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   11
;  :conflicts             4
;  :datatype-accessor-ax  10
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           278
;  :mk-clause             3
;  :num-allocs            3404233
;  :num-checks            14
;  :propagations          12
;  :quant-instantiations  2
;  :rlimit-count          114295)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))
  diz@32@06))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
(push) ; 2
(assert (not (< $Perm.No $k@35@06)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             52
;  :arith-assert-diseq    1
;  :arith-assert-lower    4
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   11
;  :conflicts             5
;  :datatype-accessor-ax  11
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           281
;  :mk-clause             3
;  :num-allocs            3404233
;  :num-checks            15
;  :propagations          12
;  :quant-instantiations  3
;  :rlimit-count          114581)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             52
;  :arith-assert-diseq    1
;  :arith-assert-lower    4
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   11
;  :conflicts             5
;  :datatype-accessor-ax  11
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           281
;  :mk-clause             3
;  :num-allocs            3404233
;  :num-checks            16
;  :propagations          12
;  :quant-instantiations  3
;  :rlimit-count          114594)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))
  $Snap.unit))
; [eval] !diz.Main_sensor.Sensor_init
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@35@06)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             58
;  :arith-assert-diseq    1
;  :arith-assert-lower    4
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   11
;  :conflicts             6
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           283
;  :mk-clause             3
;  :num-allocs            3404233
;  :num-checks            17
;  :propagations          12
;  :quant-instantiations  3
;  :rlimit-count          114833)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))
(declare-const $k@36@06 $Perm)
(assert ($Perm.isReadVar $k@36@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@36@06 $Perm.No) (< $Perm.No $k@36@06))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             67
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    4
;  :arith-eq-adapter      3
;  :binary-propagations   11
;  :conflicts             7
;  :datatype-accessor-ax  13
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        2
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           291
;  :mk-clause             5
;  :num-allocs            3404233
;  :num-checks            18
;  :propagations          13
;  :quant-instantiations  5
;  :rlimit-count          115302)
(assert (<= $Perm.No $k@36@06))
(assert (<= $k@36@06 $Perm.Write))
(assert (implies (< $Perm.No $k@36@06) (not (= diz@32@06 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $Snap.unit))
; [eval] diz.Main_controller != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@36@06)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             73
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    5
;  :arith-eq-adapter      3
;  :binary-propagations   11
;  :conflicts             8
;  :datatype-accessor-ax  14
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        2
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           294
;  :mk-clause             5
;  :num-allocs            3404233
;  :num-checks            19
;  :propagations          13
;  :quant-instantiations  5
;  :rlimit-count          115615)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@36@06)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             79
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    5
;  :arith-eq-adapter      3
;  :binary-propagations   11
;  :conflicts             9
;  :datatype-accessor-ax  15
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        2
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           297
;  :mk-clause             5
;  :num-allocs            3404233
;  :num-checks            20
;  :propagations          13
;  :quant-instantiations  6
;  :rlimit-count          115959)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             79
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    5
;  :arith-eq-adapter      3
;  :binary-propagations   11
;  :conflicts             9
;  :datatype-accessor-ax  15
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        2
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           297
;  :mk-clause             5
;  :num-allocs            3404233
;  :num-checks            21
;  :propagations          13
;  :quant-instantiations  6
;  :rlimit-count          115972)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))
  $Snap.unit))
; [eval] diz.Main_controller.Controller_m == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@36@06)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             85
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    5
;  :arith-eq-adapter      3
;  :binary-propagations   11
;  :conflicts             10
;  :datatype-accessor-ax  16
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        2
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           299
;  :mk-clause             5
;  :num-allocs            3404233
;  :num-checks            22
;  :propagations          13
;  :quant-instantiations  6
;  :rlimit-count          116251)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))
  diz@32@06))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@36@06)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             93
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    5
;  :arith-eq-adapter      3
;  :binary-propagations   11
;  :conflicts             11
;  :datatype-accessor-ax  17
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        2
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           302
;  :mk-clause             5
;  :num-allocs            3404233
;  :num-checks            23
;  :propagations          13
;  :quant-instantiations  7
;  :rlimit-count          116596)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             93
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    5
;  :arith-eq-adapter      3
;  :binary-propagations   11
;  :conflicts             11
;  :datatype-accessor-ax  17
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        2
;  :max-memory            3.96
;  :memory                3.80
;  :mk-bool-var           302
;  :mk-clause             5
;  :num-allocs            3404233
;  :num-checks            24
;  :propagations          13
;  :quant-instantiations  7
;  :rlimit-count          116609)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))))
  $Snap.unit))
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@36@06)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             99
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    5
;  :arith-eq-adapter      3
;  :binary-propagations   11
;  :conflicts             12
;  :datatype-accessor-ax  18
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        2
;  :max-memory            3.96
;  :memory                3.90
;  :mk-bool-var           304
;  :mk-clause             5
;  :num-allocs            3526053
;  :num-checks            25
;  :propagations          13
;  :quant-instantiations  7
;  :rlimit-count          116908)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@35@06)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             107
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    5
;  :arith-eq-adapter      3
;  :binary-propagations   11
;  :conflicts             13
;  :datatype-accessor-ax  19
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        2
;  :max-memory            3.96
;  :memory                3.90
;  :mk-bool-var           307
;  :mk-clause             5
;  :num-allocs            3526053
;  :num-checks            26
;  :propagations          13
;  :quant-instantiations  8
;  :rlimit-count          117274)
(push) ; 2
(assert (not (< $Perm.No $k@36@06)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             107
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    5
;  :arith-eq-adapter      3
;  :binary-propagations   11
;  :conflicts             14
;  :datatype-accessor-ax  19
;  :datatype-occurs-check 12
;  :final-checks          9
;  :max-generation        2
;  :max-memory            3.96
;  :memory                3.90
;  :mk-bool-var           307
;  :mk-clause             5
;  :num-allocs            3526053
;  :num-checks            27
;  :propagations          13
;  :quant-instantiations  8
;  :rlimit-count          117322)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@37@06 $Snap)
(assert (= $t@37@06 ($Snap.combine ($Snap.first $t@37@06) ($Snap.second $t@37@06))))
(declare-const $k@38@06 $Perm)
(assert ($Perm.isReadVar $k@38@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@38@06 $Perm.No) (< $Perm.No $k@38@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               128
;  :arith-assert-diseq      3
;  :arith-assert-lower      8
;  :arith-assert-upper      6
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               15
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             318
;  :mk-clause               7
;  :num-allocs              3526053
;  :num-checks              29
;  :propagations            14
;  :quant-instantiations    8
;  :rlimit-count            117988)
(assert (<= $Perm.No $k@38@06))
(assert (<= $k@38@06 $Perm.Write))
(assert (implies (< $Perm.No $k@38@06) (not (= diz@32@06 $Ref.null))))
(assert (=
  ($Snap.second $t@37@06)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@37@06))
    ($Snap.second ($Snap.second $t@37@06)))))
(assert (= ($Snap.first ($Snap.second $t@37@06)) $Snap.unit))
; [eval] diz.Main_sensor != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@38@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               134
;  :arith-assert-diseq      3
;  :arith-assert-lower      8
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               16
;  :datatype-accessor-ax    21
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             321
;  :mk-clause               7
;  :num-allocs              3526053
;  :num-checks              30
;  :propagations            14
;  :quant-instantiations    8
;  :rlimit-count            118231)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@37@06)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@37@06))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@37@06)))
    ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))
(push) ; 3
(assert (not (< $Perm.No $k@38@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               140
;  :arith-assert-diseq      3
;  :arith-assert-lower      8
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               17
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             324
;  :mk-clause               7
;  :num-allocs              3526053
;  :num-checks              31
;  :propagations            14
;  :quant-instantiations    9
;  :rlimit-count            118503)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               140
;  :arith-assert-diseq      3
;  :arith-assert-lower      8
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               17
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             324
;  :mk-clause               7
;  :num-allocs              3526053
;  :num-checks              32
;  :propagations            14
;  :quant-instantiations    9
;  :rlimit-count            118516)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@37@06)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@06))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@06))))
  $Snap.unit))
; [eval] diz.Main_sensor.Sensor_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@38@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               146
;  :arith-assert-diseq      3
;  :arith-assert-lower      8
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               18
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             326
;  :mk-clause               7
;  :num-allocs              3526053
;  :num-checks              33
;  :propagations            14
;  :quant-instantiations    9
;  :rlimit-count            118725)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@37@06))))
  diz@32@06))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))
(push) ; 3
(assert (not (< $Perm.No $k@38@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               154
;  :arith-assert-diseq      3
;  :arith-assert-lower      8
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               19
;  :datatype-accessor-ax    24
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             329
;  :mk-clause               7
;  :num-allocs              3526053
;  :num-checks              34
;  :propagations            14
;  :quant-instantiations    10
;  :rlimit-count            119000)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               154
;  :arith-assert-diseq      3
;  :arith-assert-lower      8
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               19
;  :datatype-accessor-ax    24
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             329
;  :mk-clause               7
;  :num-allocs              3526053
;  :num-checks              35
;  :propagations            14
;  :quant-instantiations    10
;  :rlimit-count            119013)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))
  $Snap.unit))
; [eval] !diz.Main_sensor.Sensor_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@38@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               160
;  :arith-assert-diseq      3
;  :arith-assert-lower      8
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     11
;  :conflicts               20
;  :datatype-accessor-ax    25
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             331
;  :mk-clause               7
;  :num-allocs              3526053
;  :num-checks              36
;  :propagations            14
;  :quant-instantiations    10
;  :rlimit-count            119242)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))))
(declare-const $k@39@06 $Perm)
(assert ($Perm.isReadVar $k@39@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@39@06 $Perm.No) (< $Perm.No $k@39@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               168
;  :arith-assert-diseq      4
;  :arith-assert-lower      10
;  :arith-assert-upper      8
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               21
;  :datatype-accessor-ax    26
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             338
;  :mk-clause               9
;  :num-allocs              3526053
;  :num-checks              37
;  :propagations            15
;  :quant-instantiations    11
;  :rlimit-count            119682)
(assert (<= $Perm.No $k@39@06))
(assert (<= $k@39@06 $Perm.Write))
(assert (implies (< $Perm.No $k@39@06) (not (= diz@32@06 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))
  $Snap.unit))
; [eval] diz.Main_controller != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@39@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               174
;  :arith-assert-diseq      4
;  :arith-assert-lower      10
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               22
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             341
;  :mk-clause               9
;  :num-allocs              3526053
;  :num-checks              38
;  :propagations            15
;  :quant-instantiations    11
;  :rlimit-count            119985)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@39@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               180
;  :arith-assert-diseq      4
;  :arith-assert-lower      10
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               23
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             344
;  :mk-clause               9
;  :num-allocs              3526053
;  :num-checks              39
;  :propagations            15
;  :quant-instantiations    12
;  :rlimit-count            120319)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               180
;  :arith-assert-diseq      4
;  :arith-assert-lower      10
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               23
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             344
;  :mk-clause               9
;  :num-allocs              3526053
;  :num-checks              40
;  :propagations            15
;  :quant-instantiations    12
;  :rlimit-count            120332)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))))
  $Snap.unit))
; [eval] diz.Main_controller.Controller_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@39@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               186
;  :arith-assert-diseq      4
;  :arith-assert-lower      10
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               24
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             346
;  :mk-clause               9
;  :num-allocs              3526053
;  :num-checks              41
;  :propagations            15
;  :quant-instantiations    12
;  :rlimit-count            120601)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))))
  diz@32@06))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@39@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               194
;  :arith-assert-diseq      4
;  :arith-assert-lower      10
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               25
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             349
;  :mk-clause               9
;  :num-allocs              3526053
;  :num-checks              42
;  :propagations            15
;  :quant-instantiations    13
;  :rlimit-count            120936)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               194
;  :arith-assert-diseq      4
;  :arith-assert-lower      10
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               25
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             349
;  :mk-clause               9
;  :num-allocs              3526053
;  :num-checks              43
;  :propagations            15
;  :quant-instantiations    13
;  :rlimit-count            120949)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))))))
  $Snap.unit))
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@39@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               200
;  :arith-assert-diseq      4
;  :arith-assert-lower      10
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               26
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             351
;  :mk-clause               9
;  :num-allocs              3526053
;  :num-checks              44
;  :propagations            15
;  :quant-instantiations    13
;  :rlimit-count            121238)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@06))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@38@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               208
;  :arith-assert-diseq      4
;  :arith-assert-lower      10
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               27
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             354
;  :mk-clause               9
;  :num-allocs              3526053
;  :num-checks              45
;  :propagations            15
;  :quant-instantiations    14
;  :rlimit-count            121594)
(push) ; 3
(assert (not (< $Perm.No $k@39@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               208
;  :arith-assert-diseq      4
;  :arith-assert-lower      10
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     11
;  :conflicts               28
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   14
;  :datatype-splits         6
;  :decisions               6
;  :del-clause              4
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             354
;  :mk-clause               9
;  :num-allocs              3526053
;  :num-checks              46
;  :propagations            15
;  :quant-instantiations    14
;  :rlimit-count            121642)
(pop) ; 2
(push) ; 2
; [exec]
; var min_advance__39: Int
(declare-const min_advance__39@40@06 Int)
; [exec]
; var __flatten_38__37: Seq[Int]
(declare-const __flatten_38__37@41@06 Seq<Int>)
; [exec]
; var __flatten_39__38: Seq[Int]
(declare-const __flatten_39__38@42@06 Seq<Int>)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@43@06 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(assert (= $t@43@06 ($Snap.combine ($Snap.first $t@43@06) ($Snap.second $t@43@06))))
(assert (= ($Snap.first $t@43@06) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@43@06)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@43@06))
    ($Snap.second ($Snap.second $t@43@06)))))
(assert (= ($Snap.first ($Snap.second $t@43@06)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@43@06))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@43@06)))
    ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@43@06))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@43@06)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@44@06 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@44@06 | live]
; [else-branch: 0 | !(0 <= i@44@06) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@44@06]
(assert (<= 0 i@44@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@44@06)]
(assert (not (<= 0 i@44@06)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i@44@06 < |First:(Second:(Second:(Second:($t@43@06))))| && 0 <= i@44@06 | live]
; [else-branch: 1 | !(i@44@06 < |First:(Second:(Second:(Second:($t@43@06))))| && 0 <= i@44@06) | live]
(push) ; 5
; [then-branch: 1 | i@44@06 < |First:(Second:(Second:(Second:($t@43@06))))| && 0 <= i@44@06]
(assert (and
  (<
    i@44@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
  (<= 0 i@44@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@44@06 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               274
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      12
;  :arith-eq-adapter        9
;  :binary-propagations     11
;  :conflicts               28
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              8
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             386
;  :mk-clause               15
;  :num-allocs              3526053
;  :num-checks              48
;  :propagations            17
;  :quant-instantiations    20
;  :rlimit-count            123356)
; [eval] -1
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:($t@43@06))))[i@44@06] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:($t@43@06))))[i@44@06] != -1 | live]
(push) ; 7
; [then-branch: 2 | First:(Second:(Second:(Second:($t@43@06))))[i@44@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
    i@44@06)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | First:(Second:(Second:(Second:($t@43@06))))[i@44@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      i@44@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@44@06 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               274
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      12
;  :arith-eq-adapter        9
;  :binary-propagations     11
;  :conflicts               28
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              8
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             387
;  :mk-clause               15
;  :num-allocs              3526053
;  :num-checks              49
;  :propagations            17
;  :quant-instantiations    20
;  :rlimit-count            123531)
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@43@06))))[i@44@06] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@43@06))))[i@44@06]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@43@06))))[i@44@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
    i@44@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@44@06 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               274
;  :arith-assert-diseq      7
;  :arith-assert-lower      20
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     11
;  :conflicts               28
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              8
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             390
;  :mk-clause               16
;  :num-allocs              3526053
;  :num-checks              50
;  :propagations            17
;  :quant-instantiations    20
;  :rlimit-count            123655)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@43@06))))[i@44@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      i@44@06))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i@44@06 < |First:(Second:(Second:(Second:($t@43@06))))| && 0 <= i@44@06)]
(assert (not
  (and
    (<
      i@44@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
    (<= 0 i@44@06))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@44@06 Int)) (!
  (implies
    (and
      (<
        i@44@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      (<= 0 i@44@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
          i@44@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
            i@44@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
            i@44@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
    i@44@06))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))
(declare-const $k@45@06 $Perm)
(assert ($Perm.isReadVar $k@45@06 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@45@06 $Perm.No) (< $Perm.No $k@45@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               285
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      13
;  :arith-eq-adapter        11
;  :binary-propagations     11
;  :conflicts               29
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             398
;  :mk-clause               18
;  :num-allocs              3526053
;  :num-checks              51
;  :propagations            18
;  :quant-instantiations    20
;  :rlimit-count            124606)
(assert (<= $Perm.No $k@45@06))
(assert (<= $k@45@06 $Perm.Write))
(assert (implies (< $Perm.No $k@45@06) (not (= diz@32@06 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
  $Snap.unit))
; [eval] 0 < diz.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@45@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               291
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :binary-propagations     11
;  :conflicts               30
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.90
;  :mk-bool-var             401
;  :mk-clause               18
;  :num-allocs              3526053
;  :num-checks              52
;  :propagations            18
;  :quant-instantiations    20
;  :rlimit-count            124939)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))
(declare-const $k@46@06 $Perm)
(assert ($Perm.isReadVar $k@46@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@46@06 $Perm.No) (< $Perm.No $k@46@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               297
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      15
;  :arith-eq-adapter        12
;  :binary-propagations     11
;  :conflicts               31
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             408
;  :mk-clause               20
;  :num-allocs              3653973
;  :num-checks              53
;  :propagations            19
;  :quant-instantiations    21
;  :rlimit-count            125450)
(declare-const $t@47@06 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@35@06)
    (=
      $t@47@06
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@34@06)))))
  (implies
    (< $Perm.No $k@46@06)
    (=
      $t@47@06
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))
(assert (<= $Perm.No (+ $k@35@06 $k@46@06)))
(assert (<= (+ $k@35@06 $k@46@06) $Perm.Write))
(assert (implies (< $Perm.No (+ $k@35@06 $k@46@06)) (not (= diz@32@06 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))
  $Snap.unit))
; [eval] diz.Main_sensor != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@35@06 $k@46@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               307
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      17
;  :arith-conflicts         1
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     11
;  :conflicts               32
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             416
;  :mk-clause               20
;  :num-allocs              3653973
;  :num-checks              54
;  :propagations            19
;  :quant-instantiations    22
;  :rlimit-count            126077)
(assert (not (= $t@47@06 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@35@06 $k@46@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               313
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-conflicts         2
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         2
;  :binary-propagations     11
;  :conflicts               33
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             419
;  :mk-clause               20
;  :num-allocs              3653973
;  :num-checks              55
;  :propagations            19
;  :quant-instantiations    22
;  :rlimit-count            126411)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@35@06 $k@46@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               318
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      19
;  :arith-conflicts         3
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               34
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             421
;  :mk-clause               20
;  :num-allocs              3653973
;  :num-checks              56
;  :propagations            19
;  :quant-instantiations    22
;  :rlimit-count            126710)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               318
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      19
;  :arith-conflicts         3
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               34
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             421
;  :mk-clause               20
;  :num-allocs              3653973
;  :num-checks              57
;  :propagations            19
;  :quant-instantiations    22
;  :rlimit-count            126723)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@34@06))) $t@47@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               318
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      19
;  :arith-conflicts         3
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               35
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             422
;  :mk-clause               20
;  :num-allocs              3653973
;  :num-checks              58
;  :propagations            19
;  :quant-instantiations    22
;  :rlimit-count            126813)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))
(declare-const $k@48@06 $Perm)
(assert ($Perm.isReadVar $k@48@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@48@06 $Perm.No) (< $Perm.No $k@48@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               326
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      20
;  :arith-conflicts         3
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         3
;  :binary-propagations     11
;  :conflicts               36
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             429
;  :mk-clause               22
;  :num-allocs              3653973
;  :num-checks              59
;  :propagations            20
;  :quant-instantiations    23
;  :rlimit-count            127345)
(declare-const $t@49@06 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@36@06)
    (=
      $t@49@06
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))
  (implies
    (< $Perm.No $k@48@06)
    (=
      $t@49@06
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))
(assert (<= $Perm.No (+ $k@36@06 $k@48@06)))
(assert (<= (+ $k@36@06 $k@48@06) $Perm.Write))
(assert (implies (< $Perm.No (+ $k@36@06 $k@48@06)) (not (= diz@32@06 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@36@06 $k@48@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               336
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      22
;  :arith-conflicts         4
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         4
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               37
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             437
;  :mk-clause               22
;  :num-allocs              3653973
;  :num-checks              60
;  :propagations            20
;  :quant-instantiations    24
;  :rlimit-count            128076)
(assert (not (= $t@49@06 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@36@06 $k@48@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               342
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      23
;  :arith-conflicts         5
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         5
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               38
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             440
;  :mk-clause               22
;  :num-allocs              3653973
;  :num-checks              61
;  :propagations            20
;  :quant-instantiations    24
;  :rlimit-count            128452)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@36@06 $k@48@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               347
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      24
;  :arith-conflicts         6
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         6
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               39
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             442
;  :mk-clause               22
;  :num-allocs              3653973
;  :num-checks              62
;  :propagations            20
;  :quant-instantiations    24
;  :rlimit-count            128793)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               347
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      24
;  :arith-conflicts         6
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         6
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               39
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             442
;  :mk-clause               22
;  :num-allocs              3653973
;  :num-checks              63
;  :propagations            20
;  :quant-instantiations    24
;  :rlimit-count            128806)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $t@49@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               347
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      24
;  :arith-conflicts         6
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         6
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             443
;  :mk-clause               22
;  :num-allocs              3653973
;  :num-checks              64
;  :propagations            20
;  :quant-instantiations    24
;  :rlimit-count            128956)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               356
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      24
;  :arith-conflicts         6
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         6
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             447
;  :mk-clause               22
;  :num-allocs              3653973
;  :num-checks              65
;  :propagations            20
;  :quant-instantiations    25
;  :rlimit-count            129386)
; [eval] -1
(push) ; 3
; [then-branch: 4 | First:(Second:(Second:(Second:($t@43@06))))[0] == -1 | live]
; [else-branch: 4 | First:(Second:(Second:(Second:($t@43@06))))[0] != -1 | live]
(push) ; 4
; [then-branch: 4 | First:(Second:(Second:(Second:($t@43@06))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
    0)
  (- 0 1)))
(pop) ; 4
(push) ; 4
; [else-branch: 4 | First:(Second:(Second:(Second:($t@43@06))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               356
;  :arith-assert-diseq      11
;  :arith-assert-lower      32
;  :arith-assert-upper      25
;  :arith-conflicts         6
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         6
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              9
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             453
;  :mk-clause               26
;  :num-allocs              3653973
;  :num-checks              66
;  :propagations            22
;  :quant-instantiations    26
;  :rlimit-count            129624)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               362
;  :arith-assert-diseq      11
;  :arith-assert-lower      32
;  :arith-assert-upper      25
;  :arith-conflicts         6
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         6
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              13
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             457
;  :mk-clause               27
;  :num-allocs              3653973
;  :num-checks              67
;  :propagations            22
;  :quant-instantiations    26
;  :rlimit-count            130061)
; [eval] -1
(push) ; 3
; [then-branch: 5 | First:(Second:(Second:(Second:($t@43@06))))[1] == -1 | live]
; [else-branch: 5 | First:(Second:(Second:(Second:($t@43@06))))[1] != -1 | live]
(push) ; 4
; [then-branch: 5 | First:(Second:(Second:(Second:($t@43@06))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
    1)
  (- 0 1)))
(pop) ; 4
(push) ; 4
; [else-branch: 5 | First:(Second:(Second:(Second:($t@43@06))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               362
;  :arith-assert-diseq      12
;  :arith-assert-lower      35
;  :arith-assert-upper      26
;  :arith-conflicts         6
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         6
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              13
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             463
;  :mk-clause               31
;  :num-allocs              3653973
;  :num-checks              68
;  :propagations            24
;  :quant-instantiations    27
;  :rlimit-count            130299)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               368
;  :arith-assert-diseq      12
;  :arith-assert-lower      35
;  :arith-assert-upper      26
;  :arith-conflicts         6
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         6
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              17
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             467
;  :mk-clause               32
;  :num-allocs              3653973
;  :num-checks              69
;  :propagations            24
;  :quant-instantiations    27
;  :rlimit-count            130746)
; [eval] -1
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               374
;  :arith-assert-diseq      12
;  :arith-assert-lower      35
;  :arith-assert-upper      26
;  :arith-conflicts         6
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         6
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              17
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             470
;  :mk-clause               32
;  :num-allocs              3653973
;  :num-checks              70
;  :propagations            24
;  :quant-instantiations    27
;  :rlimit-count            131206)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               380
;  :arith-assert-diseq      12
;  :arith-assert-lower      35
;  :arith-assert-upper      26
;  :arith-conflicts         6
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         6
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               40
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              17
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             473
;  :mk-clause               32
;  :num-allocs              3653973
;  :num-checks              71
;  :propagations            24
;  :quant-instantiations    27
;  :rlimit-count            131661)
; [eval] -1
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@36@06 $k@48@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      12
;  :arith-assert-lower      35
;  :arith-assert-upper      28
;  :arith-conflicts         7
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         7
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               41
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              17
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             477
;  :mk-clause               32
;  :num-allocs              3653973
;  :num-checks              72
;  :propagations            24
;  :quant-instantiations    27
;  :rlimit-count            132164)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $t@49@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      12
;  :arith-assert-lower      35
;  :arith-assert-upper      28
;  :arith-conflicts         7
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         7
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               42
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              17
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             478
;  :mk-clause               32
;  :num-allocs              3653973
;  :num-checks              73
;  :propagations            24
;  :quant-instantiations    27
;  :rlimit-count            132314)
(push) ; 3
; [then-branch: 6 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06))))))))))))) | live]
; [else-branch: 6 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06)))))))))))) | live]
(push) ; 4
; [then-branch: 6 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06)))))))))))))]
(pop) ; 4
(push) ; 4
; [else-branch: 6 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      12
;  :arith-assert-lower      35
;  :arith-assert-upper      28
;  :arith-conflicts         7
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         7
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              17
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             478
;  :mk-clause               32
;  :num-allocs              3653973
;  :num-checks              74
;  :propagations            24
;  :quant-instantiations    27
;  :rlimit-count            132334)
; [eval] -1
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      1)
    (- 0 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               386
;  :arith-assert-diseq      12
;  :arith-assert-lower      35
;  :arith-assert-upper      28
;  :arith-conflicts         7
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         7
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              17
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             478
;  :mk-clause               32
;  :num-allocs              3653973
;  :num-checks              75
;  :propagations            24
;  :quant-instantiations    27
;  :rlimit-count            132338)
; [then-branch: 7 | First:(Second:(Second:(Second:($t@43@06))))[1] == -1 | dead]
; [else-branch: 7 | First:(Second:(Second:(Second:($t@43@06))))[1] != -1 | live]
(push) ; 6
; [else-branch: 7 | First:(Second:(Second:(Second:($t@43@06))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      1)
    (- 0 1))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               392
;  :arith-assert-diseq      12
;  :arith-assert-lower      35
;  :arith-assert-upper      28
;  :arith-conflicts         7
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         7
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               43
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   15
;  :datatype-splits         6
;  :decisions               12
;  :del-clause              17
;  :final-checks            12
;  :max-generation          2
;  :max-memory              3.99
;  :memory                  3.99
;  :mk-bool-var             480
;  :mk-clause               32
;  :num-allocs              3653973
;  :num-checks              76
;  :propagations            24
;  :quant-instantiations    27
;  :rlimit-count            132732)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               449
;  :arith-assert-diseq      12
;  :arith-assert-lower      36
;  :arith-assert-upper      28
;  :arith-conflicts         7
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         8
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               44
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   21
;  :datatype-splits         14
;  :decisions               28
;  :del-clause              18
;  :final-checks            15
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             492
;  :mk-clause               33
;  :num-allocs              3785951
;  :num-checks              77
;  :propagations            24
;  :quant-instantiations    27
;  :rlimit-count            133500
;  :time                    0.00)
(push) ; 4
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
    2))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               505
;  :arith-assert-diseq      12
;  :arith-assert-lower      36
;  :arith-assert-upper      29
;  :arith-conflicts         7
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         8
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               45
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 42
;  :datatype-occurs-check   27
;  :datatype-splits         22
;  :decisions               44
;  :del-clause              19
;  :final-checks            18
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             504
;  :mk-clause               34
;  :num-allocs              3785951
;  :num-checks              78
;  :propagations            24
;  :quant-instantiations    27
;  :rlimit-count            134268
;  :time                    0.00)
; [then-branch: 8 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2] | live]
; [else-branch: 8 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2]) | live]
(push) ; 4
; [then-branch: 8 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               506
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      29
;  :arith-conflicts         7
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         9
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               45
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 42
;  :datatype-occurs-check   27
;  :datatype-splits         22
;  :decisions               44
;  :del-clause              19
;  :final-checks            18
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             505
;  :mk-clause               34
;  :num-allocs              3785951
;  :num-checks              79
;  :propagations            24
;  :quant-instantiations    27
;  :rlimit-count            134416)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               512
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      29
;  :arith-conflicts         7
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         9
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               45
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 42
;  :datatype-occurs-check   27
;  :datatype-splits         22
;  :decisions               44
;  :del-clause              19
;  :final-checks            18
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             508
;  :mk-clause               35
;  :num-allocs              3785951
;  :num-checks              80
;  :propagations            24
;  :quant-instantiations    27
;  :rlimit-count            135015)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               569
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      31
;  :arith-conflicts         7
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         10
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               46
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 57
;  :datatype-occurs-check   33
;  :datatype-splits         30
;  :decisions               59
;  :del-clause              24
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             523
;  :mk-clause               40
;  :num-allocs              3785951
;  :num-checks              81
;  :propagations            28
;  :quant-instantiations    28
;  :rlimit-count            135810
;  :time                    0.00)
(push) ; 4
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
    2))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               625
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      32
;  :arith-conflicts         7
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         10
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               47
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 72
;  :datatype-occurs-check   39
;  :datatype-splits         38
;  :decisions               75
;  :del-clause              25
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             534
;  :mk-clause               41
;  :num-allocs              3785951
;  :num-checks              82
;  :propagations            28
;  :quant-instantiations    28
;  :rlimit-count            136577
;  :time                    0.00)
; [then-branch: 9 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2] | live]
; [else-branch: 9 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2]) | live]
(push) ; 4
; [then-branch: 9 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 5
(assert (not (< $Perm.No (+ $k@35@06 $k@46@06))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               627
;  :arith-assert-diseq      12
;  :arith-assert-lower      41
;  :arith-assert-upper      35
;  :arith-conflicts         8
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         12
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               48
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 72
;  :datatype-occurs-check   39
;  :datatype-splits         38
;  :decisions               75
;  :del-clause              25
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             539
;  :mk-clause               44
;  :num-allocs              3785951
;  :num-checks              83
;  :propagations            32
;  :quant-instantiations    29
;  :rlimit-count            136811)
(push) ; 5
(assert (not (< $Perm.No $k@45@06)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               627
;  :arith-assert-diseq      12
;  :arith-assert-lower      41
;  :arith-assert-upper      35
;  :arith-conflicts         8
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         12
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               49
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 72
;  :datatype-occurs-check   39
;  :datatype-splits         38
;  :decisions               75
;  :del-clause              25
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             539
;  :mk-clause               44
;  :num-allocs              3785951
;  :num-checks              84
;  :propagations            32
;  :quant-instantiations    29
;  :rlimit-count            136859)
(pop) ; 4
(push) ; 4
; [else-branch: 9 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 3
(assert (not (< $Perm.No (+ $k@36@06 $k@48@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               628
;  :arith-assert-diseq      12
;  :arith-assert-lower      41
;  :arith-assert-upper      36
;  :arith-conflicts         9
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         13
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               50
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 72
;  :datatype-occurs-check   39
;  :datatype-splits         38
;  :decisions               75
;  :del-clause              28
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             542
;  :mk-clause               45
;  :num-allocs              3785951
;  :num-checks              85
;  :propagations            32
;  :quant-instantiations    29
;  :rlimit-count            137464)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $t@49@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               628
;  :arith-assert-diseq      12
;  :arith-assert-lower      41
;  :arith-assert-upper      36
;  :arith-conflicts         9
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         13
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               51
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 72
;  :datatype-occurs-check   39
;  :datatype-splits         38
;  :decisions               75
;  :del-clause              28
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             543
;  :mk-clause               45
;  :num-allocs              3785951
;  :num-checks              86
;  :propagations            32
;  :quant-instantiations    29
;  :rlimit-count            137614)
(push) ; 3
; [then-branch: 10 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06)))))))))))) | live]
; [else-branch: 10 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06))))))))))))) | live]
(push) ; 4
; [then-branch: 10 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               628
;  :arith-assert-diseq      12
;  :arith-assert-lower      41
;  :arith-assert-upper      36
;  :arith-conflicts         9
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         13
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               52
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 72
;  :datatype-occurs-check   39
;  :datatype-splits         38
;  :decisions               75
;  :del-clause              28
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             543
;  :mk-clause               45
;  :num-allocs              3785951
;  :num-checks              87
;  :propagations            32
;  :quant-instantiations    29
;  :rlimit-count            137629)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 10 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06)))))))))))))]
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               628
;  :arith-assert-diseq      12
;  :arith-assert-lower      41
;  :arith-assert-upper      36
;  :arith-conflicts         9
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         13
;  :arith-pivots            1
;  :binary-propagations     11
;  :conflicts               52
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 72
;  :datatype-occurs-check   39
;  :datatype-splits         38
;  :decisions               75
;  :del-clause              28
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             543
;  :mk-clause               45
;  :num-allocs              3785951
;  :num-checks              88
;  :propagations            32
;  :quant-instantiations    29
;  :rlimit-count            137672)
; [then-branch: 11 | First:(Second:(Second:(Second:($t@43@06))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06)))))))))))) | dead]
; [else-branch: 11 | !(First:(Second:(Second:(Second:($t@43@06))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06))))))))))))) | live]
(push) ; 4
; [else-branch: 11 | !(First:(Second:(Second:(Second:($t@43@06))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06)))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@43@06 diz@32@06 globals@33@06))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@50@06 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; Sensor_forkOperator_EncodedGlobalVariables(diz.Main_sensor, globals)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@35@06 $k@46@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               738
;  :arith-assert-diseq      12
;  :arith-assert-lower      43
;  :arith-assert-upper      41
;  :arith-conflicts         10
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         16
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               54
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              42
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             565
;  :mk-clause               48
;  :num-allocs              3785951
;  :num-checks              91
;  :propagations            35
;  :quant-instantiations    29
;  :rlimit-count            139048)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               738
;  :arith-assert-diseq      12
;  :arith-assert-lower      43
;  :arith-assert-upper      41
;  :arith-conflicts         10
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         16
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               54
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              42
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             565
;  :mk-clause               48
;  :num-allocs              3785951
;  :num-checks              92
;  :propagations            35
;  :quant-instantiations    29
;  :rlimit-count            139061)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@34@06))) $t@47@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               738
;  :arith-assert-diseq      12
;  :arith-assert-lower      43
;  :arith-assert-upper      41
;  :arith-conflicts         10
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         16
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               55
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              42
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             566
;  :mk-clause               48
;  :num-allocs              3785951
;  :num-checks              93
;  :propagations            35
;  :quant-instantiations    29
;  :rlimit-count            139151)
; [eval] diz.Sensor_m != null
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@34@06))) $t@47@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               738
;  :arith-assert-diseq      12
;  :arith-assert-lower      43
;  :arith-assert-upper      41
;  :arith-conflicts         10
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         16
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               56
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              42
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             567
;  :mk-clause               48
;  :num-allocs              3785951
;  :num-checks              94
;  :propagations            35
;  :quant-instantiations    29
;  :rlimit-count            139241)
(set-option :timeout 0)
(push) ; 3
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               738
;  :arith-assert-diseq      12
;  :arith-assert-lower      43
;  :arith-assert-upper      41
;  :arith-conflicts         10
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         16
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               56
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              42
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             567
;  :mk-clause               48
;  :num-allocs              3785951
;  :num-checks              95
;  :propagations            35
;  :quant-instantiations    29
;  :rlimit-count            139259)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))
    $Ref.null)))
(declare-const $k@51@06 $Perm)
(assert ($Perm.isReadVar $k@51@06 $Perm.Write))
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@34@06))) $t@47@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               738
;  :arith-assert-diseq      13
;  :arith-assert-lower      45
;  :arith-assert-upper      42
;  :arith-conflicts         10
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         16
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               57
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              42
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             572
;  :mk-clause               50
;  :num-allocs              3785951
;  :num-checks              96
;  :propagations            36
;  :quant-instantiations    29
;  :rlimit-count            139524)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@51@06 $Perm.No) (< $Perm.No $k@51@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               738
;  :arith-assert-diseq      13
;  :arith-assert-lower      45
;  :arith-assert-upper      42
;  :arith-conflicts         10
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         16
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               58
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              42
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             572
;  :mk-clause               50
;  :num-allocs              3785951
;  :num-checks              97
;  :propagations            36
;  :quant-instantiations    29
;  :rlimit-count            139574)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@32@06
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               738
;  :arith-assert-diseq      13
;  :arith-assert-lower      45
;  :arith-assert-upper      42
;  :arith-conflicts         10
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         16
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               58
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              42
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             572
;  :mk-clause               50
;  :num-allocs              3785951
;  :num-checks              98
;  :propagations            36
;  :quant-instantiations    29
;  :rlimit-count            139585)
(push) ; 3
(assert (not (not (= (+ $k@35@06 $k@46@06) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               739
;  :arith-assert-diseq      13
;  :arith-assert-lower      45
;  :arith-assert-upper      43
;  :arith-conflicts         11
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         16
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               59
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              44
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             574
;  :mk-clause               52
;  :num-allocs              3785951
;  :num-checks              99
;  :propagations            37
;  :quant-instantiations    29
;  :rlimit-count            139645)
(assert (< $k@51@06 (+ $k@35@06 $k@46@06)))
(assert (<= $Perm.No (- (+ $k@35@06 $k@46@06) $k@51@06)))
(assert (<= (- (+ $k@35@06 $k@46@06) $k@51@06) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@35@06 $k@46@06) $k@51@06))
  (not (= diz@32@06 $Ref.null))))
; [eval] diz.Sensor_m.Main_sensor == diz
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@34@06))) $t@47@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               739
;  :arith-assert-diseq      13
;  :arith-assert-lower      47
;  :arith-assert-upper      44
;  :arith-conflicts         11
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         16
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               60
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              44
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             578
;  :mk-clause               52
;  :num-allocs              3785951
;  :num-checks              100
;  :propagations            37
;  :quant-instantiations    29
;  :rlimit-count            139903)
(push) ; 3
(assert (not (=
  diz@32@06
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               739
;  :arith-assert-diseq      13
;  :arith-assert-lower      47
;  :arith-assert-upper      44
;  :arith-conflicts         11
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         16
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               60
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              44
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             578
;  :mk-clause               52
;  :num-allocs              3785951
;  :num-checks              101
;  :propagations            37
;  :quant-instantiations    29
;  :rlimit-count            139914)
(push) ; 3
(assert (not (< $Perm.No (+ $k@35@06 $k@46@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               739
;  :arith-assert-diseq      13
;  :arith-assert-lower      47
;  :arith-assert-upper      45
;  :arith-conflicts         12
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         17
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               61
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              44
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             579
;  :mk-clause               52
;  :num-allocs              3785951
;  :num-checks              102
;  :propagations            37
;  :quant-instantiations    29
;  :rlimit-count            139974)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               739
;  :arith-assert-diseq      13
;  :arith-assert-lower      47
;  :arith-assert-upper      45
;  :arith-conflicts         12
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         17
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               61
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              44
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             579
;  :mk-clause               52
;  :num-allocs              3785951
;  :num-checks              103
;  :propagations            37
;  :quant-instantiations    29
;  :rlimit-count            139987)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@34@06))) $t@47@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               739
;  :arith-assert-diseq      13
;  :arith-assert-lower      47
;  :arith-assert-upper      45
;  :arith-conflicts         12
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         17
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               62
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 99
;  :datatype-occurs-check   55
;  :datatype-splits         52
;  :decisions               104
;  :del-clause              44
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             580
;  :mk-clause               52
;  :num-allocs              3785951
;  :num-checks              104
;  :propagations            37
;  :quant-instantiations    29
;  :rlimit-count            140077)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      13
;  :arith-assert-lower      48
;  :arith-assert-upper      47
;  :arith-conflicts         12
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         18
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               62
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 112
;  :datatype-occurs-check   63
;  :datatype-splits         59
;  :decisions               118
;  :del-clause              45
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             588
;  :mk-clause               53
;  :num-allocs              3785951
;  :num-checks              105
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            140710
;  :time                    0.00)
; [eval] !diz.Sensor_init
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@34@06))) $t@47@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      13
;  :arith-assert-lower      48
;  :arith-assert-upper      47
;  :arith-conflicts         12
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         18
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               63
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 112
;  :datatype-occurs-check   63
;  :datatype-splits         59
;  :decisions               118
;  :del-clause              45
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             589
;  :mk-clause               53
;  :num-allocs              3785951
;  :num-checks              106
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            140800)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@34@06))) $t@47@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      13
;  :arith-assert-lower      48
;  :arith-assert-upper      47
;  :arith-conflicts         12
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         18
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               64
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 112
;  :datatype-occurs-check   63
;  :datatype-splits         59
;  :decisions               118
;  :del-clause              45
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             590
;  :mk-clause               53
;  :num-allocs              3785951
;  :num-checks              107
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            140890)
(declare-const $t@52@06 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Controller_forkOperator_EncodedGlobalVariables(diz.Main_controller, globals)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@36@06 $k@48@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-assert-diseq      13
;  :arith-assert-lower      49
;  :arith-assert-upper      50
;  :arith-conflicts         13
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         20
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               65
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              48
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             599
;  :mk-clause               54
;  :num-allocs              3785951
;  :num-checks              109
;  :propagations            41
;  :quant-instantiations    29
;  :rlimit-count            141569)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-assert-diseq      13
;  :arith-assert-lower      49
;  :arith-assert-upper      50
;  :arith-conflicts         13
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         20
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               65
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              48
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             599
;  :mk-clause               54
;  :num-allocs              3785951
;  :num-checks              110
;  :propagations            41
;  :quant-instantiations    29
;  :rlimit-count            141582)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $t@49@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-assert-diseq      13
;  :arith-assert-lower      49
;  :arith-assert-upper      50
;  :arith-conflicts         13
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         20
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               66
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              48
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             600
;  :mk-clause               54
;  :num-allocs              3785951
;  :num-checks              111
;  :propagations            41
;  :quant-instantiations    29
;  :rlimit-count            141732)
; [eval] diz.Controller_m != null
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $t@49@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-assert-diseq      13
;  :arith-assert-lower      49
;  :arith-assert-upper      50
;  :arith-conflicts         13
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         20
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               67
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              48
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             601
;  :mk-clause               54
;  :num-allocs              3785951
;  :num-checks              112
;  :propagations            41
;  :quant-instantiations    29
;  :rlimit-count            141882)
(set-option :timeout 0)
(push) ; 3
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-assert-diseq      13
;  :arith-assert-lower      49
;  :arith-assert-upper      50
;  :arith-conflicts         13
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         20
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               67
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              48
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             601
;  :mk-clause               54
;  :num-allocs              3785951
;  :num-checks              113
;  :propagations            41
;  :quant-instantiations    29
;  :rlimit-count            141900)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))
    $Ref.null)))
(declare-const $k@53@06 $Perm)
(assert ($Perm.isReadVar $k@53@06 $Perm.Write))
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $t@49@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-assert-diseq      14
;  :arith-assert-lower      51
;  :arith-assert-upper      51
;  :arith-conflicts         13
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         20
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               68
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              48
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             606
;  :mk-clause               56
;  :num-allocs              3785951
;  :num-checks              114
;  :propagations            42
;  :quant-instantiations    29
;  :rlimit-count            142224)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@53@06 $Perm.No) (< $Perm.No $k@53@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-assert-diseq      14
;  :arith-assert-lower      51
;  :arith-assert-upper      51
;  :arith-conflicts         13
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         20
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               69
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              48
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             606
;  :mk-clause               56
;  :num-allocs              3785951
;  :num-checks              115
;  :propagations            42
;  :quant-instantiations    29
;  :rlimit-count            142274)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@32@06
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               845
;  :arith-assert-diseq      14
;  :arith-assert-lower      51
;  :arith-assert-upper      51
;  :arith-conflicts         13
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         20
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               69
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              48
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             606
;  :mk-clause               56
;  :num-allocs              3785951
;  :num-checks              116
;  :propagations            42
;  :quant-instantiations    29
;  :rlimit-count            142285)
(push) ; 3
(assert (not (not (= (+ $k@36@06 $k@48@06) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               846
;  :arith-assert-diseq      14
;  :arith-assert-lower      51
;  :arith-assert-upper      52
;  :arith-conflicts         14
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         20
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               70
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              50
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             608
;  :mk-clause               58
;  :num-allocs              3785951
;  :num-checks              117
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            142347)
(assert (< $k@53@06 (+ $k@36@06 $k@48@06)))
(assert (<= $Perm.No (- (+ $k@36@06 $k@48@06) $k@53@06)))
(assert (<= (- (+ $k@36@06 $k@48@06) $k@53@06) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@36@06 $k@48@06) $k@53@06))
  (not (= diz@32@06 $Ref.null))))
; [eval] diz.Controller_m.Main_controller == diz
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $t@49@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               846
;  :arith-add-rows          1
;  :arith-assert-diseq      14
;  :arith-assert-lower      53
;  :arith-assert-upper      53
;  :arith-conflicts         14
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         20
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               71
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              50
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             612
;  :mk-clause               58
;  :num-allocs              3785951
;  :num-checks              118
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            142666)
(push) ; 3
(assert (not (=
  diz@32@06
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               846
;  :arith-add-rows          1
;  :arith-assert-diseq      14
;  :arith-assert-lower      53
;  :arith-assert-upper      53
;  :arith-conflicts         14
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         20
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               71
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              50
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             612
;  :mk-clause               58
;  :num-allocs              3785951
;  :num-checks              119
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            142677)
(push) ; 3
(assert (not (< $Perm.No (+ $k@36@06 $k@48@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               846
;  :arith-add-rows          1
;  :arith-assert-diseq      14
;  :arith-assert-lower      53
;  :arith-assert-upper      54
;  :arith-conflicts         15
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         21
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               72
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              50
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             613
;  :mk-clause               58
;  :num-allocs              3785951
;  :num-checks              120
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            142740)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               846
;  :arith-add-rows          1
;  :arith-assert-diseq      14
;  :arith-assert-lower      53
;  :arith-assert-upper      54
;  :arith-conflicts         15
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         21
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               72
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              50
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             613
;  :mk-clause               58
;  :num-allocs              3785951
;  :num-checks              121
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            142753)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $t@49@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               846
;  :arith-add-rows          1
;  :arith-assert-diseq      14
;  :arith-assert-lower      53
;  :arith-assert-upper      54
;  :arith-conflicts         15
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         21
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               73
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 125
;  :datatype-occurs-check   71
;  :datatype-splits         66
;  :decisions               132
;  :del-clause              50
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             614
;  :mk-clause               58
;  :num-allocs              3785951
;  :num-checks              122
;  :propagations            43
;  :quant-instantiations    29
;  :rlimit-count            142903)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               899
;  :arith-add-rows          1
;  :arith-assert-diseq      14
;  :arith-assert-lower      54
;  :arith-assert-upper      56
;  :arith-conflicts         15
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         22
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               73
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 138
;  :datatype-occurs-check   79
;  :datatype-splits         73
;  :decisions               146
;  :del-clause              51
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             622
;  :mk-clause               59
;  :num-allocs              3785951
;  :num-checks              123
;  :propagations            45
;  :quant-instantiations    29
;  :rlimit-count            143542)
; [eval] !diz.Controller_init
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $t@49@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               899
;  :arith-add-rows          1
;  :arith-assert-diseq      14
;  :arith-assert-lower      54
;  :arith-assert-upper      56
;  :arith-conflicts         15
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         22
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               74
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 138
;  :datatype-occurs-check   79
;  :datatype-splits         73
;  :decisions               146
;  :del-clause              51
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             623
;  :mk-clause               59
;  :num-allocs              3785951
;  :num-checks              124
;  :propagations            45
;  :quant-instantiations    29
;  :rlimit-count            143692)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $t@49@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               899
;  :arith-add-rows          1
;  :arith-assert-diseq      14
;  :arith-assert-lower      54
;  :arith-assert-upper      56
;  :arith-conflicts         15
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         22
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               75
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 138
;  :datatype-occurs-check   79
;  :datatype-splits         73
;  :decisions               146
;  :del-clause              51
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             624
;  :mk-clause               59
;  :num-allocs              3785951
;  :num-checks              125
;  :propagations            45
;  :quant-instantiations    29
;  :rlimit-count            143842)
(declare-const $t@54@06 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@55@06 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 12 | 0 <= i@55@06 | live]
; [else-branch: 12 | !(0 <= i@55@06) | live]
(push) ; 5
; [then-branch: 12 | 0 <= i@55@06]
(assert (<= 0 i@55@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 12 | !(0 <= i@55@06)]
(assert (not (<= 0 i@55@06)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 13 | i@55@06 < |First:(Second:(Second:(Second:($t@43@06))))| && 0 <= i@55@06 | live]
; [else-branch: 13 | !(i@55@06 < |First:(Second:(Second:(Second:($t@43@06))))| && 0 <= i@55@06) | live]
(push) ; 5
; [then-branch: 13 | i@55@06 < |First:(Second:(Second:(Second:($t@43@06))))| && 0 <= i@55@06]
(assert (and
  (<
    i@55@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
  (<= 0 i@55@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@55@06 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          1
;  :arith-assert-diseq      14
;  :arith-assert-lower      56
;  :arith-assert-upper      59
;  :arith-conflicts         15
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         23
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               75
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              54
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             634
;  :mk-clause               60
;  :num-allocs              3785951
;  :num-checks              127
;  :propagations            47
;  :quant-instantiations    29
;  :rlimit-count            144601)
; [eval] -1
(push) ; 6
; [then-branch: 14 | First:(Second:(Second:(Second:($t@43@06))))[i@55@06] == -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:($t@43@06))))[i@55@06] != -1 | live]
(push) ; 7
; [then-branch: 14 | First:(Second:(Second:(Second:($t@43@06))))[i@55@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
    i@55@06)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 14 | First:(Second:(Second:(Second:($t@43@06))))[i@55@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      i@55@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@55@06 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          1
;  :arith-assert-diseq      15
;  :arith-assert-lower      59
;  :arith-assert-upper      60
;  :arith-conflicts         15
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         23
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               75
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              54
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             640
;  :mk-clause               64
;  :num-allocs              3785951
;  :num-checks              128
;  :propagations            49
;  :quant-instantiations    30
;  :rlimit-count            144833)
(push) ; 8
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:($t@43@06))))[i@55@06] | live]
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:($t@43@06))))[i@55@06]) | live]
(push) ; 9
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:($t@43@06))))[i@55@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
    i@55@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@55@06 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          1
;  :arith-assert-diseq      15
;  :arith-assert-lower      59
;  :arith-assert-upper      60
;  :arith-conflicts         15
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         23
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               75
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              54
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             640
;  :mk-clause               64
;  :num-allocs              3785951
;  :num-checks              129
;  :propagations            49
;  :quant-instantiations    30
;  :rlimit-count            144947)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:($t@43@06))))[i@55@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      i@55@06))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 13 | !(i@55@06 < |First:(Second:(Second:(Second:($t@43@06))))| && 0 <= i@55@06)]
(assert (not
  (and
    (<
      i@55@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
    (<= 0 i@55@06))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 3
(assert (not (forall ((i@55@06 Int)) (!
  (implies
    (and
      (<
        i@55@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      (<= 0 i@55@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
          i@55@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
            i@55@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
            i@55@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
    i@55@06))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          1
;  :arith-assert-diseq      17
;  :arith-assert-lower      60
;  :arith-assert-upper      61
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         23
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               76
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             648
;  :mk-clause               78
;  :num-allocs              3785951
;  :num-checks              130
;  :propagations            51
;  :quant-instantiations    31
;  :rlimit-count            145393)
(assert (forall ((i@55@06 Int)) (!
  (implies
    (and
      (<
        i@55@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      (<= 0 i@55@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
          i@55@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
            i@55@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
            i@55@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
    i@55@06))
  :qid |prog.l<no position>|)))
(declare-const $k@56@06 $Perm)
(assert ($Perm.isReadVar $k@56@06 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@56@06 $Perm.No) (< $Perm.No $k@56@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          1
;  :arith-assert-diseq      18
;  :arith-assert-lower      62
;  :arith-assert-upper      62
;  :arith-conflicts         15
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         23
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               77
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             653
;  :mk-clause               80
;  :num-allocs              3785951
;  :num-checks              131
;  :propagations            52
;  :quant-instantiations    31
;  :rlimit-count            145954)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $k@45@06 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          1
;  :arith-assert-diseq      18
;  :arith-assert-lower      62
;  :arith-assert-upper      62
;  :arith-conflicts         15
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         23
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               77
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             653
;  :mk-clause               80
;  :num-allocs              3785951
;  :num-checks              132
;  :propagations            52
;  :quant-instantiations    31
;  :rlimit-count            145965)
(assert (< $k@56@06 $k@45@06))
(assert (<= $Perm.No (- $k@45@06 $k@56@06)))
(assert (<= (- $k@45@06 $k@56@06) $Perm.Write))
(assert (implies (< $Perm.No (- $k@45@06 $k@56@06)) (not (= diz@32@06 $Ref.null))))
; [eval] 0 < diz.Main_MIN_DIST
(push) ; 3
(assert (not (< $Perm.No $k@45@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          1
;  :arith-assert-diseq      18
;  :arith-assert-lower      64
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         23
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               78
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             656
;  :mk-clause               80
;  :num-allocs              3785951
;  :num-checks              133
;  :propagations            52
;  :quant-instantiations    31
;  :rlimit-count            146173)
(declare-const $k@57@06 $Perm)
(assert ($Perm.isReadVar $k@57@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@57@06 $Perm.No) (< $Perm.No $k@57@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      66
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         23
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               79
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             660
;  :mk-clause               82
;  :num-allocs              3785951
;  :num-checks              134
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            146371)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= (- (+ $k@35@06 $k@46@06) $k@51@06) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      66
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         23
;  :arith-pivots            2
;  :binary-propagations     11
;  :conflicts               80
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             661
;  :mk-clause               82
;  :num-allocs              3785951
;  :num-checks              135
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            146445)
(assert (< $k@57@06 (- (+ $k@35@06 $k@46@06) $k@51@06)))
(assert (<= $Perm.No (- (- (+ $k@35@06 $k@46@06) $k@51@06) $k@57@06)))
(assert (<= (- (- (+ $k@35@06 $k@46@06) $k@51@06) $k@57@06) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@35@06 $k@46@06) $k@51@06) $k@57@06))
  (not (= diz@32@06 $Ref.null))))
; [eval] diz.Main_sensor != null
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@35@06 $k@46@06) $k@51@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      68
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               80
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             664
;  :mk-clause               82
;  :num-allocs              3785951
;  :num-checks              136
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            146708)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@35@06 $k@46@06) $k@51@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      68
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               80
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             664
;  :mk-clause               82
;  :num-allocs              3785951
;  :num-checks              137
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            146729)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      68
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               80
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             664
;  :mk-clause               82
;  :num-allocs              3785951
;  :num-checks              138
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            146742)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@35@06 $k@46@06) $k@51@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      68
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               80
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             664
;  :mk-clause               82
;  :num-allocs              3785951
;  :num-checks              139
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            146763)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@34@06))) $t@47@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          3
;  :arith-assert-diseq      19
;  :arith-assert-lower      68
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               81
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             665
;  :mk-clause               82
;  :num-allocs              3785951
;  :num-checks              140
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            146853)
(declare-const $k@58@06 $Perm)
(assert ($Perm.isReadVar $k@58@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@58@06 $Perm.No) (< $Perm.No $k@58@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          3
;  :arith-assert-diseq      20
;  :arith-assert-lower      70
;  :arith-assert-upper      66
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               82
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             669
;  :mk-clause               84
;  :num-allocs              3785951
;  :num-checks              141
;  :propagations            54
;  :quant-instantiations    31
;  :rlimit-count            147051)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= (- (+ $k@36@06 $k@48@06) $k@53@06) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          3
;  :arith-assert-diseq      20
;  :arith-assert-lower      70
;  :arith-assert-upper      66
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            4
;  :binary-propagations     11
;  :conflicts               83
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             670
;  :mk-clause               84
;  :num-allocs              3785951
;  :num-checks              142
;  :propagations            54
;  :quant-instantiations    31
;  :rlimit-count            147125)
(assert (< $k@58@06 (- (+ $k@36@06 $k@48@06) $k@53@06)))
(assert (<= $Perm.No (- (- (+ $k@36@06 $k@48@06) $k@53@06) $k@58@06)))
(assert (<= (- (- (+ $k@36@06 $k@48@06) $k@53@06) $k@58@06) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@36@06 $k@48@06) $k@53@06) $k@58@06))
  (not (= diz@32@06 $Ref.null))))
; [eval] diz.Main_controller != null
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@36@06 $k@48@06) $k@53@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      72
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               83
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             673
;  :mk-clause               84
;  :num-allocs              3785951
;  :num-checks              143
;  :propagations            54
;  :quant-instantiations    31
;  :rlimit-count            147366)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@36@06 $k@48@06) $k@53@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      72
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               83
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             673
;  :mk-clause               84
;  :num-allocs              3785951
;  :num-checks              144
;  :propagations            54
;  :quant-instantiations    31
;  :rlimit-count            147387)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      72
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               83
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             673
;  :mk-clause               84
;  :num-allocs              3785951
;  :num-checks              145
;  :propagations            54
;  :quant-instantiations    31
;  :rlimit-count            147400)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@36@06 $k@48@06) $k@53@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      72
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               83
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             673
;  :mk-clause               84
;  :num-allocs              3785951
;  :num-checks              146
;  :propagations            54
;  :quant-instantiations    31
;  :rlimit-count            147421)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $t@49@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      72
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               84
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             674
;  :mk-clause               84
;  :num-allocs              3785951
;  :num-checks              147
;  :propagations            54
;  :quant-instantiations    31
;  :rlimit-count            147571)
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               952
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      72
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               84
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             674
;  :mk-clause               84
;  :num-allocs              3785951
;  :num-checks              148
;  :propagations            54
;  :quant-instantiations    31
;  :rlimit-count            147586)
; [eval] -1
(push) ; 3
; [then-branch: 16 | First:(Second:(Second:(Second:($t@43@06))))[0] == -1 | live]
; [else-branch: 16 | First:(Second:(Second:(Second:($t@43@06))))[0] != -1 | live]
(push) ; 4
; [then-branch: 16 | First:(Second:(Second:(Second:($t@43@06))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
    0)
  (- 0 1)))
(pop) ; 4
(push) ; 4
; [else-branch: 16 | First:(Second:(Second:(Second:($t@43@06))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               953
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      73
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               84
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              72
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             678
;  :mk-clause               87
;  :num-allocs              3785951
;  :num-checks              149
;  :propagations            57
;  :quant-instantiations    33
;  :rlimit-count            147818)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               953
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      73
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               84
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              75
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             678
;  :mk-clause               87
;  :num-allocs              3785951
;  :num-checks              150
;  :propagations            57
;  :quant-instantiations    33
;  :rlimit-count            147833)
; [eval] -1
(push) ; 3
; [then-branch: 17 | First:(Second:(Second:(Second:($t@43@06))))[1] == -1 | live]
; [else-branch: 17 | First:(Second:(Second:(Second:($t@43@06))))[1] != -1 | live]
(push) ; 4
; [then-branch: 17 | First:(Second:(Second:(Second:($t@43@06))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
    1)
  (- 0 1)))
(pop) ; 4
(push) ; 4
; [else-branch: 17 | First:(Second:(Second:(Second:($t@43@06))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               954
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      75
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               84
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              75
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             683
;  :mk-clause               90
;  :num-allocs              3785951
;  :num-checks              151
;  :propagations            60
;  :quant-instantiations    35
;  :rlimit-count            148066)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               954
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      75
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               84
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              78
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             683
;  :mk-clause               90
;  :num-allocs              3785951
;  :num-checks              152
;  :propagations            60
;  :quant-instantiations    35
;  :rlimit-count            148081)
; [eval] -1
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               954
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      75
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               84
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              78
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             683
;  :mk-clause               90
;  :num-allocs              3785951
;  :num-checks              153
;  :propagations            60
;  :quant-instantiations    35
;  :rlimit-count            148096)
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               954
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      75
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               84
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              78
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             683
;  :mk-clause               90
;  :num-allocs              3785951
;  :num-checks              154
;  :propagations            60
;  :quant-instantiations    35
;  :rlimit-count            148111)
; [eval] -1
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@36@06 $k@48@06) $k@53@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               954
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      75
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               84
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              78
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             683
;  :mk-clause               90
;  :num-allocs              3785951
;  :num-checks              155
;  :propagations            60
;  :quant-instantiations    35
;  :rlimit-count            148132)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $t@49@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               954
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      75
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               85
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              78
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             684
;  :mk-clause               90
;  :num-allocs              3785951
;  :num-checks              156
;  :propagations            60
;  :quant-instantiations    35
;  :rlimit-count            148282)
(push) ; 3
; [then-branch: 18 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06))))))))))))) | live]
; [else-branch: 18 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06)))))))))))) | live]
(push) ; 4
; [then-branch: 18 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06)))))))))))))]
(pop) ; 4
(push) ; 4
; [else-branch: 18 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               954
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      75
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              78
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             684
;  :mk-clause               90
;  :num-allocs              3785951
;  :num-checks              157
;  :propagations            60
;  :quant-instantiations    35
;  :rlimit-count            148302)
; [eval] -1
(push) ; 5
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      1)
    (- 0 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               954
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      75
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              78
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             684
;  :mk-clause               90
;  :num-allocs              3785951
;  :num-checks              158
;  :propagations            60
;  :quant-instantiations    35
;  :rlimit-count            148306)
; [then-branch: 19 | First:(Second:(Second:(Second:($t@43@06))))[1] == -1 | dead]
; [else-branch: 19 | First:(Second:(Second:(Second:($t@43@06))))[1] != -1 | live]
(push) ; 6
; [else-branch: 19 | First:(Second:(Second:(Second:($t@43@06))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
      1)
    (- 0 1))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               954
;  :arith-add-rows          5
;  :arith-assert-diseq      20
;  :arith-assert-lower      75
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         23
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               86
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 151
;  :datatype-occurs-check   87
;  :datatype-splits         80
;  :decisions               160
;  :del-clause              78
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.09
;  :memory                  4.09
;  :mk-bool-var             684
;  :mk-clause               90
;  :num-allocs              3785951
;  :num-checks              159
;  :propagations            60
;  :quant-instantiations    35
;  :rlimit-count            148323)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1019
;  :arith-add-rows          5
;  :arith-assert-diseq      21
;  :arith-assert-lower      79
;  :arith-assert-upper      73
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         24
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               88
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 168
;  :datatype-occurs-check   93
;  :datatype-splits         89
;  :decisions               176
;  :del-clause              83
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          1
;  :mk-bool-var             706
;  :mk-clause               95
;  :num-allocs              3932970
;  :num-checks              160
;  :propagations            66
;  :quant-instantiations    38
;  :rlimit-count            149235
;  :time                    0.00)
(push) ; 4
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
    2))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1072
;  :arith-add-rows          5
;  :arith-assert-diseq      21
;  :arith-assert-lower      80
;  :arith-assert-upper      75
;  :arith-conflicts         15
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         25
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               88
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 181
;  :datatype-occurs-check   101
;  :datatype-splits         96
;  :decisions               190
;  :del-clause              84
;  :final-checks            48
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          1
;  :mk-bool-var             714
;  :mk-clause               96
;  :num-allocs              3932970
;  :num-checks              161
;  :propagations            67
;  :quant-instantiations    38
;  :rlimit-count            150019
;  :time                    0.00)
; [then-branch: 20 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2] | live]
; [else-branch: 20 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2]) | live]
(push) ; 4
; [then-branch: 20 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1075
;  :arith-add-rows          5
;  :arith-assert-diseq      21
;  :arith-assert-lower      83
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         26
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               88
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 181
;  :datatype-occurs-check   101
;  :datatype-splits         96
;  :decisions               190
;  :del-clause              84
;  :final-checks            48
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          1
;  :mk-bool-var             719
;  :mk-clause               99
;  :num-allocs              3932970
;  :num-checks              162
;  :propagations            72
;  :quant-instantiations    41
;  :rlimit-count            150254)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 20 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1075
;  :arith-add-rows          5
;  :arith-assert-diseq      21
;  :arith-assert-lower      83
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         26
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               88
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 181
;  :datatype-occurs-check   101
;  :datatype-splits         96
;  :decisions               190
;  :del-clause              87
;  :final-checks            48
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          1
;  :mk-bool-var             719
;  :mk-clause               99
;  :num-allocs              3932970
;  :num-checks              163
;  :propagations            72
;  :quant-instantiations    41
;  :rlimit-count            150301)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1140
;  :arith-add-rows          5
;  :arith-assert-diseq      22
;  :arith-assert-lower      87
;  :arith-assert-upper      79
;  :arith-conflicts         15
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         27
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               90
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 198
;  :datatype-occurs-check   107
;  :datatype-splits         105
;  :decisions               206
;  :del-clause              92
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             741
;  :mk-clause               104
;  :num-allocs              3932970
;  :num-checks              164
;  :propagations            78
;  :quant-instantiations    44
;  :rlimit-count            151202
;  :time                    0.00)
(push) ; 4
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
    2))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1193
;  :arith-add-rows          5
;  :arith-assert-diseq      22
;  :arith-assert-lower      88
;  :arith-assert-upper      81
;  :arith-conflicts         15
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         28
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               90
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 211
;  :datatype-occurs-check   115
;  :datatype-splits         112
;  :decisions               220
;  :del-clause              93
;  :final-checks            54
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             749
;  :mk-clause               105
;  :num-allocs              3932970
;  :num-checks              165
;  :propagations            79
;  :quant-instantiations    44
;  :rlimit-count            151986)
; [then-branch: 21 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2] | live]
; [else-branch: 21 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2]) | live]
(push) ; 4
; [then-branch: 21 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 5
(assert (not (< $Perm.No (- (+ $k@35@06 $k@46@06) $k@51@06))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1196
;  :arith-add-rows          5
;  :arith-assert-diseq      22
;  :arith-assert-lower      91
;  :arith-assert-upper      83
;  :arith-conflicts         15
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         29
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               90
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 211
;  :datatype-occurs-check   115
;  :datatype-splits         112
;  :decisions               220
;  :del-clause              93
;  :final-checks            54
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             754
;  :mk-clause               108
;  :num-allocs              3932970
;  :num-checks              166
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            152227)
(push) ; 5
(assert (not (< $Perm.No $k@45@06)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1196
;  :arith-add-rows          5
;  :arith-assert-diseq      22
;  :arith-assert-lower      91
;  :arith-assert-upper      83
;  :arith-conflicts         15
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         29
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               91
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 211
;  :datatype-occurs-check   115
;  :datatype-splits         112
;  :decisions               220
;  :del-clause              93
;  :final-checks            54
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             754
;  :mk-clause               108
;  :num-allocs              3932970
;  :num-checks              167
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            152275)
(pop) ; 4
(push) ; 4
; [else-branch: 21 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@43@06))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@36@06 $k@48@06) $k@53@06))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1196
;  :arith-add-rows          5
;  :arith-assert-diseq      22
;  :arith-assert-lower      91
;  :arith-assert-upper      83
;  :arith-conflicts         15
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         29
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               91
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 211
;  :datatype-occurs-check   115
;  :datatype-splits         112
;  :decisions               220
;  :del-clause              96
;  :final-checks            54
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             754
;  :mk-clause               108
;  :num-allocs              3932970
;  :num-checks              168
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            152328)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))
  $t@49@06)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1196
;  :arith-add-rows          5
;  :arith-assert-diseq      22
;  :arith-assert-lower      91
;  :arith-assert-upper      83
;  :arith-conflicts         15
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         29
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               92
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 211
;  :datatype-occurs-check   115
;  :datatype-splits         112
;  :decisions               220
;  :del-clause              96
;  :final-checks            54
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             755
;  :mk-clause               108
;  :num-allocs              3932970
;  :num-checks              169
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            152478)
(push) ; 3
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06)))))))))))) | live]
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06))))))))))))) | live]
(push) ; 4
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1196
;  :arith-add-rows          5
;  :arith-assert-diseq      22
;  :arith-assert-lower      91
;  :arith-assert-upper      83
;  :arith-conflicts         15
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         29
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               93
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 211
;  :datatype-occurs-check   115
;  :datatype-splits         112
;  :decisions               220
;  :del-clause              96
;  :final-checks            54
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             755
;  :mk-clause               108
;  :num-allocs              3932970
;  :num-checks              170
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            152493)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06)))))))))))))]
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06)))))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1196
;  :arith-add-rows          5
;  :arith-assert-diseq      22
;  :arith-assert-lower      91
;  :arith-assert-upper      83
;  :arith-conflicts         15
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         29
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               93
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 211
;  :datatype-occurs-check   115
;  :datatype-splits         112
;  :decisions               220
;  :del-clause              96
;  :final-checks            54
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             755
;  :mk-clause               108
;  :num-allocs              3932970
;  :num-checks              171
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            152536)
; [then-branch: 23 | First:(Second:(Second:(Second:($t@43@06))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06)))))))))))) | dead]
; [else-branch: 23 | !(First:(Second:(Second:(Second:($t@43@06))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06))))))))))))) | live]
(push) ; 4
; [else-branch: 23 | !(First:(Second:(Second:(Second:($t@43@06))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@34@06)))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@06))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap $t@47@06)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))
                              ($Snap.combine
                                ($SortWrappers.$RefTo$Snap $t@49@06)
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@06))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@34@06))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit))))))))))))))))))))))))))) diz@32@06 globals@33@06))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(declare-const min_advance__39@59@06 Int)
(declare-const __flatten_39__38@60@06 Seq<Int>)
(declare-const __flatten_38__37@61@06 Seq<Int>)
(push) ; 3
; Loop head block: Check well-definedness of invariant
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
(pop) ; 4
(push) ; 4
; [eval] !true
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1441
;  :arith-add-rows          5
;  :arith-assert-diseq      22
;  :arith-assert-lower      94
;  :arith-assert-upper      89
;  :arith-conflicts         15
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         32
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               93
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 250
;  :datatype-occurs-check   133
;  :datatype-splits         133
;  :decisions               262
;  :del-clause              99
;  :final-checks            63
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             780
;  :mk-clause               111
;  :num-allocs              3932970
;  :num-checks              174
;  :propagations            90
;  :quant-instantiations    47
;  :rlimit-count            155504
;  :time                    0.00)
; [then-branch: 24 | True | live]
; [else-branch: 24 | False | dead]
(push) ; 5
; [then-branch: 24 | True]
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@62@06 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(assert (= $t@62@06 ($Snap.combine ($Snap.first $t@62@06) ($Snap.second $t@62@06))))
(assert (= ($Snap.first $t@62@06) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@62@06)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@62@06))
    ($Snap.second ($Snap.second $t@62@06)))))
(assert (= ($Snap.first ($Snap.second $t@62@06)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@62@06))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@62@06)))
    ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@62@06))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@62@06)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@63@06 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 25 | 0 <= i@63@06 | live]
; [else-branch: 25 | !(0 <= i@63@06) | live]
(push) ; 8
; [then-branch: 25 | 0 <= i@63@06]
(assert (<= 0 i@63@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 25 | !(0 <= i@63@06)]
(assert (not (<= 0 i@63@06)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 26 | i@63@06 < |First:(Second:(Second:(Second:($t@62@06))))| && 0 <= i@63@06 | live]
; [else-branch: 26 | !(i@63@06 < |First:(Second:(Second:(Second:($t@62@06))))| && 0 <= i@63@06) | live]
(push) ; 8
; [then-branch: 26 | i@63@06 < |First:(Second:(Second:(Second:($t@62@06))))| && 0 <= i@63@06]
(assert (and
  (<
    i@63@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
  (<= 0 i@63@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@63@06 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1544
;  :arith-add-rows          5
;  :arith-assert-diseq      22
;  :arith-assert-lower      100
;  :arith-assert-upper      94
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               93
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              100
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             814
;  :mk-clause               112
;  :num-allocs              3932970
;  :num-checks              176
;  :propagations            92
;  :quant-instantiations    51
;  :rlimit-count            157458)
; [eval] -1
(push) ; 9
; [then-branch: 27 | First:(Second:(Second:(Second:($t@62@06))))[i@63@06] == -1 | live]
; [else-branch: 27 | First:(Second:(Second:(Second:($t@62@06))))[i@63@06] != -1 | live]
(push) ; 10
; [then-branch: 27 | First:(Second:(Second:(Second:($t@62@06))))[i@63@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    i@63@06)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 27 | First:(Second:(Second:(Second:($t@62@06))))[i@63@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      i@63@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@63@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1544
;  :arith-add-rows          5
;  :arith-assert-diseq      22
;  :arith-assert-lower      100
;  :arith-assert-upper      94
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               93
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              100
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             815
;  :mk-clause               112
;  :num-allocs              3932970
;  :num-checks              177
;  :propagations            92
;  :quant-instantiations    51
;  :rlimit-count            157633)
(push) ; 11
; [then-branch: 28 | 0 <= First:(Second:(Second:(Second:($t@62@06))))[i@63@06] | live]
; [else-branch: 28 | !(0 <= First:(Second:(Second:(Second:($t@62@06))))[i@63@06]) | live]
(push) ; 12
; [then-branch: 28 | 0 <= First:(Second:(Second:(Second:($t@62@06))))[i@63@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    i@63@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@63@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1544
;  :arith-add-rows          5
;  :arith-assert-diseq      23
;  :arith-assert-lower      103
;  :arith-assert-upper      94
;  :arith-conflicts         15
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               93
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              100
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             818
;  :mk-clause               113
;  :num-allocs              3932970
;  :num-checks              178
;  :propagations            92
;  :quant-instantiations    51
;  :rlimit-count            157756)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 28 | !(0 <= First:(Second:(Second:(Second:($t@62@06))))[i@63@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      i@63@06))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 26 | !(i@63@06 < |First:(Second:(Second:(Second:($t@62@06))))| && 0 <= i@63@06)]
(assert (not
  (and
    (<
      i@63@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
    (<= 0 i@63@06))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@63@06 Int)) (!
  (implies
    (and
      (<
        i@63@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
      (<= 0 i@63@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          i@63@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
            i@63@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
            i@63@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    i@63@06))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))
(declare-const $k@64@06 $Perm)
(assert ($Perm.isReadVar $k@64@06 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@64@06 $Perm.No) (< $Perm.No $k@64@06))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1555
;  :arith-add-rows          5
;  :arith-assert-diseq      24
;  :arith-assert-lower      105
;  :arith-assert-upper      95
;  :arith-conflicts         15
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               94
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.19
;  :memory                  4.19
;  :minimized-lits          2
;  :mk-bool-var             826
;  :mk-clause               115
;  :num-allocs              3932970
;  :num-checks              179
;  :propagations            93
;  :quant-instantiations    51
;  :rlimit-count            158708)
(assert (<= $Perm.No $k@64@06))
(assert (<= $k@64@06 $Perm.Write))
(assert (implies (< $Perm.No $k@64@06) (not (= diz@32@06 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))
  $Snap.unit))
; [eval] 0 < diz.Main_MIN_DIST
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@64@06)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1561
;  :arith-add-rows          5
;  :arith-assert-diseq      24
;  :arith-assert-lower      105
;  :arith-assert-upper      96
;  :arith-conflicts         15
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               95
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             829
;  :mk-clause               115
;  :num-allocs              4088426
;  :num-checks              180
;  :propagations            93
;  :quant-instantiations    51
;  :rlimit-count            159041)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
(declare-const $k@65@06 $Perm)
(assert ($Perm.isReadVar $k@65@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@65@06 $Perm.No) (< $Perm.No $k@65@06))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-add-rows          5
;  :arith-assert-diseq      25
;  :arith-assert-lower      108
;  :arith-assert-upper      97
;  :arith-conflicts         15
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               96
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             836
;  :mk-clause               117
;  :num-allocs              4088426
;  :num-checks              181
;  :propagations            94
;  :quant-instantiations    52
;  :rlimit-count            159552)
(assert (<= $Perm.No $k@65@06))
(assert (<= $k@65@06 $Perm.Write))
(assert (implies (< $Perm.No $k@65@06) (not (= diz@32@06 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))
  $Snap.unit))
; [eval] diz.Main_sensor != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1573
;  :arith-add-rows          5
;  :arith-assert-diseq      25
;  :arith-assert-lower      108
;  :arith-assert-upper      98
;  :arith-conflicts         15
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               97
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             839
;  :mk-clause               117
;  :num-allocs              4088426
;  :num-checks              182
;  :propagations            94
;  :quant-instantiations    52
;  :rlimit-count            159905)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1579
;  :arith-add-rows          5
;  :arith-assert-diseq      25
;  :arith-assert-lower      108
;  :arith-assert-upper      98
;  :arith-conflicts         15
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               98
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             842
;  :mk-clause               117
;  :num-allocs              4088426
;  :num-checks              183
;  :propagations            94
;  :quant-instantiations    53
;  :rlimit-count            160289)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1584
;  :arith-add-rows          5
;  :arith-assert-diseq      25
;  :arith-assert-lower      108
;  :arith-assert-upper      98
;  :arith-conflicts         15
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               99
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             843
;  :mk-clause               117
;  :num-allocs              4088426
;  :num-checks              184
;  :propagations            94
;  :quant-instantiations    53
;  :rlimit-count            160576)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1584
;  :arith-add-rows          5
;  :arith-assert-diseq      25
;  :arith-assert-lower      108
;  :arith-assert-upper      98
;  :arith-conflicts         15
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               99
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             843
;  :mk-clause               117
;  :num-allocs              4088426
;  :num-checks              185
;  :propagations            94
;  :quant-instantiations    53
;  :rlimit-count            160589)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))
(declare-const $k@66@06 $Perm)
(assert ($Perm.isReadVar $k@66@06 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@66@06 $Perm.No) (< $Perm.No $k@66@06))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1589
;  :arith-add-rows          5
;  :arith-assert-diseq      26
;  :arith-assert-lower      110
;  :arith-assert-upper      99
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               100
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             848
;  :mk-clause               119
;  :num-allocs              4088426
;  :num-checks              186
;  :propagations            95
;  :quant-instantiations    53
;  :rlimit-count            161029)
(assert (<= $Perm.No $k@66@06))
(assert (<= $k@66@06 $Perm.Write))
(assert (implies (< $Perm.No $k@66@06) (not (= diz@32@06 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1595
;  :arith-add-rows          5
;  :arith-assert-diseq      26
;  :arith-assert-lower      110
;  :arith-assert-upper      100
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               101
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             851
;  :mk-clause               119
;  :num-allocs              4088426
;  :num-checks              187
;  :propagations            95
;  :quant-instantiations    53
;  :rlimit-count            161422)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1601
;  :arith-add-rows          5
;  :arith-assert-diseq      26
;  :arith-assert-lower      110
;  :arith-assert-upper      100
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               102
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             854
;  :mk-clause               119
;  :num-allocs              4088426
;  :num-checks              188
;  :propagations            95
;  :quant-instantiations    54
;  :rlimit-count            161850)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1606
;  :arith-add-rows          5
;  :arith-assert-diseq      26
;  :arith-assert-lower      110
;  :arith-assert-upper      100
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               103
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             855
;  :mk-clause               119
;  :num-allocs              4088426
;  :num-checks              189
;  :propagations            95
;  :quant-instantiations    54
;  :rlimit-count            162177)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1606
;  :arith-add-rows          5
;  :arith-assert-diseq      26
;  :arith-assert-lower      110
;  :arith-assert-upper      100
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               103
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             855
;  :mk-clause               119
;  :num-allocs              4088426
;  :num-checks              190
;  :propagations            95
;  :quant-instantiations    54
;  :rlimit-count            162190)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1612
;  :arith-add-rows          5
;  :arith-assert-diseq      26
;  :arith-assert-lower      110
;  :arith-assert-upper      100
;  :arith-conflicts         15
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               103
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             857
;  :mk-clause               119
;  :num-allocs              4088426
;  :num-checks              191
;  :propagations            95
;  :quant-instantiations    54
;  :rlimit-count            162526)
; [eval] -1
(push) ; 6
; [then-branch: 29 | First:(Second:(Second:(Second:($t@62@06))))[0] == -1 | live]
; [else-branch: 29 | First:(Second:(Second:(Second:($t@62@06))))[0] != -1 | live]
(push) ; 7
; [then-branch: 29 | First:(Second:(Second:(Second:($t@62@06))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    0)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 29 | First:(Second:(Second:(Second:($t@62@06))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1612
;  :arith-add-rows          5
;  :arith-assert-diseq      27
;  :arith-assert-lower      113
;  :arith-assert-upper      101
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               103
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              101
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             863
;  :mk-clause               123
;  :num-allocs              4088426
;  :num-checks              192
;  :propagations            97
;  :quant-instantiations    55
;  :rlimit-count            162758)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1618
;  :arith-add-rows          5
;  :arith-assert-diseq      27
;  :arith-assert-lower      113
;  :arith-assert-upper      101
;  :arith-conflicts         15
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               103
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              105
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             867
;  :mk-clause               124
;  :num-allocs              4088426
;  :num-checks              193
;  :propagations            97
;  :quant-instantiations    55
;  :rlimit-count            163195)
; [eval] -1
(push) ; 6
; [then-branch: 30 | First:(Second:(Second:(Second:($t@62@06))))[1] == -1 | live]
; [else-branch: 30 | First:(Second:(Second:(Second:($t@62@06))))[1] != -1 | live]
(push) ; 7
; [then-branch: 30 | First:(Second:(Second:(Second:($t@62@06))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    1)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 30 | First:(Second:(Second:(Second:($t@62@06))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1618
;  :arith-add-rows          5
;  :arith-assert-diseq      28
;  :arith-assert-lower      116
;  :arith-assert-upper      102
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               103
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              105
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             873
;  :mk-clause               128
;  :num-allocs              4088426
;  :num-checks              194
;  :propagations            99
;  :quant-instantiations    56
;  :rlimit-count            163427)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      1)
    2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1624
;  :arith-add-rows          5
;  :arith-assert-diseq      28
;  :arith-assert-lower      116
;  :arith-assert-upper      102
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               103
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              109
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             877
;  :mk-clause               129
;  :num-allocs              4088426
;  :num-checks              195
;  :propagations            99
;  :quant-instantiations    56
;  :rlimit-count            163874)
; [eval] -1
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1630
;  :arith-add-rows          5
;  :arith-assert-diseq      28
;  :arith-assert-lower      116
;  :arith-assert-upper      102
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               103
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              109
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             880
;  :mk-clause               129
;  :num-allocs              4088426
;  :num-checks              196
;  :propagations            99
;  :quant-instantiations    56
;  :rlimit-count            164334)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
      0)
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1636
;  :arith-add-rows          5
;  :arith-assert-diseq      28
;  :arith-assert-lower      116
;  :arith-assert-upper      102
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               103
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              109
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             883
;  :mk-clause               129
;  :num-allocs              4088426
;  :num-checks              197
;  :propagations            99
;  :quant-instantiations    56
;  :rlimit-count            164789)
; [eval] -1
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
    2)
  (- 0 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1642
;  :arith-add-rows          5
;  :arith-assert-diseq      28
;  :arith-assert-lower      116
;  :arith-assert-upper      103
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               104
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              109
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             886
;  :mk-clause               129
;  :num-allocs              4088426
;  :num-checks              198
;  :propagations            99
;  :quant-instantiations    56
;  :rlimit-count            165278)
(push) ; 6
; [then-branch: 31 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))) | live]
; [else-branch: 31 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))) | live]
(push) ; 7
; [then-branch: 31 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 31 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1646
;  :arith-add-rows          5
;  :arith-assert-diseq      28
;  :arith-assert-lower      116
;  :arith-assert-upper      103
;  :arith-conflicts         15
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         33
;  :arith-pivots            6
;  :binary-propagations     11
;  :conflicts               104
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 263
;  :datatype-occurs-check   139
;  :datatype-splits         140
;  :decisions               276
;  :del-clause              109
;  :final-checks            66
;  :max-generation          2
;  :max-memory              4.29
;  :memory                  4.29
;  :minimized-lits          2
;  :mk-bool-var             889
;  :mk-clause               129
;  :num-allocs              4088426
;  :num-checks              199
;  :propagations            99
;  :quant-instantiations    58
;  :rlimit-count            165635)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1858
;  :arith-add-rows          5
;  :arith-assert-diseq      28
;  :arith-assert-lower      122
;  :arith-assert-upper      111
;  :arith-conflicts         15
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         39
;  :arith-pivots            12
;  :binary-propagations     11
;  :conflicts               106
;  :datatype-accessor-ax    136
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   151
;  :datatype-splits         175
;  :decisions               327
;  :del-clause              117
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             943
;  :mk-clause               137
;  :num-allocs              4247704
;  :num-checks              200
;  :propagations            104
;  :quant-instantiations    58
;  :rlimit-count            167191
;  :time                    0.00)
(push) ; 9
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2107
;  :arith-add-rows          5
;  :arith-assert-diseq      28
;  :arith-assert-lower      131
;  :arith-assert-upper      122
;  :arith-conflicts         15
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         46
;  :arith-pivots            18
;  :binary-propagations     11
;  :conflicts               110
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 371
;  :datatype-occurs-check   166
;  :datatype-splits         214
;  :decisions               383
;  :del-clause              132
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1018
;  :mk-clause               152
;  :num-allocs              4247704
;  :num-checks              201
;  :propagations            113
;  :quant-instantiations    59
;  :rlimit-count            168909
;  :time                    0.00)
; [then-branch: 32 | First:(Second:(Second:(Second:($t@62@06))))[1] == -1 | live]
; [else-branch: 32 | First:(Second:(Second:(Second:($t@62@06))))[1] != -1 | live]
(push) ; 9
; [then-branch: 32 | First:(Second:(Second:(Second:($t@62@06))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    1)
  (- 0 1)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2108
;  :arith-add-rows          5
;  :arith-assert-diseq      28
;  :arith-assert-lower      131
;  :arith-assert-upper      122
;  :arith-conflicts         15
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         46
;  :arith-pivots            18
;  :binary-propagations     11
;  :conflicts               110
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 371
;  :datatype-occurs-check   166
;  :datatype-splits         214
;  :decisions               383
;  :del-clause              132
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1018
;  :mk-clause               152
;  :num-allocs              4247704
;  :num-checks              202
;  :propagations            113
;  :quant-instantiations    59
;  :rlimit-count            169034)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 32 | First:(Second:(Second:(Second:($t@62@06))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      1)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          0)
        (- 0 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2114
;  :arith-add-rows          5
;  :arith-assert-diseq      28
;  :arith-assert-lower      131
;  :arith-assert-upper      122
;  :arith-conflicts         15
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         46
;  :arith-pivots            18
;  :binary-propagations     11
;  :conflicts               110
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 371
;  :datatype-occurs-check   166
;  :datatype-splits         214
;  :decisions               383
;  :del-clause              132
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1021
;  :mk-clause               153
;  :num-allocs              4247704
;  :num-checks              203
;  :propagations            113
;  :quant-instantiations    59
;  :rlimit-count            169627)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2451
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      140
;  :arith-assert-upper      133
;  :arith-conflicts         16
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         55
;  :arith-pivots            26
;  :binary-propagations     11
;  :conflicts               114
;  :datatype-accessor-ax    152
;  :datatype-constructor-ax 439
;  :datatype-occurs-check   190
;  :datatype-splits         270
;  :decisions               454
;  :del-clause              147
;  :final-checks            83
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1116
;  :mk-clause               168
;  :num-allocs              4247704
;  :num-checks              204
;  :propagations            122
;  :quant-instantiations    62
;  :rlimit-count            171714
;  :time                    0.00)
(push) ; 7
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
    2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2593
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      144
;  :arith-assert-upper      139
;  :arith-conflicts         16
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         59
;  :arith-pivots            30
;  :binary-propagations     11
;  :conflicts               115
;  :datatype-accessor-ax    154
;  :datatype-constructor-ax 468
;  :datatype-occurs-check   199
;  :datatype-splits         288
;  :decisions               485
;  :del-clause              152
;  :final-checks            86
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1147
;  :mk-clause               173
;  :num-allocs              4247704
;  :num-checks              205
;  :propagations            125
;  :quant-instantiations    63
;  :rlimit-count            172959
;  :time                    0.00)
; [then-branch: 33 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[2] | live]
; [else-branch: 33 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[2]) | live]
(push) ; 7
; [then-branch: 33 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2594
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      145
;  :arith-assert-upper      139
;  :arith-conflicts         16
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         60
;  :arith-pivots            30
;  :binary-propagations     11
;  :conflicts               115
;  :datatype-accessor-ax    154
;  :datatype-constructor-ax 468
;  :datatype-occurs-check   199
;  :datatype-splits         288
;  :decisions               485
;  :del-clause              152
;  :final-checks            86
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1148
;  :mk-clause               173
;  :num-allocs              4247704
;  :num-checks              206
;  :propagations            125
;  :quant-instantiations    63
;  :rlimit-count            173107)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 33 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
      2))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        0)
      (- 0 1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2600
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      145
;  :arith-assert-upper      139
;  :arith-conflicts         16
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         60
;  :arith-pivots            30
;  :binary-propagations     11
;  :conflicts               115
;  :datatype-accessor-ax    155
;  :datatype-constructor-ax 468
;  :datatype-occurs-check   199
;  :datatype-splits         288
;  :decisions               485
;  :del-clause              152
;  :final-checks            86
;  :max-generation          2
;  :max-memory              4.38
;  :memory                  4.38
;  :minimized-lits          2
;  :mk-bool-var             1151
;  :mk-clause               174
;  :num-allocs              4247704
;  :num-checks              207
;  :propagations            125
;  :quant-instantiations    63
;  :rlimit-count            173700)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
      2)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2888
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      154
;  :arith-assert-upper      150
;  :arith-conflicts         17
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         68
;  :arith-pivots            34
;  :binary-propagations     11
;  :conflicts               120
;  :datatype-accessor-ax    164
;  :datatype-constructor-ax 530
;  :datatype-occurs-check   221
;  :datatype-splits         334
;  :decisions               543
;  :del-clause              168
;  :final-checks            92
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1236
;  :mk-clause               190
;  :num-allocs              4413161
;  :num-checks              208
;  :propagations            135
;  :quant-instantiations    64
;  :rlimit-count            175518
;  :time                    0.00)
(push) ; 7
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
    2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3037
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      158
;  :arith-assert-upper      156
;  :arith-conflicts         17
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         72
;  :arith-pivots            38
;  :binary-propagations     11
;  :conflicts               121
;  :datatype-accessor-ax    166
;  :datatype-constructor-ax 559
;  :datatype-occurs-check   229
;  :datatype-splits         352
;  :decisions               574
;  :del-clause              173
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1266
;  :mk-clause               195
;  :num-allocs              4413161
;  :num-checks              209
;  :propagations            138
;  :quant-instantiations    65
;  :rlimit-count            176766
;  :time                    0.00)
; [then-branch: 34 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[2] | live]
; [else-branch: 34 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[2]) | live]
(push) ; 7
; [then-branch: 34 | -1 <= First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 8
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3039
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      160
;  :arith-assert-upper      158
;  :arith-conflicts         17
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         73
;  :arith-pivots            38
;  :binary-propagations     11
;  :conflicts               122
;  :datatype-accessor-ax    166
;  :datatype-constructor-ax 559
;  :datatype-occurs-check   229
;  :datatype-splits         352
;  :decisions               574
;  :del-clause              173
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1270
;  :mk-clause               198
;  :num-allocs              4413161
;  :num-checks              210
;  :propagations            142
;  :quant-instantiations    66
;  :rlimit-count            176989)
(push) ; 8
(assert (not (< $Perm.No $k@64@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3039
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      160
;  :arith-assert-upper      158
;  :arith-conflicts         17
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         73
;  :arith-pivots            38
;  :binary-propagations     11
;  :conflicts               123
;  :datatype-accessor-ax    166
;  :datatype-constructor-ax 559
;  :datatype-occurs-check   229
;  :datatype-splits         352
;  :decisions               574
;  :del-clause              173
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1270
;  :mk-clause               198
;  :num-allocs              4413161
;  :num-checks              211
;  :propagations            142
;  :quant-instantiations    66
;  :rlimit-count            177037)
(pop) ; 7
(push) ; 7
; [else-branch: 34 | !(-1 <= First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
      2))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 6
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3048
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      160
;  :arith-assert-upper      158
;  :arith-conflicts         17
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         73
;  :arith-pivots            38
;  :binary-propagations     11
;  :conflicts               124
;  :datatype-accessor-ax    166
;  :datatype-constructor-ax 559
;  :datatype-occurs-check   229
;  :datatype-splits         352
;  :decisions               574
;  :del-clause              176
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1272
;  :mk-clause               199
;  :num-allocs              4413161
;  :num-checks              212
;  :propagations            142
;  :quant-instantiations    66
;  :rlimit-count            177636)
(push) ; 6
; [then-branch: 35 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))) | live]
; [else-branch: 35 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))) | live]
(push) ; 7
; [then-branch: 35 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3052
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      160
;  :arith-assert-upper      158
;  :arith-conflicts         17
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         73
;  :arith-pivots            38
;  :binary-propagations     11
;  :conflicts               124
;  :datatype-accessor-ax    166
;  :datatype-constructor-ax 559
;  :datatype-occurs-check   229
;  :datatype-splits         352
;  :decisions               574
;  :del-clause              176
;  :final-checks            95
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1274
;  :mk-clause               199
;  :num-allocs              4413161
;  :num-checks              213
;  :propagations            142
;  :quant-instantiations    68
;  :rlimit-count            177919)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 35 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3305
;  :arith-add-rows          17
;  :arith-assert-diseq      29
;  :arith-assert-lower      170
;  :arith-assert-upper      173
;  :arith-bound-prop        1
;  :arith-conflicts         17
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         84
;  :arith-pivots            48
;  :binary-propagations     11
;  :conflicts               128
;  :datatype-accessor-ax    174
;  :datatype-constructor-ax 616
;  :datatype-occurs-check   244
;  :datatype-splits         389
;  :decisions               629
;  :del-clause              194
;  :final-checks            100
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1356
;  :mk-clause               217
;  :num-allocs              4413161
;  :num-checks              214
;  :propagations            153
;  :quant-instantiations    71
;  :rlimit-count            180113
;  :time                    0.00)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3448
;  :arith-add-rows          25
;  :arith-assert-diseq      29
;  :arith-assert-lower      175
;  :arith-assert-upper      180
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         90
;  :arith-pivots            54
;  :binary-propagations     11
;  :conflicts               129
;  :datatype-accessor-ax    176
;  :datatype-constructor-ax 644
;  :datatype-occurs-check   252
;  :datatype-splits         406
;  :decisions               659
;  :del-clause              202
;  :final-checks            103
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1390
;  :mk-clause               225
;  :num-allocs              4413161
;  :num-checks              215
;  :propagations            157
;  :quant-instantiations    72
;  :rlimit-count            181640
;  :time                    0.00)
; [then-branch: 36 | First:(Second:(Second:(Second:($t@62@06))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))) | live]
; [else-branch: 36 | !(First:(Second:(Second:(Second:($t@62@06))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))) | live]
(push) ; 7
; [then-branch: 36 | First:(Second:(Second:(Second:($t@62@06))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 8
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3454
;  :arith-add-rows          25
;  :arith-assert-diseq      29
;  :arith-assert-lower      176
;  :arith-assert-upper      182
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         90
;  :arith-pivots            54
;  :binary-propagations     11
;  :conflicts               130
;  :datatype-accessor-ax    176
;  :datatype-constructor-ax 644
;  :datatype-occurs-check   252
;  :datatype-splits         406
;  :decisions               659
;  :del-clause              202
;  :final-checks            103
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1396
;  :mk-clause               228
;  :num-allocs              4413161
;  :num-checks              216
;  :propagations            161
;  :quant-instantiations    75
;  :rlimit-count            182058)
(push) ; 8
(assert (not (< $Perm.No $k@64@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3454
;  :arith-add-rows          25
;  :arith-assert-diseq      29
;  :arith-assert-lower      176
;  :arith-assert-upper      182
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         90
;  :arith-pivots            54
;  :binary-propagations     11
;  :conflicts               131
;  :datatype-accessor-ax    176
;  :datatype-constructor-ax 644
;  :datatype-occurs-check   252
;  :datatype-splits         406
;  :decisions               659
;  :del-clause              202
;  :final-checks            103
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1396
;  :mk-clause               228
;  :num-allocs              4413161
;  :num-checks              217
;  :propagations            161
;  :quant-instantiations    75
;  :rlimit-count            182106)
(pop) ; 7
(push) ; 7
; [else-branch: 36 | !(First:(Second:(Second:(Second:($t@62@06))))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@62@06 diz@32@06 globals@33@06))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@67@06 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; Main_immediate_wakeup_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@68@06 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 37 | 0 <= i@68@06 | live]
; [else-branch: 37 | !(0 <= i@68@06) | live]
(push) ; 8
; [then-branch: 37 | 0 <= i@68@06]
(assert (<= 0 i@68@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 37 | !(0 <= i@68@06)]
(assert (not (<= 0 i@68@06)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 38 | i@68@06 < |First:(Second:(Second:(Second:($t@62@06))))| && 0 <= i@68@06 | live]
; [else-branch: 38 | !(i@68@06 < |First:(Second:(Second:(Second:($t@62@06))))| && 0 <= i@68@06) | live]
(push) ; 8
; [then-branch: 38 | i@68@06 < |First:(Second:(Second:(Second:($t@62@06))))| && 0 <= i@68@06]
(assert (and
  (<
    i@68@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
  (<= 0 i@68@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@68@06 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3720
;  :arith-add-rows          37
;  :arith-assert-diseq      29
;  :arith-assert-lower      186
;  :arith-assert-upper      196
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         101
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               132
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 695
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               714
;  :del-clause              220
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1459
;  :mk-clause               240
;  :num-allocs              4413161
;  :num-checks              220
;  :propagations            171
;  :quant-instantiations    77
;  :rlimit-count            185028)
; [eval] -1
(push) ; 9
; [then-branch: 39 | First:(Second:(Second:(Second:($t@62@06))))[i@68@06] == -1 | live]
; [else-branch: 39 | First:(Second:(Second:(Second:($t@62@06))))[i@68@06] != -1 | live]
(push) ; 10
; [then-branch: 39 | First:(Second:(Second:(Second:($t@62@06))))[i@68@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    i@68@06)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 39 | First:(Second:(Second:(Second:($t@62@06))))[i@68@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      i@68@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@68@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3720
;  :arith-add-rows          37
;  :arith-assert-diseq      30
;  :arith-assert-lower      189
;  :arith-assert-upper      197
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         101
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               132
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 695
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               714
;  :del-clause              220
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1465
;  :mk-clause               244
;  :num-allocs              4413161
;  :num-checks              221
;  :propagations            173
;  :quant-instantiations    78
;  :rlimit-count            185260)
(push) ; 11
; [then-branch: 40 | 0 <= First:(Second:(Second:(Second:($t@62@06))))[i@68@06] | live]
; [else-branch: 40 | !(0 <= First:(Second:(Second:(Second:($t@62@06))))[i@68@06]) | live]
(push) ; 12
; [then-branch: 40 | 0 <= First:(Second:(Second:(Second:($t@62@06))))[i@68@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    i@68@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@68@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3720
;  :arith-add-rows          37
;  :arith-assert-diseq      30
;  :arith-assert-lower      189
;  :arith-assert-upper      197
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         101
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               132
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 695
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               714
;  :del-clause              220
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1465
;  :mk-clause               244
;  :num-allocs              4413161
;  :num-checks              222
;  :propagations            173
;  :quant-instantiations    78
;  :rlimit-count            185374)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 40 | !(0 <= First:(Second:(Second:(Second:($t@62@06))))[i@68@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      i@68@06))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 38 | !(i@68@06 < |First:(Second:(Second:(Second:($t@62@06))))| && 0 <= i@68@06)]
(assert (not
  (and
    (<
      i@68@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
    (<= 0 i@68@06))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@68@06 Int)) (!
  (implies
    (and
      (<
        i@68@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
      (<= 0 i@68@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          i@68@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
            i@68@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
            i@68@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    i@68@06))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3720
;  :arith-add-rows          37
;  :arith-assert-diseq      32
;  :arith-assert-lower      190
;  :arith-assert-upper      198
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         101
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               133
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 695
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               714
;  :del-clause              238
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1473
;  :mk-clause               258
;  :num-allocs              4413161
;  :num-checks              223
;  :propagations            175
;  :quant-instantiations    79
;  :rlimit-count            185820)
(assert (forall ((i@68@06 Int)) (!
  (implies
    (and
      (<
        i@68@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
      (<= 0 i@68@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          i@68@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
            i@68@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
            i@68@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    i@68@06))
  :qid |prog.l<no position>|)))
(declare-const $t@69@06 $Snap)
(assert (= $t@69@06 ($Snap.combine ($Snap.first $t@69@06) ($Snap.second $t@69@06))))
(assert (=
  ($Snap.second $t@69@06)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@69@06))
    ($Snap.second ($Snap.second $t@69@06)))))
(assert (=
  ($Snap.second ($Snap.second $t@69@06))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@69@06)))
    ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@69@06))) $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@69@06)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@70@06 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 41 | 0 <= i@70@06 | live]
; [else-branch: 41 | !(0 <= i@70@06) | live]
(push) ; 8
; [then-branch: 41 | 0 <= i@70@06]
(assert (<= 0 i@70@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 41 | !(0 <= i@70@06)]
(assert (not (<= 0 i@70@06)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 42 | i@70@06 < |First:(Second:($t@69@06))| && 0 <= i@70@06 | live]
; [else-branch: 42 | !(i@70@06 < |First:(Second:($t@69@06))| && 0 <= i@70@06) | live]
(push) ; 8
; [then-branch: 42 | i@70@06 < |First:(Second:($t@69@06))| && 0 <= i@70@06]
(assert (and
  (<
    i@70@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))))
  (<= 0 i@70@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@70@06 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3757
;  :arith-add-rows          37
;  :arith-assert-diseq      32
;  :arith-assert-lower      195
;  :arith-assert-upper      201
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         101
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               133
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 695
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               714
;  :del-clause              238
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1495
;  :mk-clause               258
;  :num-allocs              4413161
;  :num-checks              224
;  :propagations            175
;  :quant-instantiations    83
;  :rlimit-count            187247)
; [eval] -1
(push) ; 9
; [then-branch: 43 | First:(Second:($t@69@06))[i@70@06] == -1 | live]
; [else-branch: 43 | First:(Second:($t@69@06))[i@70@06] != -1 | live]
(push) ; 10
; [then-branch: 43 | First:(Second:($t@69@06))[i@70@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
    i@70@06)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 43 | First:(Second:($t@69@06))[i@70@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
      i@70@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@70@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3757
;  :arith-add-rows          37
;  :arith-assert-diseq      32
;  :arith-assert-lower      195
;  :arith-assert-upper      201
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         101
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               133
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 695
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               714
;  :del-clause              238
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1496
;  :mk-clause               258
;  :num-allocs              4413161
;  :num-checks              225
;  :propagations            175
;  :quant-instantiations    83
;  :rlimit-count            187398)
(push) ; 11
; [then-branch: 44 | 0 <= First:(Second:($t@69@06))[i@70@06] | live]
; [else-branch: 44 | !(0 <= First:(Second:($t@69@06))[i@70@06]) | live]
(push) ; 12
; [then-branch: 44 | 0 <= First:(Second:($t@69@06))[i@70@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
    i@70@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@70@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3757
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      198
;  :arith-assert-upper      201
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         101
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               133
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 695
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               714
;  :del-clause              238
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1499
;  :mk-clause               259
;  :num-allocs              4413161
;  :num-checks              226
;  :propagations            175
;  :quant-instantiations    83
;  :rlimit-count            187502)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 44 | !(0 <= First:(Second:($t@69@06))[i@70@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
      i@70@06))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 42 | !(i@70@06 < |First:(Second:($t@69@06))| && 0 <= i@70@06)]
(assert (not
  (and
    (<
      i@70@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))))
    (<= 0 i@70@06))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@70@06 Int)) (!
  (implies
    (and
      (<
        i@70@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))))
      (<= 0 i@70@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
          i@70@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
            i@70@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
            i@70@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
    i@70@06))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3774
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      199
;  :arith-assert-upper      202
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               133
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 695
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               714
;  :del-clause              239
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1518
;  :mk-clause               269
;  :num-allocs              4413161
;  :num-checks              227
;  :propagations            179
;  :quant-instantiations    85
;  :rlimit-count            188573)
(push) ; 6
; [then-branch: 45 | 0 <= First:(Second:(Second:(Second:($t@62@06))))[0] | live]
; [else-branch: 45 | !(0 <= First:(Second:(Second:(Second:($t@62@06))))[0]) | live]
(push) ; 7
; [then-branch: 45 | 0 <= First:(Second:(Second:(Second:($t@62@06))))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3774
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      200
;  :arith-assert-upper      202
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               133
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 695
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               714
;  :del-clause              239
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1521
;  :mk-clause               273
;  :num-allocs              4413161
;  :num-checks              228
;  :propagations            179
;  :quant-instantiations    87
;  :rlimit-count            188747)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3774
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      200
;  :arith-assert-upper      202
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               133
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 695
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               714
;  :del-clause              239
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1521
;  :mk-clause               273
;  :num-allocs              4413161
;  :num-checks              229
;  :propagations            179
;  :quant-instantiations    87
;  :rlimit-count            188756)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3775
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      200
;  :arith-assert-upper      202
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               134
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 695
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               714
;  :del-clause              239
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1523
;  :mk-clause               273
;  :num-allocs              4413161
;  :num-checks              230
;  :propagations            182
;  :quant-instantiations    87
;  :rlimit-count            188871)
(pop) ; 7
(push) ; 7
; [else-branch: 45 | !(0 <= First:(Second:(Second:(Second:($t@62@06))))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        0))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3808
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      201
;  :arith-assert-upper      203
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               144
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 701
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               723
;  :del-clause              247
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1529
;  :mk-clause               277
;  :num-allocs              4413161
;  :num-checks              231
;  :propagations            187
;  :quant-instantiations    89
;  :rlimit-count            189300)
; [then-branch: 46 | First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[First:(Second:(Second:(Second:($t@62@06))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@62@06))))[0] | dead]
; [else-branch: 46 | !(First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[First:(Second:(Second:(Second:($t@62@06))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@62@06))))[0]) | live]
(push) ; 7
; [else-branch: 46 | !(First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[First:(Second:(Second:(Second:($t@62@06))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@62@06))))[0])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        0)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 ==> diz.Main_process_state[1] == -1
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3814
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      201
;  :arith-assert-upper      203
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               144
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 701
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               723
;  :del-clause              247
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1531
;  :mk-clause               277
;  :num-allocs              4413161
;  :num-checks              232
;  :propagations            187
;  :quant-instantiations    89
;  :rlimit-count            189558)
(push) ; 6
; [then-branch: 47 | 0 <= First:(Second:(Second:(Second:($t@62@06))))[1] | live]
; [else-branch: 47 | !(0 <= First:(Second:(Second:(Second:($t@62@06))))[1]) | live]
(push) ; 7
; [then-branch: 47 | 0 <= First:(Second:(Second:(Second:($t@62@06))))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3814
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      202
;  :arith-assert-upper      203
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               144
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 701
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               723
;  :del-clause              247
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1534
;  :mk-clause               281
;  :num-allocs              4413161
;  :num-checks              233
;  :propagations            187
;  :quant-instantiations    91
;  :rlimit-count            189731)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3814
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      202
;  :arith-assert-upper      203
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               144
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 701
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               723
;  :del-clause              247
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1534
;  :mk-clause               281
;  :num-allocs              4413161
;  :num-checks              234
;  :propagations            187
;  :quant-instantiations    91
;  :rlimit-count            189740)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3815
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      202
;  :arith-assert-upper      203
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               145
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 701
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               723
;  :del-clause              247
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1536
;  :mk-clause               281
;  :num-allocs              4413161
;  :num-checks              235
;  :propagations            189
;  :quant-instantiations    91
;  :rlimit-count            189853)
(pop) ; 7
(push) ; 7
; [else-branch: 47 | !(0 <= First:(Second:(Second:(Second:($t@62@06))))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        1))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3858
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      203
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 707
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               733
;  :del-clause              255
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1576
;  :mk-clause               285
;  :num-allocs              4413161
;  :num-checks              236
;  :propagations            207
;  :quant-instantiations    93
;  :rlimit-count            190342)
; [then-branch: 48 | First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[First:(Second:(Second:(Second:($t@62@06))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@62@06))))[1] | dead]
; [else-branch: 48 | !(First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[First:(Second:(Second:(Second:($t@62@06))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@62@06))))[1]) | live]
(push) ; 7
; [else-branch: 48 | !(First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[First:(Second:(Second:(Second:($t@62@06))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@62@06))))[1])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3864
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      203
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 707
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               733
;  :del-clause              255
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1578
;  :mk-clause               285
;  :num-allocs              4413161
;  :num-checks              237
;  :propagations            207
;  :quant-instantiations    93
;  :rlimit-count            190610)
(push) ; 6
; [then-branch: 49 | 0 <= First:(Second:(Second:(Second:($t@62@06))))[0] | live]
; [else-branch: 49 | !(0 <= First:(Second:(Second:(Second:($t@62@06))))[0]) | live]
(push) ; 7
; [then-branch: 49 | 0 <= First:(Second:(Second:(Second:($t@62@06))))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3864
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      204
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 707
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               733
;  :del-clause              255
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1581
;  :mk-clause               289
;  :num-allocs              4413161
;  :num-checks              238
;  :propagations            207
;  :quant-instantiations    95
;  :rlimit-count            190783)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3864
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      204
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               156
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 707
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               733
;  :del-clause              255
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1581
;  :mk-clause               289
;  :num-allocs              4413161
;  :num-checks              239
;  :propagations            207
;  :quant-instantiations    95
;  :rlimit-count            190792)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3865
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      204
;  :arith-assert-upper      205
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         102
;  :arith-pivots            64
;  :binary-propagations     11
;  :conflicts               157
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 707
;  :datatype-occurs-check   268
;  :datatype-splits         440
;  :decisions               733
;  :del-clause              255
;  :final-checks            109
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1583
;  :mk-clause               289
;  :num-allocs              4413161
;  :num-checks              240
;  :propagations            210
;  :quant-instantiations    95
;  :rlimit-count            190907)
(pop) ; 7
(push) ; 7
; [else-branch: 49 | !(0 <= First:(Second:(Second:(Second:($t@62@06))))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      0)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4004
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      209
;  :arith-assert-upper      213
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            66
;  :binary-propagations     11
;  :conflicts               157
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 733
;  :datatype-occurs-check   279
;  :datatype-splits         460
;  :decisions               761
;  :del-clause              268
;  :final-checks            112
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1617
;  :mk-clause               298
;  :num-allocs              4413161
;  :num-checks              241
;  :propagations            217
;  :quant-instantiations    96
;  :rlimit-count            192235
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        0))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4037
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      210
;  :arith-assert-upper      214
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            66
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 739
;  :datatype-occurs-check   279
;  :datatype-splits         460
;  :decisions               770
;  :del-clause              272
;  :final-checks            112
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1623
;  :mk-clause               302
;  :num-allocs              4413161
;  :num-checks              242
;  :propagations            222
;  :quant-instantiations    98
;  :rlimit-count            192637)
; [then-branch: 50 | !(First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[First:(Second:(Second:(Second:($t@62@06))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@62@06))))[0]) | live]
; [else-branch: 50 | First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[First:(Second:(Second:(Second:($t@62@06))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@62@06))))[0] | dead]
(push) ; 7
; [then-branch: 50 | !(First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[First:(Second:(Second:(Second:($t@62@06))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@62@06))))[0])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4037
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      210
;  :arith-assert-upper      214
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            66
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 739
;  :datatype-occurs-check   279
;  :datatype-splits         460
;  :decisions               770
;  :del-clause              272
;  :final-checks            112
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1625
;  :mk-clause               303
;  :num-allocs              4413161
;  :num-checks              243
;  :propagations            222
;  :quant-instantiations    98
;  :rlimit-count            192842)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4037
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      210
;  :arith-assert-upper      214
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            66
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 739
;  :datatype-occurs-check   279
;  :datatype-splits         460
;  :decisions               770
;  :del-clause              272
;  :final-checks            112
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1625
;  :mk-clause               303
;  :num-allocs              4413161
;  :num-checks              244
;  :propagations            222
;  :quant-instantiations    98
;  :rlimit-count            192857)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
            0))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@69@06))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0) ==> diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] !(0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4044
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      210
;  :arith-assert-upper      214
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            66
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 739
;  :datatype-occurs-check   279
;  :datatype-splits         460
;  :decisions               770
;  :del-clause              273
;  :final-checks            112
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1630
;  :mk-clause               307
;  :num-allocs              4413161
;  :num-checks              245
;  :propagations            222
;  :quant-instantiations    98
;  :rlimit-count            193259)
(push) ; 6
; [then-branch: 51 | 0 <= First:(Second:(Second:(Second:($t@62@06))))[1] | live]
; [else-branch: 51 | !(0 <= First:(Second:(Second:(Second:($t@62@06))))[1]) | live]
(push) ; 7
; [then-branch: 51 | 0 <= First:(Second:(Second:(Second:($t@62@06))))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4044
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      211
;  :arith-assert-upper      214
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            66
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 739
;  :datatype-occurs-check   279
;  :datatype-splits         460
;  :decisions               770
;  :del-clause              273
;  :final-checks            112
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1633
;  :mk-clause               311
;  :num-allocs              4413161
;  :num-checks              246
;  :propagations            222
;  :quant-instantiations    100
;  :rlimit-count            193433)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4044
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      211
;  :arith-assert-upper      214
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            66
;  :binary-propagations     11
;  :conflicts               167
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 739
;  :datatype-occurs-check   279
;  :datatype-splits         460
;  :decisions               770
;  :del-clause              273
;  :final-checks            112
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1633
;  :mk-clause               311
;  :num-allocs              4413161
;  :num-checks              247
;  :propagations            222
;  :quant-instantiations    100
;  :rlimit-count            193442)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4045
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      211
;  :arith-assert-upper      214
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        1
;  :arith-pivots            66
;  :binary-propagations     11
;  :conflicts               168
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 739
;  :datatype-occurs-check   279
;  :datatype-splits         460
;  :decisions               770
;  :del-clause              273
;  :final-checks            112
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1635
;  :mk-clause               311
;  :num-allocs              4413161
;  :num-checks              248
;  :propagations            224
;  :quant-instantiations    100
;  :rlimit-count            193555)
(pop) ; 7
(push) ; 7
; [else-branch: 51 | !(0 <= First:(Second:(Second:(Second:($t@62@06))))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4179
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      217
;  :arith-assert-upper      223
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        2
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               168
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 764
;  :datatype-occurs-check   290
;  :datatype-splits         479
;  :decisions               797
;  :del-clause              290
;  :final-checks            115
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1670
;  :mk-clause               324
;  :num-allocs              4413161
;  :num-checks              249
;  :propagations            234
;  :quant-instantiations    101
;  :rlimit-count            194883
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        1))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4226
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      219
;  :arith-assert-upper      226
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        2
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               179
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 770
;  :datatype-occurs-check   290
;  :datatype-splits         479
;  :decisions               807
;  :del-clause              299
;  :final-checks            115
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1713
;  :mk-clause               333
;  :num-allocs              4413161
;  :num-checks              250
;  :propagations            255
;  :quant-instantiations    103
;  :rlimit-count            195364)
; [then-branch: 52 | !(First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[First:(Second:(Second:(Second:($t@62@06))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@62@06))))[1]) | live]
; [else-branch: 52 | First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[First:(Second:(Second:(Second:($t@62@06))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@62@06))))[1] | dead]
(push) ; 7
; [then-branch: 52 | !(First:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))[First:(Second:(Second:(Second:($t@62@06))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@62@06))))[1])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
        1)))))
; [eval] diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4226
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      219
;  :arith-assert-upper      226
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        2
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               179
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 770
;  :datatype-occurs-check   290
;  :datatype-splits         479
;  :decisions               807
;  :del-clause              299
;  :final-checks            115
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1715
;  :mk-clause               334
;  :num-allocs              4413161
;  :num-checks              251
;  :propagations            255
;  :quant-instantiations    103
;  :rlimit-count            195569)
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4226
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      219
;  :arith-assert-upper      226
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        2
;  :arith-pivots            68
;  :binary-propagations     11
;  :conflicts               179
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 770
;  :datatype-occurs-check   290
;  :datatype-splits         479
;  :decisions               807
;  :del-clause              299
;  :final-checks            115
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1715
;  :mk-clause               334
;  :num-allocs              4413161
;  :num-checks              252
;  :propagations            255
;  :quant-instantiations    103
;  :rlimit-count            195584)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
            1))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
          1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))
      1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Main_reset_events_no_delta_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@71@06 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 53 | 0 <= i@71@06 | live]
; [else-branch: 53 | !(0 <= i@71@06) | live]
(push) ; 8
; [then-branch: 53 | 0 <= i@71@06]
(assert (<= 0 i@71@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 53 | !(0 <= i@71@06)]
(assert (not (<= 0 i@71@06)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 54 | i@71@06 < |First:(Second:($t@69@06))| && 0 <= i@71@06 | live]
; [else-branch: 54 | !(i@71@06 < |First:(Second:($t@69@06))| && 0 <= i@71@06) | live]
(push) ; 8
; [then-branch: 54 | i@71@06 < |First:(Second:($t@69@06))| && 0 <= i@71@06]
(assert (and
  (<
    i@71@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))))
  (<= 0 i@71@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@71@06 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4361
;  :arith-add-rows          37
;  :arith-assert-diseq      33
;  :arith-assert-lower      226
;  :arith-assert-upper      235
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               179
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 795
;  :datatype-occurs-check   301
;  :datatype-splits         498
;  :decisions               834
;  :del-clause              322
;  :final-checks            118
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1754
;  :mk-clause               350
;  :num-allocs              4413161
;  :num-checks              254
;  :propagations            267
;  :quant-instantiations    104
;  :rlimit-count            197080)
; [eval] -1
(push) ; 9
; [then-branch: 55 | First:(Second:($t@69@06))[i@71@06] == -1 | live]
; [else-branch: 55 | First:(Second:($t@69@06))[i@71@06] != -1 | live]
(push) ; 10
; [then-branch: 55 | First:(Second:($t@69@06))[i@71@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
    i@71@06)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 55 | First:(Second:($t@69@06))[i@71@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
      i@71@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@71@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4361
;  :arith-add-rows          37
;  :arith-assert-diseq      34
;  :arith-assert-lower      229
;  :arith-assert-upper      236
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               179
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 795
;  :datatype-occurs-check   301
;  :datatype-splits         498
;  :decisions               834
;  :del-clause              322
;  :final-checks            118
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1760
;  :mk-clause               354
;  :num-allocs              4413161
;  :num-checks              255
;  :propagations            269
;  :quant-instantiations    105
;  :rlimit-count            197288)
(push) ; 11
; [then-branch: 56 | 0 <= First:(Second:($t@69@06))[i@71@06] | live]
; [else-branch: 56 | !(0 <= First:(Second:($t@69@06))[i@71@06]) | live]
(push) ; 12
; [then-branch: 56 | 0 <= First:(Second:($t@69@06))[i@71@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
    i@71@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@71@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4361
;  :arith-add-rows          37
;  :arith-assert-diseq      34
;  :arith-assert-lower      229
;  :arith-assert-upper      236
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               179
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 795
;  :datatype-occurs-check   301
;  :datatype-splits         498
;  :decisions               834
;  :del-clause              322
;  :final-checks            118
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1760
;  :mk-clause               354
;  :num-allocs              4413161
;  :num-checks              256
;  :propagations            269
;  :quant-instantiations    105
;  :rlimit-count            197382)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 56 | !(0 <= First:(Second:($t@69@06))[i@71@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
      i@71@06))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 54 | !(i@71@06 < |First:(Second:($t@69@06))| && 0 <= i@71@06)]
(assert (not
  (and
    (<
      i@71@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))))
    (<= 0 i@71@06))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@71@06 Int)) (!
  (implies
    (and
      (<
        i@71@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))))
      (<= 0 i@71@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
          i@71@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
            i@71@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
            i@71@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
    i@71@06))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4361
;  :arith-add-rows          37
;  :arith-assert-diseq      36
;  :arith-assert-lower      230
;  :arith-assert-upper      237
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               180
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 795
;  :datatype-occurs-check   301
;  :datatype-splits         498
;  :decisions               834
;  :del-clause              340
;  :final-checks            118
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1768
;  :mk-clause               368
;  :num-allocs              4413161
;  :num-checks              257
;  :propagations            271
;  :quant-instantiations    106
;  :rlimit-count            197804)
(assert (forall ((i@71@06 Int)) (!
  (implies
    (and
      (<
        i@71@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))))
      (<= 0 i@71@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
          i@71@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
            i@71@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
            i@71@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))
    i@71@06))
  :qid |prog.l<no position>|)))
(declare-const $t@72@06 $Snap)
(assert (= $t@72@06 ($Snap.combine ($Snap.first $t@72@06) ($Snap.second $t@72@06))))
(assert (=
  ($Snap.second $t@72@06)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@72@06))
    ($Snap.second ($Snap.second $t@72@06)))))
(assert (=
  ($Snap.second ($Snap.second $t@72@06))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@72@06)))
    ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@72@06))) $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@72@06)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@73@06 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 57 | 0 <= i@73@06 | live]
; [else-branch: 57 | !(0 <= i@73@06) | live]
(push) ; 8
; [then-branch: 57 | 0 <= i@73@06]
(assert (<= 0 i@73@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 57 | !(0 <= i@73@06)]
(assert (not (<= 0 i@73@06)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 58 | i@73@06 < |First:(Second:($t@72@06))| && 0 <= i@73@06 | live]
; [else-branch: 58 | !(i@73@06 < |First:(Second:($t@72@06))| && 0 <= i@73@06) | live]
(push) ; 8
; [then-branch: 58 | i@73@06 < |First:(Second:($t@72@06))| && 0 <= i@73@06]
(assert (and
  (<
    i@73@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
  (<= 0 i@73@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@73@06 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4398
;  :arith-add-rows          37
;  :arith-assert-diseq      36
;  :arith-assert-lower      235
;  :arith-assert-upper      240
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               180
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 795
;  :datatype-occurs-check   301
;  :datatype-splits         498
;  :decisions               834
;  :del-clause              340
;  :final-checks            118
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1790
;  :mk-clause               368
;  :num-allocs              4413161
;  :num-checks              258
;  :propagations            271
;  :quant-instantiations    110
;  :rlimit-count            199192)
; [eval] -1
(push) ; 9
; [then-branch: 59 | First:(Second:($t@72@06))[i@73@06] == -1 | live]
; [else-branch: 59 | First:(Second:($t@72@06))[i@73@06] != -1 | live]
(push) ; 10
; [then-branch: 59 | First:(Second:($t@72@06))[i@73@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@73@06)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 59 | First:(Second:($t@72@06))[i@73@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      i@73@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@73@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4398
;  :arith-add-rows          37
;  :arith-assert-diseq      36
;  :arith-assert-lower      235
;  :arith-assert-upper      240
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               180
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 795
;  :datatype-occurs-check   301
;  :datatype-splits         498
;  :decisions               834
;  :del-clause              340
;  :final-checks            118
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1791
;  :mk-clause               368
;  :num-allocs              4413161
;  :num-checks              259
;  :propagations            271
;  :quant-instantiations    110
;  :rlimit-count            199343)
(push) ; 11
; [then-branch: 60 | 0 <= First:(Second:($t@72@06))[i@73@06] | live]
; [else-branch: 60 | !(0 <= First:(Second:($t@72@06))[i@73@06]) | live]
(push) ; 12
; [then-branch: 60 | 0 <= First:(Second:($t@72@06))[i@73@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@73@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@73@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4398
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      238
;  :arith-assert-upper      240
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        3
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               180
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 795
;  :datatype-occurs-check   301
;  :datatype-splits         498
;  :decisions               834
;  :del-clause              340
;  :final-checks            118
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1794
;  :mk-clause               369
;  :num-allocs              4413161
;  :num-checks              260
;  :propagations            271
;  :quant-instantiations    110
;  :rlimit-count            199446)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 60 | !(0 <= First:(Second:($t@72@06))[i@73@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      i@73@06))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 58 | !(i@73@06 < |First:(Second:($t@72@06))| && 0 <= i@73@06)]
(assert (not
  (and
    (<
      i@73@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
    (<= 0 i@73@06))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@73@06 Int)) (!
  (implies
    (and
      (<
        i@73@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
      (<= 0 i@73@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          i@73@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@73@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@73@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@73@06))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@69@06)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4416
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      239
;  :arith-assert-upper      241
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         118
;  :arith-offset-eqs        3
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               180
;  :datatype-accessor-ax    204
;  :datatype-constructor-ax 795
;  :datatype-occurs-check   301
;  :datatype-splits         498
;  :decisions               834
;  :del-clause              341
;  :final-checks            118
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1814
;  :mk-clause               379
;  :num-allocs              4413161
;  :num-checks              261
;  :propagations            275
;  :quant-instantiations    112
;  :rlimit-count            200461)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4418
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      239
;  :arith-assert-upper      241
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         118
;  :arith-offset-eqs        3
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    204
;  :datatype-constructor-ax 795
;  :datatype-occurs-check   301
;  :datatype-splits         498
;  :decisions               834
;  :del-clause              341
;  :final-checks            118
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1815
;  :mk-clause               379
;  :num-allocs              4413161
;  :num-checks              262
;  :propagations            275
;  :quant-instantiations    112
;  :rlimit-count            200583)
; [then-branch: 61 | First:(Second:(Second:(Second:($t@69@06))))[0] == 0 | dead]
; [else-branch: 61 | First:(Second:(Second:(Second:($t@69@06))))[0] != 0 | live]
(push) ; 7
; [else-branch: 61 | First:(Second:(Second:(Second:($t@69@06))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      0)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4424
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      239
;  :arith-assert-upper      241
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         118
;  :arith-offset-eqs        3
;  :arith-pivots            70
;  :binary-propagations     11
;  :conflicts               181
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 795
;  :datatype-occurs-check   301
;  :datatype-splits         498
;  :decisions               834
;  :del-clause              341
;  :final-checks            118
;  :max-generation          2
;  :max-memory              4.48
;  :memory                  4.48
;  :minimized-lits          2
;  :mk-bool-var             1817
;  :mk-clause               379
;  :num-allocs              4413161
;  :num-checks              263
;  :propagations            275
;  :quant-instantiations    112
;  :rlimit-count            200827)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      1)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4644
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      248
;  :arith-assert-upper      252
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         127
;  :arith-offset-eqs        5
;  :arith-pivots            72
;  :binary-propagations     11
;  :conflicts               182
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 839
;  :datatype-occurs-check   315
;  :datatype-splits         522
;  :decisions               879
;  :del-clause              357
;  :final-checks            121
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             1864
;  :mk-clause               395
;  :num-allocs              4595626
;  :num-checks              264
;  :propagations            288
;  :quant-instantiations    113
;  :rlimit-count            202444
;  :time                    0.00)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
    1)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4863
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      257
;  :arith-assert-upper      263
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        7
;  :arith-pivots            74
;  :binary-propagations     11
;  :conflicts               183
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 883
;  :datatype-occurs-check   329
;  :datatype-splits         546
;  :decisions               924
;  :del-clause              373
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             1911
;  :mk-clause               411
;  :num-allocs              4595626
;  :num-checks              265
;  :propagations            301
;  :quant-instantiations    114
;  :rlimit-count            204070
;  :time                    0.00)
; [then-branch: 62 | First:(Second:(Second:(Second:($t@69@06))))[1] == 0 | live]
; [else-branch: 62 | First:(Second:(Second:(Second:($t@69@06))))[1] != 0 | live]
(push) ; 7
; [then-branch: 62 | First:(Second:(Second:(Second:($t@69@06))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
    1)
  0))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4864
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      257
;  :arith-assert-upper      263
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        7
;  :arith-pivots            74
;  :binary-propagations     11
;  :conflicts               183
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 883
;  :datatype-occurs-check   329
;  :datatype-splits         546
;  :decisions               924
;  :del-clause              373
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             1912
;  :mk-clause               411
;  :num-allocs              4595626
;  :num-checks              266
;  :propagations            301
;  :quant-instantiations    114
;  :rlimit-count            204198)
; [eval] -2
(pop) ; 7
(push) ; 7
; [else-branch: 62 | First:(Second:(Second:(Second:($t@69@06))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      1)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) == 0 ==> diz.Main_event_state[2] == -2
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4870
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      257
;  :arith-assert-upper      263
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        7
;  :arith-pivots            74
;  :binary-propagations     11
;  :conflicts               183
;  :datatype-accessor-ax    212
;  :datatype-constructor-ax 883
;  :datatype-occurs-check   329
;  :datatype-splits         546
;  :decisions               924
;  :del-clause              373
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             1916
;  :mk-clause               412
;  :num-allocs              4595626
;  :num-checks              267
;  :propagations            301
;  :quant-instantiations    114
;  :rlimit-count            204643)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      2)
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4872
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      257
;  :arith-assert-upper      263
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        7
;  :arith-pivots            74
;  :binary-propagations     11
;  :conflicts               184
;  :datatype-accessor-ax    212
;  :datatype-constructor-ax 883
;  :datatype-occurs-check   329
;  :datatype-splits         546
;  :decisions               924
;  :del-clause              375
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             1920
;  :mk-clause               414
;  :num-allocs              4595626
;  :num-checks              268
;  :propagations            301
;  :quant-instantiations    114
;  :rlimit-count            204765)
; [then-branch: 63 | First:(Second:(Second:(Second:($t@69@06))))[2] == 0 | dead]
; [else-branch: 63 | First:(Second:(Second:(Second:($t@69@06))))[2] != 0 | live]
(push) ; 7
; [else-branch: 63 | First:(Second:(Second:(Second:($t@69@06))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      2)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) != 0 ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] old(diz.Main_event_state[0]) != 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4878
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      257
;  :arith-assert-upper      263
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        7
;  :arith-pivots            74
;  :binary-propagations     11
;  :conflicts               184
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 883
;  :datatype-occurs-check   329
;  :datatype-splits         546
;  :decisions               924
;  :del-clause              375
;  :final-checks            124
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             1922
;  :mk-clause               414
;  :num-allocs              4595626
;  :num-checks              269
;  :propagations            301
;  :quant-instantiations    114
;  :rlimit-count            205029)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
    0)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5102
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      266
;  :arith-assert-upper      274
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         145
;  :arith-offset-eqs        9
;  :arith-pivots            76
;  :binary-propagations     11
;  :conflicts               185
;  :datatype-accessor-ax    216
;  :datatype-constructor-ax 927
;  :datatype-occurs-check   343
;  :datatype-splits         570
;  :decisions               970
;  :del-clause              391
;  :final-checks            127
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             1969
;  :mk-clause               430
;  :num-allocs              4595626
;  :num-checks              270
;  :propagations            314
;  :quant-instantiations    115
;  :rlimit-count            206681
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5104
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      266
;  :arith-assert-upper      274
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         145
;  :arith-offset-eqs        9
;  :arith-pivots            76
;  :binary-propagations     11
;  :conflicts               186
;  :datatype-accessor-ax    216
;  :datatype-constructor-ax 927
;  :datatype-occurs-check   343
;  :datatype-splits         570
;  :decisions               970
;  :del-clause              391
;  :final-checks            127
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             1970
;  :mk-clause               430
;  :num-allocs              4595626
;  :num-checks              271
;  :propagations            314
;  :quant-instantiations    115
;  :rlimit-count            206798)
; [then-branch: 64 | First:(Second:(Second:(Second:($t@69@06))))[0] != 0 | live]
; [else-branch: 64 | First:(Second:(Second:(Second:($t@69@06))))[0] == 0 | dead]
(push) ; 7
; [then-branch: 64 | First:(Second:(Second:(Second:($t@69@06))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      0)
    0)))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5106
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      266
;  :arith-assert-upper      274
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         145
;  :arith-offset-eqs        9
;  :arith-pivots            76
;  :binary-propagations     11
;  :conflicts               186
;  :datatype-accessor-ax    216
;  :datatype-constructor-ax 927
;  :datatype-occurs-check   343
;  :datatype-splits         570
;  :decisions               970
;  :del-clause              391
;  :final-checks            127
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             1971
;  :mk-clause               430
;  :num-allocs              4595626
;  :num-checks              272
;  :propagations            314
;  :quant-instantiations    115
;  :rlimit-count            206939)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5106
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      266
;  :arith-assert-upper      274
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         145
;  :arith-offset-eqs        9
;  :arith-pivots            76
;  :binary-propagations     11
;  :conflicts               186
;  :datatype-accessor-ax    216
;  :datatype-constructor-ax 927
;  :datatype-occurs-check   343
;  :datatype-splits         570
;  :decisions               970
;  :del-clause              391
;  :final-checks            127
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             1971
;  :mk-clause               430
;  :num-allocs              4595626
;  :num-checks              273
;  :propagations            314
;  :quant-instantiations    115
;  :rlimit-count            206954)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
        0)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) != 0 ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] old(diz.Main_event_state[1]) != 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5115
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      266
;  :arith-assert-upper      274
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         145
;  :arith-offset-eqs        9
;  :arith-pivots            76
;  :binary-propagations     11
;  :conflicts               186
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 927
;  :datatype-occurs-check   343
;  :datatype-splits         570
;  :decisions               970
;  :del-clause              391
;  :final-checks            127
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             1975
;  :mk-clause               431
;  :num-allocs              4595626
;  :num-checks              274
;  :propagations            315
;  :quant-instantiations    115
;  :rlimit-count            207371)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
    1)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5338
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      275
;  :arith-assert-upper      285
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         154
;  :arith-offset-eqs        11
;  :arith-pivots            78
;  :binary-propagations     11
;  :conflicts               187
;  :datatype-accessor-ax    220
;  :datatype-constructor-ax 971
;  :datatype-occurs-check   357
;  :datatype-splits         594
;  :decisions               1015
;  :del-clause              407
;  :final-checks            130
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             2021
;  :mk-clause               447
;  :num-allocs              4595626
;  :num-checks              275
;  :propagations            328
;  :quant-instantiations    116
;  :rlimit-count            209002
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      1)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5574
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      284
;  :arith-assert-upper      296
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         163
;  :arith-offset-eqs        13
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               189
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 1018
;  :datatype-occurs-check   375
;  :datatype-splits         620
;  :decisions               1062
;  :del-clause              424
;  :final-checks            134
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             2079
;  :mk-clause               464
;  :num-allocs              4595626
;  :num-checks              276
;  :propagations            342
;  :quant-instantiations    117
;  :rlimit-count            210683
;  :time                    0.00)
; [then-branch: 65 | First:(Second:(Second:(Second:($t@69@06))))[1] != 0 | live]
; [else-branch: 65 | First:(Second:(Second:(Second:($t@69@06))))[1] == 0 | live]
(push) ; 7
; [then-branch: 65 | First:(Second:(Second:(Second:($t@69@06))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      1)
    0)))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5574
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      284
;  :arith-assert-upper      296
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         163
;  :arith-offset-eqs        13
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               189
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 1018
;  :datatype-occurs-check   375
;  :datatype-splits         620
;  :decisions               1062
;  :del-clause              424
;  :final-checks            134
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             2079
;  :mk-clause               464
;  :num-allocs              4595626
;  :num-checks              277
;  :propagations            342
;  :quant-instantiations    117
;  :rlimit-count            210813)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5574
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      284
;  :arith-assert-upper      296
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         163
;  :arith-offset-eqs        13
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               189
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 1018
;  :datatype-occurs-check   375
;  :datatype-splits         620
;  :decisions               1062
;  :del-clause              424
;  :final-checks            134
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             2079
;  :mk-clause               464
;  :num-allocs              4595626
;  :num-checks              278
;  :propagations            342
;  :quant-instantiations    117
;  :rlimit-count            210828)
(pop) ; 7
(push) ; 7
; [else-branch: 65 | First:(Second:(Second:(Second:($t@69@06))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
    1)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
        1)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) != 0 ==> diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] old(diz.Main_event_state[2]) != 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5583
;  :arith-add-rows          37
;  :arith-assert-diseq      37
;  :arith-assert-lower      284
;  :arith-assert-upper      296
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         163
;  :arith-offset-eqs        13
;  :arith-pivots            80
;  :binary-propagations     11
;  :conflicts               189
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 1018
;  :datatype-occurs-check   375
;  :datatype-splits         620
;  :decisions               1062
;  :del-clause              424
;  :final-checks            134
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             2081
;  :mk-clause               465
;  :num-allocs              4595626
;  :num-checks              279
;  :propagations            342
;  :quant-instantiations    117
;  :rlimit-count            211172)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
    2)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5800
;  :arith-add-rows          37
;  :arith-assert-diseq      39
;  :arith-assert-lower      293
;  :arith-assert-upper      309
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         172
;  :arith-offset-eqs        15
;  :arith-pivots            82
;  :binary-propagations     11
;  :conflicts               190
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   389
;  :datatype-splits         643
;  :decisions               1107
;  :del-clause              442
;  :final-checks            137
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             2130
;  :mk-clause               483
;  :num-allocs              4595626
;  :num-checks              280
;  :propagations            356
;  :quant-instantiations    118
;  :rlimit-count            212829
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      2)
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5802
;  :arith-add-rows          37
;  :arith-assert-diseq      39
;  :arith-assert-lower      293
;  :arith-assert-upper      309
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         172
;  :arith-offset-eqs        15
;  :arith-pivots            82
;  :binary-propagations     11
;  :conflicts               191
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   389
;  :datatype-splits         643
;  :decisions               1107
;  :del-clause              444
;  :final-checks            137
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             2134
;  :mk-clause               485
;  :num-allocs              4595626
;  :num-checks              281
;  :propagations            356
;  :quant-instantiations    118
;  :rlimit-count            212946)
; [then-branch: 66 | First:(Second:(Second:(Second:($t@69@06))))[2] != 0 | live]
; [else-branch: 66 | First:(Second:(Second:(Second:($t@69@06))))[2] == 0 | dead]
(push) ; 7
; [then-branch: 66 | First:(Second:(Second:(Second:($t@69@06))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      2)
    0)))
; [eval] diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5804
;  :arith-add-rows          37
;  :arith-assert-diseq      41
;  :arith-assert-lower      293
;  :arith-assert-upper      309
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         172
;  :arith-offset-eqs        15
;  :arith-pivots            82
;  :binary-propagations     11
;  :conflicts               191
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   389
;  :datatype-splits         643
;  :decisions               1107
;  :del-clause              444
;  :final-checks            137
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             2138
;  :mk-clause               490
;  :num-allocs              4595626
;  :num-checks              282
;  :propagations            356
;  :quant-instantiations    118
;  :rlimit-count            213099)
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5804
;  :arith-add-rows          37
;  :arith-assert-diseq      41
;  :arith-assert-lower      293
;  :arith-assert-upper      309
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         172
;  :arith-offset-eqs        15
;  :arith-pivots            82
;  :binary-propagations     11
;  :conflicts               191
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   389
;  :datatype-splits         643
;  :decisions               1107
;  :del-clause              444
;  :final-checks            137
;  :max-generation          2
;  :max-memory              4.58
;  :memory                  4.58
;  :minimized-lits          2
;  :mk-bool-var             2138
;  :mk-clause               490
;  :num-allocs              4595626
;  :num-checks              283
;  :propagations            356
;  :quant-instantiations    118
;  :rlimit-count            213114)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
        2)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@69@06)))))
      2))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] diz.Main_process_state[0] != -1 && diz.Main_process_state[1] != -1
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6034
;  :arith-add-rows          37
;  :arith-assert-diseq      43
;  :arith-assert-lower      303
;  :arith-assert-upper      323
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         181
;  :arith-offset-eqs        17
;  :arith-pivots            84
;  :binary-propagations     11
;  :conflicts               193
;  :datatype-accessor-ax    230
;  :datatype-constructor-ax 1104
;  :datatype-occurs-check   403
;  :datatype-splits         666
;  :decisions               1155
;  :del-clause              479
;  :final-checks            140
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.68
;  :minimized-lits          2
;  :mk-bool-var             2197
;  :mk-clause               517
;  :num-allocs              4786761
;  :num-checks              285
;  :propagations            376
;  :quant-instantiations    120
;  :rlimit-count            214937)
; [eval] -1
(push) ; 6
; [then-branch: 67 | First:(Second:($t@72@06))[0] != -1 | live]
; [else-branch: 67 | First:(Second:($t@72@06))[0] == -1 | live]
(push) ; 7
; [then-branch: 67 | First:(Second:($t@72@06))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[1] != -1
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6038
;  :arith-add-rows          37
;  :arith-assert-diseq      45
;  :arith-assert-lower      310
;  :arith-assert-upper      326
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        264
;  :arith-fixed-eqs         182
;  :arith-offset-eqs        17
;  :arith-pivots            85
;  :binary-propagations     11
;  :conflicts               193
;  :datatype-accessor-ax    230
;  :datatype-constructor-ax 1104
;  :datatype-occurs-check   403
;  :datatype-splits         666
;  :decisions               1155
;  :del-clause              479
;  :final-checks            140
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.68
;  :minimized-lits          2
;  :mk-bool-var             2212
;  :mk-clause               534
;  :num-allocs              4786761
;  :num-checks              286
;  :propagations            383
;  :quant-instantiations    123
;  :rlimit-count            215221)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 67 | First:(Second:($t@72@06))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  (- 0 1)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0)
        (- 0 1)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6328
;  :arith-add-rows          42
;  :arith-assert-diseq      56
;  :arith-assert-lower      341
;  :arith-assert-upper      353
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         196
;  :arith-offset-eqs        21
;  :arith-pivots            96
;  :binary-propagations     11
;  :conflicts               199
;  :datatype-accessor-ax    237
;  :datatype-constructor-ax 1161
;  :datatype-occurs-check   423
;  :datatype-splits         698
;  :decisions               1212
;  :del-clause              567
;  :final-checks            144
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.68
;  :minimized-lits          3
;  :mk-bool-var             2330
;  :mk-clause               605
;  :num-allocs              4786761
;  :num-checks              287
;  :propagations            425
;  :quant-instantiations    133
;  :rlimit-count            217671
;  :time                    0.00)
(push) ; 6
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6484
;  :arith-add-rows          42
;  :arith-assert-diseq      58
;  :arith-assert-lower      347
;  :arith-assert-upper      363
;  :arith-bound-prop        3
;  :arith-conflicts         17
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         201
;  :arith-offset-eqs        22
;  :arith-pivots            98
;  :binary-propagations     11
;  :conflicts               199
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1190
;  :datatype-occurs-check   437
;  :datatype-splits         721
;  :decisions               1243
;  :del-clause              580
;  :final-checks            147
;  :max-generation          2
;  :max-memory              4.68
;  :memory                  4.68
;  :minimized-lits          3
;  :mk-bool-var             2369
;  :mk-clause               618
;  :num-allocs              4786761
;  :num-checks              288
;  :propagations            443
;  :quant-instantiations    134
;  :rlimit-count            219069
;  :time                    0.00)
; [then-branch: 68 | First:(Second:($t@72@06))[1] != -1 && First:(Second:($t@72@06))[0] != -1 | live]
; [else-branch: 68 | !(First:(Second:($t@72@06))[1] != -1 && First:(Second:($t@72@06))[0] != -1) | live]
(push) ; 6
; [then-branch: 68 | First:(Second:($t@72@06))[1] != -1 && First:(Second:($t@72@06))[0] != -1]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0)
      (- 0 1)))))
; [exec]
; min_advance__39 := Main_find_minimum_advance_Sequence$Integer$(diz, diz.Main_event_state)
; [eval] Main_find_minimum_advance_Sequence$Integer$(diz, diz.Main_event_state)
(push) ; 7
; [eval] diz != null
; [eval] |vals| == 3
; [eval] |vals|
(pop) ; 7
; Joined path conditions
(declare-const min_advance__39@74@06 Int)
(assert (=
  min_advance__39@74@06
  (Main_find_minimum_advance_Sequence$Integer$ ($Snap.combine
    $Snap.unit
    $Snap.unit) diz@32@06 ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06))))))))
; [eval] min_advance__39 == -1
; [eval] -1
(push) ; 7
(assert (not (not (= min_advance__39@74@06 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6798
;  :arith-add-rows          50
;  :arith-assert-diseq      92
;  :arith-assert-lower      396
;  :arith-assert-upper      400
;  :arith-bound-prop        10
;  :arith-conflicts         18
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        26
;  :arith-pivots            110
;  :binary-propagations     11
;  :conflicts               207
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1247
;  :datatype-occurs-check   457
;  :datatype-splits         753
;  :decisions               1306
;  :del-clause              638
;  :final-checks            151
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          4
;  :mk-bool-var             2542
;  :mk-clause               778
;  :num-allocs              4982988
;  :num-checks              289
;  :propagations            514
;  :quant-instantiations    147
;  :rlimit-count            222174
;  :time                    0.00)
(push) ; 7
(assert (not (= min_advance__39@74@06 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7102
;  :arith-add-rows          70
;  :arith-assert-diseq      131
;  :arith-assert-lower      446
;  :arith-assert-upper      433
;  :arith-bound-prop        21
;  :arith-conflicts         19
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         233
;  :arith-offset-eqs        30
;  :arith-pivots            125
;  :binary-propagations     11
;  :conflicts               218
;  :datatype-accessor-ax    254
;  :datatype-constructor-ax 1304
;  :datatype-occurs-check   477
;  :datatype-splits         785
;  :decisions               1379
;  :del-clause              720
;  :final-checks            155
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          5
;  :mk-bool-var             2654
;  :mk-clause               860
;  :num-allocs              4982988
;  :num-checks              290
;  :propagations            604
;  :quant-instantiations    152
;  :rlimit-count            224966
;  :time                    0.00)
; [then-branch: 69 | min_advance__39@74@06 == -1 | live]
; [else-branch: 69 | min_advance__39@74@06 != -1 | live]
(push) ; 7
; [then-branch: 69 | min_advance__39@74@06 == -1]
(assert (= min_advance__39@74@06 (- 0 1)))
; [exec]
; min_advance__39 := 0
; [exec]
; __flatten_39__38 := Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__39), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__39), (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__39))
; [eval] Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__39), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__39), (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__39))
; [eval] (diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__39)
; [eval] diz.Main_event_state[0] < -1
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7105
;  :arith-add-rows          70
;  :arith-assert-diseq      134
;  :arith-assert-lower      447
;  :arith-assert-upper      436
;  :arith-bound-prop        21
;  :arith-conflicts         19
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         233
;  :arith-offset-eqs        30
;  :arith-pivots            125
;  :binary-propagations     11
;  :conflicts               218
;  :datatype-accessor-ax    254
;  :datatype-constructor-ax 1304
;  :datatype-occurs-check   477
;  :datatype-splits         785
;  :decisions               1379
;  :del-clause              720
;  :final-checks            155
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          5
;  :mk-bool-var             2658
;  :mk-clause               860
;  :num-allocs              4982988
;  :num-checks              291
;  :propagations            606
;  :quant-instantiations    152
;  :rlimit-count            225054)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7390
;  :arith-add-rows          80
;  :arith-assert-diseq      152
;  :arith-assert-lower      468
;  :arith-assert-upper      469
;  :arith-bound-prop        27
;  :arith-conflicts         20
;  :arith-eq-adapter        366
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        33
;  :arith-pivots            134
;  :binary-propagations     11
;  :conflicts               225
;  :datatype-accessor-ax    261
;  :datatype-constructor-ax 1359
;  :datatype-occurs-check   497
;  :datatype-splits         816
;  :decisions               1438
;  :del-clause              769
;  :final-checks            160
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          6
;  :mk-bool-var             2755
;  :mk-clause               909
;  :num-allocs              4982988
;  :num-checks              292
;  :propagations            648
;  :quant-instantiations    156
;  :rlimit-count            227314
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    0)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7675
;  :arith-add-rows          89
;  :arith-assert-diseq      170
;  :arith-assert-lower      495
;  :arith-assert-upper      496
;  :arith-bound-prop        31
;  :arith-conflicts         21
;  :arith-eq-adapter        384
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        36
;  :arith-pivots            142
;  :binary-propagations     11
;  :conflicts               232
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1414
;  :datatype-occurs-check   517
;  :datatype-splits         847
;  :decisions               1497
;  :del-clause              816
;  :final-checks            165
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          7
;  :mk-bool-var             2852
;  :mk-clause               956
;  :num-allocs              4982988
;  :num-checks              293
;  :propagations            692
;  :quant-instantiations    160
;  :rlimit-count            229518
;  :time                    0.00)
; [then-branch: 70 | First:(Second:(Second:(Second:($t@72@06))))[0] < -1 | live]
; [else-branch: 70 | !(First:(Second:(Second:(Second:($t@72@06))))[0] < -1) | live]
(push) ; 9
; [then-branch: 70 | First:(Second:(Second:(Second:($t@72@06))))[0] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    0)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 70 | !(First:(Second:(Second:(Second:($t@72@06))))[0] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] - min_advance__39
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7675
;  :arith-add-rows          89
;  :arith-assert-diseq      170
;  :arith-assert-lower      501
;  :arith-assert-upper      496
;  :arith-bound-prop        31
;  :arith-conflicts         21
;  :arith-eq-adapter        384
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        36
;  :arith-pivots            142
;  :binary-propagations     11
;  :conflicts               232
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1414
;  :datatype-occurs-check   517
;  :datatype-splits         847
;  :decisions               1497
;  :del-clause              816
;  :final-checks            165
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          7
;  :mk-bool-var             2852
;  :mk-clause               956
;  :num-allocs              4982988
;  :num-checks              294
;  :propagations            698
;  :quant-instantiations    160
;  :rlimit-count            229688)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__39)
; [eval] diz.Main_event_state[1] < -1
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7675
;  :arith-add-rows          89
;  :arith-assert-diseq      170
;  :arith-assert-lower      501
;  :arith-assert-upper      496
;  :arith-bound-prop        31
;  :arith-conflicts         21
;  :arith-eq-adapter        384
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        36
;  :arith-pivots            142
;  :binary-propagations     11
;  :conflicts               232
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1414
;  :datatype-occurs-check   517
;  :datatype-splits         847
;  :decisions               1497
;  :del-clause              816
;  :final-checks            165
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          7
;  :mk-bool-var             2852
;  :mk-clause               956
;  :num-allocs              4982988
;  :num-checks              295
;  :propagations            698
;  :quant-instantiations    160
;  :rlimit-count            229703)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8249
;  :arith-add-rows          100
;  :arith-assert-diseq      195
;  :arith-assert-lower      545
;  :arith-assert-upper      540
;  :arith-bound-prop        38
;  :arith-conflicts         23
;  :arith-eq-adapter        414
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        36
;  :arith-pivots            150
;  :binary-propagations     11
;  :conflicts               248
;  :datatype-accessor-ax    297
;  :datatype-constructor-ax 1537
;  :datatype-occurs-check   567
;  :datatype-splits         963
;  :decisions               1613
;  :del-clause              887
;  :final-checks            178
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          8
;  :mk-bool-var             3083
;  :mk-clause               1027
;  :num-allocs              4982988
;  :num-checks              296
;  :propagations            779
;  :quant-instantiations    165
;  :rlimit-count            233185
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8542
;  :arith-add-rows          111
;  :arith-assert-diseq      213
;  :arith-assert-lower      579
;  :arith-assert-upper      568
;  :arith-bound-prop        45
;  :arith-conflicts         24
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        40
;  :arith-pivots            159
;  :binary-propagations     11
;  :conflicts               255
;  :datatype-accessor-ax    304
;  :datatype-constructor-ax 1594
;  :datatype-occurs-check   587
;  :datatype-splits         995
;  :decisions               1674
;  :del-clause              933
;  :final-checks            182
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          9
;  :mk-bool-var             3183
;  :mk-clause               1073
;  :num-allocs              4982988
;  :num-checks              297
;  :propagations            822
;  :quant-instantiations    169
;  :rlimit-count            235481
;  :time                    0.00)
; [then-branch: 71 | First:(Second:(Second:(Second:($t@72@06))))[1] < -1 | live]
; [else-branch: 71 | !(First:(Second:(Second:(Second:($t@72@06))))[1] < -1) | live]
(push) ; 9
; [then-branch: 71 | First:(Second:(Second:(Second:($t@72@06))))[1] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    1)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 71 | !(First:(Second:(Second:(Second:($t@72@06))))[1] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] - min_advance__39
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8542
;  :arith-add-rows          111
;  :arith-assert-diseq      213
;  :arith-assert-lower      581
;  :arith-assert-upper      568
;  :arith-bound-prop        45
;  :arith-conflicts         24
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        40
;  :arith-pivots            159
;  :binary-propagations     11
;  :conflicts               255
;  :datatype-accessor-ax    304
;  :datatype-constructor-ax 1594
;  :datatype-occurs-check   587
;  :datatype-splits         995
;  :decisions               1674
;  :del-clause              933
;  :final-checks            182
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          9
;  :mk-bool-var             3183
;  :mk-clause               1073
;  :num-allocs              4982988
;  :num-checks              298
;  :propagations            824
;  :quant-instantiations    169
;  :rlimit-count            235644)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__39)
; [eval] diz.Main_event_state[2] < -1
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8542
;  :arith-add-rows          111
;  :arith-assert-diseq      213
;  :arith-assert-lower      581
;  :arith-assert-upper      568
;  :arith-bound-prop        45
;  :arith-conflicts         24
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        40
;  :arith-pivots            159
;  :binary-propagations     11
;  :conflicts               255
;  :datatype-accessor-ax    304
;  :datatype-constructor-ax 1594
;  :datatype-occurs-check   587
;  :datatype-splits         995
;  :decisions               1674
;  :del-clause              933
;  :final-checks            182
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          9
;  :mk-bool-var             3183
;  :mk-clause               1073
;  :num-allocs              4982988
;  :num-checks              299
;  :propagations            824
;  :quant-instantiations    169
;  :rlimit-count            235659)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8824
;  :arith-add-rows          120
;  :arith-assert-diseq      230
;  :arith-assert-lower      606
;  :arith-assert-upper      595
;  :arith-bound-prop        55
;  :arith-conflicts         24
;  :arith-eq-adapter        450
;  :arith-fixed-eqs         302
;  :arith-offset-eqs        43
;  :arith-pivots            167
;  :binary-propagations     11
;  :conflicts               262
;  :datatype-accessor-ax    311
;  :datatype-constructor-ax 1649
;  :datatype-occurs-check   607
;  :datatype-splits         1026
;  :decisions               1732
;  :del-clause              985
;  :final-checks            187
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          10
;  :mk-bool-var             3277
;  :mk-clause               1125
;  :num-allocs              4982988
;  :num-checks              300
;  :propagations            867
;  :quant-instantiations    173
;  :rlimit-count            237870
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    2)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9398
;  :arith-add-rows          131
;  :arith-assert-diseq      259
;  :arith-assert-lower      662
;  :arith-assert-upper      630
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        480
;  :arith-fixed-eqs         318
;  :arith-offset-eqs        43
;  :arith-pivots            176
;  :binary-propagations     11
;  :conflicts               277
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1073
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3508
;  :mk-clause               1213
;  :num-allocs              4982988
;  :num-checks              301
;  :propagations            952
;  :quant-instantiations    178
;  :rlimit-count            241415
;  :time                    0.00)
; [then-branch: 72 | First:(Second:(Second:(Second:($t@72@06))))[2] < -1 | live]
; [else-branch: 72 | !(First:(Second:(Second:(Second:($t@72@06))))[2] < -1) | live]
(push) ; 9
; [then-branch: 72 | First:(Second:(Second:(Second:($t@72@06))))[2] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    2)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 72 | !(First:(Second:(Second:(Second:($t@72@06))))[2] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      2)
    (- 0 1))))
; [eval] diz.Main_event_state[2] - min_advance__39
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9398
;  :arith-add-rows          131
;  :arith-assert-diseq      259
;  :arith-assert-lower      664
;  :arith-assert-upper      630
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        480
;  :arith-fixed-eqs         318
;  :arith-offset-eqs        43
;  :arith-pivots            176
;  :binary-propagations     11
;  :conflicts               277
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1073
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3508
;  :mk-clause               1213
;  :num-allocs              4982988
;  :num-checks              302
;  :propagations            954
;  :quant-instantiations    178
;  :rlimit-count            241578)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_singleton (ite
          (<
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
              0)
            (- 0 1))
          (- 0 3)
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
            0)))
        (Seq_singleton (ite
          (<
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
              1)
            (- 0 1))
          (- 0 3)
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
            1))))
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
            2)
          (- 0 1))
        (- 0 3)
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
          2)))))
  3))
(declare-const __flatten_39__38@75@06 Seq<Int>)
(assert (Seq_equal
  __flatten_39__38@75@06
  (Seq_append
    (Seq_append
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
            0)
          (- 0 1))
        (- 0 3)
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
          0)))
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
            1)
          (- 0 1))
        (- 0 3)
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
          1))))
    (Seq_singleton (ite
      (<
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
          2)
        (- 0 1))
      (- 0 3)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
        2))))))
; [exec]
; __flatten_38__37 := __flatten_39__38
; [exec]
; diz.Main_event_state := __flatten_38__37
; [exec]
; Main_wakeup_after_wait_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(push) ; 8
(assert (not (= (Seq_length __flatten_39__38@75@06) 3)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9405
;  :arith-add-rows          132
;  :arith-assert-diseq      259
;  :arith-assert-lower      667
;  :arith-assert-upper      632
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        484
;  :arith-fixed-eqs         319
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               278
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1073
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3541
;  :mk-clause               1236
;  :num-allocs              4982988
;  :num-checks              303
;  :propagations            959
;  :quant-instantiations    182
;  :rlimit-count            242347)
(assert (= (Seq_length __flatten_39__38@75@06) 3))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@76@06 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 73 | 0 <= i@76@06 | live]
; [else-branch: 73 | !(0 <= i@76@06) | live]
(push) ; 10
; [then-branch: 73 | 0 <= i@76@06]
(assert (<= 0 i@76@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 73 | !(0 <= i@76@06)]
(assert (not (<= 0 i@76@06)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 74 | i@76@06 < |First:(Second:($t@72@06))| && 0 <= i@76@06 | live]
; [else-branch: 74 | !(i@76@06 < |First:(Second:($t@72@06))| && 0 <= i@76@06) | live]
(push) ; 10
; [then-branch: 74 | i@76@06 < |First:(Second:($t@72@06))| && 0 <= i@76@06]
(assert (and
  (<
    i@76@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
  (<= 0 i@76@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@76@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9406
;  :arith-add-rows          132
;  :arith-assert-diseq      259
;  :arith-assert-lower      669
;  :arith-assert-upper      634
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        485
;  :arith-fixed-eqs         319
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               278
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1073
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3546
;  :mk-clause               1236
;  :num-allocs              4982988
;  :num-checks              304
;  :propagations            959
;  :quant-instantiations    182
;  :rlimit-count            242534)
; [eval] -1
(push) ; 11
; [then-branch: 75 | First:(Second:($t@72@06))[i@76@06] == -1 | live]
; [else-branch: 75 | First:(Second:($t@72@06))[i@76@06] != -1 | live]
(push) ; 12
; [then-branch: 75 | First:(Second:($t@72@06))[i@76@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@76@06)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 75 | First:(Second:($t@72@06))[i@76@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      i@76@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@76@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9410
;  :arith-add-rows          132
;  :arith-assert-diseq      261
;  :arith-assert-lower      676
;  :arith-assert-upper      637
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        488
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               278
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1073
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3561
;  :mk-clause               1247
;  :num-allocs              4982988
;  :num-checks              305
;  :propagations            964
;  :quant-instantiations    185
;  :rlimit-count            242835)
(push) ; 13
; [then-branch: 76 | 0 <= First:(Second:($t@72@06))[i@76@06] | live]
; [else-branch: 76 | !(0 <= First:(Second:($t@72@06))[i@76@06]) | live]
(push) ; 14
; [then-branch: 76 | 0 <= First:(Second:($t@72@06))[i@76@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@76@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@76@06 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9410
;  :arith-add-rows          132
;  :arith-assert-diseq      261
;  :arith-assert-lower      676
;  :arith-assert-upper      637
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        488
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               278
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1073
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3561
;  :mk-clause               1247
;  :num-allocs              4982988
;  :num-checks              306
;  :propagations            964
;  :quant-instantiations    185
;  :rlimit-count            242929)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 76 | !(0 <= First:(Second:($t@72@06))[i@76@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      i@76@06))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 74 | !(i@76@06 < |First:(Second:($t@72@06))| && 0 <= i@76@06)]
(assert (not
  (and
    (<
      i@76@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
    (<= 0 i@76@06))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@76@06 Int)) (!
  (implies
    (and
      (<
        i@76@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
      (<= 0 i@76@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          i@76@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@76@06)
          (Seq_length __flatten_39__38@75@06))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@76@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@76@06))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9410
;  :arith-add-rows          132
;  :arith-assert-diseq      262
;  :arith-assert-lower      677
;  :arith-assert-upper      638
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        490
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1109
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3575
;  :mk-clause               1272
;  :num-allocs              4982988
;  :num-checks              307
;  :propagations            966
;  :quant-instantiations    188
;  :rlimit-count            243417)
(assert (forall ((i@76@06 Int)) (!
  (implies
    (and
      (<
        i@76@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
      (<= 0 i@76@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          i@76@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@76@06)
          (Seq_length __flatten_39__38@75@06))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@76@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@76@06))
  :qid |prog.l<no position>|)))
(declare-const $t@77@06 $Snap)
(assert (= $t@77@06 ($Snap.combine ($Snap.first $t@77@06) ($Snap.second $t@77@06))))
(assert (=
  ($Snap.second $t@77@06)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@77@06))
    ($Snap.second ($Snap.second $t@77@06)))))
(assert (=
  ($Snap.second ($Snap.second $t@77@06))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@77@06)))
    ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@77@06))) $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@77@06)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@78@06 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 77 | 0 <= i@78@06 | live]
; [else-branch: 77 | !(0 <= i@78@06) | live]
(push) ; 10
; [then-branch: 77 | 0 <= i@78@06]
(assert (<= 0 i@78@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 77 | !(0 <= i@78@06)]
(assert (not (<= 0 i@78@06)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 78 | i@78@06 < |First:(Second:($t@77@06))| && 0 <= i@78@06 | live]
; [else-branch: 78 | !(i@78@06 < |First:(Second:($t@77@06))| && 0 <= i@78@06) | live]
(push) ; 10
; [then-branch: 78 | i@78@06 < |First:(Second:($t@77@06))| && 0 <= i@78@06]
(assert (and
  (<
    i@78@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))))
  (<= 0 i@78@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@78@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9447
;  :arith-add-rows          132
;  :arith-assert-diseq      262
;  :arith-assert-lower      682
;  :arith-assert-upper      641
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        492
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1109
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3597
;  :mk-clause               1272
;  :num-allocs              4982988
;  :num-checks              308
;  :propagations            966
;  :quant-instantiations    194
;  :rlimit-count            244857)
; [eval] -1
(push) ; 11
; [then-branch: 79 | First:(Second:($t@77@06))[i@78@06] == -1 | live]
; [else-branch: 79 | First:(Second:($t@77@06))[i@78@06] != -1 | live]
(push) ; 12
; [then-branch: 79 | First:(Second:($t@77@06))[i@78@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
    i@78@06)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 79 | First:(Second:($t@77@06))[i@78@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
      i@78@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@78@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9447
;  :arith-add-rows          132
;  :arith-assert-diseq      262
;  :arith-assert-lower      682
;  :arith-assert-upper      641
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        492
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1109
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3598
;  :mk-clause               1272
;  :num-allocs              4982988
;  :num-checks              309
;  :propagations            966
;  :quant-instantiations    194
;  :rlimit-count            245008)
(push) ; 13
; [then-branch: 80 | 0 <= First:(Second:($t@77@06))[i@78@06] | live]
; [else-branch: 80 | !(0 <= First:(Second:($t@77@06))[i@78@06]) | live]
(push) ; 14
; [then-branch: 80 | 0 <= First:(Second:($t@77@06))[i@78@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
    i@78@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@78@06 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9447
;  :arith-add-rows          132
;  :arith-assert-diseq      263
;  :arith-assert-lower      685
;  :arith-assert-upper      641
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        493
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1109
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3601
;  :mk-clause               1273
;  :num-allocs              4982988
;  :num-checks              310
;  :propagations            966
;  :quant-instantiations    194
;  :rlimit-count            245111)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 80 | !(0 <= First:(Second:($t@77@06))[i@78@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
      i@78@06))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 78 | !(i@78@06 < |First:(Second:($t@77@06))| && 0 <= i@78@06)]
(assert (not
  (and
    (<
      i@78@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))))
    (<= 0 i@78@06))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@78@06 Int)) (!
  (implies
    (and
      (<
        i@78@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))))
      (<= 0 i@78@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
          i@78@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
            i@78@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
            i@78@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
    i@78@06))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
  __flatten_39__38@75@06))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1) ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9468
;  :arith-add-rows          132
;  :arith-assert-diseq      263
;  :arith-assert-lower      686
;  :arith-assert-upper      642
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        495
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1110
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3625
;  :mk-clause               1289
;  :num-allocs              4982988
;  :num-checks              311
;  :propagations            972
;  :quant-instantiations    196
;  :rlimit-count            246146)
(push) ; 8
; [then-branch: 81 | 0 <= First:(Second:($t@72@06))[0] | live]
; [else-branch: 81 | !(0 <= First:(Second:($t@72@06))[0]) | live]
(push) ; 9
; [then-branch: 81 | 0 <= First:(Second:($t@72@06))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9468
;  :arith-add-rows          132
;  :arith-assert-diseq      263
;  :arith-assert-lower      686
;  :arith-assert-upper      642
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        495
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1110
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3625
;  :mk-clause               1289
;  :num-allocs              4982988
;  :num-checks              312
;  :propagations            972
;  :quant-instantiations    196
;  :rlimit-count            246246)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9468
;  :arith-add-rows          132
;  :arith-assert-diseq      263
;  :arith-assert-lower      686
;  :arith-assert-upper      642
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        495
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               279
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1110
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3625
;  :mk-clause               1289
;  :num-allocs              4982988
;  :num-checks              313
;  :propagations            972
;  :quant-instantiations    196
;  :rlimit-count            246255)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  (Seq_length __flatten_39__38@75@06))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9468
;  :arith-add-rows          132
;  :arith-assert-diseq      263
;  :arith-assert-lower      686
;  :arith-assert-upper      642
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        495
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               280
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1110
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3625
;  :mk-clause               1289
;  :num-allocs              4982988
;  :num-checks              314
;  :propagations            972
;  :quant-instantiations    196
;  :rlimit-count            246343)
(push) ; 10
; [then-branch: 82 | __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == 0 | live]
; [else-branch: 82 | __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] != 0 | live]
(push) ; 11
; [then-branch: 82 | __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@75@06
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 82 | __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@75@06
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9469
;  :arith-add-rows          133
;  :arith-assert-diseq      263
;  :arith-assert-lower      686
;  :arith-assert-upper      642
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        495
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               280
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1110
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3630
;  :mk-clause               1294
;  :num-allocs              4982988
;  :num-checks              315
;  :propagations            972
;  :quant-instantiations    197
;  :rlimit-count            246558)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9469
;  :arith-add-rows          133
;  :arith-assert-diseq      263
;  :arith-assert-lower      686
;  :arith-assert-upper      642
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        495
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               280
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1110
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3630
;  :mk-clause               1294
;  :num-allocs              4982988
;  :num-checks              316
;  :propagations            972
;  :quant-instantiations    197
;  :rlimit-count            246567)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  (Seq_length __flatten_39__38@75@06))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9469
;  :arith-add-rows          133
;  :arith-assert-diseq      263
;  :arith-assert-lower      686
;  :arith-assert-upper      642
;  :arith-bound-prop        62
;  :arith-conflicts         26
;  :arith-eq-adapter        495
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        43
;  :arith-pivots            177
;  :binary-propagations     11
;  :conflicts               281
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1772
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1853
;  :del-clause              1110
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          11
;  :mk-bool-var             3630
;  :mk-clause               1294
;  :num-allocs              4982988
;  :num-checks              317
;  :propagations            972
;  :quant-instantiations    197
;  :rlimit-count            246655)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 81 | !(0 <= First:(Second:($t@72@06))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9895
;  :arith-add-rows          181
;  :arith-assert-diseq      350
;  :arith-assert-lower      825
;  :arith-assert-upper      747
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        579
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            194
;  :binary-propagations     11
;  :conflicts               314
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1778
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1905
;  :del-clause              1410
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          42
;  :mk-bool-var             4020
;  :mk-clause               1589
;  :num-allocs              4982988
;  :num-checks              318
;  :propagations            1277
;  :quant-instantiations    304
;  :rlimit-count            251082
;  :time                    0.00)
; [then-branch: 83 | __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0] | dead]
; [else-branch: 83 | !(__flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0]) | live]
(push) ; 9
; [else-branch: 83 | !(__flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1) ==> diz.Main_process_state[1] == -1
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9901
;  :arith-add-rows          181
;  :arith-assert-diseq      350
;  :arith-assert-lower      825
;  :arith-assert-upper      747
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        579
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            194
;  :binary-propagations     11
;  :conflicts               314
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1778
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1905
;  :del-clause              1410
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          42
;  :mk-bool-var             4022
;  :mk-clause               1589
;  :num-allocs              4982988
;  :num-checks              319
;  :propagations            1277
;  :quant-instantiations    304
;  :rlimit-count            251338)
(push) ; 8
; [then-branch: 84 | 0 <= First:(Second:($t@72@06))[1] | live]
; [else-branch: 84 | !(0 <= First:(Second:($t@72@06))[1]) | live]
(push) ; 9
; [then-branch: 84 | 0 <= First:(Second:($t@72@06))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9901
;  :arith-add-rows          181
;  :arith-assert-diseq      350
;  :arith-assert-lower      825
;  :arith-assert-upper      747
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        579
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            194
;  :binary-propagations     11
;  :conflicts               314
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1778
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1905
;  :del-clause              1410
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          42
;  :mk-bool-var             4022
;  :mk-clause               1589
;  :num-allocs              4982988
;  :num-checks              320
;  :propagations            1277
;  :quant-instantiations    304
;  :rlimit-count            251438)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9901
;  :arith-add-rows          181
;  :arith-assert-diseq      350
;  :arith-assert-lower      825
;  :arith-assert-upper      747
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        579
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            194
;  :binary-propagations     11
;  :conflicts               314
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1778
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1905
;  :del-clause              1410
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          42
;  :mk-bool-var             4022
;  :mk-clause               1589
;  :num-allocs              4982988
;  :num-checks              321
;  :propagations            1277
;  :quant-instantiations    304
;  :rlimit-count            251447)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  (Seq_length __flatten_39__38@75@06))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9901
;  :arith-add-rows          181
;  :arith-assert-diseq      350
;  :arith-assert-lower      825
;  :arith-assert-upper      747
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        579
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            194
;  :binary-propagations     11
;  :conflicts               315
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1778
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1905
;  :del-clause              1410
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          42
;  :mk-bool-var             4022
;  :mk-clause               1589
;  :num-allocs              4982988
;  :num-checks              322
;  :propagations            1277
;  :quant-instantiations    304
;  :rlimit-count            251535)
(push) ; 10
; [then-branch: 85 | __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == 0 | live]
; [else-branch: 85 | __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] != 0 | live]
(push) ; 11
; [then-branch: 85 | __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@75@06
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 85 | __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@75@06
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9902
;  :arith-add-rows          183
;  :arith-assert-diseq      350
;  :arith-assert-lower      825
;  :arith-assert-upper      747
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        579
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            194
;  :binary-propagations     11
;  :conflicts               315
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1778
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1905
;  :del-clause              1410
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          42
;  :mk-bool-var             4027
;  :mk-clause               1594
;  :num-allocs              4982988
;  :num-checks              323
;  :propagations            1277
;  :quant-instantiations    305
;  :rlimit-count            251749)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9902
;  :arith-add-rows          183
;  :arith-assert-diseq      350
;  :arith-assert-lower      825
;  :arith-assert-upper      747
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        579
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            194
;  :binary-propagations     11
;  :conflicts               315
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1778
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1905
;  :del-clause              1410
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          42
;  :mk-bool-var             4027
;  :mk-clause               1594
;  :num-allocs              4982988
;  :num-checks              324
;  :propagations            1277
;  :quant-instantiations    305
;  :rlimit-count            251758)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  (Seq_length __flatten_39__38@75@06))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9902
;  :arith-add-rows          183
;  :arith-assert-diseq      350
;  :arith-assert-lower      825
;  :arith-assert-upper      747
;  :arith-bound-prop        72
;  :arith-conflicts         28
;  :arith-eq-adapter        579
;  :arith-fixed-eqs         360
;  :arith-offset-eqs        48
;  :arith-pivots            194
;  :binary-propagations     11
;  :conflicts               316
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1778
;  :datatype-occurs-check   657
;  :datatype-splits         1142
;  :decisions               1905
;  :del-clause              1410
;  :final-checks            200
;  :interface-eqs           9
;  :max-generation          3
;  :max-memory              4.77
;  :memory                  4.77
;  :minimized-lits          42
;  :mk-bool-var             4027
;  :mk-clause               1594
;  :num-allocs              4982988
;  :num-checks              325
;  :propagations            1277
;  :quant-instantiations    305
;  :rlimit-count            251846)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 84 | !(0 <= First:(Second:($t@72@06))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10848
;  :arith-add-rows          221
;  :arith-assert-diseq      419
;  :arith-assert-lower      961
;  :arith-assert-upper      855
;  :arith-bound-prop        84
;  :arith-conflicts         31
;  :arith-eq-adapter        653
;  :arith-fixed-eqs         399
;  :arith-offset-eqs        63
;  :arith-pivots            215
;  :binary-propagations     11
;  :conflicts               342
;  :datatype-accessor-ax    383
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   717
;  :datatype-splits         1282
;  :decisions               2081
;  :del-clause              1635
;  :final-checks            213
;  :interface-eqs           12
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          51
;  :mk-bool-var             4493
;  :mk-clause               1814
;  :num-allocs              5413617
;  :num-checks              326
;  :propagations            1527
;  :quant-instantiations    375
;  :rlimit-count            258547
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_39__38@75@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1))
      0)
    (=
      (Seq_index
        __flatten_39__38@75@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11925
;  :arith-add-rows          265
;  :arith-assert-diseq      466
;  :arith-assert-lower      1083
;  :arith-assert-upper      931
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        724
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            237
;  :binary-propagations     11
;  :conflicts               355
;  :datatype-accessor-ax    415
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   795
;  :datatype-splits         1427
;  :decisions               2268
;  :del-clause              1859
;  :final-checks            225
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          54
;  :mk-bool-var             4928
;  :mk-clause               2038
;  :num-allocs              5413617
;  :num-checks              327
;  :propagations            1705
;  :quant-instantiations    435
;  :rlimit-count            265316
;  :time                    0.00)
; [then-branch: 86 | __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1] | live]
; [else-branch: 86 | !(__flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1]) | live]
(push) ; 9
; [then-branch: 86 | __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_39__38@75@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1))
      0)
    (=
      (Seq_index
        __flatten_39__38@75@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11925
;  :arith-add-rows          265
;  :arith-assert-diseq      466
;  :arith-assert-lower      1083
;  :arith-assert-upper      931
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        724
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            237
;  :binary-propagations     11
;  :conflicts               355
;  :datatype-accessor-ax    415
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   795
;  :datatype-splits         1427
;  :decisions               2268
;  :del-clause              1859
;  :final-checks            225
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          54
;  :mk-bool-var             4930
;  :mk-clause               2039
;  :num-allocs              5413617
;  :num-checks              328
;  :propagations            1705
;  :quant-instantiations    435
;  :rlimit-count            265484)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 86 | !(__flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
      1)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11931
;  :arith-add-rows          265
;  :arith-assert-diseq      466
;  :arith-assert-lower      1083
;  :arith-assert-upper      931
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        724
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            237
;  :binary-propagations     11
;  :conflicts               355
;  :datatype-accessor-ax    416
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   795
;  :datatype-splits         1427
;  :decisions               2268
;  :del-clause              1860
;  :final-checks            225
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          54
;  :mk-bool-var             4936
;  :mk-clause               2043
;  :num-allocs              5413617
;  :num-checks              329
;  :propagations            1705
;  :quant-instantiations    435
;  :rlimit-count            265977)
(push) ; 8
; [then-branch: 87 | 0 <= First:(Second:($t@72@06))[0] | live]
; [else-branch: 87 | !(0 <= First:(Second:($t@72@06))[0]) | live]
(push) ; 9
; [then-branch: 87 | 0 <= First:(Second:($t@72@06))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11931
;  :arith-add-rows          265
;  :arith-assert-diseq      466
;  :arith-assert-lower      1083
;  :arith-assert-upper      931
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        724
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            237
;  :binary-propagations     11
;  :conflicts               355
;  :datatype-accessor-ax    416
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   795
;  :datatype-splits         1427
;  :decisions               2268
;  :del-clause              1860
;  :final-checks            225
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          54
;  :mk-bool-var             4936
;  :mk-clause               2043
;  :num-allocs              5413617
;  :num-checks              330
;  :propagations            1705
;  :quant-instantiations    435
;  :rlimit-count            266077)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11931
;  :arith-add-rows          265
;  :arith-assert-diseq      466
;  :arith-assert-lower      1083
;  :arith-assert-upper      931
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        724
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            237
;  :binary-propagations     11
;  :conflicts               355
;  :datatype-accessor-ax    416
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   795
;  :datatype-splits         1427
;  :decisions               2268
;  :del-clause              1860
;  :final-checks            225
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          54
;  :mk-bool-var             4936
;  :mk-clause               2043
;  :num-allocs              5413617
;  :num-checks              331
;  :propagations            1705
;  :quant-instantiations    435
;  :rlimit-count            266086)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  (Seq_length __flatten_39__38@75@06))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11931
;  :arith-add-rows          265
;  :arith-assert-diseq      466
;  :arith-assert-lower      1083
;  :arith-assert-upper      931
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        724
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            237
;  :binary-propagations     11
;  :conflicts               356
;  :datatype-accessor-ax    416
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   795
;  :datatype-splits         1427
;  :decisions               2268
;  :del-clause              1860
;  :final-checks            225
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          54
;  :mk-bool-var             4936
;  :mk-clause               2043
;  :num-allocs              5413617
;  :num-checks              332
;  :propagations            1705
;  :quant-instantiations    435
;  :rlimit-count            266174)
(push) ; 10
; [then-branch: 88 | __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == 0 | live]
; [else-branch: 88 | __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] != 0 | live]
(push) ; 11
; [then-branch: 88 | __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@75@06
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 88 | __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@75@06
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11932
;  :arith-add-rows          267
;  :arith-assert-diseq      466
;  :arith-assert-lower      1083
;  :arith-assert-upper      931
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        724
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            237
;  :binary-propagations     11
;  :conflicts               356
;  :datatype-accessor-ax    416
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   795
;  :datatype-splits         1427
;  :decisions               2268
;  :del-clause              1860
;  :final-checks            225
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          54
;  :mk-bool-var             4941
;  :mk-clause               2048
;  :num-allocs              5413617
;  :num-checks              333
;  :propagations            1705
;  :quant-instantiations    436
;  :rlimit-count            266360)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11932
;  :arith-add-rows          267
;  :arith-assert-diseq      466
;  :arith-assert-lower      1083
;  :arith-assert-upper      931
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        724
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            237
;  :binary-propagations     11
;  :conflicts               356
;  :datatype-accessor-ax    416
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   795
;  :datatype-splits         1427
;  :decisions               2268
;  :del-clause              1860
;  :final-checks            225
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          54
;  :mk-bool-var             4941
;  :mk-clause               2048
;  :num-allocs              5413617
;  :num-checks              334
;  :propagations            1705
;  :quant-instantiations    436
;  :rlimit-count            266369)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  (Seq_length __flatten_39__38@75@06))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11932
;  :arith-add-rows          267
;  :arith-assert-diseq      466
;  :arith-assert-lower      1083
;  :arith-assert-upper      931
;  :arith-bound-prop        94
;  :arith-conflicts         33
;  :arith-eq-adapter        724
;  :arith-fixed-eqs         461
;  :arith-offset-eqs        96
;  :arith-pivots            237
;  :binary-propagations     11
;  :conflicts               357
;  :datatype-accessor-ax    416
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   795
;  :datatype-splits         1427
;  :decisions               2268
;  :del-clause              1860
;  :final-checks            225
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          54
;  :mk-bool-var             4941
;  :mk-clause               2048
;  :num-allocs              5413617
;  :num-checks              335
;  :propagations            1705
;  :quant-instantiations    436
;  :rlimit-count            266457)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 87 | !(0 <= First:(Second:($t@72@06))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_39__38@75@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0))
      0)
    (=
      (Seq_index
        __flatten_39__38@75@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12638
;  :arith-add-rows          302
;  :arith-assert-diseq      510
;  :arith-assert-lower      1165
;  :arith-assert-upper      988
;  :arith-bound-prop        103
;  :arith-conflicts         34
;  :arith-eq-adapter        774
;  :arith-fixed-eqs         500
;  :arith-offset-eqs        115
;  :arith-pivots            250
;  :binary-propagations     11
;  :conflicts               369
;  :datatype-accessor-ax    432
;  :datatype-constructor-ax 2225
;  :datatype-occurs-check   833
;  :datatype-splits         1497
;  :decisions               2392
;  :del-clause              2016
;  :final-checks            232
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          55
;  :mk-bool-var             5241
;  :mk-clause               2199
;  :num-allocs              5413617
;  :num-checks              336
;  :propagations            1843
;  :quant-instantiations    483
;  :rlimit-count            271502
;  :time                    0.00)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13069
;  :arith-add-rows          347
;  :arith-assert-diseq      593
;  :arith-assert-lower      1290
;  :arith-assert-upper      1087
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            263
;  :binary-propagations     11
;  :conflicts               402
;  :datatype-accessor-ax    432
;  :datatype-constructor-ax 2231
;  :datatype-occurs-check   833
;  :datatype-splits         1497
;  :decisions               2450
;  :del-clause              2287
;  :final-checks            232
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          84
;  :mk-bool-var             5615
;  :mk-clause               2470
;  :num-allocs              5413617
;  :num-checks              337
;  :propagations            2141
;  :quant-instantiations    582
;  :rlimit-count            275741
;  :time                    0.00)
; [then-branch: 89 | !(__flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0]) | live]
; [else-branch: 89 | __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0] | dead]
(push) ; 9
; [then-branch: 89 | !(__flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13070
;  :arith-add-rows          349
;  :arith-assert-diseq      593
;  :arith-assert-lower      1290
;  :arith-assert-upper      1087
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            263
;  :binary-propagations     11
;  :conflicts               402
;  :datatype-accessor-ax    432
;  :datatype-constructor-ax 2231
;  :datatype-occurs-check   833
;  :datatype-splits         1497
;  :decisions               2450
;  :del-clause              2287
;  :final-checks            232
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          84
;  :mk-bool-var             5622
;  :mk-clause               2478
;  :num-allocs              5413617
;  :num-checks              338
;  :propagations            2143
;  :quant-instantiations    583
;  :rlimit-count            275979)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13070
;  :arith-add-rows          349
;  :arith-assert-diseq      593
;  :arith-assert-lower      1290
;  :arith-assert-upper      1087
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            263
;  :binary-propagations     11
;  :conflicts               402
;  :datatype-accessor-ax    432
;  :datatype-constructor-ax 2231
;  :datatype-occurs-check   833
;  :datatype-splits         1497
;  :decisions               2450
;  :del-clause              2287
;  :final-checks            232
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          84
;  :mk-bool-var             5622
;  :mk-clause               2478
;  :num-allocs              5413617
;  :num-checks              339
;  :propagations            2143
;  :quant-instantiations    583
;  :rlimit-count            275994)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_39__38@75@06
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
              0))
          0)
        (=
          (Seq_index
            __flatten_39__38@75@06
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
              0))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@06))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)) ==> diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13077
;  :arith-add-rows          349
;  :arith-assert-diseq      593
;  :arith-assert-lower      1290
;  :arith-assert-upper      1087
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            263
;  :binary-propagations     11
;  :conflicts               402
;  :datatype-accessor-ax    432
;  :datatype-constructor-ax 2231
;  :datatype-occurs-check   833
;  :datatype-splits         1497
;  :decisions               2450
;  :del-clause              2295
;  :final-checks            232
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          84
;  :mk-bool-var             5628
;  :mk-clause               2484
;  :num-allocs              5413617
;  :num-checks              340
;  :propagations            2143
;  :quant-instantiations    583
;  :rlimit-count            276378)
(push) ; 8
; [then-branch: 90 | 0 <= First:(Second:($t@72@06))[1] | live]
; [else-branch: 90 | !(0 <= First:(Second:($t@72@06))[1]) | live]
(push) ; 9
; [then-branch: 90 | 0 <= First:(Second:($t@72@06))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13077
;  :arith-add-rows          349
;  :arith-assert-diseq      593
;  :arith-assert-lower      1290
;  :arith-assert-upper      1087
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            263
;  :binary-propagations     11
;  :conflicts               402
;  :datatype-accessor-ax    432
;  :datatype-constructor-ax 2231
;  :datatype-occurs-check   833
;  :datatype-splits         1497
;  :decisions               2450
;  :del-clause              2295
;  :final-checks            232
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          84
;  :mk-bool-var             5628
;  :mk-clause               2484
;  :num-allocs              5413617
;  :num-checks              341
;  :propagations            2143
;  :quant-instantiations    583
;  :rlimit-count            276478)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13077
;  :arith-add-rows          349
;  :arith-assert-diseq      593
;  :arith-assert-lower      1290
;  :arith-assert-upper      1087
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            263
;  :binary-propagations     11
;  :conflicts               402
;  :datatype-accessor-ax    432
;  :datatype-constructor-ax 2231
;  :datatype-occurs-check   833
;  :datatype-splits         1497
;  :decisions               2450
;  :del-clause              2295
;  :final-checks            232
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          84
;  :mk-bool-var             5628
;  :mk-clause               2484
;  :num-allocs              5413617
;  :num-checks              342
;  :propagations            2143
;  :quant-instantiations    583
;  :rlimit-count            276487)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  (Seq_length __flatten_39__38@75@06))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13077
;  :arith-add-rows          349
;  :arith-assert-diseq      593
;  :arith-assert-lower      1290
;  :arith-assert-upper      1087
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            263
;  :binary-propagations     11
;  :conflicts               403
;  :datatype-accessor-ax    432
;  :datatype-constructor-ax 2231
;  :datatype-occurs-check   833
;  :datatype-splits         1497
;  :decisions               2450
;  :del-clause              2295
;  :final-checks            232
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          84
;  :mk-bool-var             5628
;  :mk-clause               2484
;  :num-allocs              5413617
;  :num-checks              343
;  :propagations            2143
;  :quant-instantiations    583
;  :rlimit-count            276575)
(push) ; 10
; [then-branch: 91 | __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == 0 | live]
; [else-branch: 91 | __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] != 0 | live]
(push) ; 11
; [then-branch: 91 | __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@75@06
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 91 | __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@75@06
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13078
;  :arith-add-rows          351
;  :arith-assert-diseq      593
;  :arith-assert-lower      1290
;  :arith-assert-upper      1087
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            263
;  :binary-propagations     11
;  :conflicts               403
;  :datatype-accessor-ax    432
;  :datatype-constructor-ax 2231
;  :datatype-occurs-check   833
;  :datatype-splits         1497
;  :decisions               2450
;  :del-clause              2295
;  :final-checks            232
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          84
;  :mk-bool-var             5632
;  :mk-clause               2489
;  :num-allocs              5413617
;  :num-checks              344
;  :propagations            2143
;  :quant-instantiations    584
;  :rlimit-count            276761)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13078
;  :arith-add-rows          351
;  :arith-assert-diseq      593
;  :arith-assert-lower      1290
;  :arith-assert-upper      1087
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            263
;  :binary-propagations     11
;  :conflicts               403
;  :datatype-accessor-ax    432
;  :datatype-constructor-ax 2231
;  :datatype-occurs-check   833
;  :datatype-splits         1497
;  :decisions               2450
;  :del-clause              2295
;  :final-checks            232
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          84
;  :mk-bool-var             5632
;  :mk-clause               2489
;  :num-allocs              5413617
;  :num-checks              345
;  :propagations            2143
;  :quant-instantiations    584
;  :rlimit-count            276770)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  (Seq_length __flatten_39__38@75@06))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13078
;  :arith-add-rows          351
;  :arith-assert-diseq      593
;  :arith-assert-lower      1290
;  :arith-assert-upper      1087
;  :arith-bound-prop        112
;  :arith-conflicts         36
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        122
;  :arith-pivots            263
;  :binary-propagations     11
;  :conflicts               404
;  :datatype-accessor-ax    432
;  :datatype-constructor-ax 2231
;  :datatype-occurs-check   833
;  :datatype-splits         1497
;  :decisions               2450
;  :del-clause              2295
;  :final-checks            232
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              4.97
;  :memory                  4.97
;  :minimized-lits          84
;  :mk-bool-var             5632
;  :mk-clause               2489
;  :num-allocs              5413617
;  :num-checks              346
;  :propagations            2143
;  :quant-instantiations    584
;  :rlimit-count            276858)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 90 | !(0 <= First:(Second:($t@72@06))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_39__38@75@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1))
      0)
    (=
      (Seq_index
        __flatten_39__38@75@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13925
;  :arith-add-rows          397
;  :arith-assert-diseq      640
;  :arith-assert-lower      1399
;  :arith-assert-upper      1156
;  :arith-bound-prop        122
;  :arith-conflicts         38
;  :arith-eq-adapter        914
;  :arith-fixed-eqs         592
;  :arith-offset-eqs        150
;  :arith-pivots            282
;  :binary-propagations     11
;  :conflicts               421
;  :datatype-accessor-ax    452
;  :datatype-constructor-ax 2360
;  :datatype-occurs-check   872
;  :datatype-splits         1572
;  :decisions               2593
;  :del-clause              2495
;  :final-checks            238
;  :interface-eqs           18
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          94
;  :mk-bool-var             6009
;  :mk-clause               2684
;  :num-allocs              5640811
;  :num-checks              347
;  :propagations            2320
;  :quant-instantiations    643
;  :rlimit-count            282852
;  :time                    0.00)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15051
;  :arith-add-rows          446
;  :arith-assert-diseq      723
;  :arith-assert-lower      1558
;  :arith-assert-upper      1271
;  :arith-bound-prop        133
;  :arith-conflicts         41
;  :arith-eq-adapter        1004
;  :arith-fixed-eqs         642
;  :arith-offset-eqs        165
;  :arith-pivots            301
;  :binary-propagations     11
;  :conflicts               455
;  :datatype-accessor-ax    493
;  :datatype-constructor-ax 2534
;  :datatype-occurs-check   938
;  :datatype-splits         1720
;  :decisions               2791
;  :del-clause              2783
;  :final-checks            252
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          112
;  :mk-bool-var             6609
;  :mk-clause               2972
;  :num-allocs              6099200
;  :num-checks              348
;  :propagations            2630
;  :quant-instantiations    743
;  :rlimit-count            290506
;  :time                    0.01)
; [then-branch: 92 | !(__flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1]) | live]
; [else-branch: 92 | __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1] | live]
(push) ; 9
; [then-branch: 92 | !(__flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@75@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)))))
; [eval] diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15052
;  :arith-add-rows          448
;  :arith-assert-diseq      723
;  :arith-assert-lower      1558
;  :arith-assert-upper      1271
;  :arith-bound-prop        133
;  :arith-conflicts         41
;  :arith-eq-adapter        1004
;  :arith-fixed-eqs         642
;  :arith-offset-eqs        165
;  :arith-pivots            301
;  :binary-propagations     11
;  :conflicts               455
;  :datatype-accessor-ax    493
;  :datatype-constructor-ax 2534
;  :datatype-occurs-check   938
;  :datatype-splits         1720
;  :decisions               2791
;  :del-clause              2783
;  :final-checks            252
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          112
;  :mk-bool-var             6613
;  :mk-clause               2977
;  :num-allocs              6099200
;  :num-checks              349
;  :propagations            2632
;  :quant-instantiations    744
;  :rlimit-count            290722)
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15052
;  :arith-add-rows          448
;  :arith-assert-diseq      723
;  :arith-assert-lower      1558
;  :arith-assert-upper      1271
;  :arith-bound-prop        133
;  :arith-conflicts         41
;  :arith-eq-adapter        1004
;  :arith-fixed-eqs         642
;  :arith-offset-eqs        165
;  :arith-pivots            301
;  :binary-propagations     11
;  :conflicts               455
;  :datatype-accessor-ax    493
;  :datatype-constructor-ax 2534
;  :datatype-occurs-check   938
;  :datatype-splits         1720
;  :decisions               2791
;  :del-clause              2783
;  :final-checks            252
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          112
;  :mk-bool-var             6613
;  :mk-clause               2977
;  :num-allocs              6099200
;  :num-checks              350
;  :propagations            2632
;  :quant-instantiations    744
;  :rlimit-count            290737)
(pop) ; 9
(push) ; 9
; [else-branch: 92 | __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@75@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_39__38@75@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1))
      0)
    (=
      (Seq_index
        __flatten_39__38@75@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_39__38@75@06
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
              1))
          0)
        (=
          (Seq_index
            __flatten_39__38@75@06
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
              1))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Main_reset_all_events_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@79@06 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 93 | 0 <= i@79@06 | live]
; [else-branch: 93 | !(0 <= i@79@06) | live]
(push) ; 10
; [then-branch: 93 | 0 <= i@79@06]
(assert (<= 0 i@79@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 93 | !(0 <= i@79@06)]
(assert (not (<= 0 i@79@06)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 94 | i@79@06 < |First:(Second:($t@77@06))| && 0 <= i@79@06 | live]
; [else-branch: 94 | !(i@79@06 < |First:(Second:($t@77@06))| && 0 <= i@79@06) | live]
(push) ; 10
; [then-branch: 94 | i@79@06 < |First:(Second:($t@77@06))| && 0 <= i@79@06]
(assert (and
  (<
    i@79@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))))
  (<= 0 i@79@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@79@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15785
;  :arith-add-rows          485
;  :arith-assert-diseq      783
;  :arith-assert-lower      1691
;  :arith-assert-upper      1349
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1074
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            315
;  :binary-propagations     11
;  :conflicts               473
;  :datatype-accessor-ax    503
;  :datatype-constructor-ax 2629
;  :datatype-occurs-check   961
;  :datatype-splits         1761
;  :decisions               2918
;  :del-clause              2985
;  :final-checks            256
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          134
;  :mk-bool-var             6977
;  :mk-clause               3187
;  :num-allocs              6099200
;  :num-checks              352
;  :propagations            2846
;  :quant-instantiations    820
;  :rlimit-count            296597)
; [eval] -1
(push) ; 11
; [then-branch: 95 | First:(Second:($t@77@06))[i@79@06] == -1 | live]
; [else-branch: 95 | First:(Second:($t@77@06))[i@79@06] != -1 | live]
(push) ; 12
; [then-branch: 95 | First:(Second:($t@77@06))[i@79@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
    i@79@06)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 95 | First:(Second:($t@77@06))[i@79@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
      i@79@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@79@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15785
;  :arith-add-rows          485
;  :arith-assert-diseq      784
;  :arith-assert-lower      1694
;  :arith-assert-upper      1350
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1075
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            315
;  :binary-propagations     11
;  :conflicts               473
;  :datatype-accessor-ax    503
;  :datatype-constructor-ax 2629
;  :datatype-occurs-check   961
;  :datatype-splits         1761
;  :decisions               2918
;  :del-clause              2985
;  :final-checks            256
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          134
;  :mk-bool-var             6983
;  :mk-clause               3191
;  :num-allocs              6099200
;  :num-checks              353
;  :propagations            2848
;  :quant-instantiations    821
;  :rlimit-count            296805)
(push) ; 13
; [then-branch: 96 | 0 <= First:(Second:($t@77@06))[i@79@06] | live]
; [else-branch: 96 | !(0 <= First:(Second:($t@77@06))[i@79@06]) | live]
(push) ; 14
; [then-branch: 96 | 0 <= First:(Second:($t@77@06))[i@79@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
    i@79@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@79@06 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15785
;  :arith-add-rows          485
;  :arith-assert-diseq      784
;  :arith-assert-lower      1694
;  :arith-assert-upper      1350
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1075
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            315
;  :binary-propagations     11
;  :conflicts               473
;  :datatype-accessor-ax    503
;  :datatype-constructor-ax 2629
;  :datatype-occurs-check   961
;  :datatype-splits         1761
;  :decisions               2918
;  :del-clause              2985
;  :final-checks            256
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          134
;  :mk-bool-var             6983
;  :mk-clause               3191
;  :num-allocs              6099200
;  :num-checks              354
;  :propagations            2848
;  :quant-instantiations    821
;  :rlimit-count            296899)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 96 | !(0 <= First:(Second:($t@77@06))[i@79@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
      i@79@06))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 94 | !(i@79@06 < |First:(Second:($t@77@06))| && 0 <= i@79@06)]
(assert (not
  (and
    (<
      i@79@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))))
    (<= 0 i@79@06))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@79@06 Int)) (!
  (implies
    (and
      (<
        i@79@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))))
      (<= 0 i@79@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
          i@79@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
            i@79@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
            i@79@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
    i@79@06))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15785
;  :arith-add-rows          485
;  :arith-assert-diseq      786
;  :arith-assert-lower      1695
;  :arith-assert-upper      1351
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1076
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            315
;  :binary-propagations     11
;  :conflicts               474
;  :datatype-accessor-ax    503
;  :datatype-constructor-ax 2629
;  :datatype-occurs-check   961
;  :datatype-splits         1761
;  :decisions               2918
;  :del-clause              3003
;  :final-checks            256
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          134
;  :mk-bool-var             6991
;  :mk-clause               3205
;  :num-allocs              6099200
;  :num-checks              355
;  :propagations            2850
;  :quant-instantiations    822
;  :rlimit-count            297321)
(assert (forall ((i@79@06 Int)) (!
  (implies
    (and
      (<
        i@79@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))))
      (<= 0 i@79@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
          i@79@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
            i@79@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
            i@79@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))
    i@79@06))
  :qid |prog.l<no position>|)))
(declare-const $t@80@06 $Snap)
(assert (= $t@80@06 ($Snap.combine ($Snap.first $t@80@06) ($Snap.second $t@80@06))))
(assert (=
  ($Snap.second $t@80@06)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@80@06))
    ($Snap.second ($Snap.second $t@80@06)))))
(assert (=
  ($Snap.second ($Snap.second $t@80@06))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@80@06)))
    ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@80@06))) $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@80@06)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@81@06 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 97 | 0 <= i@81@06 | live]
; [else-branch: 97 | !(0 <= i@81@06) | live]
(push) ; 10
; [then-branch: 97 | 0 <= i@81@06]
(assert (<= 0 i@81@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 97 | !(0 <= i@81@06)]
(assert (not (<= 0 i@81@06)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 98 | i@81@06 < |First:(Second:($t@80@06))| && 0 <= i@81@06 | live]
; [else-branch: 98 | !(i@81@06 < |First:(Second:($t@80@06))| && 0 <= i@81@06) | live]
(push) ; 10
; [then-branch: 98 | i@81@06 < |First:(Second:($t@80@06))| && 0 <= i@81@06]
(assert (and
  (<
    i@81@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))
  (<= 0 i@81@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@81@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15822
;  :arith-add-rows          485
;  :arith-assert-diseq      786
;  :arith-assert-lower      1700
;  :arith-assert-upper      1354
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1078
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            315
;  :binary-propagations     11
;  :conflicts               474
;  :datatype-accessor-ax    509
;  :datatype-constructor-ax 2629
;  :datatype-occurs-check   961
;  :datatype-splits         1761
;  :decisions               2918
;  :del-clause              3003
;  :final-checks            256
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          134
;  :mk-bool-var             7013
;  :mk-clause               3205
;  :num-allocs              6099200
;  :num-checks              356
;  :propagations            2850
;  :quant-instantiations    826
;  :rlimit-count            298709)
; [eval] -1
(push) ; 11
; [then-branch: 99 | First:(Second:($t@80@06))[i@81@06] == -1 | live]
; [else-branch: 99 | First:(Second:($t@80@06))[i@81@06] != -1 | live]
(push) ; 12
; [then-branch: 99 | First:(Second:($t@80@06))[i@81@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
    i@81@06)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 99 | First:(Second:($t@80@06))[i@81@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      i@81@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@81@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15822
;  :arith-add-rows          485
;  :arith-assert-diseq      786
;  :arith-assert-lower      1700
;  :arith-assert-upper      1354
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1078
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            315
;  :binary-propagations     11
;  :conflicts               474
;  :datatype-accessor-ax    509
;  :datatype-constructor-ax 2629
;  :datatype-occurs-check   961
;  :datatype-splits         1761
;  :decisions               2918
;  :del-clause              3003
;  :final-checks            256
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          134
;  :mk-bool-var             7014
;  :mk-clause               3205
;  :num-allocs              6099200
;  :num-checks              357
;  :propagations            2850
;  :quant-instantiations    826
;  :rlimit-count            298860)
(push) ; 13
; [then-branch: 100 | 0 <= First:(Second:($t@80@06))[i@81@06] | live]
; [else-branch: 100 | !(0 <= First:(Second:($t@80@06))[i@81@06]) | live]
(push) ; 14
; [then-branch: 100 | 0 <= First:(Second:($t@80@06))[i@81@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
    i@81@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@81@06 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15822
;  :arith-add-rows          485
;  :arith-assert-diseq      787
;  :arith-assert-lower      1703
;  :arith-assert-upper      1354
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1079
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        183
;  :arith-pivots            315
;  :binary-propagations     11
;  :conflicts               474
;  :datatype-accessor-ax    509
;  :datatype-constructor-ax 2629
;  :datatype-occurs-check   961
;  :datatype-splits         1761
;  :decisions               2918
;  :del-clause              3003
;  :final-checks            256
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          134
;  :mk-bool-var             7017
;  :mk-clause               3206
;  :num-allocs              6099200
;  :num-checks              358
;  :propagations            2850
;  :quant-instantiations    826
;  :rlimit-count            298964)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 100 | !(0 <= First:(Second:($t@80@06))[i@81@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      i@81@06))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 98 | !(i@81@06 < |First:(Second:($t@80@06))| && 0 <= i@81@06)]
(assert (not
  (and
    (<
      i@81@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))
    (<= 0 i@81@06))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@81@06 Int)) (!
  (implies
    (and
      (<
        i@81@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))
      (<= 0 i@81@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
          i@81@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
            i@81@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
            i@81@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
    i@81@06))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@77@06)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15840
;  :arith-add-rows          485
;  :arith-assert-diseq      787
;  :arith-assert-lower      1704
;  :arith-assert-upper      1355
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1080
;  :arith-fixed-eqs         692
;  :arith-offset-eqs        183
;  :arith-pivots            315
;  :binary-propagations     11
;  :conflicts               474
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 2629
;  :datatype-occurs-check   961
;  :datatype-splits         1761
;  :decisions               2918
;  :del-clause              3004
;  :final-checks            256
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          134
;  :mk-bool-var             7037
;  :mk-clause               3216
;  :num-allocs              6099200
;  :num-checks              359
;  :propagations            2854
;  :quant-instantiations    828
;  :rlimit-count            299979)
(push) ; 8
; [then-branch: 101 | First:(Second:(Second:(Second:($t@77@06))))[0] == 0 | live]
; [else-branch: 101 | First:(Second:(Second:(Second:($t@77@06))))[0] != 0 | live]
(push) ; 9
; [then-branch: 101 | First:(Second:(Second:(Second:($t@77@06))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
    0)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 101 | First:(Second:(Second:(Second:($t@77@06))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15843
;  :arith-add-rows          486
;  :arith-assert-diseq      787
;  :arith-assert-lower      1704
;  :arith-assert-upper      1355
;  :arith-bound-prop        141
;  :arith-conflicts         42
;  :arith-eq-adapter        1080
;  :arith-fixed-eqs         692
;  :arith-offset-eqs        183
;  :arith-pivots            315
;  :binary-propagations     11
;  :conflicts               474
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 2629
;  :datatype-occurs-check   961
;  :datatype-splits         1761
;  :decisions               2918
;  :del-clause              3004
;  :final-checks            256
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          134
;  :mk-bool-var             7042
;  :mk-clause               3222
;  :num-allocs              6099200
;  :num-checks              360
;  :propagations            2854
;  :quant-instantiations    829
;  :rlimit-count            300196)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        0)
      (- 0 1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16117
;  :arith-add-rows          517
;  :arith-assert-diseq      838
;  :arith-assert-lower      1806
;  :arith-assert-upper      1412
;  :arith-bound-prop        145
;  :arith-conflicts         43
;  :arith-eq-adapter        1126
;  :arith-fixed-eqs         719
;  :arith-offset-eqs        195
;  :arith-pivots            327
;  :binary-propagations     11
;  :conflicts               495
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 2635
;  :datatype-occurs-check   961
;  :datatype-splits         1761
;  :decisions               2958
;  :del-clause              3173
;  :final-checks            256
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          143
;  :mk-bool-var             7255
;  :mk-clause               3385
;  :num-allocs              6099200
;  :num-checks              361
;  :propagations            3082
;  :quant-instantiations    890
;  :rlimit-count            303187
;  :time                    0.00)
; [then-branch: 102 | First:(Second:(Second:(Second:($t@77@06))))[0] == 0 || First:(Second:(Second:(Second:($t@77@06))))[0] == -1 | dead]
; [else-branch: 102 | !(First:(Second:(Second:(Second:($t@77@06))))[0] == 0 || First:(Second:(Second:(Second:($t@77@06))))[0] == -1) | live]
(push) ; 9
; [else-branch: 102 | !(First:(Second:(Second:(Second:($t@77@06))))[0] == 0 || First:(Second:(Second:(Second:($t@77@06))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        0)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16123
;  :arith-add-rows          517
;  :arith-assert-diseq      838
;  :arith-assert-lower      1806
;  :arith-assert-upper      1412
;  :arith-bound-prop        145
;  :arith-conflicts         43
;  :arith-eq-adapter        1126
;  :arith-fixed-eqs         719
;  :arith-offset-eqs        195
;  :arith-pivots            327
;  :binary-propagations     11
;  :conflicts               495
;  :datatype-accessor-ax    512
;  :datatype-constructor-ax 2635
;  :datatype-occurs-check   961
;  :datatype-splits         1761
;  :decisions               2958
;  :del-clause              3173
;  :final-checks            256
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          143
;  :mk-bool-var             7257
;  :mk-clause               3385
;  :num-allocs              6099200
;  :num-checks              362
;  :propagations            3082
;  :quant-instantiations    890
;  :rlimit-count            303441)
(push) ; 8
; [then-branch: 103 | First:(Second:(Second:(Second:($t@77@06))))[1] == 0 | live]
; [else-branch: 103 | First:(Second:(Second:(Second:($t@77@06))))[1] != 0 | live]
(push) ; 9
; [then-branch: 103 | First:(Second:(Second:(Second:($t@77@06))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
    1)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 103 | First:(Second:(Second:(Second:($t@77@06))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16124
;  :arith-add-rows          518
;  :arith-assert-diseq      838
;  :arith-assert-lower      1806
;  :arith-assert-upper      1412
;  :arith-bound-prop        145
;  :arith-conflicts         43
;  :arith-eq-adapter        1126
;  :arith-fixed-eqs         719
;  :arith-offset-eqs        195
;  :arith-pivots            327
;  :binary-propagations     11
;  :conflicts               495
;  :datatype-accessor-ax    512
;  :datatype-constructor-ax 2635
;  :datatype-occurs-check   961
;  :datatype-splits         1761
;  :decisions               2958
;  :del-clause              3173
;  :final-checks            256
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          143
;  :mk-bool-var             7262
;  :mk-clause               3391
;  :num-allocs              6099200
;  :num-checks              363
;  :propagations            3082
;  :quant-instantiations    891
;  :rlimit-count            303654)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16618
;  :arith-add-rows          537
;  :arith-assert-diseq      885
;  :arith-assert-lower      1905
;  :arith-assert-upper      1466
;  :arith-bound-prop        146
;  :arith-conflicts         44
;  :arith-eq-adapter        1178
;  :arith-fixed-eqs         748
;  :arith-offset-eqs        205
;  :arith-pivots            343
;  :binary-propagations     11
;  :conflicts               500
;  :datatype-accessor-ax    526
;  :datatype-constructor-ax 2712
;  :datatype-occurs-check   991
;  :datatype-splits         1807
;  :decisions               3035
;  :del-clause              3335
;  :final-checks            259
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              5.16
;  :memory                  5.16
;  :minimized-lits          148
;  :mk-bool-var             7504
;  :mk-clause               3547
;  :num-allocs              6337998
;  :num-checks              364
;  :propagations            3257
;  :quant-instantiations    937
;  :rlimit-count            307559
;  :time                    0.00)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17674
;  :arith-add-rows          587
;  :arith-assert-diseq      986
;  :arith-assert-lower      2112
;  :arith-assert-upper      1582
;  :arith-bound-prop        155
;  :arith-conflicts         46
;  :arith-eq-adapter        1279
;  :arith-fixed-eqs         811
;  :arith-offset-eqs        225
;  :arith-pivots            370
;  :binary-propagations     11
;  :conflicts               523
;  :datatype-accessor-ax    579
;  :datatype-constructor-ax 2871
;  :datatype-occurs-check   1087
;  :datatype-splits         1962
;  :decisions               3184
;  :del-clause              3678
;  :final-checks            270
;  :interface-eqs           24
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          152
;  :mk-bool-var             8049
;  :mk-clause               3890
;  :num-allocs              7301698
;  :num-checks              365
;  :propagations            3682
;  :quant-instantiations    1038
;  :rlimit-count            315177
;  :time                    0.01)
; [then-branch: 104 | First:(Second:(Second:(Second:($t@77@06))))[1] == 0 || First:(Second:(Second:(Second:($t@77@06))))[1] == -1 | live]
; [else-branch: 104 | !(First:(Second:(Second:(Second:($t@77@06))))[1] == 0 || First:(Second:(Second:(Second:($t@77@06))))[1] == -1) | live]
(push) ; 9
; [then-branch: 104 | First:(Second:(Second:(Second:($t@77@06))))[1] == 0 || First:(Second:(Second:(Second:($t@77@06))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17674
;  :arith-add-rows          587
;  :arith-assert-diseq      986
;  :arith-assert-lower      2112
;  :arith-assert-upper      1582
;  :arith-bound-prop        155
;  :arith-conflicts         46
;  :arith-eq-adapter        1279
;  :arith-fixed-eqs         811
;  :arith-offset-eqs        225
;  :arith-pivots            370
;  :binary-propagations     11
;  :conflicts               523
;  :datatype-accessor-ax    579
;  :datatype-constructor-ax 2871
;  :datatype-occurs-check   1087
;  :datatype-splits         1962
;  :decisions               3184
;  :del-clause              3678
;  :final-checks            270
;  :interface-eqs           24
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          152
;  :mk-bool-var             8051
;  :mk-clause               3891
;  :num-allocs              7301698
;  :num-checks              366
;  :propagations            3682
;  :quant-instantiations    1038
;  :rlimit-count            315326)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 104 | !(First:(Second:(Second:(Second:($t@77@06))))[1] == 0 || First:(Second:(Second:(Second:($t@77@06))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        1)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        1)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1 ==> diz.Main_event_state[2] == -2
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17680
;  :arith-add-rows          587
;  :arith-assert-diseq      986
;  :arith-assert-lower      2112
;  :arith-assert-upper      1582
;  :arith-bound-prop        155
;  :arith-conflicts         46
;  :arith-eq-adapter        1279
;  :arith-fixed-eqs         811
;  :arith-offset-eqs        225
;  :arith-pivots            370
;  :binary-propagations     11
;  :conflicts               523
;  :datatype-accessor-ax    580
;  :datatype-constructor-ax 2871
;  :datatype-occurs-check   1087
;  :datatype-splits         1962
;  :decisions               3184
;  :del-clause              3679
;  :final-checks            270
;  :interface-eqs           24
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          152
;  :mk-bool-var             8057
;  :mk-clause               3895
;  :num-allocs              7301698
;  :num-checks              367
;  :propagations            3682
;  :quant-instantiations    1038
;  :rlimit-count            315819)
(push) ; 8
; [then-branch: 105 | First:(Second:(Second:(Second:($t@77@06))))[2] == 0 | live]
; [else-branch: 105 | First:(Second:(Second:(Second:($t@77@06))))[2] != 0 | live]
(push) ; 9
; [then-branch: 105 | First:(Second:(Second:(Second:($t@77@06))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
    2)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 105 | First:(Second:(Second:(Second:($t@77@06))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17681
;  :arith-add-rows          587
;  :arith-assert-diseq      986
;  :arith-assert-lower      2112
;  :arith-assert-upper      1582
;  :arith-bound-prop        155
;  :arith-conflicts         46
;  :arith-eq-adapter        1279
;  :arith-fixed-eqs         811
;  :arith-offset-eqs        225
;  :arith-pivots            370
;  :binary-propagations     11
;  :conflicts               523
;  :datatype-accessor-ax    580
;  :datatype-constructor-ax 2871
;  :datatype-occurs-check   1087
;  :datatype-splits         1962
;  :decisions               3184
;  :del-clause              3679
;  :final-checks            270
;  :interface-eqs           24
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          152
;  :mk-bool-var             8061
;  :mk-clause               3900
;  :num-allocs              7301698
;  :num-checks              368
;  :propagations            3682
;  :quant-instantiations    1039
;  :rlimit-count            316003)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        2)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18591
;  :arith-add-rows          613
;  :arith-assert-diseq      1054
;  :arith-assert-lower      2247
;  :arith-assert-upper      1639
;  :arith-bound-prop        158
;  :arith-conflicts         48
;  :arith-eq-adapter        1343
;  :arith-fixed-eqs         844
;  :arith-offset-eqs        239
;  :arith-pivots            385
;  :binary-propagations     11
;  :conflicts               541
;  :datatype-accessor-ax    633
;  :datatype-constructor-ax 3030
;  :datatype-occurs-check   1180
;  :datatype-splits         2116
;  :decisions               3334
;  :del-clause              3904
;  :final-checks            281
;  :interface-eqs           27
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          156
;  :mk-bool-var             8464
;  :mk-clause               4120
;  :num-allocs              7301698
;  :num-checks              369
;  :propagations            3942
;  :quant-instantiations    1106
;  :rlimit-count            321957
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19100
;  :arith-add-rows          629
;  :arith-assert-diseq      1102
;  :arith-assert-lower      2346
;  :arith-assert-upper      1693
;  :arith-bound-prop        159
;  :arith-conflicts         49
;  :arith-eq-adapter        1395
;  :arith-fixed-eqs         873
;  :arith-offset-eqs        249
;  :arith-pivots            405
;  :binary-propagations     11
;  :conflicts               547
;  :datatype-accessor-ax    648
;  :datatype-constructor-ax 3110
;  :datatype-occurs-check   1216
;  :datatype-splits         2164
;  :decisions               3413
;  :del-clause              4061
;  :final-checks            285
;  :interface-eqs           27
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          158
;  :mk-bool-var             8712
;  :mk-clause               4277
;  :num-allocs              7301698
;  :num-checks              370
;  :propagations            4121
;  :quant-instantiations    1152
;  :rlimit-count            325915
;  :time                    0.00)
; [then-branch: 106 | First:(Second:(Second:(Second:($t@77@06))))[2] == 0 || First:(Second:(Second:(Second:($t@77@06))))[2] == -1 | live]
; [else-branch: 106 | !(First:(Second:(Second:(Second:($t@77@06))))[2] == 0 || First:(Second:(Second:(Second:($t@77@06))))[2] == -1) | live]
(push) ; 9
; [then-branch: 106 | First:(Second:(Second:(Second:($t@77@06))))[2] == 0 || First:(Second:(Second:(Second:($t@77@06))))[2] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      2)
    (- 0 1))))
; [eval] diz.Main_event_state[2] == -2
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19100
;  :arith-add-rows          629
;  :arith-assert-diseq      1102
;  :arith-assert-lower      2346
;  :arith-assert-upper      1693
;  :arith-bound-prop        159
;  :arith-conflicts         49
;  :arith-eq-adapter        1395
;  :arith-fixed-eqs         873
;  :arith-offset-eqs        249
;  :arith-pivots            405
;  :binary-propagations     11
;  :conflicts               547
;  :datatype-accessor-ax    648
;  :datatype-constructor-ax 3110
;  :datatype-occurs-check   1216
;  :datatype-splits         2164
;  :decisions               3413
;  :del-clause              4061
;  :final-checks            285
;  :interface-eqs           27
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          158
;  :mk-bool-var             8714
;  :mk-clause               4278
;  :num-allocs              7301698
;  :num-checks              371
;  :propagations            4121
;  :quant-instantiations    1152
;  :rlimit-count            326064)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 106 | !(First:(Second:(Second:(Second:($t@77@06))))[2] == 0 || First:(Second:(Second:(Second:($t@77@06))))[2] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        2)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        2)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
      2)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) != 0 && old(diz.Main_event_state[0]) != -1 ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] old(diz.Main_event_state[0]) != 0 && old(diz.Main_event_state[0]) != -1
; [eval] old(diz.Main_event_state[0]) != 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19106
;  :arith-add-rows          629
;  :arith-assert-diseq      1102
;  :arith-assert-lower      2346
;  :arith-assert-upper      1693
;  :arith-bound-prop        159
;  :arith-conflicts         49
;  :arith-eq-adapter        1395
;  :arith-fixed-eqs         873
;  :arith-offset-eqs        249
;  :arith-pivots            405
;  :binary-propagations     11
;  :conflicts               547
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3110
;  :datatype-occurs-check   1216
;  :datatype-splits         2164
;  :decisions               3413
;  :del-clause              4062
;  :final-checks            285
;  :interface-eqs           27
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          158
;  :mk-bool-var             8720
;  :mk-clause               4282
;  :num-allocs              7301698
;  :num-checks              372
;  :propagations            4121
;  :quant-instantiations    1152
;  :rlimit-count            326563)
(push) ; 8
; [then-branch: 107 | First:(Second:(Second:(Second:($t@77@06))))[0] != 0 | live]
; [else-branch: 107 | First:(Second:(Second:(Second:($t@77@06))))[0] == 0 | live]
(push) ; 9
; [then-branch: 107 | First:(Second:(Second:(Second:($t@77@06))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) != -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19109
;  :arith-add-rows          630
;  :arith-assert-diseq      1102
;  :arith-assert-lower      2346
;  :arith-assert-upper      1693
;  :arith-bound-prop        159
;  :arith-conflicts         49
;  :arith-eq-adapter        1395
;  :arith-fixed-eqs         873
;  :arith-offset-eqs        249
;  :arith-pivots            405
;  :binary-propagations     11
;  :conflicts               547
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 3110
;  :datatype-occurs-check   1216
;  :datatype-splits         2164
;  :decisions               3413
;  :del-clause              4062
;  :final-checks            285
;  :interface-eqs           27
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          158
;  :mk-bool-var             8725
;  :mk-clause               4288
;  :num-allocs              7301698
;  :num-checks              373
;  :propagations            4121
;  :quant-instantiations    1153
;  :rlimit-count            326716)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 107 | First:(Second:(Second:(Second:($t@77@06))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
    0)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          0)
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19612
;  :arith-add-rows          642
;  :arith-assert-diseq      1148
;  :arith-assert-lower      2430
;  :arith-assert-upper      1738
;  :arith-bound-prop        160
;  :arith-conflicts         50
;  :arith-eq-adapter        1438
;  :arith-fixed-eqs         901
;  :arith-offset-eqs        259
;  :arith-pivots            415
;  :binary-propagations     11
;  :conflicts               553
;  :datatype-accessor-ax    664
;  :datatype-constructor-ax 3188
;  :datatype-occurs-check   1252
;  :datatype-splits         2211
;  :decisions               3492
;  :del-clause              4192
;  :final-checks            290
;  :interface-eqs           28
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          160
;  :mk-bool-var             8937
;  :mk-clause               4412
;  :num-allocs              7301698
;  :num-checks              374
;  :propagations            4283
;  :quant-instantiations    1196
;  :rlimit-count            330549
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        0)
      0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19903
;  :arith-add-rows          676
;  :arith-assert-diseq      1199
;  :arith-assert-lower      2532
;  :arith-assert-upper      1795
;  :arith-bound-prop        164
;  :arith-conflicts         51
;  :arith-eq-adapter        1484
;  :arith-fixed-eqs         930
;  :arith-offset-eqs        272
;  :arith-pivots            423
;  :binary-propagations     11
;  :conflicts               574
;  :datatype-accessor-ax    664
;  :datatype-constructor-ax 3194
;  :datatype-occurs-check   1252
;  :datatype-splits         2211
;  :decisions               3534
;  :del-clause              4371
;  :final-checks            290
;  :interface-eqs           28
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          169
;  :mk-bool-var             9166
;  :mk-clause               4591
;  :num-allocs              7301698
;  :num-checks              375
;  :propagations            4522
;  :quant-instantiations    1259
;  :rlimit-count            333648
;  :time                    0.00)
; [then-branch: 108 | First:(Second:(Second:(Second:($t@77@06))))[0] != -1 && First:(Second:(Second:(Second:($t@77@06))))[0] != 0 | live]
; [else-branch: 108 | !(First:(Second:(Second:(Second:($t@77@06))))[0] != -1 && First:(Second:(Second:(Second:($t@77@06))))[0] != 0) | dead]
(push) ; 9
; [then-branch: 108 | First:(Second:(Second:(Second:($t@77@06))))[0] != -1 && First:(Second:(Second:(Second:($t@77@06))))[0] != 0]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        0)
      0))))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19914
;  :arith-add-rows          677
;  :arith-assert-diseq      1201
;  :arith-assert-lower      2539
;  :arith-assert-upper      1799
;  :arith-bound-prop        164
;  :arith-conflicts         51
;  :arith-eq-adapter        1488
;  :arith-fixed-eqs         931
;  :arith-offset-eqs        272
;  :arith-pivots            424
;  :binary-propagations     11
;  :conflicts               574
;  :datatype-accessor-ax    664
;  :datatype-constructor-ax 3194
;  :datatype-occurs-check   1252
;  :datatype-splits         2211
;  :decisions               3534
;  :del-clause              4371
;  :final-checks            290
;  :interface-eqs           28
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          169
;  :mk-bool-var             9189
;  :mk-clause               4615
;  :num-allocs              7301698
;  :num-checks              376
;  :propagations            4531
;  :quant-instantiations    1263
;  :rlimit-count            333925)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19914
;  :arith-add-rows          677
;  :arith-assert-diseq      1201
;  :arith-assert-lower      2539
;  :arith-assert-upper      1799
;  :arith-bound-prop        164
;  :arith-conflicts         51
;  :arith-eq-adapter        1488
;  :arith-fixed-eqs         931
;  :arith-offset-eqs        272
;  :arith-pivots            424
;  :binary-propagations     11
;  :conflicts               574
;  :datatype-accessor-ax    664
;  :datatype-constructor-ax 3194
;  :datatype-occurs-check   1252
;  :datatype-splits         2211
;  :decisions               3534
;  :del-clause              4371
;  :final-checks            290
;  :interface-eqs           28
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          169
;  :mk-bool-var             9189
;  :mk-clause               4615
;  :num-allocs              7301698
;  :num-checks              377
;  :propagations            4531
;  :quant-instantiations    1263
;  :rlimit-count            333940)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          0)
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) != 0 && old(diz.Main_event_state[1]) != -1 ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] old(diz.Main_event_state[1]) != 0 && old(diz.Main_event_state[1]) != -1
; [eval] old(diz.Main_event_state[1]) != 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19923
;  :arith-add-rows          677
;  :arith-assert-diseq      1201
;  :arith-assert-lower      2539
;  :arith-assert-upper      1799
;  :arith-bound-prop        164
;  :arith-conflicts         51
;  :arith-eq-adapter        1488
;  :arith-fixed-eqs         931
;  :arith-offset-eqs        272
;  :arith-pivots            425
;  :binary-propagations     11
;  :conflicts               574
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 3194
;  :datatype-occurs-check   1252
;  :datatype-splits         2211
;  :decisions               3534
;  :del-clause              4395
;  :final-checks            290
;  :interface-eqs           28
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          169
;  :mk-bool-var             9194
;  :mk-clause               4616
;  :num-allocs              7301698
;  :num-checks              378
;  :propagations            4531
;  :quant-instantiations    1263
;  :rlimit-count            334417)
(push) ; 8
; [then-branch: 109 | First:(Second:(Second:(Second:($t@77@06))))[1] != 0 | live]
; [else-branch: 109 | First:(Second:(Second:(Second:($t@77@06))))[1] == 0 | live]
(push) ; 9
; [then-branch: 109 | First:(Second:(Second:(Second:($t@77@06))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) != -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19924
;  :arith-add-rows          678
;  :arith-assert-diseq      1201
;  :arith-assert-lower      2539
;  :arith-assert-upper      1799
;  :arith-bound-prop        164
;  :arith-conflicts         51
;  :arith-eq-adapter        1488
;  :arith-fixed-eqs         931
;  :arith-offset-eqs        272
;  :arith-pivots            425
;  :binary-propagations     11
;  :conflicts               574
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 3194
;  :datatype-occurs-check   1252
;  :datatype-splits         2211
;  :decisions               3534
;  :del-clause              4395
;  :final-checks            290
;  :interface-eqs           28
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          169
;  :mk-bool-var             9198
;  :mk-clause               4622
;  :num-allocs              7301698
;  :num-checks              379
;  :propagations            4531
;  :quant-instantiations    1264
;  :rlimit-count            334564)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 109 | First:(Second:(Second:(Second:($t@77@06))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
    1)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          1)
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21000
;  :arith-add-rows          717
;  :arith-assert-diseq      1308
;  :arith-assert-lower      2728
;  :arith-assert-upper      1895
;  :arith-bound-prop        175
;  :arith-conflicts         53
;  :arith-eq-adapter        1579
;  :arith-fixed-eqs         983
;  :arith-offset-eqs        294
;  :arith-pivots            454
;  :binary-propagations     11
;  :conflicts               599
;  :datatype-accessor-ax    719
;  :datatype-constructor-ax 3356
;  :datatype-occurs-check   1348
;  :datatype-splits         2368
;  :decisions               3691
;  :del-clause              4721
;  :final-checks            301
;  :interface-eqs           31
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          171
;  :mk-bool-var             9715
;  :mk-clause               4942
;  :num-allocs              7301698
;  :num-checks              380
;  :propagations            4936
;  :quant-instantiations    1357
;  :rlimit-count            341943
;  :time                    0.01)
(push) ; 9
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        1)
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21448
;  :arith-add-rows          731
;  :arith-assert-diseq      1337
;  :arith-assert-lower      2778
;  :arith-assert-upper      1930
;  :arith-bound-prop        176
;  :arith-conflicts         53
;  :arith-eq-adapter        1611
;  :arith-fixed-eqs         1005
;  :arith-offset-eqs        303
;  :arith-pivots            469
;  :binary-propagations     11
;  :conflicts               604
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 3436
;  :datatype-occurs-check   1384
;  :datatype-splits         2416
;  :decisions               3768
;  :del-clause              4812
;  :final-checks            305
;  :interface-eqs           31
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          171
;  :mk-bool-var             9877
;  :mk-clause               5033
;  :num-allocs              7301698
;  :num-checks              381
;  :propagations            5039
;  :quant-instantiations    1382
;  :rlimit-count            345389
;  :time                    0.00)
; [then-branch: 110 | First:(Second:(Second:(Second:($t@77@06))))[1] != -1 && First:(Second:(Second:(Second:($t@77@06))))[1] != 0 | live]
; [else-branch: 110 | !(First:(Second:(Second:(Second:($t@77@06))))[1] != -1 && First:(Second:(Second:(Second:($t@77@06))))[1] != 0) | live]
(push) ; 9
; [then-branch: 110 | First:(Second:(Second:(Second:($t@77@06))))[1] != -1 && First:(Second:(Second:(Second:($t@77@06))))[1] != 0]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        1)
      0))))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21449
;  :arith-add-rows          732
;  :arith-assert-diseq      1337
;  :arith-assert-lower      2778
;  :arith-assert-upper      1930
;  :arith-bound-prop        176
;  :arith-conflicts         53
;  :arith-eq-adapter        1611
;  :arith-fixed-eqs         1005
;  :arith-offset-eqs        303
;  :arith-pivots            469
;  :binary-propagations     11
;  :conflicts               604
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 3436
;  :datatype-occurs-check   1384
;  :datatype-splits         2416
;  :decisions               3768
;  :del-clause              4812
;  :final-checks            305
;  :interface-eqs           31
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          171
;  :mk-bool-var             9881
;  :mk-clause               5039
;  :num-allocs              7301698
;  :num-checks              382
;  :propagations            5040
;  :quant-instantiations    1383
;  :rlimit-count            345579)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21449
;  :arith-add-rows          732
;  :arith-assert-diseq      1337
;  :arith-assert-lower      2778
;  :arith-assert-upper      1930
;  :arith-bound-prop        176
;  :arith-conflicts         53
;  :arith-eq-adapter        1611
;  :arith-fixed-eqs         1005
;  :arith-offset-eqs        303
;  :arith-pivots            469
;  :binary-propagations     11
;  :conflicts               604
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 3436
;  :datatype-occurs-check   1384
;  :datatype-splits         2416
;  :decisions               3768
;  :del-clause              4812
;  :final-checks            305
;  :interface-eqs           31
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          171
;  :mk-bool-var             9881
;  :mk-clause               5039
;  :num-allocs              7301698
;  :num-checks              383
;  :propagations            5040
;  :quant-instantiations    1383
;  :rlimit-count            345594)
(pop) ; 9
(push) ; 9
; [else-branch: 110 | !(First:(Second:(Second:(Second:($t@77@06))))[1] != -1 && First:(Second:(Second:(Second:($t@77@06))))[1] != 0)]
(assert (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          1)
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          1)
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@06))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) != 0 && old(diz.Main_event_state[2]) != -1 ==> diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] old(diz.Main_event_state[2]) != 0 && old(diz.Main_event_state[2]) != -1
; [eval] old(diz.Main_event_state[2]) != 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21458
;  :arith-add-rows          732
;  :arith-assert-diseq      1337
;  :arith-assert-lower      2778
;  :arith-assert-upper      1930
;  :arith-bound-prop        176
;  :arith-conflicts         53
;  :arith-eq-adapter        1611
;  :arith-fixed-eqs         1005
;  :arith-offset-eqs        303
;  :arith-pivots            469
;  :binary-propagations     11
;  :conflicts               604
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 3436
;  :datatype-occurs-check   1384
;  :datatype-splits         2416
;  :decisions               3768
;  :del-clause              4818
;  :final-checks            305
;  :interface-eqs           31
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          171
;  :mk-bool-var             9883
;  :mk-clause               5040
;  :num-allocs              7301698
;  :num-checks              384
;  :propagations            5040
;  :quant-instantiations    1383
;  :rlimit-count            346008)
(push) ; 8
; [then-branch: 111 | First:(Second:(Second:(Second:($t@77@06))))[2] != 0 | live]
; [else-branch: 111 | First:(Second:(Second:(Second:($t@77@06))))[2] == 0 | live]
(push) ; 9
; [then-branch: 111 | First:(Second:(Second:(Second:($t@77@06))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) != -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21459
;  :arith-add-rows          733
;  :arith-assert-diseq      1337
;  :arith-assert-lower      2778
;  :arith-assert-upper      1930
;  :arith-bound-prop        176
;  :arith-conflicts         53
;  :arith-eq-adapter        1611
;  :arith-fixed-eqs         1005
;  :arith-offset-eqs        303
;  :arith-pivots            469
;  :binary-propagations     11
;  :conflicts               604
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 3436
;  :datatype-occurs-check   1384
;  :datatype-splits         2416
;  :decisions               3768
;  :del-clause              4818
;  :final-checks            305
;  :interface-eqs           31
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          171
;  :mk-bool-var             9886
;  :mk-clause               5045
;  :num-allocs              7301698
;  :num-checks              385
;  :propagations            5040
;  :quant-instantiations    1384
;  :rlimit-count            346157)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 111 | First:(Second:(Second:(Second:($t@77@06))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
    2)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          2)
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21973
;  :arith-add-rows          746
;  :arith-assert-diseq      1388
;  :arith-assert-lower      2876
;  :arith-assert-upper      1983
;  :arith-bound-prop        177
;  :arith-conflicts         54
;  :arith-eq-adapter        1662
;  :arith-fixed-eqs         1036
;  :arith-offset-eqs        313
;  :arith-pivots            484
;  :binary-propagations     11
;  :conflicts               612
;  :datatype-accessor-ax    749
;  :datatype-constructor-ax 3513
;  :datatype-occurs-check   1420
;  :datatype-splits         2462
;  :decisions               3850
;  :del-clause              4992
;  :final-checks            310
;  :interface-eqs           32
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          173
;  :mk-bool-var             10140
;  :mk-clause               5214
;  :num-allocs              7301698
;  :num-checks              386
;  :propagations            5232
;  :quant-instantiations    1435
;  :rlimit-count            350244
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        2)
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22949
;  :arith-add-rows          782
;  :arith-assert-diseq      1468
;  :arith-assert-lower      3011
;  :arith-assert-upper      2042
;  :arith-bound-prop        180
;  :arith-conflicts         56
;  :arith-eq-adapter        1726
;  :arith-fixed-eqs         1077
;  :arith-offset-eqs        334
;  :arith-pivots            500
;  :binary-propagations     11
;  :conflicts               633
;  :datatype-accessor-ax    803
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   1516
;  :datatype-splits         2614
;  :decisions               4010
;  :del-clause              5235
;  :final-checks            321
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          177
;  :mk-bool-var             10573
;  :mk-clause               5457
;  :num-allocs              7301698
;  :num-checks              387
;  :propagations            5531
;  :quant-instantiations    1513
;  :rlimit-count            356706
;  :time                    0.01)
; [then-branch: 112 | First:(Second:(Second:(Second:($t@77@06))))[2] != -1 && First:(Second:(Second:(Second:($t@77@06))))[2] != 0 | live]
; [else-branch: 112 | !(First:(Second:(Second:(Second:($t@77@06))))[2] != -1 && First:(Second:(Second:(Second:($t@77@06))))[2] != 0) | live]
(push) ; 9
; [then-branch: 112 | First:(Second:(Second:(Second:($t@77@06))))[2] != -1 && First:(Second:(Second:(Second:($t@77@06))))[2] != 0]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
        2)
      0))))
; [eval] diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22950
;  :arith-add-rows          783
;  :arith-assert-diseq      1468
;  :arith-assert-lower      3011
;  :arith-assert-upper      2042
;  :arith-bound-prop        180
;  :arith-conflicts         56
;  :arith-eq-adapter        1726
;  :arith-fixed-eqs         1077
;  :arith-offset-eqs        334
;  :arith-pivots            500
;  :binary-propagations     11
;  :conflicts               633
;  :datatype-accessor-ax    803
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   1516
;  :datatype-splits         2614
;  :decisions               4010
;  :del-clause              5235
;  :final-checks            321
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          177
;  :mk-bool-var             10576
;  :mk-clause               5462
;  :num-allocs              7301698
;  :num-checks              388
;  :propagations            5532
;  :quant-instantiations    1514
;  :rlimit-count            356898)
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22950
;  :arith-add-rows          783
;  :arith-assert-diseq      1468
;  :arith-assert-lower      3011
;  :arith-assert-upper      2042
;  :arith-bound-prop        180
;  :arith-conflicts         56
;  :arith-eq-adapter        1726
;  :arith-fixed-eqs         1077
;  :arith-offset-eqs        334
;  :arith-pivots            500
;  :binary-propagations     11
;  :conflicts               633
;  :datatype-accessor-ax    803
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   1516
;  :datatype-splits         2614
;  :decisions               4010
;  :del-clause              5235
;  :final-checks            321
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          177
;  :mk-bool-var             10576
;  :mk-clause               5462
;  :num-allocs              7301698
;  :num-checks              389
;  :propagations            5532
;  :quant-instantiations    1514
;  :rlimit-count            356913)
(pop) ; 9
(push) ; 9
; [else-branch: 112 | !(First:(Second:(Second:(Second:($t@77@06))))[2] != -1 && First:(Second:(Second:(Second:($t@77@06))))[2] != 0)]
(assert (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          2)
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
          2)
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@06)))))
      2))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@82@06 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 113 | 0 <= i@82@06 | live]
; [else-branch: 113 | !(0 <= i@82@06) | live]
(push) ; 10
; [then-branch: 113 | 0 <= i@82@06]
(assert (<= 0 i@82@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 113 | !(0 <= i@82@06)]
(assert (not (<= 0 i@82@06)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 114 | i@82@06 < |First:(Second:($t@80@06))| && 0 <= i@82@06 | live]
; [else-branch: 114 | !(i@82@06 < |First:(Second:($t@80@06))| && 0 <= i@82@06) | live]
(push) ; 10
; [then-branch: 114 | i@82@06 < |First:(Second:($t@80@06))| && 0 <= i@82@06]
(assert (and
  (<
    i@82@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))
  (<= 0 i@82@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@82@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23474
;  :arith-add-rows          797
;  :arith-assert-diseq      1519
;  :arith-assert-lower      3111
;  :arith-assert-upper      2097
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1778
;  :arith-fixed-eqs         1109
;  :arith-offset-eqs        345
;  :arith-pivots            516
;  :binary-propagations     11
;  :conflicts               641
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5415
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10836
;  :mk-clause               5631
;  :num-allocs              7301698
;  :num-checks              391
;  :propagations            5725
;  :quant-instantiations    1565
;  :rlimit-count            361267)
; [eval] -1
(push) ; 11
; [then-branch: 115 | First:(Second:($t@80@06))[i@82@06] == -1 | live]
; [else-branch: 115 | First:(Second:($t@80@06))[i@82@06] != -1 | live]
(push) ; 12
; [then-branch: 115 | First:(Second:($t@80@06))[i@82@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
    i@82@06)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 115 | First:(Second:($t@80@06))[i@82@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      i@82@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@82@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1521
;  :arith-assert-lower      3118
;  :arith-assert-upper      2100
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1781
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            516
;  :binary-propagations     11
;  :conflicts               641
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5415
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10851
;  :mk-clause               5648
;  :num-allocs              7301698
;  :num-checks              392
;  :propagations            5732
;  :quant-instantiations    1568
;  :rlimit-count            361570)
(push) ; 13
; [then-branch: 116 | 0 <= First:(Second:($t@80@06))[i@82@06] | live]
; [else-branch: 116 | !(0 <= First:(Second:($t@80@06))[i@82@06]) | live]
(push) ; 14
; [then-branch: 116 | 0 <= First:(Second:($t@80@06))[i@82@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
    i@82@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@82@06 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1521
;  :arith-assert-lower      3118
;  :arith-assert-upper      2100
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1781
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            516
;  :binary-propagations     11
;  :conflicts               641
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5415
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10851
;  :mk-clause               5648
;  :num-allocs              7301698
;  :num-checks              393
;  :propagations            5732
;  :quant-instantiations    1568
;  :rlimit-count            361664)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 116 | !(0 <= First:(Second:($t@80@06))[i@82@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      i@82@06))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 114 | !(i@82@06 < |First:(Second:($t@80@06))| && 0 <= i@82@06)]
(assert (not
  (and
    (<
      i@82@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))
    (<= 0 i@82@06))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@82@06 Int)) (!
  (implies
    (and
      (<
        i@82@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))
      (<= 0 i@82@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
          i@82@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
            i@82@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
            i@82@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
    i@82@06))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1523
;  :arith-assert-lower      3119
;  :arith-assert-upper      2101
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1783
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            516
;  :binary-propagations     11
;  :conflicts               642
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10865
;  :mk-clause               5675
;  :num-allocs              7301698
;  :num-checks              394
;  :propagations            5734
;  :quant-instantiations    1571
;  :rlimit-count            362152)
(assert (forall ((i@82@06 Int)) (!
  (implies
    (and
      (<
        i@82@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))
      (<= 0 i@82@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
          i@82@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
            i@82@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
            i@82@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
    i@82@06))
  :qid |prog.l<no position>|)))
(declare-const $k@83@06 $Perm)
(assert ($Perm.isReadVar $k@83@06 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@83@06 $Perm.No) (< $Perm.No $k@83@06))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1524
;  :arith-assert-lower      3121
;  :arith-assert-upper      2102
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1784
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            516
;  :binary-propagations     11
;  :conflicts               643
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10870
;  :mk-clause               5677
;  :num-allocs              7301698
;  :num-checks              395
;  :propagations            5735
;  :quant-instantiations    1571
;  :rlimit-count            362676)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@64@06 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1524
;  :arith-assert-lower      3121
;  :arith-assert-upper      2102
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1784
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            516
;  :binary-propagations     11
;  :conflicts               643
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10870
;  :mk-clause               5677
;  :num-allocs              7301698
;  :num-checks              396
;  :propagations            5735
;  :quant-instantiations    1571
;  :rlimit-count            362687)
(assert (< $k@83@06 $k@64@06))
(assert (<= $Perm.No (- $k@64@06 $k@83@06)))
(assert (<= (- $k@64@06 $k@83@06) $Perm.Write))
(assert (implies (< $Perm.No (- $k@64@06 $k@83@06)) (not (= diz@32@06 $Ref.null))))
; [eval] 0 < diz.Main_MIN_DIST
(push) ; 8
(assert (not (< $Perm.No $k@64@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1524
;  :arith-assert-lower      3123
;  :arith-assert-upper      2103
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1784
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            518
;  :binary-propagations     11
;  :conflicts               644
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10873
;  :mk-clause               5677
;  :num-allocs              7301698
;  :num-checks              397
;  :propagations            5735
;  :quant-instantiations    1571
;  :rlimit-count            362907)
(declare-const $k@84@06 $Perm)
(assert ($Perm.isReadVar $k@84@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@84@06 $Perm.No) (< $Perm.No $k@84@06))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1525
;  :arith-assert-lower      3125
;  :arith-assert-upper      2104
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1785
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            518
;  :binary-propagations     11
;  :conflicts               645
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10877
;  :mk-clause               5679
;  :num-allocs              7301698
;  :num-checks              398
;  :propagations            5736
;  :quant-instantiations    1571
;  :rlimit-count            363105)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@65@06 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1525
;  :arith-assert-lower      3125
;  :arith-assert-upper      2104
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1785
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            518
;  :binary-propagations     11
;  :conflicts               645
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10877
;  :mk-clause               5679
;  :num-allocs              7301698
;  :num-checks              399
;  :propagations            5736
;  :quant-instantiations    1571
;  :rlimit-count            363116)
(assert (< $k@84@06 $k@65@06))
(assert (<= $Perm.No (- $k@65@06 $k@84@06)))
(assert (<= (- $k@65@06 $k@84@06) $Perm.Write))
(assert (implies (< $Perm.No (- $k@65@06 $k@84@06)) (not (= diz@32@06 $Ref.null))))
; [eval] diz.Main_sensor != null
(push) ; 8
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1525
;  :arith-assert-lower      3127
;  :arith-assert-upper      2105
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1785
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               646
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10880
;  :mk-clause               5679
;  :num-allocs              7301698
;  :num-checks              400
;  :propagations            5736
;  :quant-instantiations    1571
;  :rlimit-count            363336)
(push) ; 8
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1525
;  :arith-assert-lower      3127
;  :arith-assert-upper      2105
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1785
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               647
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10880
;  :mk-clause               5679
;  :num-allocs              7301698
;  :num-checks              401
;  :propagations            5736
;  :quant-instantiations    1571
;  :rlimit-count            363384)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1525
;  :arith-assert-lower      3127
;  :arith-assert-upper      2105
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1785
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               647
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10880
;  :mk-clause               5679
;  :num-allocs              7301698
;  :num-checks              402
;  :propagations            5736
;  :quant-instantiations    1571
;  :rlimit-count            363397)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1525
;  :arith-assert-lower      3127
;  :arith-assert-upper      2105
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1785
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               648
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10880
;  :mk-clause               5679
;  :num-allocs              7301698
;  :num-checks              403
;  :propagations            5736
;  :quant-instantiations    1571
;  :rlimit-count            363445)
(declare-const $k@85@06 $Perm)
(assert ($Perm.isReadVar $k@85@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@85@06 $Perm.No) (< $Perm.No $k@85@06))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1526
;  :arith-assert-lower      3129
;  :arith-assert-upper      2106
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1786
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               649
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10884
;  :mk-clause               5681
;  :num-allocs              7301698
;  :num-checks              404
;  :propagations            5737
;  :quant-instantiations    1571
;  :rlimit-count            363644)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@66@06 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1526
;  :arith-assert-lower      3129
;  :arith-assert-upper      2106
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1786
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               649
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10884
;  :mk-clause               5681
;  :num-allocs              7301698
;  :num-checks              405
;  :propagations            5737
;  :quant-instantiations    1571
;  :rlimit-count            363655)
(assert (< $k@85@06 $k@66@06))
(assert (<= $Perm.No (- $k@66@06 $k@85@06)))
(assert (<= (- $k@66@06 $k@85@06) $Perm.Write))
(assert (implies (< $Perm.No (- $k@66@06 $k@85@06)) (not (= diz@32@06 $Ref.null))))
; [eval] diz.Main_controller != null
(push) ; 8
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1526
;  :arith-assert-lower      3131
;  :arith-assert-upper      2107
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1786
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               650
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10887
;  :mk-clause               5681
;  :num-allocs              7301698
;  :num-checks              406
;  :propagations            5737
;  :quant-instantiations    1571
;  :rlimit-count            363863)
(push) ; 8
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1526
;  :arith-assert-lower      3131
;  :arith-assert-upper      2107
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1786
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               651
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10887
;  :mk-clause               5681
;  :num-allocs              7301698
;  :num-checks              407
;  :propagations            5737
;  :quant-instantiations    1571
;  :rlimit-count            363911)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1526
;  :arith-assert-lower      3131
;  :arith-assert-upper      2107
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1786
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               651
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10887
;  :mk-clause               5681
;  :num-allocs              7301698
;  :num-checks              408
;  :propagations            5737
;  :quant-instantiations    1571
;  :rlimit-count            363924)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1526
;  :arith-assert-lower      3131
;  :arith-assert-upper      2107
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1786
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               652
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10887
;  :mk-clause               5681
;  :num-allocs              7301698
;  :num-checks              409
;  :propagations            5737
;  :quant-instantiations    1571
;  :rlimit-count            363972)
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23478
;  :arith-add-rows          797
;  :arith-assert-diseq      1526
;  :arith-assert-lower      3131
;  :arith-assert-upper      2107
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1786
;  :arith-fixed-eqs         1110
;  :arith-offset-eqs        345
;  :arith-pivots            520
;  :binary-propagations     11
;  :conflicts               652
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10887
;  :mk-clause               5681
;  :num-allocs              7301698
;  :num-checks              410
;  :propagations            5737
;  :quant-instantiations    1571
;  :rlimit-count            363987)
; [eval] -1
(push) ; 8
; [then-branch: 117 | First:(Second:($t@80@06))[0] == -1 | live]
; [else-branch: 117 | First:(Second:($t@80@06))[0] != -1 | live]
(push) ; 9
; [then-branch: 117 | First:(Second:($t@80@06))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
    0)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 117 | First:(Second:($t@80@06))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23482
;  :arith-add-rows          797
;  :arith-assert-diseq      1528
;  :arith-assert-lower      3138
;  :arith-assert-upper      2110
;  :arith-bound-prop        181
;  :arith-conflicts         57
;  :arith-eq-adapter        1789
;  :arith-fixed-eqs         1111
;  :arith-offset-eqs        345
;  :arith-pivots            521
;  :binary-propagations     11
;  :conflicts               652
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3753
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4092
;  :del-clause              5459
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          179
;  :mk-bool-var             10902
;  :mk-clause               5698
;  :num-allocs              7301698
;  :num-checks              411
;  :propagations            5744
;  :quant-instantiations    1575
;  :rlimit-count            364286)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24000
;  :arith-add-rows          850
;  :arith-assert-diseq      1605
;  :arith-assert-lower      3265
;  :arith-assert-upper      2206
;  :arith-bound-prop        189
;  :arith-conflicts         59
;  :arith-eq-adapter        1863
;  :arith-fixed-eqs         1152
;  :arith-offset-eqs        361
;  :arith-pivots            546
;  :binary-propagations     11
;  :conflicts               674
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3789
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4166
;  :del-clause              5736
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          186
;  :mk-bool-var             11190
;  :mk-clause               5958
;  :num-allocs              7301698
;  :num-checks              412
;  :propagations            6084
;  :quant-instantiations    1666
;  :rlimit-count            369055
;  :time                    0.01)
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      0)
    0)))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24002
;  :arith-add-rows          850
;  :arith-assert-diseq      1605
;  :arith-assert-lower      3265
;  :arith-assert-upper      2206
;  :arith-bound-prop        189
;  :arith-conflicts         59
;  :arith-eq-adapter        1863
;  :arith-fixed-eqs         1152
;  :arith-offset-eqs        361
;  :arith-pivots            546
;  :binary-propagations     11
;  :conflicts               674
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3789
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4166
;  :del-clause              5736
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          186
;  :mk-bool-var             11192
;  :mk-clause               5959
;  :num-allocs              7301698
;  :num-checks              413
;  :propagations            6084
;  :quant-instantiations    1666
;  :rlimit-count            369173)
; [eval] -1
(push) ; 8
; [then-branch: 118 | First:(Second:($t@80@06))[1] == -1 | live]
; [else-branch: 118 | First:(Second:($t@80@06))[1] != -1 | live]
(push) ; 9
; [then-branch: 118 | First:(Second:($t@80@06))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
    1)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 118 | First:(Second:($t@80@06))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24011
;  :arith-add-rows          853
;  :arith-assert-diseq      1607
;  :arith-assert-lower      3273
;  :arith-assert-upper      2210
;  :arith-bound-prop        189
;  :arith-conflicts         59
;  :arith-eq-adapter        1867
;  :arith-fixed-eqs         1154
;  :arith-offset-eqs        361
;  :arith-pivots            548
;  :binary-propagations     11
;  :conflicts               674
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3789
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4166
;  :del-clause              5736
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          186
;  :mk-bool-var             11213
;  :mk-clause               5973
;  :num-allocs              7301698
;  :num-checks              414
;  :propagations            6093
;  :quant-instantiations    1671
;  :rlimit-count            369466)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      1)
    2))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24025
;  :arith-add-rows          862
;  :arith-assert-diseq      1612
;  :arith-assert-lower      3284
;  :arith-assert-upper      2217
;  :arith-bound-prop        191
;  :arith-conflicts         60
;  :arith-eq-adapter        1873
;  :arith-fixed-eqs         1156
;  :arith-offset-eqs        361
;  :arith-pivots            555
;  :binary-propagations     11
;  :conflicts               675
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3789
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4166
;  :del-clause              5771
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          186
;  :mk-bool-var             11240
;  :mk-clause               5994
;  :num-allocs              7301698
;  :num-checks              415
;  :propagations            6109
;  :quant-instantiations    1676
;  :rlimit-count            369986)
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      1)
    2)))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24027
;  :arith-add-rows          862
;  :arith-assert-diseq      1612
;  :arith-assert-lower      3284
;  :arith-assert-upper      2217
;  :arith-bound-prop        191
;  :arith-conflicts         60
;  :arith-eq-adapter        1873
;  :arith-fixed-eqs         1156
;  :arith-offset-eqs        361
;  :arith-pivots            555
;  :binary-propagations     11
;  :conflicts               675
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3789
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4166
;  :del-clause              5771
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          186
;  :mk-bool-var             11242
;  :mk-clause               5995
;  :num-allocs              7301698
;  :num-checks              416
;  :propagations            6109
;  :quant-instantiations    1676
;  :rlimit-count            370104)
; [eval] -1
(push) ; 8
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
      0)
    (- 0 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24331
;  :arith-add-rows          897
;  :arith-assert-diseq      1658
;  :arith-assert-lower      3372
;  :arith-assert-upper      2271
;  :arith-bound-prop        196
;  :arith-conflicts         61
;  :arith-eq-adapter        1913
;  :arith-fixed-eqs         1189
;  :arith-offset-eqs        380
;  :arith-pivots            565
;  :binary-propagations     11
;  :conflicts               696
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3795
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4210
;  :del-clause              5908
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          200
;  :mk-bool-var             11440
;  :mk-clause               6132
;  :num-allocs              7301698
;  :num-checks              417
;  :propagations            6365
;  :quant-instantiations    1737
;  :rlimit-count            373264
;  :time                    0.00)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24331
;  :arith-add-rows          897
;  :arith-assert-diseq      1658
;  :arith-assert-lower      3372
;  :arith-assert-upper      2271
;  :arith-bound-prop        196
;  :arith-conflicts         61
;  :arith-eq-adapter        1913
;  :arith-fixed-eqs         1189
;  :arith-offset-eqs        380
;  :arith-pivots            565
;  :binary-propagations     11
;  :conflicts               696
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3795
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4210
;  :del-clause              5908
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          200
;  :mk-bool-var             11441
;  :mk-clause               6132
;  :num-allocs              7301698
;  :num-checks              418
;  :propagations            6365
;  :quant-instantiations    1737
;  :rlimit-count            373401)
(push) ; 8
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24616
;  :arith-add-rows          929
;  :arith-assert-diseq      1701
;  :arith-assert-lower      3451
;  :arith-assert-upper      2321
;  :arith-bound-prop        201
;  :arith-conflicts         62
;  :arith-eq-adapter        1950
;  :arith-fixed-eqs         1216
;  :arith-offset-eqs        394
;  :arith-pivots            571
;  :binary-propagations     11
;  :conflicts               715
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3801
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4249
;  :del-clause              6033
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          209
;  :mk-bool-var             11620
;  :mk-clause               6257
;  :num-allocs              7301698
;  :num-checks              419
;  :propagations            6597
;  :quant-instantiations    1793
;  :rlimit-count            376275
;  :time                    0.00)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
      0)
    0)))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24616
;  :arith-add-rows          929
;  :arith-assert-diseq      1701
;  :arith-assert-lower      3451
;  :arith-assert-upper      2321
;  :arith-bound-prop        201
;  :arith-conflicts         62
;  :arith-eq-adapter        1950
;  :arith-fixed-eqs         1216
;  :arith-offset-eqs        394
;  :arith-pivots            571
;  :binary-propagations     11
;  :conflicts               715
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3801
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4249
;  :del-clause              6033
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          209
;  :mk-bool-var             11621
;  :mk-clause               6257
;  :num-allocs              7301698
;  :num-checks              420
;  :propagations            6597
;  :quant-instantiations    1793
;  :rlimit-count            376405)
; [eval] -1
(push) ; 8
(assert (not (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
    2)
  (- 0 1))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24767
;  :arith-add-rows          953
;  :arith-assert-diseq      1748
;  :arith-assert-lower      3529
;  :arith-assert-upper      2352
;  :arith-bound-prop        204
;  :arith-conflicts         63
;  :arith-eq-adapter        1986
;  :arith-fixed-eqs         1231
;  :arith-offset-eqs        399
;  :arith-pivots            573
;  :binary-propagations     11
;  :conflicts               730
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3807
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4272
;  :del-clause              6116
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          213
;  :mk-bool-var             11749
;  :mk-clause               6340
;  :num-allocs              7301698
;  :num-checks              421
;  :propagations            6728
;  :quant-instantiations    1825
;  :rlimit-count            378108
;  :time                    0.00)
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
    2)
  (- 0 1)))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24767
;  :arith-add-rows          953
;  :arith-assert-diseq      1748
;  :arith-assert-lower      3529
;  :arith-assert-upper      2353
;  :arith-bound-prop        204
;  :arith-conflicts         63
;  :arith-eq-adapter        1986
;  :arith-fixed-eqs         1231
;  :arith-offset-eqs        399
;  :arith-pivots            573
;  :binary-propagations     11
;  :conflicts               731
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3807
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4272
;  :del-clause              6116
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          213
;  :mk-bool-var             11750
;  :mk-clause               6340
;  :num-allocs              7301698
;  :num-checks              422
;  :propagations            6728
;  :quant-instantiations    1825
;  :rlimit-count            378261)
(push) ; 8
; [then-branch: 119 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))) | live]
; [else-branch: 119 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))) | live]
(push) ; 9
; [then-branch: 119 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 119 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24771
;  :arith-add-rows          953
;  :arith-assert-diseq      1748
;  :arith-assert-lower      3529
;  :arith-assert-upper      2353
;  :arith-bound-prop        204
;  :arith-conflicts         63
;  :arith-eq-adapter        1986
;  :arith-fixed-eqs         1231
;  :arith-offset-eqs        399
;  :arith-pivots            573
;  :binary-propagations     11
;  :conflicts               731
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 3807
;  :datatype-occurs-check   1552
;  :datatype-splits         2661
;  :decisions               4272
;  :del-clause              6116
;  :final-checks            325
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.39
;  :memory                  5.34
;  :minimized-lits          213
;  :mk-bool-var             11752
;  :mk-clause               6340
;  :num-allocs              7301698
;  :num-checks              423
;  :propagations            6728
;  :quant-instantiations    1827
;  :rlimit-count            378598)
; [eval] -1
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26026
;  :arith-add-rows          994
;  :arith-assert-diseq      1848
;  :arith-assert-lower      3714
;  :arith-assert-upper      2429
;  :arith-bound-prop        208
;  :arith-conflicts         66
;  :arith-eq-adapter        2072
;  :arith-fixed-eqs         1270
;  :arith-offset-eqs        422
;  :arith-pivots            586
;  :binary-propagations     11
;  :conflicts               752
;  :datatype-accessor-ax    889
;  :datatype-constructor-ax 4015
;  :datatype-occurs-check   1675
;  :datatype-splits         2856
;  :decisions               4467
;  :del-clause              6349
;  :final-checks            338
;  :interface-eqs           39
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          215
;  :mk-bool-var             12236
;  :mk-clause               6573
;  :num-allocs              7579289
;  :num-checks              424
;  :propagations            7082
;  :quant-instantiations    1924
;  :rlimit-count            386249
;  :time                    0.01)
(push) ; 11
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26585
;  :arith-add-rows          1014
;  :arith-assert-diseq      1892
;  :arith-assert-lower      3792
;  :arith-assert-upper      2490
;  :arith-bound-prop        208
;  :arith-conflicts         66
;  :arith-eq-adapter        2120
;  :arith-fixed-eqs         1299
;  :arith-offset-eqs        435
;  :arith-pivots            599
;  :binary-propagations     11
;  :conflicts               754
;  :datatype-accessor-ax    915
;  :datatype-constructor-ax 4107
;  :datatype-occurs-check   1732
;  :datatype-splits         2940
;  :decisions               4545
;  :del-clause              6459
;  :final-checks            344
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          215
;  :mk-bool-var             12474
;  :mk-clause               6683
;  :num-allocs              7579289
;  :num-checks              425
;  :propagations            7256
;  :quant-instantiations    1973
;  :rlimit-count            390346
;  :time                    0.01)
; [then-branch: 120 | First:(Second:($t@80@06))[1] == -1 | live]
; [else-branch: 120 | First:(Second:($t@80@06))[1] != -1 | live]
(push) ; 11
; [then-branch: 120 | First:(Second:($t@80@06))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
    1)
  (- 0 1)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26589
;  :arith-add-rows          1014
;  :arith-assert-diseq      1893
;  :arith-assert-lower      3792
;  :arith-assert-upper      2490
;  :arith-bound-prop        208
;  :arith-conflicts         66
;  :arith-eq-adapter        2120
;  :arith-fixed-eqs         1299
;  :arith-offset-eqs        435
;  :arith-pivots            599
;  :binary-propagations     11
;  :conflicts               754
;  :datatype-accessor-ax    915
;  :datatype-constructor-ax 4107
;  :datatype-occurs-check   1732
;  :datatype-splits         2940
;  :decisions               4545
;  :del-clause              6459
;  :final-checks            344
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          215
;  :mk-bool-var             12474
;  :mk-clause               6683
;  :num-allocs              7579289
;  :num-checks              426
;  :propagations            7258
;  :quant-instantiations    1973
;  :rlimit-count            390469)
; [eval] -1
(pop) ; 11
(push) ; 11
; [else-branch: 120 | First:(Second:($t@80@06))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      1)
    (- 0 1))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
          0)
        (- 0 1)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27143
;  :arith-add-rows          1081
;  :arith-assert-diseq      1966
;  :arith-assert-lower      3907
;  :arith-assert-upper      2559
;  :arith-bound-prop        212
;  :arith-conflicts         69
;  :arith-eq-adapter        2176
;  :arith-fixed-eqs         1333
;  :arith-offset-eqs        457
;  :arith-pivots            621
;  :binary-propagations     11
;  :conflicts               779
;  :datatype-accessor-ax    915
;  :datatype-constructor-ax 4155
;  :datatype-occurs-check   1732
;  :datatype-splits         2940
;  :decisions               4639
;  :del-clause              6677
;  :final-checks            344
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          220
;  :mk-bool-var             12696
;  :mk-clause               6901
;  :num-allocs              7579289
;  :num-checks              427
;  :propagations            7569
;  :quant-instantiations    2054
;  :rlimit-count            395678
;  :time                    0.00)
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
          0)
        (- 0 1))))))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27143
;  :arith-add-rows          1081
;  :arith-assert-diseq      1966
;  :arith-assert-lower      3907
;  :arith-assert-upper      2559
;  :arith-bound-prop        212
;  :arith-conflicts         69
;  :arith-eq-adapter        2176
;  :arith-fixed-eqs         1333
;  :arith-offset-eqs        457
;  :arith-pivots            621
;  :binary-propagations     11
;  :conflicts               779
;  :datatype-accessor-ax    915
;  :datatype-constructor-ax 4155
;  :datatype-occurs-check   1732
;  :datatype-splits         2940
;  :decisions               4639
;  :del-clause              6677
;  :final-checks            344
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          220
;  :mk-bool-var             12696
;  :mk-clause               6902
;  :num-allocs              7579289
;  :num-checks              428
;  :propagations            7569
;  :quant-instantiations    2054
;  :rlimit-count            396048)
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
      2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27262
;  :arith-add-rows          1103
;  :arith-assert-diseq      1992
;  :arith-assert-lower      3958
;  :arith-assert-upper      2579
;  :arith-bound-prop        215
;  :arith-conflicts         70
;  :arith-eq-adapter        2194
;  :arith-fixed-eqs         1345
;  :arith-offset-eqs        459
;  :arith-pivots            624
;  :binary-propagations     11
;  :conflicts               797
;  :datatype-accessor-ax    915
;  :datatype-constructor-ax 4161
;  :datatype-occurs-check   1732
;  :datatype-splits         2940
;  :decisions               4662
;  :del-clause              6741
;  :final-checks            344
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          224
;  :mk-bool-var             12768
;  :mk-clause               6966
;  :num-allocs              7579289
;  :num-checks              429
;  :propagations            7674
;  :quant-instantiations    2078
;  :rlimit-count            397472
;  :time                    0.00)
; [then-branch: 121 | -1 <= First:(Second:(Second:(Second:($t@80@06))))[2] | dead]
; [else-branch: 121 | !(-1 <= First:(Second:(Second:(Second:($t@80@06))))[2]) | live]
(push) ; 9
; [else-branch: 121 | !(-1 <= First:(Second:(Second:(Second:($t@80@06))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27262
;  :arith-add-rows          1103
;  :arith-assert-diseq      1992
;  :arith-assert-lower      3958
;  :arith-assert-upper      2579
;  :arith-bound-prop        215
;  :arith-conflicts         70
;  :arith-eq-adapter        2194
;  :arith-fixed-eqs         1345
;  :arith-offset-eqs        459
;  :arith-pivots            624
;  :binary-propagations     11
;  :conflicts               797
;  :datatype-accessor-ax    915
;  :datatype-constructor-ax 4161
;  :datatype-occurs-check   1732
;  :datatype-splits         2940
;  :decisions               4662
;  :del-clause              6741
;  :final-checks            344
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          224
;  :mk-bool-var             12768
;  :mk-clause               6966
;  :num-allocs              7579289
;  :num-checks              430
;  :propagations            7674
;  :quant-instantiations    2078
;  :rlimit-count            397515)
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
      2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27381
;  :arith-add-rows          1125
;  :arith-assert-diseq      2018
;  :arith-assert-lower      4009
;  :arith-assert-upper      2599
;  :arith-bound-prop        218
;  :arith-conflicts         71
;  :arith-eq-adapter        2212
;  :arith-fixed-eqs         1357
;  :arith-offset-eqs        461
;  :arith-pivots            626
;  :binary-propagations     11
;  :conflicts               815
;  :datatype-accessor-ax    915
;  :datatype-constructor-ax 4167
;  :datatype-occurs-check   1732
;  :datatype-splits         2940
;  :decisions               4685
;  :del-clause              6805
;  :final-checks            344
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          228
;  :mk-bool-var             12840
;  :mk-clause               7030
;  :num-allocs              7579289
;  :num-checks              431
;  :propagations            7778
;  :quant-instantiations    2102
;  :rlimit-count            398928
;  :time                    0.00)
; [then-branch: 122 | -1 <= First:(Second:(Second:(Second:($t@80@06))))[2] | dead]
; [else-branch: 122 | !(-1 <= First:(Second:(Second:(Second:($t@80@06))))[2]) | live]
(push) ; 9
; [else-branch: 122 | !(-1 <= First:(Second:(Second:(Second:($t@80@06))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06)))))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 8
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27381
;  :arith-add-rows          1125
;  :arith-assert-diseq      2018
;  :arith-assert-lower      4009
;  :arith-assert-upper      2599
;  :arith-bound-prop        218
;  :arith-conflicts         71
;  :arith-eq-adapter        2212
;  :arith-fixed-eqs         1357
;  :arith-offset-eqs        461
;  :arith-pivots            626
;  :binary-propagations     11
;  :conflicts               816
;  :datatype-accessor-ax    915
;  :datatype-constructor-ax 4167
;  :datatype-occurs-check   1732
;  :datatype-splits         2940
;  :decisions               4685
;  :del-clause              6805
;  :final-checks            344
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          228
;  :mk-bool-var             12840
;  :mk-clause               7030
;  :num-allocs              7579289
;  :num-checks              432
;  :propagations            7778
;  :quant-instantiations    2102
;  :rlimit-count            399004)
(push) ; 8
; [then-branch: 123 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))) | live]
; [else-branch: 123 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))) | live]
(push) ; 9
; [then-branch: 123 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27385
;  :arith-add-rows          1125
;  :arith-assert-diseq      2018
;  :arith-assert-lower      4009
;  :arith-assert-upper      2599
;  :arith-bound-prop        218
;  :arith-conflicts         71
;  :arith-eq-adapter        2212
;  :arith-fixed-eqs         1357
;  :arith-offset-eqs        461
;  :arith-pivots            626
;  :binary-propagations     11
;  :conflicts               816
;  :datatype-accessor-ax    915
;  :datatype-constructor-ax 4167
;  :datatype-occurs-check   1732
;  :datatype-splits         2940
;  :decisions               4685
;  :del-clause              6805
;  :final-checks            344
;  :interface-eqs           40
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          228
;  :mk-bool-var             12842
;  :mk-clause               7030
;  :num-allocs              7579289
;  :num-checks              433
;  :propagations            7778
;  :quant-instantiations    2104
;  :rlimit-count            399293)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 123 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28627
;  :arith-add-rows          1166
;  :arith-assert-diseq      2109
;  :arith-assert-lower      4169
;  :arith-assert-upper      2659
;  :arith-bound-prop        222
;  :arith-conflicts         74
;  :arith-eq-adapter        2281
;  :arith-fixed-eqs         1396
;  :arith-offset-eqs        484
;  :arith-pivots            636
;  :binary-propagations     11
;  :conflicts               837
;  :datatype-accessor-ax    986
;  :datatype-constructor-ax 4375
;  :datatype-occurs-check   1855
;  :datatype-splits         3135
;  :decisions               4880
;  :del-clause              6999
;  :final-checks            357
;  :interface-eqs           44
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          230
;  :mk-bool-var             13273
;  :mk-clause               7224
;  :num-allocs              7579289
;  :num-checks              434
;  :propagations            8118
;  :quant-instantiations    2189
;  :rlimit-count            407053
;  :time                    0.01)
(push) ; 9
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28965
;  :arith-add-rows          1182
;  :arith-assert-diseq      2135
;  :arith-assert-lower      4215
;  :arith-assert-upper      2694
;  :arith-bound-prop        222
;  :arith-conflicts         74
;  :arith-eq-adapter        2311
;  :arith-fixed-eqs         1412
;  :arith-offset-eqs        491
;  :arith-pivots            646
;  :binary-propagations     11
;  :conflicts               838
;  :datatype-accessor-ax    999
;  :datatype-constructor-ax 4431
;  :datatype-occurs-check   1893
;  :datatype-splits         3184
;  :decisions               4928
;  :del-clause              7062
;  :final-checks            361
;  :interface-eqs           44
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          230
;  :mk-bool-var             13422
;  :mk-clause               7287
;  :num-allocs              7579289
;  :num-checks              435
;  :propagations            8210
;  :quant-instantiations    2216
;  :rlimit-count            410252
;  :time                    0.00)
; [then-branch: 124 | First:(Second:($t@80@06))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))) | live]
; [else-branch: 124 | !(First:(Second:($t@80@06))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))) | live]
(push) ; 9
; [then-branch: 124 | First:(Second:($t@80@06))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 10
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28978
;  :arith-add-rows          1182
;  :arith-assert-diseq      2137
;  :arith-assert-lower      4219
;  :arith-assert-upper      2698
;  :arith-bound-prop        222
;  :arith-conflicts         74
;  :arith-eq-adapter        2314
;  :arith-fixed-eqs         1412
;  :arith-offset-eqs        491
;  :arith-pivots            646
;  :binary-propagations     11
;  :conflicts               839
;  :datatype-accessor-ax    999
;  :datatype-constructor-ax 4431
;  :datatype-occurs-check   1893
;  :datatype-splits         3184
;  :decisions               4928
;  :del-clause              7062
;  :final-checks            361
;  :interface-eqs           44
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          230
;  :mk-bool-var             13436
;  :mk-clause               7296
;  :num-allocs              7579289
;  :num-checks              436
;  :propagations            8217
;  :quant-instantiations    2222
;  :rlimit-count            410714)
(push) ; 10
(assert (not (< $Perm.No $k@64@06)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28978
;  :arith-add-rows          1182
;  :arith-assert-diseq      2137
;  :arith-assert-lower      4219
;  :arith-assert-upper      2698
;  :arith-bound-prop        222
;  :arith-conflicts         74
;  :arith-eq-adapter        2314
;  :arith-fixed-eqs         1412
;  :arith-offset-eqs        491
;  :arith-pivots            646
;  :binary-propagations     11
;  :conflicts               840
;  :datatype-accessor-ax    999
;  :datatype-constructor-ax 4431
;  :datatype-occurs-check   1893
;  :datatype-splits         3184
;  :decisions               4928
;  :del-clause              7062
;  :final-checks            361
;  :interface-eqs           44
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          230
;  :mk-bool-var             13436
;  :mk-clause               7296
;  :num-allocs              7579289
;  :num-checks              437
;  :propagations            8217
;  :quant-instantiations    2222
;  :rlimit-count            410762)
(pop) ; 9
(push) ; 9
; [else-branch: 124 | !(First:(Second:($t@80@06))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 8
(assert (not (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28995
;  :arith-add-rows          1183
;  :arith-assert-diseq      2141
;  :arith-assert-lower      4220
;  :arith-assert-upper      2703
;  :arith-bound-prop        222
;  :arith-conflicts         74
;  :arith-eq-adapter        2318
;  :arith-fixed-eqs         1412
;  :arith-offset-eqs        491
;  :arith-pivots            646
;  :binary-propagations     11
;  :conflicts               841
;  :datatype-accessor-ax    999
;  :datatype-constructor-ax 4431
;  :datatype-occurs-check   1893
;  :datatype-splits         3184
;  :decisions               4928
;  :del-clause              7084
;  :final-checks            361
;  :interface-eqs           44
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.44
;  :minimized-lits          230
;  :mk-bool-var             13454
;  :mk-clause               7309
;  :num-allocs              7579289
;  :num-checks              438
;  :propagations            8245
;  :quant-instantiations    2229
;  :rlimit-count            411469)
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@80@06)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second $t@80@06))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@06))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit))))))))))))))))))))))))))) diz@32@06 globals@33@06))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; Loop head block: Re-establish invariant
(pop) ; 7
(push) ; 7
; [else-branch: 69 | min_advance__39@74@06 != -1]
(assert (not (= min_advance__39@74@06 (- 0 1))))
(pop) ; 7
; [eval] !(min_advance__39 == -1)
; [eval] min_advance__39 == -1
; [eval] -1
(set-option :timeout 10)
(push) ; 7
(assert (not (= min_advance__39@74@06 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29288
;  :arith-add-rows          1199
;  :arith-assert-diseq      2174
;  :arith-assert-lower      4261
;  :arith-assert-upper      2742
;  :arith-bound-prop        239
;  :arith-conflicts         74
;  :arith-eq-adapter        2338
;  :arith-fixed-eqs         1425
;  :arith-offset-eqs        494
;  :arith-pivots            662
;  :binary-propagations     11
;  :conflicts               852
;  :datatype-accessor-ax    1006
;  :datatype-constructor-ax 4486
;  :datatype-occurs-check   1913
;  :datatype-splits         3215
;  :decisions               4998
;  :del-clause              7253
;  :final-checks            366
;  :interface-eqs           45
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          233
;  :mk-bool-var             13559
;  :mk-clause               7393
;  :num-allocs              7868140
;  :num-checks              439
;  :propagations            8333
;  :quant-instantiations    2233
;  :rlimit-count            414262
;  :time                    0.00)
(push) ; 7
(assert (not (not (= min_advance__39@74@06 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29578
;  :arith-add-rows          1211
;  :arith-assert-diseq      2200
;  :arith-assert-lower      4295
;  :arith-assert-upper      2772
;  :arith-bound-prop        246
;  :arith-conflicts         75
;  :arith-eq-adapter        2358
;  :arith-fixed-eqs         1438
;  :arith-offset-eqs        497
;  :arith-pivots            671
;  :binary-propagations     11
;  :conflicts               860
;  :datatype-accessor-ax    1013
;  :datatype-constructor-ax 4541
;  :datatype-occurs-check   1933
;  :datatype-splits         3246
;  :decisions               5061
;  :del-clause              7315
;  :final-checks            371
;  :interface-eqs           46
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          234
;  :mk-bool-var             13663
;  :mk-clause               7455
;  :num-allocs              7868140
;  :num-checks              440
;  :propagations            8390
;  :quant-instantiations    2237
;  :rlimit-count            416573
;  :time                    0.00)
; [then-branch: 125 | min_advance__39@74@06 != -1 | live]
; [else-branch: 125 | min_advance__39@74@06 == -1 | live]
(push) ; 7
; [then-branch: 125 | min_advance__39@74@06 != -1]
(assert (not (= min_advance__39@74@06 (- 0 1))))
; [exec]
; __flatten_39__38 := Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__39), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__39), (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__39))
; [eval] Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__39), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__39), (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__39))
; [eval] (diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__39)
; [eval] diz.Main_event_state[0] < -1
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29579
;  :arith-add-rows          1211
;  :arith-assert-diseq      2202
;  :arith-assert-lower      4295
;  :arith-assert-upper      2772
;  :arith-bound-prop        246
;  :arith-conflicts         75
;  :arith-eq-adapter        2359
;  :arith-fixed-eqs         1438
;  :arith-offset-eqs        497
;  :arith-pivots            671
;  :binary-propagations     11
;  :conflicts               860
;  :datatype-accessor-ax    1013
;  :datatype-constructor-ax 4541
;  :datatype-occurs-check   1933
;  :datatype-splits         3246
;  :decisions               5061
;  :del-clause              7315
;  :final-checks            371
;  :interface-eqs           46
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          234
;  :mk-bool-var             13667
;  :mk-clause               7464
;  :num-allocs              7868140
;  :num-checks              441
;  :propagations            8390
;  :quant-instantiations    2237
;  :rlimit-count            416663)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29867
;  :arith-add-rows          1225
;  :arith-assert-diseq      2222
;  :arith-assert-lower      4319
;  :arith-assert-upper      2815
;  :arith-bound-prop        259
;  :arith-conflicts         75
;  :arith-eq-adapter        2376
;  :arith-fixed-eqs         1450
;  :arith-offset-eqs        504
;  :arith-pivots            681
;  :binary-propagations     11
;  :conflicts               868
;  :datatype-accessor-ax    1020
;  :datatype-constructor-ax 4596
;  :datatype-occurs-check   1953
;  :datatype-splits         3277
;  :decisions               5121
;  :del-clause              7372
;  :final-checks            376
;  :interface-eqs           47
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          235
;  :mk-bool-var             13762
;  :mk-clause               7521
;  :num-allocs              7868140
;  :num-checks              442
;  :propagations            8446
;  :quant-instantiations    2241
;  :rlimit-count            419060
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    0)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30151
;  :arith-add-rows          1241
;  :arith-assert-diseq      2243
;  :arith-assert-lower      4354
;  :arith-assert-upper      2844
;  :arith-bound-prop        275
;  :arith-conflicts         75
;  :arith-eq-adapter        2393
;  :arith-fixed-eqs         1463
;  :arith-offset-eqs        507
;  :arith-pivots            693
;  :binary-propagations     11
;  :conflicts               875
;  :datatype-accessor-ax    1027
;  :datatype-constructor-ax 4651
;  :datatype-occurs-check   1973
;  :datatype-splits         3308
;  :decisions               5181
;  :del-clause              7431
;  :final-checks            381
;  :interface-eqs           48
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          236
;  :mk-bool-var             13857
;  :mk-clause               7580
;  :num-allocs              7868140
;  :num-checks              443
;  :propagations            8494
;  :quant-instantiations    2245
;  :rlimit-count            421489
;  :time                    0.00)
; [then-branch: 126 | First:(Second:(Second:(Second:($t@72@06))))[0] < -1 | live]
; [else-branch: 126 | !(First:(Second:(Second:(Second:($t@72@06))))[0] < -1) | live]
(push) ; 9
; [then-branch: 126 | First:(Second:(Second:(Second:($t@72@06))))[0] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    0)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 126 | !(First:(Second:(Second:(Second:($t@72@06))))[0] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] - min_advance__39
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30151
;  :arith-add-rows          1241
;  :arith-assert-diseq      2243
;  :arith-assert-lower      4359
;  :arith-assert-upper      2844
;  :arith-bound-prop        275
;  :arith-conflicts         75
;  :arith-eq-adapter        2393
;  :arith-fixed-eqs         1463
;  :arith-offset-eqs        507
;  :arith-pivots            693
;  :binary-propagations     11
;  :conflicts               875
;  :datatype-accessor-ax    1027
;  :datatype-constructor-ax 4651
;  :datatype-occurs-check   1973
;  :datatype-splits         3308
;  :decisions               5181
;  :del-clause              7431
;  :final-checks            381
;  :interface-eqs           48
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          236
;  :mk-bool-var             13857
;  :mk-clause               7580
;  :num-allocs              7868140
;  :num-checks              444
;  :propagations            8499
;  :quant-instantiations    2245
;  :rlimit-count            421657)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__39)
; [eval] diz.Main_event_state[1] < -1
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30151
;  :arith-add-rows          1241
;  :arith-assert-diseq      2243
;  :arith-assert-lower      4359
;  :arith-assert-upper      2844
;  :arith-bound-prop        275
;  :arith-conflicts         75
;  :arith-eq-adapter        2393
;  :arith-fixed-eqs         1463
;  :arith-offset-eqs        507
;  :arith-pivots            693
;  :binary-propagations     11
;  :conflicts               875
;  :datatype-accessor-ax    1027
;  :datatype-constructor-ax 4651
;  :datatype-occurs-check   1973
;  :datatype-splits         3308
;  :decisions               5181
;  :del-clause              7431
;  :final-checks            381
;  :interface-eqs           48
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          236
;  :mk-bool-var             13857
;  :mk-clause               7580
;  :num-allocs              7868140
;  :num-checks              445
;  :propagations            8499
;  :quant-instantiations    2245
;  :rlimit-count            421672)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30460
;  :arith-add-rows          1264
;  :arith-assert-diseq      2266
;  :arith-assert-lower      4402
;  :arith-assert-upper      2891
;  :arith-bound-prop        287
;  :arith-conflicts         78
;  :arith-eq-adapter        2412
;  :arith-fixed-eqs         1480
;  :arith-offset-eqs        511
;  :arith-pivots            709
;  :binary-propagations     11
;  :conflicts               885
;  :datatype-accessor-ax    1034
;  :datatype-constructor-ax 4708
;  :datatype-occurs-check   1993
;  :datatype-splits         3340
;  :decisions               5244
;  :del-clause              7480
;  :final-checks            385
;  :interface-eqs           48
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          238
;  :mk-bool-var             13958
;  :mk-clause               7629
;  :num-allocs              7868140
;  :num-checks              446
;  :propagations            8591
;  :quant-instantiations    2250
;  :rlimit-count            424421
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30745
;  :arith-add-rows          1284
;  :arith-assert-diseq      2287
;  :arith-assert-lower      4441
;  :arith-assert-upper      2920
;  :arith-bound-prop        302
;  :arith-conflicts         78
;  :arith-eq-adapter        2429
;  :arith-fixed-eqs         1493
;  :arith-offset-eqs        514
;  :arith-pivots            725
;  :binary-propagations     11
;  :conflicts               892
;  :datatype-accessor-ax    1041
;  :datatype-constructor-ax 4763
;  :datatype-occurs-check   2013
;  :datatype-splits         3371
;  :decisions               5306
;  :del-clause              7536
;  :final-checks            390
;  :interface-eqs           49
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          239
;  :mk-bool-var             14053
;  :mk-clause               7685
;  :num-allocs              7868140
;  :num-checks              447
;  :propagations            8642
;  :quant-instantiations    2254
;  :rlimit-count            426962
;  :time                    0.00)
; [then-branch: 127 | First:(Second:(Second:(Second:($t@72@06))))[1] < -1 | live]
; [else-branch: 127 | !(First:(Second:(Second:(Second:($t@72@06))))[1] < -1) | live]
(push) ; 9
; [then-branch: 127 | First:(Second:(Second:(Second:($t@72@06))))[1] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    1)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 127 | !(First:(Second:(Second:(Second:($t@72@06))))[1] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] - min_advance__39
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30745
;  :arith-add-rows          1284
;  :arith-assert-diseq      2287
;  :arith-assert-lower      4443
;  :arith-assert-upper      2920
;  :arith-bound-prop        302
;  :arith-conflicts         78
;  :arith-eq-adapter        2429
;  :arith-fixed-eqs         1493
;  :arith-offset-eqs        514
;  :arith-pivots            725
;  :binary-propagations     11
;  :conflicts               892
;  :datatype-accessor-ax    1041
;  :datatype-constructor-ax 4763
;  :datatype-occurs-check   2013
;  :datatype-splits         3371
;  :decisions               5306
;  :del-clause              7536
;  :final-checks            390
;  :interface-eqs           49
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          239
;  :mk-bool-var             14053
;  :mk-clause               7685
;  :num-allocs              7868140
;  :num-checks              448
;  :propagations            8644
;  :quant-instantiations    2254
;  :rlimit-count            427125)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__39)
; [eval] diz.Main_event_state[2] < -1
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30745
;  :arith-add-rows          1284
;  :arith-assert-diseq      2287
;  :arith-assert-lower      4443
;  :arith-assert-upper      2920
;  :arith-bound-prop        302
;  :arith-conflicts         78
;  :arith-eq-adapter        2429
;  :arith-fixed-eqs         1493
;  :arith-offset-eqs        514
;  :arith-pivots            725
;  :binary-propagations     11
;  :conflicts               892
;  :datatype-accessor-ax    1041
;  :datatype-constructor-ax 4763
;  :datatype-occurs-check   2013
;  :datatype-splits         3371
;  :decisions               5306
;  :del-clause              7536
;  :final-checks            390
;  :interface-eqs           49
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          239
;  :mk-bool-var             14053
;  :mk-clause               7685
;  :num-allocs              7868140
;  :num-checks              449
;  :propagations            8644
;  :quant-instantiations    2254
;  :rlimit-count            427140)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31027
;  :arith-add-rows          1291
;  :arith-assert-diseq      2305
;  :arith-assert-lower      4473
;  :arith-assert-upper      2945
;  :arith-bound-prop        310
;  :arith-conflicts         78
;  :arith-eq-adapter        2446
;  :arith-fixed-eqs         1506
;  :arith-offset-eqs        517
;  :arith-pivots            733
;  :binary-propagations     11
;  :conflicts               898
;  :datatype-accessor-ax    1048
;  :datatype-constructor-ax 4818
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5366
;  :del-clause              7586
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14147
;  :mk-clause               7735
;  :num-allocs              7868140
;  :num-checks              450
;  :propagations            8687
;  :quant-instantiations    2258
;  :rlimit-count            429350
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    2)
  (- 0 1))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31106
;  :arith-add-rows          1310
;  :arith-assert-diseq      2337
;  :arith-assert-lower      4508
;  :arith-assert-upper      2971
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2472
;  :arith-fixed-eqs         1509
;  :arith-offset-eqs        517
;  :arith-pivots            741
;  :binary-propagations     11
;  :conflicts               914
;  :datatype-accessor-ax    1048
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7671
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14221
;  :mk-clause               7820
;  :num-allocs              7868140
;  :num-checks              451
;  :propagations            8758
;  :quant-instantiations    2267
;  :rlimit-count            430447
;  :time                    0.00)
; [then-branch: 128 | First:(Second:(Second:(Second:($t@72@06))))[2] < -1 | live]
; [else-branch: 128 | !(First:(Second:(Second:(Second:($t@72@06))))[2] < -1) | dead]
(push) ; 9
; [then-branch: 128 | First:(Second:(Second:(Second:($t@72@06))))[2] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    2)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_singleton (ite
          (<
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
              0)
            (- 0 1))
          (- 0 3)
          (-
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
              0)
            min_advance__39@74@06)))
        (Seq_singleton (ite
          (<
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
              1)
            (- 0 1))
          (- 0 3)
          (-
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
              1)
            min_advance__39@74@06))))
      (Seq_singleton (- 0 3))))
  3))
(declare-const __flatten_39__38@86@06 Seq<Int>)
(assert (Seq_equal
  __flatten_39__38@86@06
  (Seq_append
    (Seq_append
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
            0)
          (- 0 1))
        (- 0 3)
        (-
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
            0)
          min_advance__39@74@06)))
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
            1)
          (- 0 1))
        (- 0 3)
        (-
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
            1)
          min_advance__39@74@06))))
    (Seq_singleton (- 0 3)))))
; [exec]
; __flatten_38__37 := __flatten_39__38
; [exec]
; diz.Main_event_state := __flatten_38__37
; [exec]
; Main_wakeup_after_wait_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(set-option :timeout 0)
(push) ; 8
(assert (not (= (Seq_length __flatten_39__38@86@06) 3)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31115
;  :arith-add-rows          1314
;  :arith-assert-diseq      2337
;  :arith-assert-lower      4512
;  :arith-assert-upper      2974
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2477
;  :arith-fixed-eqs         1511
;  :arith-offset-eqs        518
;  :arith-pivots            743
;  :binary-propagations     11
;  :conflicts               915
;  :datatype-accessor-ax    1048
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7671
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14254
;  :mk-clause               7842
;  :num-allocs              7868140
;  :num-checks              452
;  :propagations            8763
;  :quant-instantiations    2271
;  :rlimit-count            431296)
(assert (= (Seq_length __flatten_39__38@86@06) 3))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@87@06 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 129 | 0 <= i@87@06 | live]
; [else-branch: 129 | !(0 <= i@87@06) | live]
(push) ; 10
; [then-branch: 129 | 0 <= i@87@06]
(assert (<= 0 i@87@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 129 | !(0 <= i@87@06)]
(assert (not (<= 0 i@87@06)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 130 | i@87@06 < |First:(Second:($t@72@06))| && 0 <= i@87@06 | live]
; [else-branch: 130 | !(i@87@06 < |First:(Second:($t@72@06))| && 0 <= i@87@06) | live]
(push) ; 10
; [then-branch: 130 | i@87@06 < |First:(Second:($t@72@06))| && 0 <= i@87@06]
(assert (and
  (<
    i@87@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
  (<= 0 i@87@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@87@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31116
;  :arith-add-rows          1314
;  :arith-assert-diseq      2337
;  :arith-assert-lower      4514
;  :arith-assert-upper      2976
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2478
;  :arith-fixed-eqs         1511
;  :arith-offset-eqs        518
;  :arith-pivots            743
;  :binary-propagations     11
;  :conflicts               915
;  :datatype-accessor-ax    1048
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7671
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14259
;  :mk-clause               7842
;  :num-allocs              7868140
;  :num-checks              453
;  :propagations            8763
;  :quant-instantiations    2271
;  :rlimit-count            431483)
; [eval] -1
(push) ; 11
; [then-branch: 131 | First:(Second:($t@72@06))[i@87@06] == -1 | live]
; [else-branch: 131 | First:(Second:($t@72@06))[i@87@06] != -1 | live]
(push) ; 12
; [then-branch: 131 | First:(Second:($t@72@06))[i@87@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@87@06)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 131 | First:(Second:($t@72@06))[i@87@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      i@87@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@87@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31120
;  :arith-add-rows          1314
;  :arith-assert-diseq      2339
;  :arith-assert-lower      4521
;  :arith-assert-upper      2979
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2481
;  :arith-fixed-eqs         1512
;  :arith-offset-eqs        518
;  :arith-pivots            744
;  :binary-propagations     11
;  :conflicts               915
;  :datatype-accessor-ax    1048
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7671
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14274
;  :mk-clause               7859
;  :num-allocs              7868140
;  :num-checks              454
;  :propagations            8770
;  :quant-instantiations    2274
;  :rlimit-count            431791)
(push) ; 13
; [then-branch: 132 | 0 <= First:(Second:($t@72@06))[i@87@06] | live]
; [else-branch: 132 | !(0 <= First:(Second:($t@72@06))[i@87@06]) | live]
(push) ; 14
; [then-branch: 132 | 0 <= First:(Second:($t@72@06))[i@87@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@87@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@87@06 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31120
;  :arith-add-rows          1314
;  :arith-assert-diseq      2339
;  :arith-assert-lower      4521
;  :arith-assert-upper      2979
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2481
;  :arith-fixed-eqs         1512
;  :arith-offset-eqs        518
;  :arith-pivots            744
;  :binary-propagations     11
;  :conflicts               915
;  :datatype-accessor-ax    1048
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7671
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14274
;  :mk-clause               7859
;  :num-allocs              7868140
;  :num-checks              455
;  :propagations            8770
;  :quant-instantiations    2274
;  :rlimit-count            431885)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 132 | !(0 <= First:(Second:($t@72@06))[i@87@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      i@87@06))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 130 | !(i@87@06 < |First:(Second:($t@72@06))| && 0 <= i@87@06)]
(assert (not
  (and
    (<
      i@87@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
    (<= 0 i@87@06))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@87@06 Int)) (!
  (implies
    (and
      (<
        i@87@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
      (<= 0 i@87@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          i@87@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@87@06)
          (Seq_length __flatten_39__38@86@06))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@87@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@87@06))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31120
;  :arith-add-rows          1314
;  :arith-assert-diseq      2340
;  :arith-assert-lower      4522
;  :arith-assert-upper      2980
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2482
;  :arith-fixed-eqs         1512
;  :arith-offset-eqs        518
;  :arith-pivots            745
;  :binary-propagations     11
;  :conflicts               916
;  :datatype-accessor-ax    1048
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7706
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14286
;  :mk-clause               7877
;  :num-allocs              7868140
;  :num-checks              456
;  :propagations            8772
;  :quant-instantiations    2277
;  :rlimit-count            432376)
(assert (forall ((i@87@06 Int)) (!
  (implies
    (and
      (<
        i@87@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
      (<= 0 i@87@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          i@87@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@87@06)
          (Seq_length __flatten_39__38@86@06))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@87@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@87@06))
  :qid |prog.l<no position>|)))
(declare-const $t@88@06 $Snap)
(assert (= $t@88@06 ($Snap.combine ($Snap.first $t@88@06) ($Snap.second $t@88@06))))
(assert (=
  ($Snap.second $t@88@06)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@88@06))
    ($Snap.second ($Snap.second $t@88@06)))))
(assert (=
  ($Snap.second ($Snap.second $t@88@06))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@88@06)))
    ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@88@06))) $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@88@06)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@89@06 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 133 | 0 <= i@89@06 | live]
; [else-branch: 133 | !(0 <= i@89@06) | live]
(push) ; 10
; [then-branch: 133 | 0 <= i@89@06]
(assert (<= 0 i@89@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 133 | !(0 <= i@89@06)]
(assert (not (<= 0 i@89@06)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 134 | i@89@06 < |First:(Second:($t@88@06))| && 0 <= i@89@06 | live]
; [else-branch: 134 | !(i@89@06 < |First:(Second:($t@88@06))| && 0 <= i@89@06) | live]
(push) ; 10
; [then-branch: 134 | i@89@06 < |First:(Second:($t@88@06))| && 0 <= i@89@06]
(assert (and
  (<
    i@89@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))))
  (<= 0 i@89@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@89@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31157
;  :arith-add-rows          1314
;  :arith-assert-diseq      2340
;  :arith-assert-lower      4527
;  :arith-assert-upper      2983
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2484
;  :arith-fixed-eqs         1512
;  :arith-offset-eqs        518
;  :arith-pivots            745
;  :binary-propagations     11
;  :conflicts               916
;  :datatype-accessor-ax    1054
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7706
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14308
;  :mk-clause               7877
;  :num-allocs              7868140
;  :num-checks              457
;  :propagations            8772
;  :quant-instantiations    2283
;  :rlimit-count            433816)
; [eval] -1
(push) ; 11
; [then-branch: 135 | First:(Second:($t@88@06))[i@89@06] == -1 | live]
; [else-branch: 135 | First:(Second:($t@88@06))[i@89@06] != -1 | live]
(push) ; 12
; [then-branch: 135 | First:(Second:($t@88@06))[i@89@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
    i@89@06)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 135 | First:(Second:($t@88@06))[i@89@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
      i@89@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@89@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31157
;  :arith-add-rows          1314
;  :arith-assert-diseq      2340
;  :arith-assert-lower      4527
;  :arith-assert-upper      2983
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2484
;  :arith-fixed-eqs         1512
;  :arith-offset-eqs        518
;  :arith-pivots            745
;  :binary-propagations     11
;  :conflicts               916
;  :datatype-accessor-ax    1054
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7706
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14309
;  :mk-clause               7877
;  :num-allocs              7868140
;  :num-checks              458
;  :propagations            8772
;  :quant-instantiations    2283
;  :rlimit-count            433967)
(push) ; 13
; [then-branch: 136 | 0 <= First:(Second:($t@88@06))[i@89@06] | live]
; [else-branch: 136 | !(0 <= First:(Second:($t@88@06))[i@89@06]) | live]
(push) ; 14
; [then-branch: 136 | 0 <= First:(Second:($t@88@06))[i@89@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
    i@89@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@89@06 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31157
;  :arith-add-rows          1314
;  :arith-assert-diseq      2341
;  :arith-assert-lower      4530
;  :arith-assert-upper      2983
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2485
;  :arith-fixed-eqs         1512
;  :arith-offset-eqs        518
;  :arith-pivots            745
;  :binary-propagations     11
;  :conflicts               916
;  :datatype-accessor-ax    1054
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7706
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14312
;  :mk-clause               7878
;  :num-allocs              7868140
;  :num-checks              459
;  :propagations            8772
;  :quant-instantiations    2283
;  :rlimit-count            434071)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 136 | !(0 <= First:(Second:($t@88@06))[i@89@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
      i@89@06))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 134 | !(i@89@06 < |First:(Second:($t@88@06))| && 0 <= i@89@06)]
(assert (not
  (and
    (<
      i@89@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))))
    (<= 0 i@89@06))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@89@06 Int)) (!
  (implies
    (and
      (<
        i@89@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))))
      (<= 0 i@89@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
          i@89@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
            i@89@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
            i@89@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
    i@89@06))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
  __flatten_39__38@86@06))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1) ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31177
;  :arith-add-rows          1314
;  :arith-assert-diseq      2341
;  :arith-assert-lower      4531
;  :arith-assert-upper      2984
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2487
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        518
;  :arith-pivots            745
;  :binary-propagations     11
;  :conflicts               916
;  :datatype-accessor-ax    1056
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7707
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14335
;  :mk-clause               7894
;  :num-allocs              7868140
;  :num-checks              460
;  :propagations            8778
;  :quant-instantiations    2285
;  :rlimit-count            435104)
(push) ; 8
; [then-branch: 137 | 0 <= First:(Second:($t@72@06))[0] | live]
; [else-branch: 137 | !(0 <= First:(Second:($t@72@06))[0]) | live]
(push) ; 9
; [then-branch: 137 | 0 <= First:(Second:($t@72@06))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31177
;  :arith-add-rows          1314
;  :arith-assert-diseq      2341
;  :arith-assert-lower      4531
;  :arith-assert-upper      2984
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2487
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        518
;  :arith-pivots            745
;  :binary-propagations     11
;  :conflicts               916
;  :datatype-accessor-ax    1056
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7707
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14335
;  :mk-clause               7894
;  :num-allocs              7868140
;  :num-checks              461
;  :propagations            8778
;  :quant-instantiations    2285
;  :rlimit-count            435204)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31177
;  :arith-add-rows          1314
;  :arith-assert-diseq      2341
;  :arith-assert-lower      4531
;  :arith-assert-upper      2984
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2487
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        518
;  :arith-pivots            745
;  :binary-propagations     11
;  :conflicts               916
;  :datatype-accessor-ax    1056
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7707
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14335
;  :mk-clause               7894
;  :num-allocs              7868140
;  :num-checks              462
;  :propagations            8778
;  :quant-instantiations    2285
;  :rlimit-count            435213)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  (Seq_length __flatten_39__38@86@06))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31177
;  :arith-add-rows          1314
;  :arith-assert-diseq      2341
;  :arith-assert-lower      4531
;  :arith-assert-upper      2984
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2487
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        518
;  :arith-pivots            745
;  :binary-propagations     11
;  :conflicts               917
;  :datatype-accessor-ax    1056
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7707
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14335
;  :mk-clause               7894
;  :num-allocs              7868140
;  :num-checks              463
;  :propagations            8778
;  :quant-instantiations    2285
;  :rlimit-count            435301)
(push) ; 10
; [then-branch: 138 | __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == 0 | live]
; [else-branch: 138 | __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] != 0 | live]
(push) ; 11
; [then-branch: 138 | __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@86@06
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 138 | __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@86@06
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31178
;  :arith-add-rows          1315
;  :arith-assert-diseq      2341
;  :arith-assert-lower      4531
;  :arith-assert-upper      2984
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2487
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        518
;  :arith-pivots            745
;  :binary-propagations     11
;  :conflicts               917
;  :datatype-accessor-ax    1056
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7707
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14340
;  :mk-clause               7899
;  :num-allocs              7868140
;  :num-checks              464
;  :propagations            8778
;  :quant-instantiations    2286
;  :rlimit-count            435516)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31178
;  :arith-add-rows          1315
;  :arith-assert-diseq      2341
;  :arith-assert-lower      4531
;  :arith-assert-upper      2984
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2487
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        518
;  :arith-pivots            745
;  :binary-propagations     11
;  :conflicts               917
;  :datatype-accessor-ax    1056
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7707
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14340
;  :mk-clause               7899
;  :num-allocs              7868140
;  :num-checks              465
;  :propagations            8778
;  :quant-instantiations    2286
;  :rlimit-count            435525)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  (Seq_length __flatten_39__38@86@06))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31178
;  :arith-add-rows          1315
;  :arith-assert-diseq      2341
;  :arith-assert-lower      4531
;  :arith-assert-upper      2984
;  :arith-bound-prop        314
;  :arith-conflicts         81
;  :arith-eq-adapter        2487
;  :arith-fixed-eqs         1513
;  :arith-offset-eqs        518
;  :arith-pivots            745
;  :binary-propagations     11
;  :conflicts               918
;  :datatype-accessor-ax    1056
;  :datatype-constructor-ax 4824
;  :datatype-occurs-check   2033
;  :datatype-splits         3402
;  :decisions               5386
;  :del-clause              7707
;  :final-checks            395
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.44
;  :memory                  5.35
;  :minimized-lits          240
;  :mk-bool-var             14340
;  :mk-clause               7899
;  :num-allocs              7868140
;  :num-checks              466
;  :propagations            8778
;  :quant-instantiations    2286
;  :rlimit-count            435613)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 137 | !(0 <= First:(Second:($t@72@06))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31781
;  :arith-add-rows          1358
;  :arith-assert-diseq      2391
;  :arith-assert-lower      4663
;  :arith-assert-upper      3066
;  :arith-bound-prop        336
;  :arith-conflicts         82
;  :arith-eq-adapter        2563
;  :arith-fixed-eqs         1554
;  :arith-offset-eqs        533
;  :arith-pivots            772
;  :binary-propagations     11
;  :conflicts               944
;  :datatype-accessor-ax    1066
;  :datatype-constructor-ax 4908
;  :datatype-occurs-check   2063
;  :datatype-splits         3444
;  :decisions               5502
;  :del-clause              8034
;  :final-checks            400
;  :interface-eqs           50
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          250
;  :mk-bool-var             14712
;  :mk-clause               8221
;  :num-allocs              8172812
;  :num-checks              467
;  :propagations            9005
;  :quant-instantiations    2373
;  :rlimit-count            441254
;  :time                    0.01)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_39__38@86@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0))
      0)
    (=
      (Seq_index
        __flatten_39__38@86@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32608
;  :arith-add-rows          1408
;  :arith-assert-diseq      2453
;  :arith-assert-lower      4796
;  :arith-assert-upper      3134
;  :arith-bound-prop        355
;  :arith-conflicts         83
;  :arith-eq-adapter        2635
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        561
;  :arith-pivots            792
;  :binary-propagations     11
;  :conflicts               962
;  :datatype-accessor-ax    1091
;  :datatype-constructor-ax 5052
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5667
;  :del-clause              8316
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          255
;  :mk-bool-var             15097
;  :mk-clause               8503
;  :num-allocs              8172812
;  :num-checks              468
;  :propagations            9225
;  :quant-instantiations    2431
;  :rlimit-count            447356
;  :time                    0.01)
; [then-branch: 139 | __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0] | live]
; [else-branch: 139 | !(__flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0]) | live]
(push) ; 9
; [then-branch: 139 | __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_39__38@86@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0))
      0)
    (=
      (Seq_index
        __flatten_39__38@86@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0))))
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32608
;  :arith-add-rows          1408
;  :arith-assert-diseq      2453
;  :arith-assert-lower      4796
;  :arith-assert-upper      3134
;  :arith-bound-prop        355
;  :arith-conflicts         83
;  :arith-eq-adapter        2635
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        561
;  :arith-pivots            792
;  :binary-propagations     11
;  :conflicts               962
;  :datatype-accessor-ax    1091
;  :datatype-constructor-ax 5052
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5667
;  :del-clause              8316
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          255
;  :mk-bool-var             15099
;  :mk-clause               8504
;  :num-allocs              8172812
;  :num-checks              469
;  :propagations            9225
;  :quant-instantiations    2431
;  :rlimit-count            447524)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 139 | !(__flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1) ==> diz.Main_process_state[1] == -1
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32614
;  :arith-add-rows          1408
;  :arith-assert-diseq      2453
;  :arith-assert-lower      4796
;  :arith-assert-upper      3134
;  :arith-bound-prop        355
;  :arith-conflicts         83
;  :arith-eq-adapter        2635
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        561
;  :arith-pivots            792
;  :binary-propagations     11
;  :conflicts               962
;  :datatype-accessor-ax    1092
;  :datatype-constructor-ax 5052
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5667
;  :del-clause              8317
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          255
;  :mk-bool-var             15105
;  :mk-clause               8508
;  :num-allocs              8172812
;  :num-checks              470
;  :propagations            9225
;  :quant-instantiations    2431
;  :rlimit-count            448007)
(push) ; 8
; [then-branch: 140 | 0 <= First:(Second:($t@72@06))[1] | live]
; [else-branch: 140 | !(0 <= First:(Second:($t@72@06))[1]) | live]
(push) ; 9
; [then-branch: 140 | 0 <= First:(Second:($t@72@06))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32614
;  :arith-add-rows          1408
;  :arith-assert-diseq      2453
;  :arith-assert-lower      4796
;  :arith-assert-upper      3134
;  :arith-bound-prop        355
;  :arith-conflicts         83
;  :arith-eq-adapter        2635
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        561
;  :arith-pivots            792
;  :binary-propagations     11
;  :conflicts               962
;  :datatype-accessor-ax    1092
;  :datatype-constructor-ax 5052
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5667
;  :del-clause              8317
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          255
;  :mk-bool-var             15105
;  :mk-clause               8508
;  :num-allocs              8172812
;  :num-checks              471
;  :propagations            9225
;  :quant-instantiations    2431
;  :rlimit-count            448107)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32614
;  :arith-add-rows          1408
;  :arith-assert-diseq      2453
;  :arith-assert-lower      4796
;  :arith-assert-upper      3134
;  :arith-bound-prop        355
;  :arith-conflicts         83
;  :arith-eq-adapter        2635
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        561
;  :arith-pivots            792
;  :binary-propagations     11
;  :conflicts               962
;  :datatype-accessor-ax    1092
;  :datatype-constructor-ax 5052
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5667
;  :del-clause              8317
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          255
;  :mk-bool-var             15105
;  :mk-clause               8508
;  :num-allocs              8172812
;  :num-checks              472
;  :propagations            9225
;  :quant-instantiations    2431
;  :rlimit-count            448116)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  (Seq_length __flatten_39__38@86@06))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32614
;  :arith-add-rows          1408
;  :arith-assert-diseq      2453
;  :arith-assert-lower      4796
;  :arith-assert-upper      3134
;  :arith-bound-prop        355
;  :arith-conflicts         83
;  :arith-eq-adapter        2635
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        561
;  :arith-pivots            792
;  :binary-propagations     11
;  :conflicts               963
;  :datatype-accessor-ax    1092
;  :datatype-constructor-ax 5052
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5667
;  :del-clause              8317
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          255
;  :mk-bool-var             15105
;  :mk-clause               8508
;  :num-allocs              8172812
;  :num-checks              473
;  :propagations            9225
;  :quant-instantiations    2431
;  :rlimit-count            448204)
(push) ; 10
; [then-branch: 141 | __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == 0 | live]
; [else-branch: 141 | __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] != 0 | live]
(push) ; 11
; [then-branch: 141 | __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@86@06
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 141 | __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@86@06
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32615
;  :arith-add-rows          1410
;  :arith-assert-diseq      2453
;  :arith-assert-lower      4796
;  :arith-assert-upper      3134
;  :arith-bound-prop        355
;  :arith-conflicts         83
;  :arith-eq-adapter        2635
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        561
;  :arith-pivots            792
;  :binary-propagations     11
;  :conflicts               963
;  :datatype-accessor-ax    1092
;  :datatype-constructor-ax 5052
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5667
;  :del-clause              8317
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          255
;  :mk-bool-var             15110
;  :mk-clause               8513
;  :num-allocs              8172812
;  :num-checks              474
;  :propagations            9225
;  :quant-instantiations    2432
;  :rlimit-count            448418)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32615
;  :arith-add-rows          1410
;  :arith-assert-diseq      2453
;  :arith-assert-lower      4796
;  :arith-assert-upper      3134
;  :arith-bound-prop        355
;  :arith-conflicts         83
;  :arith-eq-adapter        2635
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        561
;  :arith-pivots            792
;  :binary-propagations     11
;  :conflicts               963
;  :datatype-accessor-ax    1092
;  :datatype-constructor-ax 5052
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5667
;  :del-clause              8317
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          255
;  :mk-bool-var             15110
;  :mk-clause               8513
;  :num-allocs              8172812
;  :num-checks              475
;  :propagations            9225
;  :quant-instantiations    2432
;  :rlimit-count            448427)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  (Seq_length __flatten_39__38@86@06))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32615
;  :arith-add-rows          1410
;  :arith-assert-diseq      2453
;  :arith-assert-lower      4796
;  :arith-assert-upper      3134
;  :arith-bound-prop        355
;  :arith-conflicts         83
;  :arith-eq-adapter        2635
;  :arith-fixed-eqs         1598
;  :arith-offset-eqs        561
;  :arith-pivots            792
;  :binary-propagations     11
;  :conflicts               964
;  :datatype-accessor-ax    1092
;  :datatype-constructor-ax 5052
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5667
;  :del-clause              8317
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          255
;  :mk-bool-var             15110
;  :mk-clause               8513
;  :num-allocs              8172812
;  :num-checks              476
;  :propagations            9225
;  :quant-instantiations    2432
;  :rlimit-count            448515)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 140 | !(0 <= First:(Second:($t@72@06))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32782
;  :arith-add-rows          1454
;  :arith-assert-diseq      2489
;  :arith-assert-lower      4869
;  :arith-assert-upper      3174
;  :arith-bound-prop        372
;  :arith-conflicts         85
;  :arith-eq-adapter        2671
;  :arith-fixed-eqs         1610
;  :arith-offset-eqs        574
;  :arith-pivots            802
;  :binary-propagations     11
;  :conflicts               987
;  :datatype-accessor-ax    1092
;  :datatype-constructor-ax 5058
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5707
;  :del-clause              8530
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          263
;  :mk-bool-var             15320
;  :mk-clause               8721
;  :num-allocs              8172812
;  :num-checks              477
;  :propagations            9377
;  :quant-instantiations    2473
;  :rlimit-count            450869
;  :time                    0.00)
; [then-branch: 142 | __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1] | dead]
; [else-branch: 142 | !(__flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1]) | live]
(push) ; 9
; [else-branch: 142 | !(__flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32788
;  :arith-add-rows          1454
;  :arith-assert-diseq      2489
;  :arith-assert-lower      4869
;  :arith-assert-upper      3174
;  :arith-bound-prop        372
;  :arith-conflicts         85
;  :arith-eq-adapter        2671
;  :arith-fixed-eqs         1610
;  :arith-offset-eqs        574
;  :arith-pivots            802
;  :binary-propagations     11
;  :conflicts               987
;  :datatype-accessor-ax    1093
;  :datatype-constructor-ax 5058
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5707
;  :del-clause              8530
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          263
;  :mk-bool-var             15322
;  :mk-clause               8721
;  :num-allocs              8172812
;  :num-checks              478
;  :propagations            9377
;  :quant-instantiations    2473
;  :rlimit-count            451135)
(push) ; 8
; [then-branch: 143 | 0 <= First:(Second:($t@72@06))[0] | live]
; [else-branch: 143 | !(0 <= First:(Second:($t@72@06))[0]) | live]
(push) ; 9
; [then-branch: 143 | 0 <= First:(Second:($t@72@06))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32788
;  :arith-add-rows          1454
;  :arith-assert-diseq      2489
;  :arith-assert-lower      4869
;  :arith-assert-upper      3174
;  :arith-bound-prop        372
;  :arith-conflicts         85
;  :arith-eq-adapter        2671
;  :arith-fixed-eqs         1610
;  :arith-offset-eqs        574
;  :arith-pivots            802
;  :binary-propagations     11
;  :conflicts               987
;  :datatype-accessor-ax    1093
;  :datatype-constructor-ax 5058
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5707
;  :del-clause              8530
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          263
;  :mk-bool-var             15322
;  :mk-clause               8721
;  :num-allocs              8172812
;  :num-checks              479
;  :propagations            9377
;  :quant-instantiations    2473
;  :rlimit-count            451235)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32788
;  :arith-add-rows          1454
;  :arith-assert-diseq      2489
;  :arith-assert-lower      4869
;  :arith-assert-upper      3174
;  :arith-bound-prop        372
;  :arith-conflicts         85
;  :arith-eq-adapter        2671
;  :arith-fixed-eqs         1610
;  :arith-offset-eqs        574
;  :arith-pivots            802
;  :binary-propagations     11
;  :conflicts               987
;  :datatype-accessor-ax    1093
;  :datatype-constructor-ax 5058
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5707
;  :del-clause              8530
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          263
;  :mk-bool-var             15322
;  :mk-clause               8721
;  :num-allocs              8172812
;  :num-checks              480
;  :propagations            9377
;  :quant-instantiations    2473
;  :rlimit-count            451244)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  (Seq_length __flatten_39__38@86@06))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32788
;  :arith-add-rows          1454
;  :arith-assert-diseq      2489
;  :arith-assert-lower      4869
;  :arith-assert-upper      3174
;  :arith-bound-prop        372
;  :arith-conflicts         85
;  :arith-eq-adapter        2671
;  :arith-fixed-eqs         1610
;  :arith-offset-eqs        574
;  :arith-pivots            802
;  :binary-propagations     11
;  :conflicts               988
;  :datatype-accessor-ax    1093
;  :datatype-constructor-ax 5058
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5707
;  :del-clause              8530
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          263
;  :mk-bool-var             15322
;  :mk-clause               8721
;  :num-allocs              8172812
;  :num-checks              481
;  :propagations            9377
;  :quant-instantiations    2473
;  :rlimit-count            451332)
(push) ; 10
; [then-branch: 144 | __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == 0 | live]
; [else-branch: 144 | __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] != 0 | live]
(push) ; 11
; [then-branch: 144 | __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@86@06
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 144 | __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@86@06
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32789
;  :arith-add-rows          1456
;  :arith-assert-diseq      2489
;  :arith-assert-lower      4869
;  :arith-assert-upper      3174
;  :arith-bound-prop        372
;  :arith-conflicts         85
;  :arith-eq-adapter        2671
;  :arith-fixed-eqs         1610
;  :arith-offset-eqs        574
;  :arith-pivots            802
;  :binary-propagations     11
;  :conflicts               988
;  :datatype-accessor-ax    1093
;  :datatype-constructor-ax 5058
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5707
;  :del-clause              8530
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          263
;  :mk-bool-var             15326
;  :mk-clause               8726
;  :num-allocs              8172812
;  :num-checks              482
;  :propagations            9377
;  :quant-instantiations    2474
;  :rlimit-count            451518)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32789
;  :arith-add-rows          1456
;  :arith-assert-diseq      2489
;  :arith-assert-lower      4869
;  :arith-assert-upper      3174
;  :arith-bound-prop        372
;  :arith-conflicts         85
;  :arith-eq-adapter        2671
;  :arith-fixed-eqs         1610
;  :arith-offset-eqs        574
;  :arith-pivots            802
;  :binary-propagations     11
;  :conflicts               988
;  :datatype-accessor-ax    1093
;  :datatype-constructor-ax 5058
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5707
;  :del-clause              8530
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          263
;  :mk-bool-var             15326
;  :mk-clause               8726
;  :num-allocs              8172812
;  :num-checks              483
;  :propagations            9377
;  :quant-instantiations    2474
;  :rlimit-count            451527)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  (Seq_length __flatten_39__38@86@06))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32789
;  :arith-add-rows          1456
;  :arith-assert-diseq      2489
;  :arith-assert-lower      4869
;  :arith-assert-upper      3174
;  :arith-bound-prop        372
;  :arith-conflicts         85
;  :arith-eq-adapter        2671
;  :arith-fixed-eqs         1610
;  :arith-offset-eqs        574
;  :arith-pivots            802
;  :binary-propagations     11
;  :conflicts               989
;  :datatype-accessor-ax    1093
;  :datatype-constructor-ax 5058
;  :datatype-occurs-check   2127
;  :datatype-splits         3553
;  :decisions               5707
;  :del-clause              8530
;  :final-checks            411
;  :interface-eqs           53
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          263
;  :mk-bool-var             15326
;  :mk-clause               8726
;  :num-allocs              8172812
;  :num-checks              484
;  :propagations            9377
;  :quant-instantiations    2474
;  :rlimit-count            451615)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 143 | !(0 <= First:(Second:($t@72@06))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_39__38@86@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0))
      0)
    (=
      (Seq_index
        __flatten_39__38@86@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.37s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               33632
;  :arith-add-rows          1503
;  :arith-assert-diseq      2551
;  :arith-assert-lower      5002
;  :arith-assert-upper      3242
;  :arith-bound-prop        391
;  :arith-conflicts         86
;  :arith-eq-adapter        2743
;  :arith-fixed-eqs         1654
;  :arith-offset-eqs        603
;  :arith-pivots            821
;  :binary-propagations     11
;  :conflicts               1007
;  :datatype-accessor-ax    1118
;  :datatype-constructor-ax 5202
;  :datatype-occurs-check   2191
;  :datatype-splits         3662
;  :decisions               5872
;  :del-clause              8817
;  :final-checks            422
;  :interface-eqs           56
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          268
;  :mk-bool-var             15708
;  :mk-clause               9008
;  :num-allocs              8172812
;  :num-checks              485
;  :propagations            9597
;  :quant-instantiations    2532
;  :rlimit-count            457672
;  :time                    0.02)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34244
;  :arith-add-rows          1564
;  :arith-assert-diseq      2603
;  :arith-assert-lower      5132
;  :arith-assert-upper      3328
;  :arith-bound-prop        409
;  :arith-conflicts         89
;  :arith-eq-adapter        2816
;  :arith-fixed-eqs         1693
;  :arith-offset-eqs        619
;  :arith-pivots            847
;  :binary-propagations     11
;  :conflicts               1035
;  :datatype-accessor-ax    1128
;  :datatype-constructor-ax 5283
;  :datatype-occurs-check   2221
;  :datatype-splits         3703
;  :decisions               5990
;  :del-clause              9123
;  :final-checks            428
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          277
;  :mk-bool-var             16072
;  :mk-clause               9314
;  :num-allocs              8172812
;  :num-checks              486
;  :propagations            9836
;  :quant-instantiations    2618
;  :rlimit-count            463548
;  :time                    0.00)
; [then-branch: 145 | !(__flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0]) | live]
; [else-branch: 145 | __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0] | live]
(push) ; 9
; [then-branch: 145 | !(__flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        0)
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34245
;  :arith-add-rows          1566
;  :arith-assert-diseq      2603
;  :arith-assert-lower      5132
;  :arith-assert-upper      3328
;  :arith-bound-prop        409
;  :arith-conflicts         89
;  :arith-eq-adapter        2816
;  :arith-fixed-eqs         1693
;  :arith-offset-eqs        619
;  :arith-pivots            847
;  :binary-propagations     11
;  :conflicts               1035
;  :datatype-accessor-ax    1128
;  :datatype-constructor-ax 5283
;  :datatype-occurs-check   2221
;  :datatype-splits         3703
;  :decisions               5990
;  :del-clause              9123
;  :final-checks            428
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          277
;  :mk-bool-var             16076
;  :mk-clause               9319
;  :num-allocs              8172812
;  :num-checks              487
;  :propagations            9838
;  :quant-instantiations    2619
;  :rlimit-count            463764)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34245
;  :arith-add-rows          1566
;  :arith-assert-diseq      2603
;  :arith-assert-lower      5132
;  :arith-assert-upper      3328
;  :arith-bound-prop        409
;  :arith-conflicts         89
;  :arith-eq-adapter        2816
;  :arith-fixed-eqs         1693
;  :arith-offset-eqs        619
;  :arith-pivots            847
;  :binary-propagations     11
;  :conflicts               1035
;  :datatype-accessor-ax    1128
;  :datatype-constructor-ax 5283
;  :datatype-occurs-check   2221
;  :datatype-splits         3703
;  :decisions               5990
;  :del-clause              9123
;  :final-checks            428
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          277
;  :mk-bool-var             16076
;  :mk-clause               9319
;  :num-allocs              8172812
;  :num-checks              488
;  :propagations            9838
;  :quant-instantiations    2619
;  :rlimit-count            463779)
(pop) ; 9
(push) ; 9
; [else-branch: 145 | __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[0]] == -1 && 0 <= First:(Second:($t@72@06))[0]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_39__38@86@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0))
      0)
    (=
      (Seq_index
        __flatten_39__38@86@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_39__38@86@06
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
              0))
          0)
        (=
          (Seq_index
            __flatten_39__38@86@06
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
              0))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@06))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)) ==> diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34252
;  :arith-add-rows          1566
;  :arith-assert-diseq      2603
;  :arith-assert-lower      5132
;  :arith-assert-upper      3328
;  :arith-bound-prop        409
;  :arith-conflicts         89
;  :arith-eq-adapter        2816
;  :arith-fixed-eqs         1693
;  :arith-offset-eqs        619
;  :arith-pivots            847
;  :binary-propagations     11
;  :conflicts               1035
;  :datatype-accessor-ax    1128
;  :datatype-constructor-ax 5283
;  :datatype-occurs-check   2221
;  :datatype-splits         3703
;  :decisions               5990
;  :del-clause              9128
;  :final-checks            428
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          277
;  :mk-bool-var             16079
;  :mk-clause               9322
;  :num-allocs              8172812
;  :num-checks              489
;  :propagations            9838
;  :quant-instantiations    2619
;  :rlimit-count            464169)
(push) ; 8
; [then-branch: 146 | 0 <= First:(Second:($t@72@06))[1] | live]
; [else-branch: 146 | !(0 <= First:(Second:($t@72@06))[1]) | live]
(push) ; 9
; [then-branch: 146 | 0 <= First:(Second:($t@72@06))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34252
;  :arith-add-rows          1566
;  :arith-assert-diseq      2603
;  :arith-assert-lower      5132
;  :arith-assert-upper      3328
;  :arith-bound-prop        409
;  :arith-conflicts         89
;  :arith-eq-adapter        2816
;  :arith-fixed-eqs         1693
;  :arith-offset-eqs        619
;  :arith-pivots            847
;  :binary-propagations     11
;  :conflicts               1035
;  :datatype-accessor-ax    1128
;  :datatype-constructor-ax 5283
;  :datatype-occurs-check   2221
;  :datatype-splits         3703
;  :decisions               5990
;  :del-clause              9128
;  :final-checks            428
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          277
;  :mk-bool-var             16079
;  :mk-clause               9322
;  :num-allocs              8172812
;  :num-checks              490
;  :propagations            9838
;  :quant-instantiations    2619
;  :rlimit-count            464269)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34252
;  :arith-add-rows          1566
;  :arith-assert-diseq      2603
;  :arith-assert-lower      5132
;  :arith-assert-upper      3328
;  :arith-bound-prop        409
;  :arith-conflicts         89
;  :arith-eq-adapter        2816
;  :arith-fixed-eqs         1693
;  :arith-offset-eqs        619
;  :arith-pivots            847
;  :binary-propagations     11
;  :conflicts               1035
;  :datatype-accessor-ax    1128
;  :datatype-constructor-ax 5283
;  :datatype-occurs-check   2221
;  :datatype-splits         3703
;  :decisions               5990
;  :del-clause              9128
;  :final-checks            428
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          277
;  :mk-bool-var             16079
;  :mk-clause               9322
;  :num-allocs              8172812
;  :num-checks              491
;  :propagations            9838
;  :quant-instantiations    2619
;  :rlimit-count            464278)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  (Seq_length __flatten_39__38@86@06))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34252
;  :arith-add-rows          1566
;  :arith-assert-diseq      2603
;  :arith-assert-lower      5132
;  :arith-assert-upper      3328
;  :arith-bound-prop        409
;  :arith-conflicts         89
;  :arith-eq-adapter        2816
;  :arith-fixed-eqs         1693
;  :arith-offset-eqs        619
;  :arith-pivots            847
;  :binary-propagations     11
;  :conflicts               1036
;  :datatype-accessor-ax    1128
;  :datatype-constructor-ax 5283
;  :datatype-occurs-check   2221
;  :datatype-splits         3703
;  :decisions               5990
;  :del-clause              9128
;  :final-checks            428
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          277
;  :mk-bool-var             16079
;  :mk-clause               9322
;  :num-allocs              8172812
;  :num-checks              492
;  :propagations            9838
;  :quant-instantiations    2619
;  :rlimit-count            464366)
(push) ; 10
; [then-branch: 147 | __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == 0 | live]
; [else-branch: 147 | __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] != 0 | live]
(push) ; 11
; [then-branch: 147 | __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == 0]
(assert (=
  (Seq_index
    __flatten_39__38@86@06
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 147 | __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_39__38@86@06
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34253
;  :arith-add-rows          1568
;  :arith-assert-diseq      2603
;  :arith-assert-lower      5132
;  :arith-assert-upper      3328
;  :arith-bound-prop        409
;  :arith-conflicts         89
;  :arith-eq-adapter        2816
;  :arith-fixed-eqs         1693
;  :arith-offset-eqs        619
;  :arith-pivots            847
;  :binary-propagations     11
;  :conflicts               1036
;  :datatype-accessor-ax    1128
;  :datatype-constructor-ax 5283
;  :datatype-occurs-check   2221
;  :datatype-splits         3703
;  :decisions               5990
;  :del-clause              9128
;  :final-checks            428
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          277
;  :mk-bool-var             16084
;  :mk-clause               9327
;  :num-allocs              8172812
;  :num-checks              493
;  :propagations            9838
;  :quant-instantiations    2620
;  :rlimit-count            464552)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34253
;  :arith-add-rows          1568
;  :arith-assert-diseq      2603
;  :arith-assert-lower      5132
;  :arith-assert-upper      3328
;  :arith-bound-prop        409
;  :arith-conflicts         89
;  :arith-eq-adapter        2816
;  :arith-fixed-eqs         1693
;  :arith-offset-eqs        619
;  :arith-pivots            847
;  :binary-propagations     11
;  :conflicts               1036
;  :datatype-accessor-ax    1128
;  :datatype-constructor-ax 5283
;  :datatype-occurs-check   2221
;  :datatype-splits         3703
;  :decisions               5990
;  :del-clause              9128
;  :final-checks            428
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          277
;  :mk-bool-var             16084
;  :mk-clause               9327
;  :num-allocs              8172812
;  :num-checks              494
;  :propagations            9838
;  :quant-instantiations    2620
;  :rlimit-count            464561)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  (Seq_length __flatten_39__38@86@06))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34253
;  :arith-add-rows          1568
;  :arith-assert-diseq      2603
;  :arith-assert-lower      5132
;  :arith-assert-upper      3328
;  :arith-bound-prop        409
;  :arith-conflicts         89
;  :arith-eq-adapter        2816
;  :arith-fixed-eqs         1693
;  :arith-offset-eqs        619
;  :arith-pivots            847
;  :binary-propagations     11
;  :conflicts               1037
;  :datatype-accessor-ax    1128
;  :datatype-constructor-ax 5283
;  :datatype-occurs-check   2221
;  :datatype-splits         3703
;  :decisions               5990
;  :del-clause              9128
;  :final-checks            428
;  :interface-eqs           57
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          277
;  :mk-bool-var             16084
;  :mk-clause               9327
;  :num-allocs              8172812
;  :num-checks              495
;  :propagations            9838
;  :quant-instantiations    2620
;  :rlimit-count            464649)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 146 | !(0 <= First:(Second:($t@72@06))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_39__38@86@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1))
      0)
    (=
      (Seq_index
        __flatten_39__38@86@06
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               35362
;  :arith-add-rows          1636
;  :arith-assert-diseq      2695
;  :arith-assert-lower      5349
;  :arith-assert-upper      3425
;  :arith-bound-prop        426
;  :arith-conflicts         93
;  :arith-eq-adapter        2930
;  :arith-fixed-eqs         1761
;  :arith-offset-eqs        659
;  :arith-pivots            876
;  :binary-propagations     11
;  :conflicts               1067
;  :datatype-accessor-ax    1159
;  :datatype-constructor-ax 5449
;  :datatype-occurs-check   2289
;  :datatype-splits         3820
;  :decisions               6190
;  :del-clause              9550
;  :final-checks            438
;  :interface-eqs           59
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          285
;  :mk-bool-var             16678
;  :mk-clause               9744
;  :num-allocs              8172812
;  :num-checks              496
;  :propagations            10168
;  :quant-instantiations    2741
;  :rlimit-count            472966
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               35676
;  :arith-add-rows          1705
;  :arith-assert-diseq      2755
;  :arith-assert-lower      5477
;  :arith-assert-upper      3484
;  :arith-bound-prop        443
;  :arith-conflicts         98
;  :arith-eq-adapter        3023
;  :arith-fixed-eqs         1790
;  :arith-offset-eqs        676
;  :arith-pivots            887
;  :binary-propagations     11
;  :conflicts               1101
;  :datatype-accessor-ax    1159
;  :datatype-constructor-ax 5455
;  :datatype-occurs-check   2289
;  :datatype-splits         3820
;  :decisions               6250
;  :del-clause              10182
;  :final-checks            438
;  :interface-eqs           59
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          296
;  :mk-bool-var             17222
;  :mk-clause               10376
;  :num-allocs              8172812
;  :num-checks              497
;  :propagations            10427
;  :quant-instantiations    2845
;  :rlimit-count            476961
;  :time                    0.00)
; [then-branch: 148 | !(__flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1]) | live]
; [else-branch: 148 | __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1] | dead]
(push) ; 9
; [then-branch: 148 | !(__flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == 0 || __flatten_39__38@86@06[First:(Second:($t@72@06))[1]] == -1 && 0 <= First:(Second:($t@72@06))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        0)
      (=
        (Seq_index
          __flatten_39__38@86@06
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)))))
; [eval] diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               35677
;  :arith-add-rows          1707
;  :arith-assert-diseq      2755
;  :arith-assert-lower      5477
;  :arith-assert-upper      3484
;  :arith-bound-prop        443
;  :arith-conflicts         98
;  :arith-eq-adapter        3023
;  :arith-fixed-eqs         1790
;  :arith-offset-eqs        676
;  :arith-pivots            887
;  :binary-propagations     11
;  :conflicts               1101
;  :datatype-accessor-ax    1159
;  :datatype-constructor-ax 5455
;  :datatype-occurs-check   2289
;  :datatype-splits         3820
;  :decisions               6250
;  :del-clause              10182
;  :final-checks            438
;  :interface-eqs           59
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          296
;  :mk-bool-var             17229
;  :mk-clause               10384
;  :num-allocs              8172812
;  :num-checks              498
;  :propagations            10429
;  :quant-instantiations    2846
;  :rlimit-count            477199)
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               35677
;  :arith-add-rows          1707
;  :arith-assert-diseq      2755
;  :arith-assert-lower      5477
;  :arith-assert-upper      3484
;  :arith-bound-prop        443
;  :arith-conflicts         98
;  :arith-eq-adapter        3023
;  :arith-fixed-eqs         1790
;  :arith-offset-eqs        676
;  :arith-pivots            887
;  :binary-propagations     11
;  :conflicts               1101
;  :datatype-accessor-ax    1159
;  :datatype-constructor-ax 5455
;  :datatype-occurs-check   2289
;  :datatype-splits         3820
;  :decisions               6250
;  :del-clause              10182
;  :final-checks            438
;  :interface-eqs           59
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          296
;  :mk-bool-var             17229
;  :mk-clause               10384
;  :num-allocs              8172812
;  :num-checks              499
;  :propagations            10429
;  :quant-instantiations    2846
;  :rlimit-count            477214)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_39__38@86@06
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
              1))
          0)
        (=
          (Seq_index
            __flatten_39__38@86@06
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
              1))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Main_reset_all_events_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@90@06 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 149 | 0 <= i@90@06 | live]
; [else-branch: 149 | !(0 <= i@90@06) | live]
(push) ; 10
; [then-branch: 149 | 0 <= i@90@06]
(assert (<= 0 i@90@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 149 | !(0 <= i@90@06)]
(assert (not (<= 0 i@90@06)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 150 | i@90@06 < |First:(Second:($t@88@06))| && 0 <= i@90@06 | live]
; [else-branch: 150 | !(i@90@06 < |First:(Second:($t@88@06))| && 0 <= i@90@06) | live]
(push) ; 10
; [then-branch: 150 | i@90@06 < |First:(Second:($t@88@06))| && 0 <= i@90@06]
(assert (and
  (<
    i@90@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))))
  (<= 0 i@90@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@90@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36854
;  :arith-add-rows          1771
;  :arith-assert-diseq      2864
;  :arith-assert-lower      5761
;  :arith-assert-upper      3599
;  :arith-bound-prop        457
;  :arith-conflicts         104
;  :arith-eq-adapter        3147
;  :arith-fixed-eqs         1870
;  :arith-offset-eqs        716
;  :arith-pivots            915
;  :binary-propagations     11
;  :conflicts               1136
;  :datatype-accessor-ax    1190
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2357
;  :datatype-splits         3937
;  :decisions               6460
;  :del-clause              10612
;  :final-checks            448
;  :interface-eqs           61
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          313
;  :mk-bool-var             17888
;  :mk-clause               10883
;  :num-allocs              8172812
;  :num-checks              501
;  :propagations            10895
;  :quant-instantiations    2997
;  :rlimit-count            486419)
; [eval] -1
(push) ; 11
; [then-branch: 151 | First:(Second:($t@88@06))[i@90@06] == -1 | live]
; [else-branch: 151 | First:(Second:($t@88@06))[i@90@06] != -1 | live]
(push) ; 12
; [then-branch: 151 | First:(Second:($t@88@06))[i@90@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
    i@90@06)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 151 | First:(Second:($t@88@06))[i@90@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
      i@90@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@90@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36854
;  :arith-add-rows          1771
;  :arith-assert-diseq      2865
;  :arith-assert-lower      5764
;  :arith-assert-upper      3600
;  :arith-bound-prop        457
;  :arith-conflicts         104
;  :arith-eq-adapter        3148
;  :arith-fixed-eqs         1870
;  :arith-offset-eqs        716
;  :arith-pivots            915
;  :binary-propagations     11
;  :conflicts               1136
;  :datatype-accessor-ax    1190
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2357
;  :datatype-splits         3937
;  :decisions               6460
;  :del-clause              10612
;  :final-checks            448
;  :interface-eqs           61
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          313
;  :mk-bool-var             17894
;  :mk-clause               10887
;  :num-allocs              8172812
;  :num-checks              502
;  :propagations            10897
;  :quant-instantiations    2998
;  :rlimit-count            486627)
(push) ; 13
; [then-branch: 152 | 0 <= First:(Second:($t@88@06))[i@90@06] | live]
; [else-branch: 152 | !(0 <= First:(Second:($t@88@06))[i@90@06]) | live]
(push) ; 14
; [then-branch: 152 | 0 <= First:(Second:($t@88@06))[i@90@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
    i@90@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@90@06 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36854
;  :arith-add-rows          1771
;  :arith-assert-diseq      2865
;  :arith-assert-lower      5764
;  :arith-assert-upper      3600
;  :arith-bound-prop        457
;  :arith-conflicts         104
;  :arith-eq-adapter        3148
;  :arith-fixed-eqs         1870
;  :arith-offset-eqs        716
;  :arith-pivots            915
;  :binary-propagations     11
;  :conflicts               1136
;  :datatype-accessor-ax    1190
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2357
;  :datatype-splits         3937
;  :decisions               6460
;  :del-clause              10612
;  :final-checks            448
;  :interface-eqs           61
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          313
;  :mk-bool-var             17894
;  :mk-clause               10887
;  :num-allocs              8172812
;  :num-checks              503
;  :propagations            10897
;  :quant-instantiations    2998
;  :rlimit-count            486721)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 152 | !(0 <= First:(Second:($t@88@06))[i@90@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
      i@90@06))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 150 | !(i@90@06 < |First:(Second:($t@88@06))| && 0 <= i@90@06)]
(assert (not
  (and
    (<
      i@90@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))))
    (<= 0 i@90@06))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@90@06 Int)) (!
  (implies
    (and
      (<
        i@90@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))))
      (<= 0 i@90@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
          i@90@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
            i@90@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
            i@90@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
    i@90@06))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36854
;  :arith-add-rows          1771
;  :arith-assert-diseq      2866
;  :arith-assert-lower      5765
;  :arith-assert-upper      3601
;  :arith-bound-prop        457
;  :arith-conflicts         104
;  :arith-eq-adapter        3149
;  :arith-fixed-eqs         1870
;  :arith-offset-eqs        716
;  :arith-pivots            915
;  :binary-propagations     11
;  :conflicts               1137
;  :datatype-accessor-ax    1190
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2357
;  :datatype-splits         3937
;  :decisions               6460
;  :del-clause              10628
;  :final-checks            448
;  :interface-eqs           61
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          313
;  :mk-bool-var             17902
;  :mk-clause               10899
;  :num-allocs              8172812
;  :num-checks              504
;  :propagations            10899
;  :quant-instantiations    2999
;  :rlimit-count            487143)
(assert (forall ((i@90@06 Int)) (!
  (implies
    (and
      (<
        i@90@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))))
      (<= 0 i@90@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
          i@90@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
            i@90@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
            i@90@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))
    i@90@06))
  :qid |prog.l<no position>|)))
(declare-const $t@91@06 $Snap)
(assert (= $t@91@06 ($Snap.combine ($Snap.first $t@91@06) ($Snap.second $t@91@06))))
(assert (=
  ($Snap.second $t@91@06)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@91@06))
    ($Snap.second ($Snap.second $t@91@06)))))
(assert (=
  ($Snap.second ($Snap.second $t@91@06))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@91@06)))
    ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@91@06))) $Snap.unit))
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@91@06)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@92@06 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 153 | 0 <= i@92@06 | live]
; [else-branch: 153 | !(0 <= i@92@06) | live]
(push) ; 10
; [then-branch: 153 | 0 <= i@92@06]
(assert (<= 0 i@92@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 153 | !(0 <= i@92@06)]
(assert (not (<= 0 i@92@06)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 154 | i@92@06 < |First:(Second:($t@91@06))| && 0 <= i@92@06 | live]
; [else-branch: 154 | !(i@92@06 < |First:(Second:($t@91@06))| && 0 <= i@92@06) | live]
(push) ; 10
; [then-branch: 154 | i@92@06 < |First:(Second:($t@91@06))| && 0 <= i@92@06]
(assert (and
  (<
    i@92@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))))
  (<= 0 i@92@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@92@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36891
;  :arith-add-rows          1771
;  :arith-assert-diseq      2866
;  :arith-assert-lower      5770
;  :arith-assert-upper      3604
;  :arith-bound-prop        457
;  :arith-conflicts         104
;  :arith-eq-adapter        3151
;  :arith-fixed-eqs         1870
;  :arith-offset-eqs        716
;  :arith-pivots            915
;  :binary-propagations     11
;  :conflicts               1137
;  :datatype-accessor-ax    1196
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2357
;  :datatype-splits         3937
;  :decisions               6460
;  :del-clause              10628
;  :final-checks            448
;  :interface-eqs           61
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          313
;  :mk-bool-var             17924
;  :mk-clause               10899
;  :num-allocs              8172812
;  :num-checks              505
;  :propagations            10899
;  :quant-instantiations    3003
;  :rlimit-count            488531)
; [eval] -1
(push) ; 11
; [then-branch: 155 | First:(Second:($t@91@06))[i@92@06] == -1 | live]
; [else-branch: 155 | First:(Second:($t@91@06))[i@92@06] != -1 | live]
(push) ; 12
; [then-branch: 155 | First:(Second:($t@91@06))[i@92@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
    i@92@06)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 155 | First:(Second:($t@91@06))[i@92@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      i@92@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@92@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36891
;  :arith-add-rows          1771
;  :arith-assert-diseq      2866
;  :arith-assert-lower      5770
;  :arith-assert-upper      3604
;  :arith-bound-prop        457
;  :arith-conflicts         104
;  :arith-eq-adapter        3151
;  :arith-fixed-eqs         1870
;  :arith-offset-eqs        716
;  :arith-pivots            915
;  :binary-propagations     11
;  :conflicts               1137
;  :datatype-accessor-ax    1196
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2357
;  :datatype-splits         3937
;  :decisions               6460
;  :del-clause              10628
;  :final-checks            448
;  :interface-eqs           61
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          313
;  :mk-bool-var             17925
;  :mk-clause               10899
;  :num-allocs              8172812
;  :num-checks              506
;  :propagations            10899
;  :quant-instantiations    3003
;  :rlimit-count            488682)
(push) ; 13
; [then-branch: 156 | 0 <= First:(Second:($t@91@06))[i@92@06] | live]
; [else-branch: 156 | !(0 <= First:(Second:($t@91@06))[i@92@06]) | live]
(push) ; 14
; [then-branch: 156 | 0 <= First:(Second:($t@91@06))[i@92@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
    i@92@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@92@06 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36891
;  :arith-add-rows          1771
;  :arith-assert-diseq      2867
;  :arith-assert-lower      5773
;  :arith-assert-upper      3604
;  :arith-bound-prop        457
;  :arith-conflicts         104
;  :arith-eq-adapter        3152
;  :arith-fixed-eqs         1870
;  :arith-offset-eqs        716
;  :arith-pivots            915
;  :binary-propagations     11
;  :conflicts               1137
;  :datatype-accessor-ax    1196
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2357
;  :datatype-splits         3937
;  :decisions               6460
;  :del-clause              10628
;  :final-checks            448
;  :interface-eqs           61
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          313
;  :mk-bool-var             17928
;  :mk-clause               10900
;  :num-allocs              8172812
;  :num-checks              507
;  :propagations            10899
;  :quant-instantiations    3003
;  :rlimit-count            488786)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 156 | !(0 <= First:(Second:($t@91@06))[i@92@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      i@92@06))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 154 | !(i@92@06 < |First:(Second:($t@91@06))| && 0 <= i@92@06)]
(assert (not
  (and
    (<
      i@92@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))))
    (<= 0 i@92@06))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@92@06 Int)) (!
  (implies
    (and
      (<
        i@92@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))))
      (<= 0 i@92@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
          i@92@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
            i@92@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
            i@92@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
    i@92@06))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@88@06)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36908
;  :arith-add-rows          1771
;  :arith-assert-diseq      2867
;  :arith-assert-lower      5774
;  :arith-assert-upper      3605
;  :arith-bound-prop        457
;  :arith-conflicts         104
;  :arith-eq-adapter        3153
;  :arith-fixed-eqs         1871
;  :arith-offset-eqs        716
;  :arith-pivots            915
;  :binary-propagations     11
;  :conflicts               1137
;  :datatype-accessor-ax    1198
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2357
;  :datatype-splits         3937
;  :decisions               6460
;  :del-clause              10629
;  :final-checks            448
;  :interface-eqs           61
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          313
;  :mk-bool-var             17947
;  :mk-clause               10911
;  :num-allocs              8172812
;  :num-checks              508
;  :propagations            10903
;  :quant-instantiations    3005
;  :rlimit-count            489800)
(push) ; 8
; [then-branch: 157 | First:(Second:(Second:(Second:($t@88@06))))[0] == 0 | live]
; [else-branch: 157 | First:(Second:(Second:(Second:($t@88@06))))[0] != 0 | live]
(push) ; 9
; [then-branch: 157 | First:(Second:(Second:(Second:($t@88@06))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
    0)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 157 | First:(Second:(Second:(Second:($t@88@06))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36911
;  :arith-add-rows          1771
;  :arith-assert-diseq      2867
;  :arith-assert-lower      5774
;  :arith-assert-upper      3605
;  :arith-bound-prop        457
;  :arith-conflicts         104
;  :arith-eq-adapter        3153
;  :arith-fixed-eqs         1871
;  :arith-offset-eqs        716
;  :arith-pivots            915
;  :binary-propagations     11
;  :conflicts               1137
;  :datatype-accessor-ax    1198
;  :datatype-constructor-ax 5621
;  :datatype-occurs-check   2357
;  :datatype-splits         3937
;  :decisions               6460
;  :del-clause              10629
;  :final-checks            448
;  :interface-eqs           61
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          313
;  :mk-bool-var             17948
;  :mk-clause               10912
;  :num-allocs              8172812
;  :num-checks              509
;  :propagations            10903
;  :quant-instantiations    3007
;  :rlimit-count            490053)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               37459
;  :arith-add-rows          1787
;  :arith-assert-diseq      2902
;  :arith-assert-lower      5840
;  :arith-assert-upper      3643
;  :arith-bound-prop        464
;  :arith-conflicts         105
;  :arith-eq-adapter        3172
;  :arith-fixed-eqs         1892
;  :arith-offset-eqs        726
;  :arith-pivots            926
;  :binary-propagations     11
;  :conflicts               1149
;  :datatype-accessor-ax    1221
;  :datatype-constructor-ax 5724
;  :datatype-occurs-check   2404
;  :datatype-splits         3990
;  :decisions               6560
;  :del-clause              10716
;  :final-checks            454
;  :interface-eqs           62
;  :max-generation          4
;  :max-memory              5.45
;  :memory                  5.45
;  :minimized-lits          316
;  :mk-bool-var             18100
;  :mk-clause               10998
;  :num-allocs              8172812
;  :num-checks              510
;  :propagations            11036
;  :quant-instantiations    3033
;  :rlimit-count            493943
;  :time                    0.00)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               37863
;  :arith-add-rows          1792
;  :arith-assert-diseq      2927
;  :arith-assert-lower      5890
;  :arith-assert-upper      3670
;  :arith-bound-prop        470
;  :arith-conflicts         105
;  :arith-eq-adapter        3192
;  :arith-fixed-eqs         1909
;  :arith-offset-eqs        733
;  :arith-pivots            934
;  :binary-propagations     11
;  :conflicts               1151
;  :datatype-accessor-ax    1238
;  :datatype-constructor-ax 5806
;  :datatype-occurs-check   2444
;  :datatype-splits         4039
;  :decisions               6637
;  :del-clause              10786
;  :final-checks            459
;  :interface-eqs           63
;  :max-generation          4
;  :max-memory              5.55
;  :memory                  5.55
;  :minimized-lits          316
;  :mk-bool-var             18219
;  :mk-clause               11068
;  :num-allocs              8502667
;  :num-checks              511
;  :propagations            11117
;  :quant-instantiations    3046
;  :rlimit-count            496834
;  :time                    0.00)
; [then-branch: 158 | First:(Second:(Second:(Second:($t@88@06))))[0] == 0 || First:(Second:(Second:(Second:($t@88@06))))[0] == -1 | live]
; [else-branch: 158 | !(First:(Second:(Second:(Second:($t@88@06))))[0] == 0 || First:(Second:(Second:(Second:($t@88@06))))[0] == -1) | live]
(push) ; 9
; [then-branch: 158 | First:(Second:(Second:(Second:($t@88@06))))[0] == 0 || First:(Second:(Second:(Second:($t@88@06))))[0] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] == -2
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               37866
;  :arith-add-rows          1792
;  :arith-assert-diseq      2927
;  :arith-assert-lower      5890
;  :arith-assert-upper      3670
;  :arith-bound-prop        470
;  :arith-conflicts         105
;  :arith-eq-adapter        3192
;  :arith-fixed-eqs         1909
;  :arith-offset-eqs        733
;  :arith-pivots            934
;  :binary-propagations     11
;  :conflicts               1151
;  :datatype-accessor-ax    1238
;  :datatype-constructor-ax 5806
;  :datatype-occurs-check   2444
;  :datatype-splits         4039
;  :decisions               6637
;  :del-clause              10786
;  :final-checks            459
;  :interface-eqs           63
;  :max-generation          4
;  :max-memory              5.55
;  :memory                  5.55
;  :minimized-lits          316
;  :mk-bool-var             18221
;  :mk-clause               11069
;  :num-allocs              8502667
;  :num-checks              512
;  :propagations            11117
;  :quant-instantiations    3046
;  :rlimit-count            496986)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 158 | !(First:(Second:(Second:(Second:($t@88@06))))[0] == 0 || First:(Second:(Second:(Second:($t@88@06))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        0)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        0)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
      0)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               37875
;  :arith-add-rows          1792
;  :arith-assert-diseq      2927
;  :arith-assert-lower      5890
;  :arith-assert-upper      3670
;  :arith-bound-prop        470
;  :arith-conflicts         105
;  :arith-eq-adapter        3192
;  :arith-fixed-eqs         1909
;  :arith-offset-eqs        733
;  :arith-pivots            934
;  :binary-propagations     11
;  :conflicts               1151
;  :datatype-accessor-ax    1239
;  :datatype-constructor-ax 5806
;  :datatype-occurs-check   2444
;  :datatype-splits         4039
;  :decisions               6637
;  :del-clause              10787
;  :final-checks            459
;  :interface-eqs           63
;  :max-generation          4
;  :max-memory              5.55
;  :memory                  5.55
;  :minimized-lits          316
;  :mk-bool-var             18227
;  :mk-clause               11073
;  :num-allocs              8502667
;  :num-checks              513
;  :propagations            11117
;  :quant-instantiations    3046
;  :rlimit-count            497472)
(push) ; 8
; [then-branch: 159 | First:(Second:(Second:(Second:($t@88@06))))[1] == 0 | live]
; [else-branch: 159 | First:(Second:(Second:(Second:($t@88@06))))[1] != 0 | live]
(push) ; 9
; [then-branch: 159 | First:(Second:(Second:(Second:($t@88@06))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
    1)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 159 | First:(Second:(Second:(Second:($t@88@06))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               37877
;  :arith-add-rows          1793
;  :arith-assert-diseq      2927
;  :arith-assert-lower      5890
;  :arith-assert-upper      3670
;  :arith-bound-prop        470
;  :arith-conflicts         105
;  :arith-eq-adapter        3192
;  :arith-fixed-eqs         1910
;  :arith-offset-eqs        733
;  :arith-pivots            934
;  :binary-propagations     11
;  :conflicts               1151
;  :datatype-accessor-ax    1239
;  :datatype-constructor-ax 5806
;  :datatype-occurs-check   2444
;  :datatype-splits         4039
;  :decisions               6637
;  :del-clause              10787
;  :final-checks            459
;  :interface-eqs           63
;  :max-generation          4
;  :max-memory              5.55
;  :memory                  5.55
;  :minimized-lits          316
;  :mk-bool-var             18232
;  :mk-clause               11077
;  :num-allocs              8502667
;  :num-checks              514
;  :propagations            11117
;  :quant-instantiations    3047
;  :rlimit-count            497690)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               38289
;  :arith-add-rows          1800
;  :arith-assert-diseq      2952
;  :arith-assert-lower      5941
;  :arith-assert-upper      3697
;  :arith-bound-prop        476
;  :arith-conflicts         105
;  :arith-eq-adapter        3212
;  :arith-fixed-eqs         1929
;  :arith-offset-eqs        742
;  :arith-pivots            942
;  :binary-propagations     11
;  :conflicts               1153
;  :datatype-accessor-ax    1256
;  :datatype-constructor-ax 5888
;  :datatype-occurs-check   2484
;  :datatype-splits         4088
;  :decisions               6716
;  :del-clause              10867
;  :final-checks            464
;  :interface-eqs           64
;  :max-generation          4
;  :max-memory              5.55
;  :memory                  5.55
;  :minimized-lits          316
;  :mk-bool-var             18358
;  :mk-clause               11153
;  :num-allocs              9165564
;  :num-checks              515
;  :propagations            11203
;  :quant-instantiations    3062
;  :rlimit-count            500703
;  :time                    0.00)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               39069
;  :arith-add-rows          1816
;  :arith-assert-diseq      3001
;  :arith-assert-lower      6044
;  :arith-assert-upper      3738
;  :arith-bound-prop        493
;  :arith-conflicts         106
;  :arith-eq-adapter        3249
;  :arith-fixed-eqs         1962
;  :arith-offset-eqs        764
;  :arith-pivots            956
;  :binary-propagations     11
;  :conflicts               1166
;  :datatype-accessor-ax    1293
;  :datatype-constructor-ax 6034
;  :datatype-occurs-check   2557
;  :datatype-splits         4190
;  :decisions               6845
;  :del-clause              11015
;  :final-checks            473
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.55
;  :memory                  5.45
;  :minimized-lits          318
;  :mk-bool-var             18616
;  :mk-clause               11301
;  :num-allocs              9498185
;  :num-checks              516
;  :propagations            11386
;  :quant-instantiations    3099
;  :rlimit-count            505431
;  :time                    0.00)
; [then-branch: 160 | First:(Second:(Second:(Second:($t@88@06))))[1] == 0 || First:(Second:(Second:(Second:($t@88@06))))[1] == -1 | live]
; [else-branch: 160 | !(First:(Second:(Second:(Second:($t@88@06))))[1] == 0 || First:(Second:(Second:(Second:($t@88@06))))[1] == -1) | live]
(push) ; 9
; [then-branch: 160 | First:(Second:(Second:(Second:($t@88@06))))[1] == 0 || First:(Second:(Second:(Second:($t@88@06))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               39069
;  :arith-add-rows          1816
;  :arith-assert-diseq      3001
;  :arith-assert-lower      6044
;  :arith-assert-upper      3738
;  :arith-bound-prop        493
;  :arith-conflicts         106
;  :arith-eq-adapter        3249
;  :arith-fixed-eqs         1962
;  :arith-offset-eqs        764
;  :arith-pivots            956
;  :binary-propagations     11
;  :conflicts               1166
;  :datatype-accessor-ax    1293
;  :datatype-constructor-ax 6034
;  :datatype-occurs-check   2557
;  :datatype-splits         4190
;  :decisions               6845
;  :del-clause              11015
;  :final-checks            473
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.55
;  :memory                  5.45
;  :minimized-lits          318
;  :mk-bool-var             18618
;  :mk-clause               11302
;  :num-allocs              9498185
;  :num-checks              517
;  :propagations            11386
;  :quant-instantiations    3099
;  :rlimit-count            505580)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 160 | !(First:(Second:(Second:(Second:($t@88@06))))[1] == 0 || First:(Second:(Second:(Second:($t@88@06))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        1)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        1)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1 ==> diz.Main_event_state[2] == -2
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               39075
;  :arith-add-rows          1816
;  :arith-assert-diseq      3001
;  :arith-assert-lower      6044
;  :arith-assert-upper      3738
;  :arith-bound-prop        493
;  :arith-conflicts         106
;  :arith-eq-adapter        3249
;  :arith-fixed-eqs         1962
;  :arith-offset-eqs        764
;  :arith-pivots            956
;  :binary-propagations     11
;  :conflicts               1166
;  :datatype-accessor-ax    1294
;  :datatype-constructor-ax 6034
;  :datatype-occurs-check   2557
;  :datatype-splits         4190
;  :decisions               6845
;  :del-clause              11016
;  :final-checks            473
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.55
;  :memory                  5.45
;  :minimized-lits          318
;  :mk-bool-var             18624
;  :mk-clause               11306
;  :num-allocs              9498185
;  :num-checks              518
;  :propagations            11386
;  :quant-instantiations    3099
;  :rlimit-count            506069)
(push) ; 8
; [then-branch: 161 | First:(Second:(Second:(Second:($t@88@06))))[2] == 0 | live]
; [else-branch: 161 | First:(Second:(Second:(Second:($t@88@06))))[2] != 0 | live]
(push) ; 9
; [then-branch: 161 | First:(Second:(Second:(Second:($t@88@06))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
    2)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 161 | First:(Second:(Second:(Second:($t@88@06))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               39079
;  :arith-add-rows          1816
;  :arith-assert-diseq      3001
;  :arith-assert-lower      6044
;  :arith-assert-upper      3739
;  :arith-bound-prop        493
;  :arith-conflicts         106
;  :arith-eq-adapter        3249
;  :arith-fixed-eqs         1962
;  :arith-offset-eqs        764
;  :arith-pivots            956
;  :binary-propagations     11
;  :conflicts               1166
;  :datatype-accessor-ax    1294
;  :datatype-constructor-ax 6034
;  :datatype-occurs-check   2557
;  :datatype-splits         4190
;  :decisions               6845
;  :del-clause              11016
;  :final-checks            473
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.55
;  :memory                  5.45
;  :minimized-lits          318
;  :mk-bool-var             18626
;  :mk-clause               11306
;  :num-allocs              9498185
;  :num-checks              519
;  :propagations            11386
;  :quant-instantiations    3101
;  :rlimit-count            506297)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        2)
      (- 0 1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               39120
;  :arith-add-rows          1826
;  :arith-assert-diseq      3005
;  :arith-assert-lower      6046
;  :arith-assert-upper      3744
;  :arith-bound-prop        494
;  :arith-conflicts         107
;  :arith-eq-adapter        3254
;  :arith-fixed-eqs         1962
;  :arith-offset-eqs        764
;  :arith-pivots            956
;  :binary-propagations     11
;  :conflicts               1176
;  :datatype-accessor-ax    1294
;  :datatype-constructor-ax 6040
;  :datatype-occurs-check   2557
;  :datatype-splits         4190
;  :decisions               6854
;  :del-clause              11048
;  :final-checks            473
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.55
;  :memory                  5.45
;  :minimized-lits          318
;  :mk-bool-var             18655
;  :mk-clause               11338
;  :num-allocs              9498185
;  :num-checks              520
;  :propagations            11408
;  :quant-instantiations    3104
;  :rlimit-count            506756)
; [then-branch: 162 | First:(Second:(Second:(Second:($t@88@06))))[2] == 0 || First:(Second:(Second:(Second:($t@88@06))))[2] == -1 | dead]
; [else-branch: 162 | !(First:(Second:(Second:(Second:($t@88@06))))[2] == 0 || First:(Second:(Second:(Second:($t@88@06))))[2] == -1) | live]
(push) ; 9
; [else-branch: 162 | !(First:(Second:(Second:(Second:($t@88@06))))[2] == 0 || First:(Second:(Second:(Second:($t@88@06))))[2] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        2)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) != 0 && old(diz.Main_event_state[0]) != -1 ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] old(diz.Main_event_state[0]) != 0 && old(diz.Main_event_state[0]) != -1
; [eval] old(diz.Main_event_state[0]) != 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               39126
;  :arith-add-rows          1826
;  :arith-assert-diseq      3005
;  :arith-assert-lower      6046
;  :arith-assert-upper      3744
;  :arith-bound-prop        494
;  :arith-conflicts         107
;  :arith-eq-adapter        3254
;  :arith-fixed-eqs         1962
;  :arith-offset-eqs        764
;  :arith-pivots            956
;  :binary-propagations     11
;  :conflicts               1176
;  :datatype-accessor-ax    1295
;  :datatype-constructor-ax 6040
;  :datatype-occurs-check   2557
;  :datatype-splits         4190
;  :decisions               6854
;  :del-clause              11048
;  :final-checks            473
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.55
;  :memory                  5.45
;  :minimized-lits          318
;  :mk-bool-var             18657
;  :mk-clause               11338
;  :num-allocs              9498185
;  :num-checks              521
;  :propagations            11408
;  :quant-instantiations    3104
;  :rlimit-count            507030)
(push) ; 8
; [then-branch: 163 | First:(Second:(Second:(Second:($t@88@06))))[0] != 0 | live]
; [else-branch: 163 | First:(Second:(Second:(Second:($t@88@06))))[0] == 0 | live]
(push) ; 9
; [then-branch: 163 | First:(Second:(Second:(Second:($t@88@06))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) != -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               39127
;  :arith-add-rows          1826
;  :arith-assert-diseq      3005
;  :arith-assert-lower      6046
;  :arith-assert-upper      3744
;  :arith-bound-prop        494
;  :arith-conflicts         107
;  :arith-eq-adapter        3254
;  :arith-fixed-eqs         1962
;  :arith-offset-eqs        764
;  :arith-pivots            956
;  :binary-propagations     11
;  :conflicts               1176
;  :datatype-accessor-ax    1295
;  :datatype-constructor-ax 6040
;  :datatype-occurs-check   2557
;  :datatype-splits         4190
;  :decisions               6854
;  :del-clause              11048
;  :final-checks            473
;  :interface-eqs           66
;  :max-generation          4
;  :max-memory              5.55
;  :memory                  5.45
;  :minimized-lits          318
;  :mk-bool-var             18657
;  :mk-clause               11339
;  :num-allocs              9498185
;  :num-checks              522
;  :propagations            11408
;  :quant-instantiations    3106
;  :rlimit-count            507245)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 163 | First:(Second:(Second:(Second:($t@88@06))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
    0)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          0)
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               39766
;  :arith-add-rows          1838
;  :arith-assert-diseq      3042
;  :arith-assert-lower      6126
;  :arith-assert-upper      3779
;  :arith-bound-prop        500
;  :arith-conflicts         108
;  :arith-eq-adapter        3281
;  :arith-fixed-eqs         1993
;  :arith-offset-eqs        781
;  :arith-pivots            966
;  :binary-propagations     11
;  :conflicts               1183
;  :datatype-accessor-ax    1325
;  :datatype-constructor-ax 6164
;  :datatype-occurs-check   2623
;  :datatype-splits         4288
;  :decisions               6969
;  :del-clause              11143
;  :final-checks            481
;  :interface-eqs           68
;  :max-generation          4
;  :max-memory              5.56
;  :memory                  5.56
;  :minimized-lits          319
;  :mk-bool-var             18857
;  :mk-clause               11433
;  :num-allocs              9836062
;  :num-checks              523
;  :propagations            11550
;  :quant-instantiations    3128
;  :rlimit-count            511281
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        0)
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               40577
;  :arith-add-rows          1863
;  :arith-assert-diseq      3093
;  :arith-assert-lower      6223
;  :arith-assert-upper      3831
;  :arith-bound-prop        516
;  :arith-conflicts         108
;  :arith-eq-adapter        3316
;  :arith-fixed-eqs         2030
;  :arith-offset-eqs        804
;  :arith-pivots            980
;  :binary-propagations     11
;  :conflicts               1197
;  :datatype-accessor-ax    1362
;  :datatype-constructor-ax 6310
;  :datatype-occurs-check   2696
;  :datatype-splits         4390
;  :decisions               7110
;  :del-clause              11299
;  :final-checks            490
;  :interface-eqs           70
;  :max-generation          4
;  :max-memory              5.56
;  :memory                  5.56
;  :minimized-lits          322
;  :mk-bool-var             19116
;  :mk-clause               11589
;  :num-allocs              10514866
;  :num-checks              524
;  :propagations            11757
;  :quant-instantiations    3169
;  :rlimit-count            516419
;  :time                    0.00)
; [then-branch: 164 | First:(Second:(Second:(Second:($t@88@06))))[0] != -1 && First:(Second:(Second:(Second:($t@88@06))))[0] != 0 | live]
; [else-branch: 164 | !(First:(Second:(Second:(Second:($t@88@06))))[0] != -1 && First:(Second:(Second:(Second:($t@88@06))))[0] != 0) | live]
(push) ; 9
; [then-branch: 164 | First:(Second:(Second:(Second:($t@88@06))))[0] != -1 && First:(Second:(Second:(Second:($t@88@06))))[0] != 0]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        0)
      0))))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               40585
;  :arith-add-rows          1863
;  :arith-assert-diseq      3095
;  :arith-assert-lower      6230
;  :arith-assert-upper      3835
;  :arith-bound-prop        516
;  :arith-conflicts         108
;  :arith-eq-adapter        3320
;  :arith-fixed-eqs         2031
;  :arith-offset-eqs        804
;  :arith-pivots            980
;  :binary-propagations     11
;  :conflicts               1197
;  :datatype-accessor-ax    1362
;  :datatype-constructor-ax 6310
;  :datatype-occurs-check   2696
;  :datatype-splits         4390
;  :decisions               7110
;  :del-clause              11299
;  :final-checks            490
;  :interface-eqs           70
;  :max-generation          4
;  :max-memory              5.56
;  :memory                  5.56
;  :minimized-lits          322
;  :mk-bool-var             19132
;  :mk-clause               11600
;  :num-allocs              10514866
;  :num-checks              525
;  :propagations            11766
;  :quant-instantiations    3174
;  :rlimit-count            516689)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               40585
;  :arith-add-rows          1863
;  :arith-assert-diseq      3095
;  :arith-assert-lower      6230
;  :arith-assert-upper      3835
;  :arith-bound-prop        516
;  :arith-conflicts         108
;  :arith-eq-adapter        3320
;  :arith-fixed-eqs         2031
;  :arith-offset-eqs        804
;  :arith-pivots            980
;  :binary-propagations     11
;  :conflicts               1197
;  :datatype-accessor-ax    1362
;  :datatype-constructor-ax 6310
;  :datatype-occurs-check   2696
;  :datatype-splits         4390
;  :decisions               7110
;  :del-clause              11299
;  :final-checks            490
;  :interface-eqs           70
;  :max-generation          4
;  :max-memory              5.56
;  :memory                  5.56
;  :minimized-lits          322
;  :mk-bool-var             19132
;  :mk-clause               11600
;  :num-allocs              10514866
;  :num-checks              526
;  :propagations            11766
;  :quant-instantiations    3174
;  :rlimit-count            516704)
(pop) ; 9
(push) ; 9
; [else-branch: 164 | !(First:(Second:(Second:(Second:($t@88@06))))[0] != -1 && First:(Second:(Second:(Second:($t@88@06))))[0] != 0)]
(assert (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          0)
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          0)
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) != 0 && old(diz.Main_event_state[1]) != -1 ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] old(diz.Main_event_state[1]) != 0 && old(diz.Main_event_state[1]) != -1
; [eval] old(diz.Main_event_state[1]) != 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               40591
;  :arith-add-rows          1863
;  :arith-assert-diseq      3095
;  :arith-assert-lower      6230
;  :arith-assert-upper      3835
;  :arith-bound-prop        516
;  :arith-conflicts         108
;  :arith-eq-adapter        3320
;  :arith-fixed-eqs         2031
;  :arith-offset-eqs        804
;  :arith-pivots            980
;  :binary-propagations     11
;  :conflicts               1197
;  :datatype-accessor-ax    1363
;  :datatype-constructor-ax 6310
;  :datatype-occurs-check   2696
;  :datatype-splits         4390
;  :decisions               7110
;  :del-clause              11310
;  :final-checks            490
;  :interface-eqs           70
;  :max-generation          4
;  :max-memory              5.56
;  :memory                  5.56
;  :minimized-lits          322
;  :mk-bool-var             19135
;  :mk-clause               11601
;  :num-allocs              10514866
;  :num-checks              527
;  :propagations            11766
;  :quant-instantiations    3174
;  :rlimit-count            517199)
(push) ; 8
; [then-branch: 165 | First:(Second:(Second:(Second:($t@88@06))))[1] != 0 | live]
; [else-branch: 165 | First:(Second:(Second:(Second:($t@88@06))))[1] == 0 | live]
(push) ; 9
; [then-branch: 165 | First:(Second:(Second:(Second:($t@88@06))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) != -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               40593
;  :arith-add-rows          1864
;  :arith-assert-diseq      3095
;  :arith-assert-lower      6230
;  :arith-assert-upper      3835
;  :arith-bound-prop        516
;  :arith-conflicts         108
;  :arith-eq-adapter        3320
;  :arith-fixed-eqs         2032
;  :arith-offset-eqs        804
;  :arith-pivots            980
;  :binary-propagations     11
;  :conflicts               1197
;  :datatype-accessor-ax    1363
;  :datatype-constructor-ax 6310
;  :datatype-occurs-check   2696
;  :datatype-splits         4390
;  :decisions               7110
;  :del-clause              11310
;  :final-checks            490
;  :interface-eqs           70
;  :max-generation          4
;  :max-memory              5.56
;  :memory                  5.56
;  :minimized-lits          322
;  :mk-bool-var             19139
;  :mk-clause               11605
;  :num-allocs              10514866
;  :num-checks              528
;  :propagations            11766
;  :quant-instantiations    3175
;  :rlimit-count            517353)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 165 | First:(Second:(Second:(Second:($t@88@06))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
    1)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          1)
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               41384
;  :arith-add-rows          1884
;  :arith-assert-diseq      3141
;  :arith-assert-lower      6322
;  :arith-assert-upper      3876
;  :arith-bound-prop        524
;  :arith-conflicts         109
;  :arith-eq-adapter        3357
;  :arith-fixed-eqs         2066
;  :arith-offset-eqs        827
;  :arith-pivots            993
;  :binary-propagations     11
;  :conflicts               1209
;  :datatype-accessor-ax    1400
;  :datatype-constructor-ax 6456
;  :datatype-occurs-check   2769
;  :datatype-splits         4492
;  :decisions               7239
;  :del-clause              11449
;  :final-checks            499
;  :interface-eqs           72
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.57
;  :minimized-lits          324
;  :mk-bool-var             19392
;  :mk-clause               11740
;  :num-allocs              11199798
;  :num-checks              529
;  :propagations            11937
;  :quant-instantiations    3211
;  :rlimit-count            522136
;  :time                    0.01)
(push) ; 9
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        1)
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               41829
;  :arith-add-rows          1896
;  :arith-assert-diseq      3166
;  :arith-assert-lower      6374
;  :arith-assert-upper      3904
;  :arith-bound-prop        530
;  :arith-conflicts         110
;  :arith-eq-adapter        3377
;  :arith-fixed-eqs         2088
;  :arith-offset-eqs        838
;  :arith-pivots            1002
;  :binary-propagations     11
;  :conflicts               1216
;  :datatype-accessor-ax    1418
;  :datatype-constructor-ax 6541
;  :datatype-occurs-check   2809
;  :datatype-splits         4543
;  :decisions               7322
;  :del-clause              11533
;  :final-checks            504
;  :interface-eqs           73
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.57
;  :minimized-lits          326
;  :mk-bool-var             19536
;  :mk-clause               11824
;  :num-allocs              11889347
;  :num-checks              530
;  :propagations            12034
;  :quant-instantiations    3230
;  :rlimit-count            525386
;  :time                    0.00)
; [then-branch: 166 | First:(Second:(Second:(Second:($t@88@06))))[1] != -1 && First:(Second:(Second:(Second:($t@88@06))))[1] != 0 | live]
; [else-branch: 166 | !(First:(Second:(Second:(Second:($t@88@06))))[1] != -1 && First:(Second:(Second:(Second:($t@88@06))))[1] != 0) | live]
(push) ; 9
; [then-branch: 166 | First:(Second:(Second:(Second:($t@88@06))))[1] != -1 && First:(Second:(Second:(Second:($t@88@06))))[1] != 0]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        1)
      0))))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               41831
;  :arith-add-rows          1897
;  :arith-assert-diseq      3166
;  :arith-assert-lower      6374
;  :arith-assert-upper      3904
;  :arith-bound-prop        530
;  :arith-conflicts         110
;  :arith-eq-adapter        3377
;  :arith-fixed-eqs         2089
;  :arith-offset-eqs        838
;  :arith-pivots            1002
;  :binary-propagations     11
;  :conflicts               1216
;  :datatype-accessor-ax    1418
;  :datatype-constructor-ax 6541
;  :datatype-occurs-check   2809
;  :datatype-splits         4543
;  :decisions               7322
;  :del-clause              11533
;  :final-checks            504
;  :interface-eqs           73
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.57
;  :minimized-lits          326
;  :mk-bool-var             19540
;  :mk-clause               11828
;  :num-allocs              11889347
;  :num-checks              531
;  :propagations            12035
;  :quant-instantiations    3231
;  :rlimit-count            525581)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               41831
;  :arith-add-rows          1897
;  :arith-assert-diseq      3166
;  :arith-assert-lower      6374
;  :arith-assert-upper      3904
;  :arith-bound-prop        530
;  :arith-conflicts         110
;  :arith-eq-adapter        3377
;  :arith-fixed-eqs         2089
;  :arith-offset-eqs        838
;  :arith-pivots            1002
;  :binary-propagations     11
;  :conflicts               1216
;  :datatype-accessor-ax    1418
;  :datatype-constructor-ax 6541
;  :datatype-occurs-check   2809
;  :datatype-splits         4543
;  :decisions               7322
;  :del-clause              11533
;  :final-checks            504
;  :interface-eqs           73
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.57
;  :minimized-lits          326
;  :mk-bool-var             19540
;  :mk-clause               11828
;  :num-allocs              11889347
;  :num-checks              532
;  :propagations            12035
;  :quant-instantiations    3231
;  :rlimit-count            525596)
(pop) ; 9
(push) ; 9
; [else-branch: 166 | !(First:(Second:(Second:(Second:($t@88@06))))[1] != -1 && First:(Second:(Second:(Second:($t@88@06))))[1] != 0)]
(assert (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          1)
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          1)
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@06))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) != 0 && old(diz.Main_event_state[2]) != -1 ==> diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] old(diz.Main_event_state[2]) != 0 && old(diz.Main_event_state[2]) != -1
; [eval] old(diz.Main_event_state[2]) != 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               41840
;  :arith-add-rows          1897
;  :arith-assert-diseq      3166
;  :arith-assert-lower      6374
;  :arith-assert-upper      3904
;  :arith-bound-prop        530
;  :arith-conflicts         110
;  :arith-eq-adapter        3377
;  :arith-fixed-eqs         2089
;  :arith-offset-eqs        838
;  :arith-pivots            1002
;  :binary-propagations     11
;  :conflicts               1216
;  :datatype-accessor-ax    1418
;  :datatype-constructor-ax 6541
;  :datatype-occurs-check   2809
;  :datatype-splits         4543
;  :decisions               7322
;  :del-clause              11537
;  :final-checks            504
;  :interface-eqs           73
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.57
;  :minimized-lits          326
;  :mk-bool-var             19542
;  :mk-clause               11829
;  :num-allocs              11889347
;  :num-checks              533
;  :propagations            12035
;  :quant-instantiations    3231
;  :rlimit-count            526010)
(push) ; 8
; [then-branch: 167 | First:(Second:(Second:(Second:($t@88@06))))[2] != 0 | live]
; [else-branch: 167 | First:(Second:(Second:(Second:($t@88@06))))[2] == 0 | live]
(push) ; 9
; [then-branch: 167 | First:(Second:(Second:(Second:($t@88@06))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) != -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               41844
;  :arith-add-rows          1897
;  :arith-assert-diseq      3166
;  :arith-assert-lower      6374
;  :arith-assert-upper      3905
;  :arith-bound-prop        530
;  :arith-conflicts         110
;  :arith-eq-adapter        3377
;  :arith-fixed-eqs         2089
;  :arith-offset-eqs        838
;  :arith-pivots            1002
;  :binary-propagations     11
;  :conflicts               1216
;  :datatype-accessor-ax    1418
;  :datatype-constructor-ax 6541
;  :datatype-occurs-check   2809
;  :datatype-splits         4543
;  :decisions               7322
;  :del-clause              11537
;  :final-checks            504
;  :interface-eqs           73
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.57
;  :minimized-lits          326
;  :mk-bool-var             19544
;  :mk-clause               11829
;  :num-allocs              11889347
;  :num-checks              534
;  :propagations            12035
;  :quant-instantiations    3233
;  :rlimit-count            526202)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 167 | First:(Second:(Second:(Second:($t@88@06))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
    2)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          2)
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42287
;  :arith-add-rows          1908
;  :arith-assert-diseq      3193
;  :arith-assert-lower      6430
;  :arith-assert-upper      3934
;  :arith-bound-prop        536
;  :arith-conflicts         111
;  :arith-eq-adapter        3398
;  :arith-fixed-eqs         2111
;  :arith-offset-eqs        849
;  :arith-pivots            1010
;  :binary-propagations     11
;  :conflicts               1222
;  :datatype-accessor-ax    1436
;  :datatype-constructor-ax 6625
;  :datatype-occurs-check   2849
;  :datatype-splits         4593
;  :decisions               7405
;  :del-clause              11624
;  :final-checks            509
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.57
;  :minimized-lits          328
;  :mk-bool-var             19693
;  :mk-clause               11916
;  :num-allocs              12583629
;  :num-checks              535
;  :propagations            12138
;  :quant-instantiations    3254
;  :rlimit-count            529537
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        2)
      0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42328
;  :arith-add-rows          1918
;  :arith-assert-diseq      3197
;  :arith-assert-lower      6432
;  :arith-assert-upper      3939
;  :arith-bound-prop        537
;  :arith-conflicts         112
;  :arith-eq-adapter        3403
;  :arith-fixed-eqs         2111
;  :arith-offset-eqs        849
;  :arith-pivots            1010
;  :binary-propagations     11
;  :conflicts               1232
;  :datatype-accessor-ax    1436
;  :datatype-constructor-ax 6631
;  :datatype-occurs-check   2849
;  :datatype-splits         4593
;  :decisions               7414
;  :del-clause              11656
;  :final-checks            509
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          328
;  :mk-bool-var             19722
;  :mk-clause               11948
;  :num-allocs              12932006
;  :num-checks              536
;  :propagations            12160
;  :quant-instantiations    3257
;  :rlimit-count            530009)
; [then-branch: 168 | First:(Second:(Second:(Second:($t@88@06))))[2] != -1 && First:(Second:(Second:(Second:($t@88@06))))[2] != 0 | live]
; [else-branch: 168 | !(First:(Second:(Second:(Second:($t@88@06))))[2] != -1 && First:(Second:(Second:(Second:($t@88@06))))[2] != 0) | dead]
(push) ; 9
; [then-branch: 168 | First:(Second:(Second:(Second:($t@88@06))))[2] != -1 && First:(Second:(Second:(Second:($t@88@06))))[2] != 0]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
        2)
      0))))
; [eval] diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42332
;  :arith-add-rows          1918
;  :arith-assert-diseq      3197
;  :arith-assert-lower      6432
;  :arith-assert-upper      3940
;  :arith-bound-prop        537
;  :arith-conflicts         112
;  :arith-eq-adapter        3403
;  :arith-fixed-eqs         2111
;  :arith-offset-eqs        849
;  :arith-pivots            1010
;  :binary-propagations     11
;  :conflicts               1232
;  :datatype-accessor-ax    1436
;  :datatype-constructor-ax 6631
;  :datatype-occurs-check   2849
;  :datatype-splits         4593
;  :decisions               7414
;  :del-clause              11656
;  :final-checks            509
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          328
;  :mk-bool-var             19725
;  :mk-clause               11948
;  :num-allocs              12932006
;  :num-checks              537
;  :propagations            12160
;  :quant-instantiations    3259
;  :rlimit-count            530251)
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42332
;  :arith-add-rows          1918
;  :arith-assert-diseq      3197
;  :arith-assert-lower      6432
;  :arith-assert-upper      3940
;  :arith-bound-prop        537
;  :arith-conflicts         112
;  :arith-eq-adapter        3403
;  :arith-fixed-eqs         2111
;  :arith-offset-eqs        849
;  :arith-pivots            1010
;  :binary-propagations     11
;  :conflicts               1232
;  :datatype-accessor-ax    1436
;  :datatype-constructor-ax 6631
;  :datatype-occurs-check   2849
;  :datatype-splits         4593
;  :decisions               7414
;  :del-clause              11656
;  :final-checks            509
;  :interface-eqs           74
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          328
;  :mk-bool-var             19725
;  :mk-clause               11948
;  :num-allocs              12932006
;  :num-checks              538
;  :propagations            12160
;  :quant-instantiations    3259
;  :rlimit-count            530266)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (implies
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
          2)
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@06)))))
      2))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@93@06 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 169 | 0 <= i@93@06 | live]
; [else-branch: 169 | !(0 <= i@93@06) | live]
(push) ; 10
; [then-branch: 169 | 0 <= i@93@06]
(assert (<= 0 i@93@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 169 | !(0 <= i@93@06)]
(assert (not (<= 0 i@93@06)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 170 | i@93@06 < |First:(Second:($t@91@06))| && 0 <= i@93@06 | live]
; [else-branch: 170 | !(i@93@06 < |First:(Second:($t@91@06))| && 0 <= i@93@06) | live]
(push) ; 10
; [then-branch: 170 | i@93@06 < |First:(Second:($t@91@06))| && 0 <= i@93@06]
(assert (and
  (<
    i@93@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))))
  (<= 0 i@93@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@93@06 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42777
;  :arith-add-rows          1929
;  :arith-assert-diseq      3222
;  :arith-assert-lower      6485
;  :arith-assert-upper      3970
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3423
;  :arith-fixed-eqs         2134
;  :arith-offset-eqs        860
;  :arith-pivots            1018
;  :binary-propagations     11
;  :conflicts               1238
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11779
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.57
;  :minimized-lits          330
;  :mk-bool-var             19874
;  :mk-clause               12032
;  :num-allocs              13282260
;  :num-checks              540
;  :propagations            12263
;  :quant-instantiations    3280
;  :rlimit-count            533755)
; [eval] -1
(push) ; 11
; [then-branch: 171 | First:(Second:($t@91@06))[i@93@06] == -1 | live]
; [else-branch: 171 | First:(Second:($t@91@06))[i@93@06] != -1 | live]
(push) ; 12
; [then-branch: 171 | First:(Second:($t@91@06))[i@93@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
    i@93@06)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 171 | First:(Second:($t@91@06))[i@93@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      i@93@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@93@06 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3224
;  :arith-assert-lower      6492
;  :arith-assert-upper      3973
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3426
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1238
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11779
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.57
;  :minimized-lits          330
;  :mk-bool-var             19889
;  :mk-clause               12043
;  :num-allocs              13282260
;  :num-checks              541
;  :propagations            12268
;  :quant-instantiations    3283
;  :rlimit-count            534061)
(push) ; 13
; [then-branch: 172 | 0 <= First:(Second:($t@91@06))[i@93@06] | live]
; [else-branch: 172 | !(0 <= First:(Second:($t@91@06))[i@93@06]) | live]
(push) ; 14
; [then-branch: 172 | 0 <= First:(Second:($t@91@06))[i@93@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
    i@93@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@93@06 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3224
;  :arith-assert-lower      6492
;  :arith-assert-upper      3973
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3426
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1019
;  :binary-propagations     11
;  :conflicts               1238
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11779
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.57
;  :minimized-lits          330
;  :mk-bool-var             19889
;  :mk-clause               12043
;  :num-allocs              13282260
;  :num-checks              542
;  :propagations            12268
;  :quant-instantiations    3283
;  :rlimit-count            534155)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 172 | !(0 <= First:(Second:($t@91@06))[i@93@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      i@93@06))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 170 | !(i@93@06 < |First:(Second:($t@91@06))| && 0 <= i@93@06)]
(assert (not
  (and
    (<
      i@93@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))))
    (<= 0 i@93@06))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@93@06 Int)) (!
  (implies
    (and
      (<
        i@93@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))))
      (<= 0 i@93@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
          i@93@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
            i@93@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
            i@93@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
    i@93@06))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3225
;  :arith-assert-lower      6493
;  :arith-assert-upper      3974
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3427
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1020
;  :binary-propagations     11
;  :conflicts               1239
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19901
;  :mk-clause               12061
;  :num-allocs              13633432
;  :num-checks              543
;  :propagations            12270
;  :quant-instantiations    3286
;  :rlimit-count            534646)
(assert (forall ((i@93@06 Int)) (!
  (implies
    (and
      (<
        i@93@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))))
      (<= 0 i@93@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
          i@93@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
            i@93@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
            i@93@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
    i@93@06))
  :qid |prog.l<no position>|)))
(declare-const $k@94@06 $Perm)
(assert ($Perm.isReadVar $k@94@06 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@94@06 $Perm.No) (< $Perm.No $k@94@06))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3226
;  :arith-assert-lower      6495
;  :arith-assert-upper      3975
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3428
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1020
;  :binary-propagations     11
;  :conflicts               1240
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19906
;  :mk-clause               12063
;  :num-allocs              13633432
;  :num-checks              544
;  :propagations            12271
;  :quant-instantiations    3286
;  :rlimit-count            535171)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@64@06 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3226
;  :arith-assert-lower      6495
;  :arith-assert-upper      3975
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3428
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1020
;  :binary-propagations     11
;  :conflicts               1240
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19906
;  :mk-clause               12063
;  :num-allocs              13633432
;  :num-checks              545
;  :propagations            12271
;  :quant-instantiations    3286
;  :rlimit-count            535182)
(assert (< $k@94@06 $k@64@06))
(assert (<= $Perm.No (- $k@64@06 $k@94@06)))
(assert (<= (- $k@64@06 $k@94@06) $Perm.Write))
(assert (implies (< $Perm.No (- $k@64@06 $k@94@06)) (not (= diz@32@06 $Ref.null))))
; [eval] 0 < diz.Main_MIN_DIST
(push) ; 8
(assert (not (< $Perm.No $k@64@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3226
;  :arith-assert-lower      6497
;  :arith-assert-upper      3976
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3428
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1020
;  :binary-propagations     11
;  :conflicts               1241
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19909
;  :mk-clause               12063
;  :num-allocs              13633432
;  :num-checks              546
;  :propagations            12271
;  :quant-instantiations    3286
;  :rlimit-count            535390)
(declare-const $k@95@06 $Perm)
(assert ($Perm.isReadVar $k@95@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@95@06 $Perm.No) (< $Perm.No $k@95@06))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3227
;  :arith-assert-lower      6499
;  :arith-assert-upper      3977
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3429
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1020
;  :binary-propagations     11
;  :conflicts               1242
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19913
;  :mk-clause               12065
;  :num-allocs              13633432
;  :num-checks              547
;  :propagations            12272
;  :quant-instantiations    3286
;  :rlimit-count            535588)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@65@06 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3227
;  :arith-assert-lower      6499
;  :arith-assert-upper      3977
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3429
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1020
;  :binary-propagations     11
;  :conflicts               1242
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19913
;  :mk-clause               12065
;  :num-allocs              13633432
;  :num-checks              548
;  :propagations            12272
;  :quant-instantiations    3286
;  :rlimit-count            535599)
(assert (< $k@95@06 $k@65@06))
(assert (<= $Perm.No (- $k@65@06 $k@95@06)))
(assert (<= (- $k@65@06 $k@95@06) $Perm.Write))
(assert (implies (< $Perm.No (- $k@65@06 $k@95@06)) (not (= diz@32@06 $Ref.null))))
; [eval] diz.Main_sensor != null
(push) ; 8
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3227
;  :arith-assert-lower      6501
;  :arith-assert-upper      3978
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3429
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1021
;  :binary-propagations     11
;  :conflicts               1243
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19916
;  :mk-clause               12065
;  :num-allocs              13633432
;  :num-checks              549
;  :propagations            12272
;  :quant-instantiations    3286
;  :rlimit-count            535813)
(push) ; 8
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3227
;  :arith-assert-lower      6501
;  :arith-assert-upper      3978
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3429
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1021
;  :binary-propagations     11
;  :conflicts               1244
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19916
;  :mk-clause               12065
;  :num-allocs              13633432
;  :num-checks              550
;  :propagations            12272
;  :quant-instantiations    3286
;  :rlimit-count            535861)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3227
;  :arith-assert-lower      6501
;  :arith-assert-upper      3978
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3429
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1021
;  :binary-propagations     11
;  :conflicts               1244
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19916
;  :mk-clause               12065
;  :num-allocs              13633432
;  :num-checks              551
;  :propagations            12272
;  :quant-instantiations    3286
;  :rlimit-count            535874)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3227
;  :arith-assert-lower      6501
;  :arith-assert-upper      3978
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3429
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1021
;  :binary-propagations     11
;  :conflicts               1245
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19916
;  :mk-clause               12065
;  :num-allocs              13633432
;  :num-checks              552
;  :propagations            12272
;  :quant-instantiations    3286
;  :rlimit-count            535922)
(declare-const $k@96@06 $Perm)
(assert ($Perm.isReadVar $k@96@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@96@06 $Perm.No) (< $Perm.No $k@96@06))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3228
;  :arith-assert-lower      6503
;  :arith-assert-upper      3979
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3430
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1021
;  :binary-propagations     11
;  :conflicts               1246
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19920
;  :mk-clause               12067
;  :num-allocs              13633432
;  :num-checks              553
;  :propagations            12273
;  :quant-instantiations    3286
;  :rlimit-count            536120)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@66@06 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3228
;  :arith-assert-lower      6503
;  :arith-assert-upper      3979
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3430
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1021
;  :binary-propagations     11
;  :conflicts               1246
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19920
;  :mk-clause               12067
;  :num-allocs              13633432
;  :num-checks              554
;  :propagations            12273
;  :quant-instantiations    3286
;  :rlimit-count            536131)
(assert (< $k@96@06 $k@66@06))
(assert (<= $Perm.No (- $k@66@06 $k@96@06)))
(assert (<= (- $k@66@06 $k@96@06) $Perm.Write))
(assert (implies (< $Perm.No (- $k@66@06 $k@96@06)) (not (= diz@32@06 $Ref.null))))
; [eval] diz.Main_controller != null
(push) ; 8
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3228
;  :arith-assert-lower      6505
;  :arith-assert-upper      3980
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3430
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1022
;  :binary-propagations     11
;  :conflicts               1247
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19923
;  :mk-clause               12067
;  :num-allocs              13633432
;  :num-checks              555
;  :propagations            12273
;  :quant-instantiations    3286
;  :rlimit-count            536345)
(push) ; 8
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3228
;  :arith-assert-lower      6505
;  :arith-assert-upper      3980
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3430
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1022
;  :binary-propagations     11
;  :conflicts               1248
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19923
;  :mk-clause               12067
;  :num-allocs              13633432
;  :num-checks              556
;  :propagations            12273
;  :quant-instantiations    3286
;  :rlimit-count            536393)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3228
;  :arith-assert-lower      6505
;  :arith-assert-upper      3980
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3430
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1022
;  :binary-propagations     11
;  :conflicts               1248
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19923
;  :mk-clause               12067
;  :num-allocs              13633432
;  :num-checks              557
;  :propagations            12273
;  :quant-instantiations    3286
;  :rlimit-count            536406)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3228
;  :arith-assert-lower      6505
;  :arith-assert-upper      3980
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3430
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1022
;  :binary-propagations     11
;  :conflicts               1249
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19923
;  :mk-clause               12067
;  :num-allocs              13633432
;  :num-checks              558
;  :propagations            12273
;  :quant-instantiations    3286
;  :rlimit-count            536454)
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42781
;  :arith-add-rows          1929
;  :arith-assert-diseq      3228
;  :arith-assert-lower      6505
;  :arith-assert-upper      3980
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3430
;  :arith-fixed-eqs         2135
;  :arith-offset-eqs        860
;  :arith-pivots            1022
;  :binary-propagations     11
;  :conflicts               1249
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19923
;  :mk-clause               12067
;  :num-allocs              13633432
;  :num-checks              559
;  :propagations            12273
;  :quant-instantiations    3286
;  :rlimit-count            536469)
; [eval] -1
(push) ; 8
; [then-branch: 173 | First:(Second:($t@91@06))[0] == -1 | live]
; [else-branch: 173 | First:(Second:($t@91@06))[0] != -1 | live]
(push) ; 9
; [then-branch: 173 | First:(Second:($t@91@06))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
    0)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 173 | First:(Second:($t@91@06))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42791
;  :arith-add-rows          1931
;  :arith-assert-diseq      3230
;  :arith-assert-lower      6513
;  :arith-assert-upper      3984
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3434
;  :arith-fixed-eqs         2137
;  :arith-offset-eqs        860
;  :arith-pivots            1024
;  :binary-propagations     11
;  :conflicts               1249
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11808
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19940
;  :mk-clause               12077
;  :num-allocs              13633432
;  :num-checks              560
;  :propagations            12284
;  :quant-instantiations    3292
;  :rlimit-count            536903)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42794
;  :arith-add-rows          1932
;  :arith-assert-diseq      3230
;  :arith-assert-lower      6513
;  :arith-assert-upper      3984
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3434
;  :arith-fixed-eqs         2137
;  :arith-offset-eqs        860
;  :arith-pivots            1026
;  :binary-propagations     11
;  :conflicts               1250
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11826
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19948
;  :mk-clause               12085
;  :num-allocs              13633432
;  :num-checks              561
;  :propagations            12292
;  :quant-instantiations    3296
;  :rlimit-count            537186)
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      0)
    0)))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42797
;  :arith-add-rows          1932
;  :arith-assert-diseq      3230
;  :arith-assert-lower      6513
;  :arith-assert-upper      3984
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3434
;  :arith-fixed-eqs         2137
;  :arith-offset-eqs        860
;  :arith-pivots            1026
;  :binary-propagations     11
;  :conflicts               1250
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11826
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19950
;  :mk-clause               12086
;  :num-allocs              13633432
;  :num-checks              562
;  :propagations            12292
;  :quant-instantiations    3296
;  :rlimit-count            537305)
; [eval] -1
(push) ; 8
; [then-branch: 174 | First:(Second:($t@91@06))[1] == -1 | live]
; [else-branch: 174 | First:(Second:($t@91@06))[1] != -1 | live]
(push) ; 9
; [then-branch: 174 | First:(Second:($t@91@06))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
    1)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 174 | First:(Second:($t@91@06))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42801
;  :arith-add-rows          1932
;  :arith-assert-diseq      3232
;  :arith-assert-lower      6520
;  :arith-assert-upper      3987
;  :arith-bound-prop        543
;  :arith-conflicts         113
;  :arith-eq-adapter        3437
;  :arith-fixed-eqs         2138
;  :arith-offset-eqs        860
;  :arith-pivots            1027
;  :binary-propagations     11
;  :conflicts               1250
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6715
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7495
;  :del-clause              11826
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19965
;  :mk-clause               12103
;  :num-allocs              13633432
;  :num-checks              563
;  :propagations            12299
;  :quant-instantiations    3300
;  :rlimit-count            537604)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      1)
    2))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42841
;  :arith-add-rows          1941
;  :arith-assert-diseq      3239
;  :arith-assert-lower      6529
;  :arith-assert-upper      3997
;  :arith-bound-prop        544
;  :arith-conflicts         114
;  :arith-eq-adapter        3442
;  :arith-fixed-eqs         2139
;  :arith-offset-eqs        860
;  :arith-pivots            1030
;  :binary-propagations     11
;  :conflicts               1260
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6721
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7504
;  :del-clause              11866
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19994
;  :mk-clause               12126
;  :num-allocs              13633432
;  :num-checks              564
;  :propagations            12328
;  :quant-instantiations    3304
;  :rlimit-count            538126)
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      1)
    2)))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42842
;  :arith-add-rows          1941
;  :arith-assert-diseq      3239
;  :arith-assert-lower      6529
;  :arith-assert-upper      3997
;  :arith-bound-prop        544
;  :arith-conflicts         114
;  :arith-eq-adapter        3442
;  :arith-fixed-eqs         2139
;  :arith-offset-eqs        860
;  :arith-pivots            1030
;  :binary-propagations     11
;  :conflicts               1260
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6721
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7504
;  :del-clause              11866
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             19996
;  :mk-clause               12127
;  :num-allocs              13633432
;  :num-checks              565
;  :propagations            12328
;  :quant-instantiations    3304
;  :rlimit-count            538243)
; [eval] -1
(push) ; 8
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
      0)
    (- 0 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42974
;  :arith-add-rows          1945
;  :arith-assert-diseq      3265
;  :arith-assert-lower      6582
;  :arith-assert-upper      4030
;  :arith-bound-prop        550
;  :arith-conflicts         114
;  :arith-eq-adapter        3453
;  :arith-fixed-eqs         2152
;  :arith-offset-eqs        871
;  :arith-pivots            1031
;  :binary-propagations     11
;  :conflicts               1281
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6727
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7526
;  :del-clause              11923
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20048
;  :mk-clause               12184
;  :num-allocs              13633432
;  :num-checks              566
;  :propagations            12449
;  :quant-instantiations    3330
;  :rlimit-count            539771
;  :time                    0.00)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42974
;  :arith-add-rows          1945
;  :arith-assert-diseq      3265
;  :arith-assert-lower      6582
;  :arith-assert-upper      4030
;  :arith-bound-prop        550
;  :arith-conflicts         114
;  :arith-eq-adapter        3453
;  :arith-fixed-eqs         2152
;  :arith-offset-eqs        871
;  :arith-pivots            1031
;  :binary-propagations     11
;  :conflicts               1281
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6727
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7526
;  :del-clause              11923
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20049
;  :mk-clause               12184
;  :num-allocs              13633432
;  :num-checks              567
;  :propagations            12449
;  :quant-instantiations    3330
;  :rlimit-count            539908)
(push) ; 8
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43108
;  :arith-add-rows          1951
;  :arith-assert-diseq      3291
;  :arith-assert-lower      6635
;  :arith-assert-upper      4063
;  :arith-bound-prop        556
;  :arith-conflicts         114
;  :arith-eq-adapter        3464
;  :arith-fixed-eqs         2165
;  :arith-offset-eqs        882
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1302
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6733
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7548
;  :del-clause              11980
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20101
;  :mk-clause               12241
;  :num-allocs              13633432
;  :num-checks              568
;  :propagations            12572
;  :quant-instantiations    3356
;  :rlimit-count            541461
;  :time                    0.00)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
      0)
    0)))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43108
;  :arith-add-rows          1951
;  :arith-assert-diseq      3291
;  :arith-assert-lower      6635
;  :arith-assert-upper      4063
;  :arith-bound-prop        556
;  :arith-conflicts         114
;  :arith-eq-adapter        3464
;  :arith-fixed-eqs         2165
;  :arith-offset-eqs        882
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1302
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6733
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7548
;  :del-clause              11980
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20102
;  :mk-clause               12241
;  :num-allocs              13633432
;  :num-checks              569
;  :propagations            12572
;  :quant-instantiations    3356
;  :rlimit-count            541591)
; [eval] -1
(push) ; 8
(assert (not (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
    2)
  (- 0 1))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43176
;  :arith-add-rows          1962
;  :arith-assert-diseq      3305
;  :arith-assert-lower      6652
;  :arith-assert-upper      4081
;  :arith-bound-prop        557
;  :arith-conflicts         115
;  :arith-eq-adapter        3478
;  :arith-fixed-eqs         2167
;  :arith-offset-eqs        882
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1313
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6739
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7558
;  :del-clause              12032
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20160
;  :mk-clause               12293
;  :num-allocs              13633432
;  :num-checks              570
;  :propagations            12618
;  :quant-instantiations    3368
;  :rlimit-count            542310)
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
    2)
  (- 0 1)))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43176
;  :arith-add-rows          1962
;  :arith-assert-diseq      3305
;  :arith-assert-lower      6652
;  :arith-assert-upper      4082
;  :arith-bound-prop        557
;  :arith-conflicts         115
;  :arith-eq-adapter        3478
;  :arith-fixed-eqs         2167
;  :arith-offset-eqs        882
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1314
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6739
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7558
;  :del-clause              12032
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20161
;  :mk-clause               12293
;  :num-allocs              13633432
;  :num-checks              571
;  :propagations            12618
;  :quant-instantiations    3368
;  :rlimit-count            542462)
(push) ; 8
; [then-branch: 175 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))) | live]
; [else-branch: 175 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))) | live]
(push) ; 9
; [then-branch: 175 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 175 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43180
;  :arith-add-rows          1962
;  :arith-assert-diseq      3305
;  :arith-assert-lower      6652
;  :arith-assert-upper      4082
;  :arith-bound-prop        557
;  :arith-conflicts         115
;  :arith-eq-adapter        3478
;  :arith-fixed-eqs         2167
;  :arith-offset-eqs        882
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1314
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6739
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7558
;  :del-clause              12032
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20163
;  :mk-clause               12293
;  :num-allocs              13633432
;  :num-checks              572
;  :propagations            12618
;  :quant-instantiations    3370
;  :rlimit-count            542799)
; [eval] -1
(push) ; 10
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      1)
    (- 0 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43189
;  :arith-add-rows          1964
;  :arith-assert-diseq      3309
;  :arith-assert-lower      6653
;  :arith-assert-upper      4085
;  :arith-bound-prop        557
;  :arith-conflicts         116
;  :arith-eq-adapter        3478
;  :arith-fixed-eqs         2167
;  :arith-offset-eqs        882
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1316
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6739
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7559
;  :del-clause              12036
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20167
;  :mk-clause               12297
;  :num-allocs              13633432
;  :num-checks              573
;  :propagations            12634
;  :quant-instantiations    3371
;  :rlimit-count            543017)
; [then-branch: 176 | First:(Second:($t@91@06))[1] == -1 | dead]
; [else-branch: 176 | First:(Second:($t@91@06))[1] != -1 | live]
(push) ; 11
; [else-branch: 176 | First:(Second:($t@91@06))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
      1)
    (- 0 1))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43189
;  :arith-add-rows          1964
;  :arith-assert-diseq      3309
;  :arith-assert-lower      6653
;  :arith-assert-upper      4085
;  :arith-bound-prop        557
;  :arith-conflicts         116
;  :arith-eq-adapter        3478
;  :arith-fixed-eqs         2167
;  :arith-offset-eqs        882
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1316
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6739
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7559
;  :del-clause              12036
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20167
;  :mk-clause               12297
;  :num-allocs              13633432
;  :num-checks              574
;  :propagations            12634
;  :quant-instantiations    3371
;  :rlimit-count            543056)
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
      2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43233
;  :arith-add-rows          1974
;  :arith-assert-diseq      3313
;  :arith-assert-lower      6656
;  :arith-assert-upper      4090
;  :arith-bound-prop        558
;  :arith-conflicts         117
;  :arith-eq-adapter        3482
;  :arith-fixed-eqs         2168
;  :arith-offset-eqs        882
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1326
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6745
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7568
;  :del-clause              12059
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20192
;  :mk-clause               12320
;  :num-allocs              13633432
;  :num-checks              575
;  :propagations            12656
;  :quant-instantiations    3375
;  :rlimit-count            543516)
; [then-branch: 177 | -1 <= First:(Second:(Second:(Second:($t@91@06))))[2] | dead]
; [else-branch: 177 | !(-1 <= First:(Second:(Second:(Second:($t@91@06))))[2]) | live]
(push) ; 9
; [else-branch: 177 | !(-1 <= First:(Second:(Second:(Second:($t@91@06))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43233
;  :arith-add-rows          1974
;  :arith-assert-diseq      3313
;  :arith-assert-lower      6656
;  :arith-assert-upper      4090
;  :arith-bound-prop        558
;  :arith-conflicts         117
;  :arith-eq-adapter        3482
;  :arith-fixed-eqs         2168
;  :arith-offset-eqs        882
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1326
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6745
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7568
;  :del-clause              12059
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20192
;  :mk-clause               12320
;  :num-allocs              13633432
;  :num-checks              576
;  :propagations            12656
;  :quant-instantiations    3375
;  :rlimit-count            543559)
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
      2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43277
;  :arith-add-rows          1984
;  :arith-assert-diseq      3317
;  :arith-assert-lower      6659
;  :arith-assert-upper      4095
;  :arith-bound-prop        559
;  :arith-conflicts         118
;  :arith-eq-adapter        3486
;  :arith-fixed-eqs         2169
;  :arith-offset-eqs        882
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1336
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6751
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7577
;  :del-clause              12082
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20217
;  :mk-clause               12343
;  :num-allocs              13633432
;  :num-checks              577
;  :propagations            12678
;  :quant-instantiations    3379
;  :rlimit-count            544018)
; [then-branch: 178 | -1 <= First:(Second:(Second:(Second:($t@91@06))))[2] | dead]
; [else-branch: 178 | !(-1 <= First:(Second:(Second:(Second:($t@91@06))))[2]) | live]
(push) ; 9
; [else-branch: 178 | !(-1 <= First:(Second:(Second:(Second:($t@91@06))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06)))))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(push) ; 8
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43277
;  :arith-add-rows          1984
;  :arith-assert-diseq      3317
;  :arith-assert-lower      6659
;  :arith-assert-upper      4095
;  :arith-bound-prop        559
;  :arith-conflicts         118
;  :arith-eq-adapter        3486
;  :arith-fixed-eqs         2169
;  :arith-offset-eqs        882
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1337
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6751
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7577
;  :del-clause              12082
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20217
;  :mk-clause               12343
;  :num-allocs              13633432
;  :num-checks              578
;  :propagations            12678
;  :quant-instantiations    3379
;  :rlimit-count            544094)
(push) ; 8
; [then-branch: 179 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))) | live]
; [else-branch: 179 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))) | live]
(push) ; 9
; [then-branch: 179 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43281
;  :arith-add-rows          1984
;  :arith-assert-diseq      3317
;  :arith-assert-lower      6659
;  :arith-assert-upper      4095
;  :arith-bound-prop        559
;  :arith-conflicts         118
;  :arith-eq-adapter        3486
;  :arith-fixed-eqs         2169
;  :arith-offset-eqs        882
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1337
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6751
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7577
;  :del-clause              12082
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20219
;  :mk-clause               12343
;  :num-allocs              13633432
;  :num-checks              579
;  :propagations            12678
;  :quant-instantiations    3381
;  :rlimit-count            544383)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 179 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43294
;  :arith-add-rows          1986
;  :arith-assert-diseq      3321
;  :arith-assert-lower      6660
;  :arith-assert-upper      4098
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3486
;  :arith-fixed-eqs         2169
;  :arith-offset-eqs        882
;  :arith-pivots            1034
;  :binary-propagations     11
;  :conflicts               1339
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6751
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7578
;  :del-clause              12086
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20225
;  :mk-clause               12347
;  :num-allocs              13633432
;  :num-checks              580
;  :propagations            12694
;  :quant-instantiations    3384
;  :rlimit-count            544907)
; [then-branch: 180 | First:(Second:($t@91@06))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))) | dead]
; [else-branch: 180 | !(First:(Second:($t@91@06))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))) | live]
(push) ; 9
; [else-branch: 180 | !(First:(Second:($t@91@06))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@06)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second $t@91@06))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@06))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit))))))))))))))))))))))))))) diz@32@06 globals@33@06))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; Loop head block: Re-establish invariant
(pop) ; 7
(push) ; 7
; [else-branch: 125 | min_advance__39@74@06 == -1]
(assert (= min_advance__39@74@06 (- 0 1)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 68 | !(First:(Second:($t@72@06))[1] != -1 && First:(Second:($t@72@06))[0] != -1)]
(assert (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0)
        (- 0 1))))))
(pop) ; 6
; [eval] !(diz.Main_process_state[0] != -1 && diz.Main_process_state[1] != -1)
; [eval] diz.Main_process_state[0] != -1 && diz.Main_process_state[1] != -1
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43294
;  :arith-add-rows          1991
;  :arith-assert-diseq      3321
;  :arith-assert-lower      6660
;  :arith-assert-upper      4098
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3486
;  :arith-fixed-eqs         2169
;  :arith-offset-eqs        882
;  :arith-pivots            1048
;  :binary-propagations     11
;  :conflicts               1339
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6751
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7578
;  :del-clause              12309
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20225
;  :mk-clause               12347
;  :num-allocs              13633432
;  :num-checks              581
;  :propagations            12694
;  :quant-instantiations    3384
;  :rlimit-count            545275)
; [eval] -1
(push) ; 6
; [then-branch: 181 | First:(Second:($t@72@06))[0] != -1 | live]
; [else-branch: 181 | First:(Second:($t@72@06))[0] == -1 | live]
(push) ; 7
; [then-branch: 181 | First:(Second:($t@72@06))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[1] != -1
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43298
;  :arith-add-rows          1991
;  :arith-assert-diseq      3323
;  :arith-assert-lower      6667
;  :arith-assert-upper      4101
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3489
;  :arith-fixed-eqs         2170
;  :arith-offset-eqs        882
;  :arith-pivots            1049
;  :binary-propagations     11
;  :conflicts               1339
;  :datatype-accessor-ax    1454
;  :datatype-constructor-ax 6751
;  :datatype-occurs-check   2889
;  :datatype-splits         4643
;  :decisions               7578
;  :del-clause              12309
;  :final-checks            514
;  :interface-eqs           75
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20240
;  :mk-clause               12364
;  :num-allocs              13633432
;  :num-checks              582
;  :propagations            12701
;  :quant-instantiations    3387
;  :rlimit-count            545519)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 181 | First:(Second:($t@72@06))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  (- 0 1)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 6
(assert (not (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43452
;  :arith-add-rows          1991
;  :arith-assert-diseq      3325
;  :arith-assert-lower      6673
;  :arith-assert-upper      4111
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3495
;  :arith-fixed-eqs         2175
;  :arith-offset-eqs        883
;  :arith-pivots            1052
;  :binary-propagations     11
;  :conflicts               1339
;  :datatype-accessor-ax    1457
;  :datatype-constructor-ax 6779
;  :datatype-occurs-check   2903
;  :datatype-splits         4665
;  :decisions               7610
;  :del-clause              12342
;  :final-checks            518
;  :interface-eqs           76
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          330
;  :mk-bool-var             20278
;  :mk-clause               12380
;  :num-allocs              13633432
;  :num-checks              583
;  :propagations            12720
;  :quant-instantiations    3388
;  :rlimit-count            546943
;  :time                    0.00)
(push) ; 6
(assert (not (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0)
        (- 0 1)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43734
;  :arith-add-rows          1996
;  :arith-assert-diseq      3336
;  :arith-assert-lower      6703
;  :arith-assert-upper      4137
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3516
;  :arith-fixed-eqs         2188
;  :arith-offset-eqs        886
;  :arith-pivots            1062
;  :binary-propagations     11
;  :conflicts               1345
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12415
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20393
;  :mk-clause               12453
;  :num-allocs              13633432
;  :num-checks              584
;  :propagations            12763
;  :quant-instantiations    3398
;  :rlimit-count            549313
;  :time                    0.00)
; [then-branch: 182 | !(First:(Second:($t@72@06))[1] != -1 && First:(Second:($t@72@06))[0] != -1) | live]
; [else-branch: 182 | First:(Second:($t@72@06))[1] != -1 && First:(Second:($t@72@06))[0] != -1 | live]
(push) ; 6
; [then-branch: 182 | !(First:(Second:($t@72@06))[1] != -1 && First:(Second:($t@72@06))[0] != -1)]
(assert (not
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0)
        (- 0 1))))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 2
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@97@06 Int)
(push) ; 7
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 8
; [then-branch: 183 | 0 <= i@97@06 | live]
; [else-branch: 183 | !(0 <= i@97@06) | live]
(push) ; 9
; [then-branch: 183 | 0 <= i@97@06]
(assert (<= 0 i@97@06))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 183 | !(0 <= i@97@06)]
(assert (not (<= 0 i@97@06)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 184 | i@97@06 < |First:(Second:($t@72@06))| && 0 <= i@97@06 | live]
; [else-branch: 184 | !(i@97@06 < |First:(Second:($t@72@06))| && 0 <= i@97@06) | live]
(push) ; 9
; [then-branch: 184 | i@97@06 < |First:(Second:($t@72@06))| && 0 <= i@97@06]
(assert (and
  (<
    i@97@06
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
  (<= 0 i@97@06)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@97@06 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43736
;  :arith-add-rows          1996
;  :arith-assert-diseq      3336
;  :arith-assert-lower      6704
;  :arith-assert-upper      4138
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3516
;  :arith-fixed-eqs         2188
;  :arith-offset-eqs        886
;  :arith-pivots            1062
;  :binary-propagations     11
;  :conflicts               1345
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12415
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20397
;  :mk-clause               12454
;  :num-allocs              13633432
;  :num-checks              585
;  :propagations            12763
;  :quant-instantiations    3398
;  :rlimit-count            549597)
; [eval] -1
(push) ; 10
; [then-branch: 185 | First:(Second:($t@72@06))[i@97@06] == -1 | live]
; [else-branch: 185 | First:(Second:($t@72@06))[i@97@06] != -1 | live]
(push) ; 11
; [then-branch: 185 | First:(Second:($t@72@06))[i@97@06] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@97@06)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 185 | First:(Second:($t@72@06))[i@97@06] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      i@97@06)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 12
(assert (not (>= i@97@06 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3338
;  :arith-assert-lower      6711
;  :arith-assert-upper      4141
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3519
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1062
;  :binary-propagations     11
;  :conflicts               1345
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12415
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20412
;  :mk-clause               12471
;  :num-allocs              13633432
;  :num-checks              586
;  :propagations            12770
;  :quant-instantiations    3401
;  :rlimit-count            549900)
(push) ; 12
; [then-branch: 186 | 0 <= First:(Second:($t@72@06))[i@97@06] | live]
; [else-branch: 186 | !(0 <= First:(Second:($t@72@06))[i@97@06]) | live]
(push) ; 13
; [then-branch: 186 | 0 <= First:(Second:($t@72@06))[i@97@06]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@97@06)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@97@06 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3338
;  :arith-assert-lower      6711
;  :arith-assert-upper      4141
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3519
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1062
;  :binary-propagations     11
;  :conflicts               1345
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12415
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20412
;  :mk-clause               12471
;  :num-allocs              13633432
;  :num-checks              587
;  :propagations            12770
;  :quant-instantiations    3401
;  :rlimit-count            549994)
; [eval] |diz.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 186 | !(0 <= First:(Second:($t@72@06))[i@97@06])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      i@97@06))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 184 | !(i@97@06 < |First:(Second:($t@72@06))| && 0 <= i@97@06)]
(assert (not
  (and
    (<
      i@97@06
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
    (<= 0 i@97@06))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((i@97@06 Int)) (!
  (implies
    (and
      (<
        i@97@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
      (<= 0 i@97@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          i@97@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@97@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@97@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@97@06))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3340
;  :arith-assert-lower      6712
;  :arith-assert-upper      4142
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3520
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1062
;  :binary-propagations     11
;  :conflicts               1346
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20424
;  :mk-clause               12491
;  :num-allocs              13633432
;  :num-checks              588
;  :propagations            12772
;  :quant-instantiations    3404
;  :rlimit-count            550482)
(assert (forall ((i@97@06 Int)) (!
  (implies
    (and
      (<
        i@97@06
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))
      (<= 0 i@97@06))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          i@97@06)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@97@06)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
            i@97@06)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    i@97@06))
  :qid |prog.l<no position>|)))
(declare-const $k@98@06 $Perm)
(assert ($Perm.isReadVar $k@98@06 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@98@06 $Perm.No) (< $Perm.No $k@98@06))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3341
;  :arith-assert-lower      6714
;  :arith-assert-upper      4143
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3521
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1062
;  :binary-propagations     11
;  :conflicts               1347
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20429
;  :mk-clause               12493
;  :num-allocs              13633432
;  :num-checks              589
;  :propagations            12773
;  :quant-instantiations    3404
;  :rlimit-count            551007)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@64@06 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3341
;  :arith-assert-lower      6714
;  :arith-assert-upper      4143
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3521
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1062
;  :binary-propagations     11
;  :conflicts               1347
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20429
;  :mk-clause               12493
;  :num-allocs              13633432
;  :num-checks              590
;  :propagations            12773
;  :quant-instantiations    3404
;  :rlimit-count            551018)
(assert (< $k@98@06 $k@64@06))
(assert (<= $Perm.No (- $k@64@06 $k@98@06)))
(assert (<= (- $k@64@06 $k@98@06) $Perm.Write))
(assert (implies (< $Perm.No (- $k@64@06 $k@98@06)) (not (= diz@32@06 $Ref.null))))
; [eval] 0 < diz.Main_MIN_DIST
(push) ; 7
(assert (not (< $Perm.No $k@64@06)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3341
;  :arith-assert-lower      6716
;  :arith-assert-upper      4144
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3521
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1062
;  :binary-propagations     11
;  :conflicts               1348
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20432
;  :mk-clause               12493
;  :num-allocs              13633432
;  :num-checks              591
;  :propagations            12773
;  :quant-instantiations    3404
;  :rlimit-count            551226)
(declare-const $k@99@06 $Perm)
(assert ($Perm.isReadVar $k@99@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@99@06 $Perm.No) (< $Perm.No $k@99@06))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3342
;  :arith-assert-lower      6718
;  :arith-assert-upper      4145
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3522
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1062
;  :binary-propagations     11
;  :conflicts               1349
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20436
;  :mk-clause               12495
;  :num-allocs              13633432
;  :num-checks              592
;  :propagations            12774
;  :quant-instantiations    3404
;  :rlimit-count            551424)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@65@06 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3342
;  :arith-assert-lower      6718
;  :arith-assert-upper      4145
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3522
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1062
;  :binary-propagations     11
;  :conflicts               1349
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20436
;  :mk-clause               12495
;  :num-allocs              13633432
;  :num-checks              593
;  :propagations            12774
;  :quant-instantiations    3404
;  :rlimit-count            551435)
(assert (< $k@99@06 $k@65@06))
(assert (<= $Perm.No (- $k@65@06 $k@99@06)))
(assert (<= (- $k@65@06 $k@99@06) $Perm.Write))
(assert (implies (< $Perm.No (- $k@65@06 $k@99@06)) (not (= diz@32@06 $Ref.null))))
; [eval] diz.Main_sensor != null
(push) ; 7
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3342
;  :arith-assert-lower      6720
;  :arith-assert-upper      4146
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3522
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1063
;  :binary-propagations     11
;  :conflicts               1350
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20439
;  :mk-clause               12495
;  :num-allocs              13633432
;  :num-checks              594
;  :propagations            12774
;  :quant-instantiations    3404
;  :rlimit-count            551649)
(push) ; 7
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3342
;  :arith-assert-lower      6720
;  :arith-assert-upper      4146
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3522
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1063
;  :binary-propagations     11
;  :conflicts               1351
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20439
;  :mk-clause               12495
;  :num-allocs              13633432
;  :num-checks              595
;  :propagations            12774
;  :quant-instantiations    3404
;  :rlimit-count            551697)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3342
;  :arith-assert-lower      6720
;  :arith-assert-upper      4146
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3522
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1063
;  :binary-propagations     11
;  :conflicts               1351
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20439
;  :mk-clause               12495
;  :num-allocs              13633432
;  :num-checks              596
;  :propagations            12774
;  :quant-instantiations    3404
;  :rlimit-count            551710)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3342
;  :arith-assert-lower      6720
;  :arith-assert-upper      4146
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3522
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1063
;  :binary-propagations     11
;  :conflicts               1352
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20439
;  :mk-clause               12495
;  :num-allocs              13633432
;  :num-checks              597
;  :propagations            12774
;  :quant-instantiations    3404
;  :rlimit-count            551758)
(declare-const $k@100@06 $Perm)
(assert ($Perm.isReadVar $k@100@06 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@100@06 $Perm.No) (< $Perm.No $k@100@06))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3343
;  :arith-assert-lower      6722
;  :arith-assert-upper      4147
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3523
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1063
;  :binary-propagations     11
;  :conflicts               1353
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20443
;  :mk-clause               12497
;  :num-allocs              13633432
;  :num-checks              598
;  :propagations            12775
;  :quant-instantiations    3404
;  :rlimit-count            551957)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@66@06 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3343
;  :arith-assert-lower      6722
;  :arith-assert-upper      4147
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3523
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1063
;  :binary-propagations     11
;  :conflicts               1353
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20443
;  :mk-clause               12497
;  :num-allocs              13633432
;  :num-checks              599
;  :propagations            12775
;  :quant-instantiations    3404
;  :rlimit-count            551968)
(assert (< $k@100@06 $k@66@06))
(assert (<= $Perm.No (- $k@66@06 $k@100@06)))
(assert (<= (- $k@66@06 $k@100@06) $Perm.Write))
(assert (implies (< $Perm.No (- $k@66@06 $k@100@06)) (not (= diz@32@06 $Ref.null))))
; [eval] diz.Main_controller != null
(push) ; 7
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3343
;  :arith-assert-lower      6724
;  :arith-assert-upper      4148
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3523
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1063
;  :binary-propagations     11
;  :conflicts               1354
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20446
;  :mk-clause               12497
;  :num-allocs              13633432
;  :num-checks              600
;  :propagations            12775
;  :quant-instantiations    3404
;  :rlimit-count            552176)
(push) ; 7
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3343
;  :arith-assert-lower      6724
;  :arith-assert-upper      4148
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3523
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1063
;  :binary-propagations     11
;  :conflicts               1355
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20446
;  :mk-clause               12497
;  :num-allocs              13633432
;  :num-checks              601
;  :propagations            12775
;  :quant-instantiations    3404
;  :rlimit-count            552224)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3343
;  :arith-assert-lower      6724
;  :arith-assert-upper      4148
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3523
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1063
;  :binary-propagations     11
;  :conflicts               1355
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20446
;  :mk-clause               12497
;  :num-allocs              13633432
;  :num-checks              602
;  :propagations            12775
;  :quant-instantiations    3404
;  :rlimit-count            552237)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3343
;  :arith-assert-lower      6724
;  :arith-assert-upper      4148
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3523
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1063
;  :binary-propagations     11
;  :conflicts               1356
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20446
;  :mk-clause               12497
;  :num-allocs              13633432
;  :num-checks              603
;  :propagations            12775
;  :quant-instantiations    3404
;  :rlimit-count            552285)
; [eval] diz.Main_process_state[0] == -1 || diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43740
;  :arith-add-rows          1996
;  :arith-assert-diseq      3343
;  :arith-assert-lower      6724
;  :arith-assert-upper      4148
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3523
;  :arith-fixed-eqs         2189
;  :arith-offset-eqs        886
;  :arith-pivots            1063
;  :binary-propagations     11
;  :conflicts               1356
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20446
;  :mk-clause               12497
;  :num-allocs              13633432
;  :num-checks              604
;  :propagations            12775
;  :quant-instantiations    3404
;  :rlimit-count            552300)
; [eval] -1
(push) ; 7
; [then-branch: 187 | First:(Second:($t@72@06))[0] == -1 | live]
; [else-branch: 187 | First:(Second:($t@72@06))[0] != -1 | live]
(push) ; 8
; [then-branch: 187 | First:(Second:($t@72@06))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    0)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 187 | First:(Second:($t@72@06))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[0] == 0
; [eval] diz.Main_process_state[0]
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43745
;  :arith-add-rows          1996
;  :arith-assert-diseq      3345
;  :arith-assert-lower      6731
;  :arith-assert-upper      4151
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3526
;  :arith-fixed-eqs         2190
;  :arith-offset-eqs        886
;  :arith-pivots            1064
;  :binary-propagations     11
;  :conflicts               1356
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6834
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7667
;  :del-clause              12452
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20460
;  :mk-clause               12514
;  :num-allocs              13633432
;  :num-checks              605
;  :propagations            12783
;  :quant-instantiations    3408
;  :rlimit-count            552600)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43785
;  :arith-add-rows          1996
;  :arith-assert-diseq      3351
;  :arith-assert-lower      6739
;  :arith-assert-upper      4158
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3533
;  :arith-fixed-eqs         2191
;  :arith-offset-eqs        886
;  :arith-pivots            1067
;  :binary-propagations     11
;  :conflicts               1366
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6840
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7676
;  :del-clause              12494
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20483
;  :mk-clause               12539
;  :num-allocs              13633432
;  :num-checks              606
;  :propagations            12801
;  :quant-instantiations    3414
;  :rlimit-count            553145)
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      0)
    0)))
; [eval] diz.Main_process_state[1] == -1 || diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(push) ; 7
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43785
;  :arith-add-rows          1996
;  :arith-assert-diseq      3351
;  :arith-assert-lower      6739
;  :arith-assert-upper      4158
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3533
;  :arith-fixed-eqs         2191
;  :arith-offset-eqs        886
;  :arith-pivots            1067
;  :binary-propagations     11
;  :conflicts               1366
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6840
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7676
;  :del-clause              12494
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20484
;  :mk-clause               12540
;  :num-allocs              13633432
;  :num-checks              607
;  :propagations            12801
;  :quant-instantiations    3414
;  :rlimit-count            553261)
; [eval] -1
(push) ; 7
; [then-branch: 188 | First:(Second:($t@72@06))[1] == -1 | live]
; [else-branch: 188 | First:(Second:($t@72@06))[1] != -1 | live]
(push) ; 8
; [then-branch: 188 | First:(Second:($t@72@06))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 188 | First:(Second:($t@72@06))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[1] == 2
; [eval] diz.Main_process_state[1]
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43790
;  :arith-add-rows          1996
;  :arith-assert-diseq      3353
;  :arith-assert-lower      6746
;  :arith-assert-upper      4161
;  :arith-bound-prop        559
;  :arith-conflicts         119
;  :arith-eq-adapter        3536
;  :arith-fixed-eqs         2192
;  :arith-offset-eqs        886
;  :arith-pivots            1068
;  :binary-propagations     11
;  :conflicts               1366
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6840
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7676
;  :del-clause              12494
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20498
;  :mk-clause               12557
;  :num-allocs              13633432
;  :num-checks              608
;  :propagations            12809
;  :quant-instantiations    3418
;  :rlimit-count            553563)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1)
    2))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43848
;  :arith-add-rows          1996
;  :arith-assert-diseq      3363
;  :arith-assert-lower      6756
;  :arith-assert-upper      4174
;  :arith-bound-prop        559
;  :arith-conflicts         120
;  :arith-eq-adapter        3549
;  :arith-fixed-eqs         2193
;  :arith-offset-eqs        886
;  :arith-pivots            1069
;  :binary-propagations     11
;  :conflicts               1377
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6846
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7686
;  :del-clause              12562
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20538
;  :mk-clause               12608
;  :num-allocs              13633432
;  :num-checks              609
;  :propagations            12844
;  :quant-instantiations    3427
;  :rlimit-count            554218)
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1)
    (- 0 1))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1)
    2)))
; [eval] diz.Main_event_state[0] != -1
; [eval] diz.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43848
;  :arith-add-rows          1996
;  :arith-assert-diseq      3363
;  :arith-assert-lower      6756
;  :arith-assert-upper      4174
;  :arith-bound-prop        559
;  :arith-conflicts         120
;  :arith-eq-adapter        3549
;  :arith-fixed-eqs         2193
;  :arith-offset-eqs        886
;  :arith-pivots            1069
;  :binary-propagations     11
;  :conflicts               1377
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6846
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7686
;  :del-clause              12562
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20539
;  :mk-clause               12609
;  :num-allocs              13633432
;  :num-checks              610
;  :propagations            12844
;  :quant-instantiations    3427
;  :rlimit-count            554334)
; [eval] -1
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      0)
    (- 0 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43849
;  :arith-add-rows          1996
;  :arith-assert-diseq      3363
;  :arith-assert-lower      6756
;  :arith-assert-upper      4174
;  :arith-bound-prop        559
;  :arith-conflicts         120
;  :arith-eq-adapter        3549
;  :arith-fixed-eqs         2193
;  :arith-offset-eqs        886
;  :arith-pivots            1069
;  :binary-propagations     11
;  :conflicts               1378
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6846
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7686
;  :del-clause              12562
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20540
;  :mk-clause               12609
;  :num-allocs              13633432
;  :num-checks              611
;  :propagations            12844
;  :quant-instantiations    3427
;  :rlimit-count            554448)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] != 0
; [eval] diz.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43850
;  :arith-add-rows          1996
;  :arith-assert-diseq      3363
;  :arith-assert-lower      6756
;  :arith-assert-upper      4174
;  :arith-bound-prop        559
;  :arith-conflicts         120
;  :arith-eq-adapter        3549
;  :arith-fixed-eqs         2193
;  :arith-offset-eqs        886
;  :arith-pivots            1069
;  :binary-propagations     11
;  :conflicts               1378
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6846
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7686
;  :del-clause              12562
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20541
;  :mk-clause               12609
;  :num-allocs              13633432
;  :num-checks              612
;  :propagations            12844
;  :quant-instantiations    3427
;  :rlimit-count            554585)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      0)
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43851
;  :arith-add-rows          1996
;  :arith-assert-diseq      3363
;  :arith-assert-lower      6756
;  :arith-assert-upper      4174
;  :arith-bound-prop        559
;  :arith-conflicts         120
;  :arith-eq-adapter        3549
;  :arith-fixed-eqs         2193
;  :arith-offset-eqs        886
;  :arith-pivots            1069
;  :binary-propagations     11
;  :conflicts               1379
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6846
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7686
;  :del-clause              12562
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20542
;  :mk-clause               12609
;  :num-allocs              13633432
;  :num-checks              613
;  :propagations            12844
;  :quant-instantiations    3427
;  :rlimit-count            554693)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      0)
    0)))
; [eval] diz.Main_event_state[2] <= -1
; [eval] diz.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43852
;  :arith-add-rows          1996
;  :arith-assert-diseq      3363
;  :arith-assert-lower      6756
;  :arith-assert-upper      4174
;  :arith-bound-prop        559
;  :arith-conflicts         120
;  :arith-eq-adapter        3549
;  :arith-fixed-eqs         2193
;  :arith-offset-eqs        886
;  :arith-pivots            1069
;  :binary-propagations     11
;  :conflicts               1379
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6846
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7686
;  :del-clause              12562
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20543
;  :mk-clause               12609
;  :num-allocs              13633432
;  :num-checks              614
;  :propagations            12844
;  :quant-instantiations    3427
;  :rlimit-count            554824)
; [eval] -1
(push) ; 7
(assert (not (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    2)
  (- 0 1))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43903
;  :arith-add-rows          1996
;  :arith-assert-diseq      3373
;  :arith-assert-lower      6760
;  :arith-assert-upper      4190
;  :arith-bound-prop        559
;  :arith-conflicts         122
;  :arith-eq-adapter        3564
;  :arith-fixed-eqs         2194
;  :arith-offset-eqs        886
;  :arith-pivots            1071
;  :binary-propagations     11
;  :conflicts               1390
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6852
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7696
;  :del-clause              12605
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20583
;  :mk-clause               12652
;  :num-allocs              13633432
;  :num-checks              615
;  :propagations            12872
;  :quant-instantiations    3427
;  :rlimit-count            555249)
(assert (<=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    2)
  (- 0 1)))
; [eval] !diz.Main_controller.Controller_init || (diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1)
; [eval] !diz.Main_controller.Controller_init
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43903
;  :arith-add-rows          1996
;  :arith-assert-diseq      3373
;  :arith-assert-lower      6760
;  :arith-assert-upper      4191
;  :arith-bound-prop        559
;  :arith-conflicts         122
;  :arith-eq-adapter        3564
;  :arith-fixed-eqs         2194
;  :arith-offset-eqs        886
;  :arith-pivots            1071
;  :binary-propagations     11
;  :conflicts               1391
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6852
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7696
;  :del-clause              12605
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20584
;  :mk-clause               12652
;  :num-allocs              13633432
;  :num-checks              616
;  :propagations            12872
;  :quant-instantiations    3427
;  :rlimit-count            555401)
(push) ; 7
; [then-branch: 189 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))) | live]
; [else-branch: 189 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 189 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 189 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1 ==> diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43907
;  :arith-add-rows          1996
;  :arith-assert-diseq      3373
;  :arith-assert-lower      6760
;  :arith-assert-upper      4191
;  :arith-bound-prop        559
;  :arith-conflicts         122
;  :arith-eq-adapter        3564
;  :arith-fixed-eqs         2194
;  :arith-offset-eqs        886
;  :arith-pivots            1071
;  :binary-propagations     11
;  :conflicts               1391
;  :datatype-accessor-ax    1464
;  :datatype-constructor-ax 6852
;  :datatype-occurs-check   2923
;  :datatype-splits         4696
;  :decisions               7696
;  :del-clause              12605
;  :final-checks            523
;  :interface-eqs           77
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          331
;  :mk-bool-var             20586
;  :mk-clause               12652
;  :num-allocs              13633432
;  :num-checks              617
;  :propagations            12872
;  :quant-instantiations    3429
;  :rlimit-count            555738)
; [eval] -1
(push) ; 9
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44328
;  :arith-add-rows          1998
;  :arith-assert-diseq      3389
;  :arith-assert-lower      6795
;  :arith-assert-upper      4230
;  :arith-bound-prop        559
;  :arith-conflicts         123
;  :arith-eq-adapter        3596
;  :arith-fixed-eqs         2206
;  :arith-offset-eqs        886
;  :arith-pivots            1078
;  :binary-propagations     11
;  :conflicts               1400
;  :datatype-accessor-ax    1483
;  :datatype-constructor-ax 6940
;  :datatype-occurs-check   2953
;  :datatype-splits         4764
;  :decisions               7781
;  :del-clause              12682
;  :final-checks            531
;  :interface-eqs           79
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          332
;  :mk-bool-var             20767
;  :mk-clause               12729
;  :num-allocs              13633432
;  :num-checks              618
;  :propagations            12932
;  :quant-instantiations    3445
;  :rlimit-count            558619
;  :time                    0.00)
(push) ; 10
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44677
;  :arith-add-rows          2000
;  :arith-assert-diseq      3398
;  :arith-assert-lower      6823
;  :arith-assert-upper      4260
;  :arith-bound-prop        559
;  :arith-conflicts         123
;  :arith-eq-adapter        3617
;  :arith-fixed-eqs         2221
;  :arith-offset-eqs        888
;  :arith-pivots            1085
;  :binary-propagations     11
;  :conflicts               1405
;  :datatype-accessor-ax    1495
;  :datatype-constructor-ax 7015
;  :datatype-occurs-check   2978
;  :datatype-splits         4814
;  :decisions               7854
;  :del-clause              12755
;  :final-checks            537
;  :interface-eqs           80
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          332
;  :mk-bool-var             20896
;  :mk-clause               12802
;  :num-allocs              13633432
;  :num-checks              619
;  :propagations            12982
;  :quant-instantiations    3453
;  :rlimit-count            561076
;  :time                    0.00)
; [then-branch: 190 | First:(Second:($t@72@06))[1] == -1 | live]
; [else-branch: 190 | First:(Second:($t@72@06))[1] != -1 | live]
(push) ; 10
; [then-branch: 190 | First:(Second:($t@72@06))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
    1)
  (- 0 1)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44679
;  :arith-add-rows          2000
;  :arith-assert-diseq      3398
;  :arith-assert-lower      6823
;  :arith-assert-upper      4260
;  :arith-bound-prop        559
;  :arith-conflicts         123
;  :arith-eq-adapter        3617
;  :arith-fixed-eqs         2221
;  :arith-offset-eqs        888
;  :arith-pivots            1085
;  :binary-propagations     11
;  :conflicts               1405
;  :datatype-accessor-ax    1495
;  :datatype-constructor-ax 7015
;  :datatype-occurs-check   2978
;  :datatype-splits         4814
;  :decisions               7854
;  :del-clause              12755
;  :final-checks            537
;  :interface-eqs           80
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          332
;  :mk-bool-var             20896
;  :mk-clause               12802
;  :num-allocs              13633432
;  :num-checks              620
;  :propagations            12982
;  :quant-instantiations    3453
;  :rlimit-count            561187)
; [eval] -1
(pop) ; 10
(push) ; 10
; [else-branch: 190 | First:(Second:($t@72@06))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1)
    (- 0 1))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0)
        (- 0 1)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44727
;  :arith-add-rows          2000
;  :arith-assert-diseq      3404
;  :arith-assert-lower      6823
;  :arith-assert-upper      4264
;  :arith-bound-prop        559
;  :arith-conflicts         123
;  :arith-eq-adapter        3622
;  :arith-fixed-eqs         2221
;  :arith-offset-eqs        888
;  :arith-pivots            1085
;  :binary-propagations     11
;  :conflicts               1415
;  :datatype-accessor-ax    1495
;  :datatype-constructor-ax 7021
;  :datatype-occurs-check   2978
;  :datatype-splits         4814
;  :decisions               7863
;  :del-clause              12770
;  :final-checks            537
;  :interface-eqs           80
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          332
;  :mk-bool-var             20911
;  :mk-clause               12817
;  :num-allocs              13633432
;  :num-checks              621
;  :propagations            12993
;  :quant-instantiations    3459
;  :rlimit-count            561914)
(assert (or
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
  (implies
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)
      (- 0 1))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
          0)
        (- 0 1))))))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_process_state[0] != -1
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44727
;  :arith-add-rows          2000
;  :arith-assert-diseq      3404
;  :arith-assert-lower      6823
;  :arith-assert-upper      4264
;  :arith-bound-prop        559
;  :arith-conflicts         123
;  :arith-eq-adapter        3622
;  :arith-fixed-eqs         2221
;  :arith-offset-eqs        888
;  :arith-pivots            1085
;  :binary-propagations     11
;  :conflicts               1415
;  :datatype-accessor-ax    1495
;  :datatype-constructor-ax 7021
;  :datatype-occurs-check   2978
;  :datatype-splits         4814
;  :decisions               7863
;  :del-clause              12770
;  :final-checks            537
;  :interface-eqs           80
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          332
;  :mk-bool-var             20911
;  :mk-clause               12818
;  :num-allocs              13633432
;  :num-checks              622
;  :propagations            12993
;  :quant-instantiations    3459
;  :rlimit-count            562284)
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      2)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45303
;  :arith-add-rows          2001
;  :arith-assert-diseq      3417
;  :arith-assert-lower      6853
;  :arith-assert-upper      4302
;  :arith-bound-prop        559
;  :arith-conflicts         126
;  :arith-eq-adapter        3652
;  :arith-fixed-eqs         2236
;  :arith-offset-eqs        888
;  :arith-pivots            1086
;  :binary-propagations     11
;  :conflicts               1429
;  :datatype-accessor-ax    1524
;  :datatype-constructor-ax 7144
;  :datatype-occurs-check   3028
;  :datatype-splits         4930
;  :decisions               7976
;  :del-clause              12841
;  :final-checks            550
;  :interface-eqs           83
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21140
;  :mk-clause               12889
;  :num-allocs              13633432
;  :num-checks              623
;  :propagations            13053
;  :quant-instantiations    3466
;  :rlimit-count            565643
;  :time                    0.00)
(push) ; 8
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45461
;  :arith-add-rows          2003
;  :arith-assert-diseq      3419
;  :arith-assert-lower      6860
;  :arith-assert-upper      4314
;  :arith-bound-prop        559
;  :arith-conflicts         126
;  :arith-eq-adapter        3659
;  :arith-fixed-eqs         2242
;  :arith-offset-eqs        889
;  :arith-pivots            1091
;  :binary-propagations     11
;  :conflicts               1429
;  :datatype-accessor-ax    1527
;  :datatype-constructor-ax 7173
;  :datatype-occurs-check   3042
;  :datatype-splits         4953
;  :decisions               8007
;  :del-clause              12854
;  :final-checks            553
;  :interface-eqs           83
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21181
;  :mk-clause               12902
;  :num-allocs              13633432
;  :num-checks              624
;  :propagations            13071
;  :quant-instantiations    3467
;  :rlimit-count            567070
;  :time                    0.00)
; [then-branch: 191 | -1 <= First:(Second:(Second:(Second:($t@72@06))))[2] | live]
; [else-branch: 191 | !(-1 <= First:(Second:(Second:(Second:($t@72@06))))[2]) | live]
(push) ; 8
; [then-branch: 191 | -1 <= First:(Second:(Second:(Second:($t@72@06))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    2)))
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45462
;  :arith-add-rows          2003
;  :arith-assert-diseq      3419
;  :arith-assert-lower      6861
;  :arith-assert-upper      4314
;  :arith-bound-prop        559
;  :arith-conflicts         126
;  :arith-eq-adapter        3659
;  :arith-fixed-eqs         2243
;  :arith-offset-eqs        889
;  :arith-pivots            1091
;  :binary-propagations     11
;  :conflicts               1429
;  :datatype-accessor-ax    1527
;  :datatype-constructor-ax 7173
;  :datatype-occurs-check   3042
;  :datatype-splits         4953
;  :decisions               8007
;  :del-clause              12854
;  :final-checks            553
;  :interface-eqs           83
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21182
;  :mk-clause               12902
;  :num-allocs              13633432
;  :num-checks              625
;  :propagations            13071
;  :quant-instantiations    3467
;  :rlimit-count            567198)
; [eval] -1
(pop) ; 8
(push) ; 8
; [else-branch: 191 | !(-1 <= First:(Second:(Second:(Second:($t@72@06))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      2))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0)
      (- 0 1))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45503
;  :arith-add-rows          2004
;  :arith-assert-diseq      3424
;  :arith-assert-lower      6866
;  :arith-assert-upper      4320
;  :arith-bound-prop        559
;  :arith-conflicts         127
;  :arith-eq-adapter        3664
;  :arith-fixed-eqs         2246
;  :arith-offset-eqs        889
;  :arith-pivots            1092
;  :binary-propagations     11
;  :conflicts               1439
;  :datatype-accessor-ax    1527
;  :datatype-constructor-ax 7179
;  :datatype-occurs-check   3042
;  :datatype-splits         4953
;  :decisions               8016
;  :del-clause              12860
;  :final-checks            553
;  :interface-eqs           83
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21195
;  :mk-clause               12908
;  :num-allocs              13633432
;  :num-checks              626
;  :propagations            13083
;  :quant-instantiations    3470
;  :rlimit-count            567702)
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      2))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0)
      (- 0 1)))))
; [eval] -1 <= diz.Main_event_state[2] ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] -1 <= diz.Main_event_state[2]
; [eval] -1
; [eval] diz.Main_event_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45503
;  :arith-add-rows          2004
;  :arith-assert-diseq      3424
;  :arith-assert-lower      6866
;  :arith-assert-upper      4320
;  :arith-bound-prop        559
;  :arith-conflicts         127
;  :arith-eq-adapter        3664
;  :arith-fixed-eqs         2246
;  :arith-offset-eqs        889
;  :arith-pivots            1092
;  :binary-propagations     11
;  :conflicts               1439
;  :datatype-accessor-ax    1527
;  :datatype-constructor-ax 7179
;  :datatype-occurs-check   3042
;  :datatype-splits         4953
;  :decisions               8016
;  :del-clause              12860
;  :final-checks            553
;  :interface-eqs           83
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21196
;  :mk-clause               12909
;  :num-allocs              13633432
;  :num-checks              627
;  :propagations            13083
;  :quant-instantiations    3470
;  :rlimit-count            567894)
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      2)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46069
;  :arith-add-rows          2004
;  :arith-assert-diseq      3436
;  :arith-assert-lower      6891
;  :arith-assert-upper      4358
;  :arith-bound-prop        559
;  :arith-conflicts         130
;  :arith-eq-adapter        3690
;  :arith-fixed-eqs         2261
;  :arith-offset-eqs        889
;  :arith-pivots            1092
;  :binary-propagations     11
;  :conflicts               1454
;  :datatype-accessor-ax    1556
;  :datatype-constructor-ax 7302
;  :datatype-occurs-check   3092
;  :datatype-splits         5069
;  :decisions               8128
;  :del-clause              12923
;  :final-checks            566
;  :interface-eqs           86
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21417
;  :mk-clause               12972
;  :num-allocs              13633432
;  :num-checks              628
;  :propagations            13142
;  :quant-instantiations    3477
;  :rlimit-count            571188
;  :time                    0.00)
(push) ; 8
(assert (not (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46227
;  :arith-add-rows          2006
;  :arith-assert-diseq      3438
;  :arith-assert-lower      6898
;  :arith-assert-upper      4370
;  :arith-bound-prop        559
;  :arith-conflicts         130
;  :arith-eq-adapter        3697
;  :arith-fixed-eqs         2267
;  :arith-offset-eqs        890
;  :arith-pivots            1097
;  :binary-propagations     11
;  :conflicts               1454
;  :datatype-accessor-ax    1559
;  :datatype-constructor-ax 7331
;  :datatype-occurs-check   3106
;  :datatype-splits         5092
;  :decisions               8159
;  :del-clause              12936
;  :final-checks            569
;  :interface-eqs           86
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21457
;  :mk-clause               12985
;  :num-allocs              13633432
;  :num-checks              629
;  :propagations            13160
;  :quant-instantiations    3478
;  :rlimit-count            572616
;  :time                    0.00)
; [then-branch: 192 | -1 <= First:(Second:(Second:(Second:($t@72@06))))[2] | live]
; [else-branch: 192 | !(-1 <= First:(Second:(Second:(Second:($t@72@06))))[2]) | live]
(push) ; 8
; [then-branch: 192 | -1 <= First:(Second:(Second:(Second:($t@72@06))))[2]]
(assert (<=
  (- 0 1)
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
    2)))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46234
;  :arith-add-rows          2006
;  :arith-assert-diseq      3439
;  :arith-assert-lower      6903
;  :arith-assert-upper      4374
;  :arith-bound-prop        559
;  :arith-conflicts         130
;  :arith-eq-adapter        3700
;  :arith-fixed-eqs         2268
;  :arith-offset-eqs        890
;  :arith-pivots            1097
;  :binary-propagations     11
;  :conflicts               1455
;  :datatype-accessor-ax    1559
;  :datatype-constructor-ax 7331
;  :datatype-occurs-check   3106
;  :datatype-splits         5092
;  :decisions               8159
;  :del-clause              12936
;  :final-checks            569
;  :interface-eqs           86
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21469
;  :mk-clause               12994
;  :num-allocs              13633432
;  :num-checks              630
;  :propagations            13166
;  :quant-instantiations    3482
;  :rlimit-count            572926)
(push) ; 9
(assert (not (< $Perm.No $k@64@06)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46234
;  :arith-add-rows          2006
;  :arith-assert-diseq      3439
;  :arith-assert-lower      6903
;  :arith-assert-upper      4374
;  :arith-bound-prop        559
;  :arith-conflicts         130
;  :arith-eq-adapter        3700
;  :arith-fixed-eqs         2268
;  :arith-offset-eqs        890
;  :arith-pivots            1097
;  :binary-propagations     11
;  :conflicts               1456
;  :datatype-accessor-ax    1559
;  :datatype-constructor-ax 7331
;  :datatype-occurs-check   3106
;  :datatype-splits         5092
;  :decisions               8159
;  :del-clause              12936
;  :final-checks            569
;  :interface-eqs           86
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21469
;  :mk-clause               12994
;  :num-allocs              13633432
;  :num-checks              631
;  :propagations            13166
;  :quant-instantiations    3482
;  :rlimit-count            572974)
(pop) ; 8
(push) ; 8
; [else-branch: 192 | !(-1 <= First:(Second:(Second:(Second:($t@72@06))))[2])]
(assert (not
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      2))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 7
(assert (not (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46245
;  :arith-add-rows          2006
;  :arith-assert-diseq      3442
;  :arith-assert-lower      6907
;  :arith-assert-upper      4383
;  :arith-bound-prop        559
;  :arith-conflicts         131
;  :arith-eq-adapter        3704
;  :arith-fixed-eqs         2270
;  :arith-offset-eqs        890
;  :arith-pivots            1097
;  :binary-propagations     11
;  :conflicts               1457
;  :datatype-accessor-ax    1559
;  :datatype-constructor-ax 7331
;  :datatype-occurs-check   3106
;  :datatype-splits         5092
;  :decisions               8159
;  :del-clause              12957
;  :final-checks            569
;  :interface-eqs           86
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21485
;  :mk-clause               13006
;  :num-allocs              13633432
;  :num-checks              632
;  :propagations            13178
;  :quant-instantiations    3487
;  :rlimit-count            573523)
(assert (implies
  (<=
    (- 0 1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06)))))
      2))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1 ==> diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
; [eval] diz.Main_controller.Controller_init && diz.Main_process_state[1] == -1
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@66@06)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46245
;  :arith-add-rows          2006
;  :arith-assert-diseq      3442
;  :arith-assert-lower      6907
;  :arith-assert-upper      4383
;  :arith-bound-prop        559
;  :arith-conflicts         131
;  :arith-eq-adapter        3704
;  :arith-fixed-eqs         2270
;  :arith-offset-eqs        890
;  :arith-pivots            1097
;  :binary-propagations     11
;  :conflicts               1458
;  :datatype-accessor-ax    1559
;  :datatype-constructor-ax 7331
;  :datatype-occurs-check   3106
;  :datatype-splits         5092
;  :decisions               8159
;  :del-clause              12957
;  :final-checks            569
;  :interface-eqs           86
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21485
;  :mk-clause               13007
;  :num-allocs              13633432
;  :num-checks              633
;  :propagations            13178
;  :quant-instantiations    3487
;  :rlimit-count            573898)
(push) ; 7
; [then-branch: 193 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))) | live]
; [else-branch: 193 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 193 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46249
;  :arith-add-rows          2006
;  :arith-assert-diseq      3442
;  :arith-assert-lower      6907
;  :arith-assert-upper      4383
;  :arith-bound-prop        559
;  :arith-conflicts         131
;  :arith-eq-adapter        3704
;  :arith-fixed-eqs         2270
;  :arith-offset-eqs        890
;  :arith-pivots            1097
;  :binary-propagations     11
;  :conflicts               1458
;  :datatype-accessor-ax    1559
;  :datatype-constructor-ax 7331
;  :datatype-occurs-check   3106
;  :datatype-splits         5092
;  :decisions               8159
;  :del-clause              12957
;  :final-checks            569
;  :interface-eqs           86
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21487
;  :mk-clause               13007
;  :num-allocs              13633432
;  :num-checks              634
;  :propagations            13178
;  :quant-instantiations    3489
;  :rlimit-count            574187)
; [eval] -1
(pop) ; 8
(push) ; 8
; [else-branch: 193 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46669
;  :arith-add-rows          2010
;  :arith-assert-diseq      3455
;  :arith-assert-lower      6934
;  :arith-assert-upper      4418
;  :arith-bound-prop        561
;  :arith-conflicts         132
;  :arith-eq-adapter        3731
;  :arith-fixed-eqs         2282
;  :arith-offset-eqs        890
;  :arith-pivots            1104
;  :binary-propagations     11
;  :conflicts               1467
;  :datatype-accessor-ax    1578
;  :datatype-constructor-ax 7419
;  :datatype-occurs-check   3136
;  :datatype-splits         5160
;  :decisions               8244
;  :del-clause              13025
;  :final-checks            577
;  :interface-eqs           88
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21656
;  :mk-clause               13075
;  :num-allocs              13633432
;  :num-checks              635
;  :propagations            13235
;  :quant-instantiations    3503
;  :rlimit-count            577353
;  :time                    0.00)
(push) ; 8
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46827
;  :arith-add-rows          2012
;  :arith-assert-diseq      3457
;  :arith-assert-lower      6941
;  :arith-assert-upper      4430
;  :arith-bound-prop        561
;  :arith-conflicts         132
;  :arith-eq-adapter        3738
;  :arith-fixed-eqs         2288
;  :arith-offset-eqs        891
;  :arith-pivots            1109
;  :binary-propagations     11
;  :conflicts               1467
;  :datatype-accessor-ax    1581
;  :datatype-constructor-ax 7448
;  :datatype-occurs-check   3150
;  :datatype-splits         5183
;  :decisions               8275
;  :del-clause              13039
;  :final-checks            580
;  :interface-eqs           88
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21696
;  :mk-clause               13089
;  :num-allocs              13633432
;  :num-checks              636
;  :propagations            13254
;  :quant-instantiations    3504
;  :rlimit-count            578978
;  :time                    0.00)
; [then-branch: 194 | First:(Second:($t@72@06))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))) | live]
; [else-branch: 194 | !(First:(Second:($t@72@06))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))) | live]
(push) ; 8
; [then-branch: 194 | First:(Second:($t@72@06))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06)))))))))))))))))))]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
      1)
    (- 0 1))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))))))
; [eval] diz.Main_sensor.Sensor_dist < diz.Main_MIN_DIST
(push) ; 9
(assert (not (< $Perm.No $k@65@06)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46837
;  :arith-add-rows          2012
;  :arith-assert-diseq      3458
;  :arith-assert-lower      6945
;  :arith-assert-upper      4434
;  :arith-bound-prop        561
;  :arith-conflicts         132
;  :arith-eq-adapter        3741
;  :arith-fixed-eqs         2288
;  :arith-offset-eqs        891
;  :arith-pivots            1109
;  :binary-propagations     11
;  :conflicts               1468
;  :datatype-accessor-ax    1581
;  :datatype-constructor-ax 7448
;  :datatype-occurs-check   3150
;  :datatype-splits         5183
;  :decisions               8275
;  :del-clause              13039
;  :final-checks            580
;  :interface-eqs           88
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21710
;  :mk-clause               13098
;  :num-allocs              13633432
;  :num-checks              637
;  :propagations            13259
;  :quant-instantiations    3510
;  :rlimit-count            579510)
(push) ; 9
(assert (not (< $Perm.No $k@64@06)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46837
;  :arith-add-rows          2012
;  :arith-assert-diseq      3458
;  :arith-assert-lower      6945
;  :arith-assert-upper      4434
;  :arith-bound-prop        561
;  :arith-conflicts         132
;  :arith-eq-adapter        3741
;  :arith-fixed-eqs         2288
;  :arith-offset-eqs        891
;  :arith-pivots            1109
;  :binary-propagations     11
;  :conflicts               1469
;  :datatype-accessor-ax    1581
;  :datatype-constructor-ax 7448
;  :datatype-occurs-check   3150
;  :datatype-splits         5183
;  :decisions               8275
;  :del-clause              13039
;  :final-checks            580
;  :interface-eqs           88
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21710
;  :mk-clause               13098
;  :num-allocs              13633432
;  :num-checks              638
;  :propagations            13259
;  :quant-instantiations    3510
;  :rlimit-count            579558)
(pop) ; 8
(push) ; 8
; [else-branch: 194 | !(First:(Second:($t@72@06))[1] == -1 && First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@62@06))))))))))))))))))))]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 7
(assert (not (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46845
;  :arith-add-rows          2012
;  :arith-assert-diseq      3461
;  :arith-assert-lower      6945
;  :arith-assert-upper      4439
;  :arith-bound-prop        561
;  :arith-conflicts         132
;  :arith-eq-adapter        3743
;  :arith-fixed-eqs         2288
;  :arith-offset-eqs        891
;  :arith-pivots            1109
;  :binary-propagations     11
;  :conflicts               1470
;  :datatype-accessor-ax    1581
;  :datatype-constructor-ax 7448
;  :datatype-occurs-check   3150
;  :datatype-splits         5183
;  :decisions               8275
;  :del-clause              13068
;  :final-checks            580
;  :interface-eqs           88
;  :max-generation          4
;  :max-memory              5.57
;  :memory                  5.47
;  :minimized-lits          333
;  :mk-bool-var             21725
;  :mk-clause               13118
;  :num-allocs              13633432
;  :num-checks              639
;  :propagations            13270
;  :quant-instantiations    3518
;  :rlimit-count            580250)
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)
      (- 0 1))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))))
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second $t@72@06))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@06))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@62@06)))))))))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit))))))))))))))))))))))))))) diz@32@06 globals@33@06))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; Loop head block: Re-establish invariant
(pop) ; 6
(push) ; 6
; [else-branch: 182 | First:(Second:($t@72@06))[1] != -1 && First:(Second:($t@72@06))[0] != -1]
(assert (and
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@72@06)))
        0)
      (- 0 1)))))
(pop) ; 6
(pop) ; 5
; [eval] !true
; [then-branch: 195 | False | dead]
; [else-branch: 195 | True | live]
(push) ; 5
; [else-branch: 195 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
