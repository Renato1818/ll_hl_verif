(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-16 14:26:43
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
(declare-const class_Rng<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_CASR<TYPE> TYPE)
(declare-const class_LFSR<TYPE> TYPE)
(declare-const class_Combinate<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Rng_m: Ref]
(declare-fun $FVF.domain_Rng_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Rng_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Rng_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Rng_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Rng_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Rng_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [CASR_m: Ref]
(declare-fun $FVF.domain_CASR_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_CASR_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_CASR_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_CASR_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_CASR_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_CASR_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [LFSR_m: Ref]
(declare-fun $FVF.domain_LFSR_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_LFSR_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_LFSR_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_LFSR_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_LFSR_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_LFSR_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Combinate_m: Ref]
(declare-fun $FVF.domain_Combinate_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Combinate_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Combinate_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Combinate_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Combinate_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Combinate_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun CASR_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun CASR_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun LFSR_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun LFSR_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Combinate_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Combinate_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Rng<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_CASR<TYPE> class_LFSR<TYPE> class_Combinate<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Rng<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_CASR<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_LFSR<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Combinate<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Rng_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Rng_m vs) ($FVF.domain_Rng_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Rng_m vs))
            (= ($FVF.lookup_Rng_m vs x) ($FVF.lookup_Rng_m ws x)))
          :pattern (($FVF.lookup_Rng_m vs x) ($FVF.lookup_Rng_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Rng_m pm r))
    :pattern ($FVF.perm_Rng_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Rng_m f r) true)
    :pattern ($FVF.loc_Rng_m f r))))
; /field_value_functions_axioms.smt2 [CASR_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_CASR_m vs) ($FVF.domain_CASR_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_CASR_m vs))
            (= ($FVF.lookup_CASR_m vs x) ($FVF.lookup_CASR_m ws x)))
          :pattern (($FVF.lookup_CASR_m vs x) ($FVF.lookup_CASR_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_CASR_m pm r))
    :pattern ($FVF.perm_CASR_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_CASR_m f r) true)
    :pattern ($FVF.loc_CASR_m f r))))
; /field_value_functions_axioms.smt2 [LFSR_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_LFSR_m vs) ($FVF.domain_LFSR_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_LFSR_m vs))
            (= ($FVF.lookup_LFSR_m vs x) ($FVF.lookup_LFSR_m ws x)))
          :pattern (($FVF.lookup_LFSR_m vs x) ($FVF.lookup_LFSR_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_LFSR_m pm r))
    :pattern ($FVF.perm_LFSR_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_LFSR_m f r) true)
    :pattern ($FVF.loc_LFSR_m f r))))
; /field_value_functions_axioms.smt2 [Combinate_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Combinate_m vs) ($FVF.domain_Combinate_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Combinate_m vs))
            (= ($FVF.lookup_Combinate_m vs x) ($FVF.lookup_Combinate_m ws x)))
          :pattern (($FVF.lookup_Combinate_m vs x) ($FVF.lookup_Combinate_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Combinate_m pm r))
    :pattern ($FVF.perm_Combinate_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Combinate_m f r) true)
    :pattern ($FVF.loc_Combinate_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 6))
    (and
      (and
        (and
          (and
            (and
              (and
                (or
                  (< (Seq_index vals@8@00 0) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 0)))
                (or
                  (< (Seq_index vals@8@00 1) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 1))))
              (or
                (< (Seq_index vals@8@00 2) (- 0 1))
                (<= result@9@00 (Seq_index vals@8@00 2))))
            (or
              (< (Seq_index vals@8@00 3) (- 0 1))
              (<= result@9@00 (Seq_index vals@8@00 3))))
          (or
            (< (Seq_index vals@8@00 4) (- 0 1))
            (<= result@9@00 (Seq_index vals@8@00 4))))
        (or
          (< (Seq_index vals@8@00 5) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 5))))
      (and
        (implies
          (and
            (and
              (and
                (and
                  (and
                    (< (Seq_index vals@8@00 0) (- 0 1))
                    (< (Seq_index vals@8@00 1) (- 0 1)))
                  (< (Seq_index vals@8@00 2) (- 0 1)))
                (< (Seq_index vals@8@00 3) (- 0 1)))
              (< (Seq_index vals@8@00 4) (- 0 1)))
            (< (Seq_index vals@8@00 5) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (or
              (or
                (or
                  (or
                    (<= (- 0 1) (Seq_index vals@8@00 0))
                    (<= (- 0 1) (Seq_index vals@8@00 1)))
                  (<= (- 0 1) (Seq_index vals@8@00 2)))
                (<= (- 0 1) (Seq_index vals@8@00 3)))
              (<= (- 0 1) (Seq_index vals@8@00 4)))
            (<= (- 0 1) (Seq_index vals@8@00 5)))
          (or
            (or
              (or
                (or
                  (or
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 0))
                      (= result@9@00 (Seq_index vals@8@00 0)))
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 1))
                      (= result@9@00 (Seq_index vals@8@00 1))))
                  (and
                    (<= (- 0 1) (Seq_index vals@8@00 2))
                    (= result@9@00 (Seq_index vals@8@00 2))))
                (and
                  (<= (- 0 1) (Seq_index vals@8@00 3))
                  (= result@9@00 (Seq_index vals@8@00 3))))
              (and
                (<= (- 0 1) (Seq_index vals@8@00 4))
                (= result@9@00 (Seq_index vals@8@00 4))))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 5))
              (= result@9@00 (Seq_index vals@8@00 5)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Rng_xor__EncodedGlobalVariables_Integer_Integer_Integer_Integer ----------
(declare-const diz@0@01 $Ref)
(declare-const __globals@1@01 $Ref)
(declare-const __var@2@01 Int)
(declare-const __pos@3@01 Int)
(declare-const __A@4@01 Int)
(declare-const __B@5@01 Int)
(declare-const sys__result@6@01 Int)
(declare-const diz@7@01 $Ref)
(declare-const __globals@8@01 $Ref)
(declare-const __var@9@01 Int)
(declare-const __pos@10@01 Int)
(declare-const __A@11@01 Int)
(declare-const __B@12@01 Int)
(declare-const sys__result@13@01 Int)
(push) ; 1
(declare-const $t@14@01 $Snap)
(assert (= $t@14@01 ($Snap.combine ($Snap.first $t@14@01) ($Snap.second $t@14@01))))
(assert (= ($Snap.first $t@14@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@7@01 $Ref.null)))
(assert (=
  ($Snap.second $t@14@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@14@01))
    ($Snap.second ($Snap.second $t@14@01)))))
(declare-const $k@15@01 $Perm)
(assert ($Perm.isReadVar $k@15@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@15@01 $Perm.No) (< $Perm.No $k@15@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            18
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   2
;  :arith-eq-adapter     2
;  :binary-propagations  22
;  :conflicts            1
;  :datatype-accessor-ax 3
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          274
;  :mk-clause            3
;  :num-allocs           3525731
;  :num-checks           1
;  :propagations         23
;  :quant-instantiations 1
;  :rlimit-count         114172)
(assert (<= $Perm.No $k@15@01))
(assert (<= $k@15@01 $Perm.Write))
(assert (implies (< $Perm.No $k@15@01) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@14@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@14@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@14@01))) $Snap.unit))
; [eval] diz.Rng_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            24
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  22
;  :conflicts            2
;  :datatype-accessor-ax 4
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          277
;  :mk-clause            3
;  :num-allocs           3525731
;  :num-checks           2
;  :propagations         23
;  :quant-instantiations 1
;  :rlimit-count         114425)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@14@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            30
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  22
;  :conflicts            3
;  :datatype-accessor-ax 5
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          280
;  :mk-clause            3
;  :num-allocs           3525731
;  :num-checks           3
;  :propagations         23
;  :quant-instantiations 2
;  :rlimit-count         114709
;  :time                 0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            35
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  22
;  :conflicts            4
;  :datatype-accessor-ax 6
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          281
;  :mk-clause            3
;  :num-allocs           3525731
;  :num-checks           4
;  :propagations         23
;  :quant-instantiations 2
;  :rlimit-count         114896
;  :time                 0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            41
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  22
;  :conflicts            5
;  :datatype-accessor-ax 7
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          283
;  :mk-clause            3
;  :num-allocs           3525731
;  :num-checks           5
;  :propagations         23
;  :quant-instantiations 2
;  :rlimit-count         115125)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            48
;  :arith-assert-diseq   2
;  :arith-assert-lower   6
;  :arith-assert-upper   4
;  :arith-eq-adapter     4
;  :binary-propagations  22
;  :conflicts            6
;  :datatype-accessor-ax 8
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          292
;  :mk-clause            6
;  :num-allocs           3525731
;  :num-checks           6
;  :propagations         24
;  :quant-instantiations 5
;  :rlimit-count         115486)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            54
;  :arith-assert-diseq   2
;  :arith-assert-lower   6
;  :arith-assert-upper   4
;  :arith-eq-adapter     4
;  :binary-propagations  22
;  :conflicts            7
;  :datatype-accessor-ax 9
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          294
;  :mk-clause            6
;  :num-allocs           3525731
;  :num-checks           7
;  :propagations         24
;  :quant-instantiations 5
;  :rlimit-count         115735)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@16@01 Int)
(push) ; 2
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 0 | 0 <= i@16@01 | live]
; [else-branch: 0 | !(0 <= i@16@01) | live]
(push) ; 4
; [then-branch: 0 | 0 <= i@16@01]
(assert (<= 0 i@16@01))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   10
;  :arith-assert-upper   5
;  :arith-eq-adapter     6
;  :binary-propagations  22
;  :conflicts            8
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          305
;  :mk-clause            9
;  :num-allocs           3645494
;  :num-checks           8
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116207)
(pop) ; 4
(push) ; 4
; [else-branch: 0 | !(0 <= i@16@01)]
(assert (not (<= 0 i@16@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 1 | i@16@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@16@01 | live]
; [else-branch: 1 | !(i@16@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@16@01) | live]
(push) ; 4
; [then-branch: 1 | i@16@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@16@01]
(assert (and
  (<
    i@16@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
  (<= 0 i@16@01)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :binary-propagations  22
;  :conflicts            9
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          307
;  :mk-clause            9
;  :num-allocs           3645494
;  :num-checks           9
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116364)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= i@16@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :binary-propagations  22
;  :conflicts            9
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          307
;  :mk-clause            9
;  :num-allocs           3645494
;  :num-checks           10
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116373)
; [eval] -1
(push) ; 5
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@16@01] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@16@01] != -1 | live]
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@16@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@16@01)
  (- 0 1)))
(pop) ; 6
(push) ; 6
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@16@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
      i@16@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :binary-propagations  22
;  :conflicts            10
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          308
;  :mk-clause            9
;  :num-allocs           3645494
;  :num-checks           11
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116599)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i@16@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :binary-propagations  22
;  :conflicts            10
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          308
;  :mk-clause            9
;  :num-allocs           3645494
;  :num-checks           12
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116608)
(push) ; 7
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@16@01] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@16@01]) | live]
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@16@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@16@01)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :binary-propagations  22
;  :conflicts            11
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          311
;  :mk-clause            10
;  :num-allocs           3645494
;  :num-checks           13
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116781)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@16@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :binary-propagations  22
;  :conflicts            11
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          311
;  :mk-clause            10
;  :num-allocs           3645494
;  :num-checks           14
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116790)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :binary-propagations  22
;  :conflicts            12
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          311
;  :mk-clause            10
;  :num-allocs           3645494
;  :num-checks           15
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116838)
(pop) ; 8
(push) ; 8
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@16@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
      i@16@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(i@16@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@16@01)]
(assert (not
  (and
    (<
      i@16@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
    (<= 0 i@16@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@16@01 Int)) (!
  (implies
    (and
      (<
        i@16@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
      (<= 0 i@16@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
          i@16@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@16@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@16@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@16@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            67
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :binary-propagations  22
;  :conflicts            13
;  :datatype-accessor-ax 11
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          313
;  :mk-clause            10
;  :num-allocs           3645494
;  :num-checks           16
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         117493)
(declare-const $k@17@01 $Perm)
(assert ($Perm.isReadVar $k@17@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@17@01 $Perm.No) (< $Perm.No $k@17@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            67
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   7
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            14
;  :datatype-accessor-ax 11
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          317
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           17
;  :propagations         26
;  :quant-instantiations 8
;  :rlimit-count         117691)
(assert (<= $Perm.No $k@17@01))
(assert (<= $k@17@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@17@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            73
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            15
;  :datatype-accessor-ax 12
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          320
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           18
;  :propagations         26
;  :quant-instantiations 8
;  :rlimit-count         118024)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            73
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            16
;  :datatype-accessor-ax 12
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          320
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           19
;  :propagations         26
;  :quant-instantiations 8
;  :rlimit-count         118072)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            79
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            17
;  :datatype-accessor-ax 13
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          323
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           20
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         118438)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            79
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            18
;  :datatype-accessor-ax 13
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          323
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           21
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         118486)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            84
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            19
;  :datatype-accessor-ax 14
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          324
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           22
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         118753)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            84
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            20
;  :datatype-accessor-ax 14
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          324
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           23
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         118801)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            89
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            21
;  :datatype-accessor-ax 15
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          325
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           24
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         119078)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            89
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            22
;  :datatype-accessor-ax 15
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          325
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           25
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         119126)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            94
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            23
;  :datatype-accessor-ax 16
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          326
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           26
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         119413)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            94
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            24
;  :datatype-accessor-ax 16
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          326
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           27
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         119461)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            99
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            25
;  :datatype-accessor-ax 17
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          327
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           28
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         119758)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            99
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            26
;  :datatype-accessor-ax 17
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          327
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           29
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         119806)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            104
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            27
;  :datatype-accessor-ax 18
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          328
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           30
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         120113)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            104
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            28
;  :datatype-accessor-ax 18
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          328
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           31
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         120161)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            109
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            29
;  :datatype-accessor-ax 19
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          329
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           32
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         120478)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            109
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            30
;  :datatype-accessor-ax 19
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          329
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           33
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         120526)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            114
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            31
;  :datatype-accessor-ax 20
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          330
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           34
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         120853)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            114
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            32
;  :datatype-accessor-ax 20
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          330
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           35
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         120901)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            119
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            33
;  :datatype-accessor-ax 21
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          331
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           36
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         121238)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            119
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            34
;  :datatype-accessor-ax 21
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          331
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           37
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         121286)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            124
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            35
;  :datatype-accessor-ax 22
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          332
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           38
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         121633)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            124
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            36
;  :datatype-accessor-ax 22
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          332
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           39
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         121681)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            129
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            37
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          333
;  :mk-clause            12
;  :num-allocs           3645494
;  :num-checks           40
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         122038)
(declare-const $k@18@01 $Perm)
(assert ($Perm.isReadVar $k@18@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@18@01 $Perm.No) (< $Perm.No $k@18@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            129
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   9
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            38
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          337
;  :mk-clause            14
;  :num-allocs           3645494
;  :num-checks           41
;  :propagations         27
;  :quant-instantiations 9
;  :rlimit-count         122237)
(assert (<= $Perm.No $k@18@01))
(assert (<= $k@18@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@18@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            135
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            39
;  :datatype-accessor-ax 24
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          340
;  :mk-clause            14
;  :num-allocs           3645494
;  :num-checks           42
;  :propagations         27
;  :quant-instantiations 9
;  :rlimit-count         122690)
(push) ; 2
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            135
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            40
;  :datatype-accessor-ax 24
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          340
;  :mk-clause            14
;  :num-allocs           3645494
;  :num-checks           43
;  :propagations         27
;  :quant-instantiations 9
;  :rlimit-count         122738)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            141
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            41
;  :datatype-accessor-ax 25
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          343
;  :mk-clause            14
;  :num-allocs           3645494
;  :num-checks           44
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         123242)
(push) ; 2
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            141
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            42
;  :datatype-accessor-ax 25
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          343
;  :mk-clause            14
;  :num-allocs           3645494
;  :num-checks           45
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         123290)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            146
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            43
;  :datatype-accessor-ax 26
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          344
;  :mk-clause            14
;  :num-allocs           3645494
;  :num-checks           46
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         123677)
(push) ; 2
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            146
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            44
;  :datatype-accessor-ax 26
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          344
;  :mk-clause            14
;  :num-allocs           3645494
;  :num-checks           47
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         123725)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            151
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            45
;  :datatype-accessor-ax 27
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          345
;  :mk-clause            14
;  :num-allocs           3645494
;  :num-checks           48
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         124122)
(push) ; 2
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            151
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            46
;  :datatype-accessor-ax 27
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          345
;  :mk-clause            14
;  :num-allocs           3645494
;  :num-checks           49
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         124170)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            156
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            47
;  :datatype-accessor-ax 28
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          346
;  :mk-clause            14
;  :num-allocs           3645494
;  :num-checks           50
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         124577)
(push) ; 2
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            156
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            48
;  :datatype-accessor-ax 28
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          346
;  :mk-clause            14
;  :num-allocs           3645494
;  :num-checks           51
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         124625)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            161
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            49
;  :datatype-accessor-ax 29
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          347
;  :mk-clause            14
;  :num-allocs           3771679
;  :num-checks           52
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         125042)
(push) ; 2
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            161
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            50
;  :datatype-accessor-ax 29
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          347
;  :mk-clause            14
;  :num-allocs           3771679
;  :num-checks           53
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         125090)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            166
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            51
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          348
;  :mk-clause            14
;  :num-allocs           3771679
;  :num-checks           54
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         125517)
(push) ; 2
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            166
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            52
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          348
;  :mk-clause            14
;  :num-allocs           3771679
;  :num-checks           55
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         125565)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            53
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          349
;  :mk-clause            14
;  :num-allocs           3771679
;  :num-checks           56
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         126002)
(push) ; 2
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            54
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          349
;  :mk-clause            14
;  :num-allocs           3771679
;  :num-checks           57
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         126050)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            55
;  :datatype-accessor-ax 32
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          350
;  :mk-clause            14
;  :num-allocs           3771679
;  :num-checks           58
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         126497)
(declare-const $k@19@01 $Perm)
(assert ($Perm.isReadVar $k@19@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@19@01 $Perm.No) (< $Perm.No $k@19@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   11
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            56
;  :datatype-accessor-ax 32
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          354
;  :mk-clause            16
;  :num-allocs           3771679
;  :num-checks           59
;  :propagations         28
;  :quant-instantiations 10
;  :rlimit-count         126696)
(assert (<= $Perm.No $k@19@01))
(assert (<= $k@19@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@19@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            182
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            57
;  :datatype-accessor-ax 33
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          357
;  :mk-clause            16
;  :num-allocs           3771679
;  :num-checks           60
;  :propagations         28
;  :quant-instantiations 10
;  :rlimit-count         127239)
(push) ; 2
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            182
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            58
;  :datatype-accessor-ax 33
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          357
;  :mk-clause            16
;  :num-allocs           3771679
;  :num-checks           61
;  :propagations         28
;  :quant-instantiations 10
;  :rlimit-count         127287)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            188
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            59
;  :datatype-accessor-ax 34
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          360
;  :mk-clause            16
;  :num-allocs           3771679
;  :num-checks           62
;  :propagations         28
;  :quant-instantiations 11
;  :rlimit-count         127875)
(push) ; 2
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            188
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            60
;  :datatype-accessor-ax 34
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          360
;  :mk-clause            16
;  :num-allocs           3771679
;  :num-checks           63
;  :propagations         28
;  :quant-instantiations 11
;  :rlimit-count         127923)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            193
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            61
;  :datatype-accessor-ax 35
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          361
;  :mk-clause            16
;  :num-allocs           3771679
;  :num-checks           64
;  :propagations         28
;  :quant-instantiations 11
;  :rlimit-count         128400)
(push) ; 2
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            193
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            62
;  :datatype-accessor-ax 35
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          361
;  :mk-clause            16
;  :num-allocs           3771679
;  :num-checks           65
;  :propagations         28
;  :quant-instantiations 11
;  :rlimit-count         128448)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            198
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            63
;  :datatype-accessor-ax 36
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          362
;  :mk-clause            16
;  :num-allocs           3771679
;  :num-checks           66
;  :propagations         28
;  :quant-instantiations 11
;  :rlimit-count         128935)
(declare-const $k@20@01 $Perm)
(assert ($Perm.isReadVar $k@20@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@20@01 $Perm.No) (< $Perm.No $k@20@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            198
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   13
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            64
;  :datatype-accessor-ax 36
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          366
;  :mk-clause            18
;  :num-allocs           3771679
;  :num-checks           67
;  :propagations         29
;  :quant-instantiations 11
;  :rlimit-count         129133)
(assert (<= $Perm.No $k@20@01))
(assert (<= $k@20@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@20@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            204
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            65
;  :datatype-accessor-ax 37
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          369
;  :mk-clause            18
;  :num-allocs           3771679
;  :num-checks           68
;  :propagations         29
;  :quant-instantiations 11
;  :rlimit-count         129716)
(push) ; 2
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            204
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            66
;  :datatype-accessor-ax 37
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          369
;  :mk-clause            18
;  :num-allocs           3771679
;  :num-checks           69
;  :propagations         29
;  :quant-instantiations 11
;  :rlimit-count         129764)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            210
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            67
;  :datatype-accessor-ax 38
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          372
;  :mk-clause            18
;  :num-allocs           3771679
;  :num-checks           70
;  :propagations         29
;  :quant-instantiations 12
;  :rlimit-count         130382)
(push) ; 2
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            210
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            68
;  :datatype-accessor-ax 38
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          372
;  :mk-clause            18
;  :num-allocs           3771679
;  :num-checks           71
;  :propagations         29
;  :quant-instantiations 12
;  :rlimit-count         130430)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            215
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            69
;  :datatype-accessor-ax 39
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          373
;  :mk-clause            18
;  :num-allocs           3771679
;  :num-checks           72
;  :propagations         29
;  :quant-instantiations 12
;  :rlimit-count         130947)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            215
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            70
;  :datatype-accessor-ax 39
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          373
;  :mk-clause            18
;  :num-allocs           3771679
;  :num-checks           73
;  :propagations         29
;  :quant-instantiations 12
;  :rlimit-count         130995)
(declare-const $k@21@01 $Perm)
(assert ($Perm.isReadVar $k@21@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@21@01 $Perm.No) (< $Perm.No $k@21@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            215
;  :arith-assert-diseq   9
;  :arith-assert-lower   24
;  :arith-assert-upper   15
;  :arith-eq-adapter     12
;  :binary-propagations  22
;  :conflicts            71
;  :datatype-accessor-ax 39
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          377
;  :mk-clause            20
;  :num-allocs           3771679
;  :num-checks           74
;  :propagations         30
;  :quant-instantiations 12
;  :rlimit-count         131194)
(set-option :timeout 10)
(push) ; 2
(assert (not (=
  diz@7@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               295
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      15
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               72
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             411
;  :mk-clause               21
;  :num-allocs              3902218
;  :num-checks              75
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            132142)
(assert (<= $Perm.No $k@21@01))
(assert (<= $k@21@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@21@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               301
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             414
;  :mk-clause               21
;  :num-allocs              3902218
;  :num-checks              76
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            132755)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               301
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             414
;  :mk-clause               21
;  :num-allocs              3902218
;  :num-checks              77
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            132803)
(push) ; 2
(assert (not (< $Perm.No $k@21@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               301
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             414
;  :mk-clause               21
;  :num-allocs              3902218
;  :num-checks              78
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            132851)
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               301
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             414
;  :mk-clause               21
;  :num-allocs              3902218
;  :num-checks              79
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            132899)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 2
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               305
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             417
;  :mk-clause               21
;  :num-allocs              3902218
;  :num-checks              80
;  :propagations            30
;  :quant-instantiations    13
;  :rlimit-count            133492)
(push) ; 2
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               305
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               78
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             417
;  :mk-clause               21
;  :num-allocs              3902218
;  :num-checks              81
;  :propagations            30
;  :quant-instantiations    13
;  :rlimit-count            133540)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
  diz@7@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@22@01 $Snap)
(assert (= $t@22@01 ($Snap.combine ($Snap.first $t@22@01) ($Snap.second $t@22@01))))
(declare-const $k@23@01 $Perm)
(assert ($Perm.isReadVar $k@23@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@23@01 $Perm.No) (< $Perm.No $k@23@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               388
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      17
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             454
;  :mk-clause               24
;  :num-allocs              3902218
;  :num-checks              83
;  :propagations            31
;  :quant-instantiations    13
;  :rlimit-count            134735)
(assert (<= $Perm.No $k@23@01))
(assert (<= $k@23@01 $Perm.Write))
(assert (implies (< $Perm.No $k@23@01) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second $t@22@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@22@01))
    ($Snap.second ($Snap.second $t@22@01)))))
(assert (= ($Snap.first ($Snap.second $t@22@01)) $Snap.unit))
; [eval] diz.Rng_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               394
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               81
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             457
;  :mk-clause               24
;  :num-allocs              3902218
;  :num-checks              84
;  :propagations            31
;  :quant-instantiations    13
;  :rlimit-count            134978)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@22@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@22@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@22@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               400
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             460
;  :mk-clause               24
;  :num-allocs              3902218
;  :num-checks              85
;  :propagations            31
;  :quant-instantiations    14
;  :rlimit-count            135250)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@22@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               405
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             461
;  :mk-clause               24
;  :num-allocs              3902218
;  :num-checks              86
;  :propagations            31
;  :quant-instantiations    14
;  :rlimit-count            135427)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               411
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             463
;  :mk-clause               24
;  :num-allocs              3902218
;  :num-checks              87
;  :propagations            31
;  :quant-instantiations    14
;  :rlimit-count            135646
;  :time                    0.00)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               418
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             469
;  :mk-clause               24
;  :num-allocs              3902218
;  :num-checks              88
;  :propagations            31
;  :quant-instantiations    16
;  :rlimit-count            135976)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               424
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             471
;  :mk-clause               24
;  :num-allocs              3902218
;  :num-checks              89
;  :propagations            31
;  :quant-instantiations    16
;  :rlimit-count            136215)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@24@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 4 | 0 <= i@24@01 | live]
; [else-branch: 4 | !(0 <= i@24@01) | live]
(push) ; 5
; [then-branch: 4 | 0 <= i@24@01]
(assert (<= 0 i@24@01))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      10
;  :arith-assert-lower      31
;  :arith-assert-upper      20
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             479
;  :mk-clause               24
;  :num-allocs              3902218
;  :num-checks              90
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            136655)
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(0 <= i@24@01)]
(assert (not (<= 0 i@24@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 5 | i@24@01 < |First:(Second:(Second:(Second:($t@22@01))))| && 0 <= i@24@01 | live]
; [else-branch: 5 | !(i@24@01 < |First:(Second:(Second:(Second:($t@22@01))))| && 0 <= i@24@01) | live]
(push) ; 5
; [then-branch: 5 | i@24@01 < |First:(Second:(Second:(Second:($t@22@01))))| && 0 <= i@24@01]
(assert (and
  (<
    i@24@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))
  (<= 0 i@24@01)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 6
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      10
;  :arith-assert-lower      32
;  :arith-assert-upper      21
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             481
;  :mk-clause               24
;  :num-allocs              3902218
;  :num-checks              91
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            136812)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@24@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      10
;  :arith-assert-lower      32
;  :arith-assert-upper      21
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             481
;  :mk-clause               24
;  :num-allocs              3902218
;  :num-checks              92
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            136821)
; [eval] -1
(push) ; 6
; [then-branch: 6 | First:(Second:(Second:(Second:($t@22@01))))[i@24@01] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@22@01))))[i@24@01] != -1 | live]
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@22@01))))[i@24@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
    i@24@01)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 6 | First:(Second:(Second:(Second:($t@22@01))))[i@24@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
      i@24@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      10
;  :arith-assert-lower      32
;  :arith-assert-upper      21
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             482
;  :mk-clause               24
;  :num-allocs              3902218
;  :num-checks              93
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            137035)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@24@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      10
;  :arith-assert-lower      32
;  :arith-assert-upper      21
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             482
;  :mk-clause               24
;  :num-allocs              3902218
;  :num-checks              94
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            137044)
(push) ; 8
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@22@01))))[i@24@01] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@22@01))))[i@24@01]) | live]
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@22@01))))[i@24@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
    i@24@01)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             485
;  :mk-clause               25
;  :num-allocs              3902218
;  :num-checks              95
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            137206)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@24@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             485
;  :mk-clause               25
;  :num-allocs              3902218
;  :num-checks              96
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            137215)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             485
;  :mk-clause               25
;  :num-allocs              3902218
;  :num-checks              97
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            137263)
(pop) ; 9
(push) ; 9
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@22@01))))[i@24@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
      i@24@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(i@24@01 < |First:(Second:(Second:(Second:($t@22@01))))| && 0 <= i@24@01)]
(assert (not
  (and
    (<
      i@24@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))
    (<= 0 i@24@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@24@01 Int)) (!
  (implies
    (and
      (<
        i@24@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))
      (<= 0 i@24@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
          i@24@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
            i@24@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
            i@24@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
    i@24@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               437
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             487
;  :mk-clause               25
;  :num-allocs              3902218
;  :num-checks              98
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            137888)
(declare-const $k@25@01 $Perm)
(assert ($Perm.isReadVar $k@25@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@25@01 $Perm.No) (< $Perm.No $k@25@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               437
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      22
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               93
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             491
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              99
;  :propagations            32
;  :quant-instantiations    18
;  :rlimit-count            138087)
(assert (<= $Perm.No $k@25@01))
(assert (<= $k@25@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@25@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@22@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               443
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             494
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              100
;  :propagations            32
;  :quant-instantiations    18
;  :rlimit-count            138410)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               443
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               95
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             494
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              101
;  :propagations            32
;  :quant-instantiations    18
;  :rlimit-count            138458)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               449
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             497
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              102
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            138814)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               449
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               97
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             497
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              103
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            138862)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               454
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               98
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             498
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              104
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            139119)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               454
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             498
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              105
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            139167)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               459
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             499
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              106
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            139434)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               459
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               101
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             499
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              107
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            139482)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               464
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             500
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              108
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            139759)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               464
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               103
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             500
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              109
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            139807)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               469
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             501
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              110
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            140094)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               469
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               105
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             501
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              111
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            140142)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               474
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             502
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              112
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            140439)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               474
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               107
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             502
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              113
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            140487)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               479
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             503
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              114
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            140794)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               479
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             503
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              115
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            140842)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               484
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               110
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             504
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              116
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            141159)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               484
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             504
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              117
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            141207)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               489
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             505
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              118
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            141534)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               489
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             505
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              119
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            141582)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               494
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             506
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              120
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            141919)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               494
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             506
;  :mk-clause               27
;  :num-allocs              3902218
;  :num-checks              121
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            141967)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               499
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             507
;  :mk-clause               27
;  :num-allocs              4040753
;  :num-checks              122
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            142314)
(declare-const $k@26@01 $Perm)
(assert ($Perm.isReadVar $k@26@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@26@01 $Perm.No) (< $Perm.No $k@26@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               499
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      24
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             511
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              123
;  :propagations            33
;  :quant-instantiations    19
;  :rlimit-count            142512)
(assert (<= $Perm.No $k@26@01))
(assert (<= $k@26@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@26@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@22@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               505
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             514
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              124
;  :propagations            33
;  :quant-instantiations    19
;  :rlimit-count            142955)
(push) ; 3
(assert (not (< $Perm.No $k@26@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               505
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             514
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              125
;  :propagations            33
;  :quant-instantiations    19
;  :rlimit-count            143003)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               511
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               120
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             517
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              126
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            143497)
(push) ; 3
(assert (not (< $Perm.No $k@26@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               511
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             517
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              127
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            143545)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               516
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               122
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             518
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              128
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            143922
;  :time                    0.00)
(push) ; 3
(assert (not (< $Perm.No $k@26@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               516
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               123
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             518
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              129
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            143970)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               521
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               124
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             519
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              130
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            144357)
(push) ; 3
(assert (not (< $Perm.No $k@26@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               521
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               125
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             519
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              131
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            144405)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               526
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               126
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             520
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              132
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            144802)
(push) ; 3
(assert (not (< $Perm.No $k@26@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               526
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             520
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              133
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            144850)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               531
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               128
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             521
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              134
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            145257)
(push) ; 3
(assert (not (< $Perm.No $k@26@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               531
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               129
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             521
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              135
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            145305)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               536
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             522
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              136
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            145722)
(push) ; 3
(assert (not (< $Perm.No $k@26@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               536
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               131
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             522
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              137
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            145770)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               541
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             523
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              138
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            146197)
(push) ; 3
(assert (not (< $Perm.No $k@26@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               541
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             523
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              139
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            146245)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               546
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             524
;  :mk-clause               29
;  :num-allocs              4040753
;  :num-checks              140
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            146682)
(declare-const $k@27@01 $Perm)
(assert ($Perm.isReadVar $k@27@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@27@01 $Perm.No) (< $Perm.No $k@27@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               546
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      26
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             528
;  :mk-clause               31
;  :num-allocs              4040753
;  :num-checks              141
;  :propagations            34
;  :quant-instantiations    20
;  :rlimit-count            146881)
(assert (<= $Perm.No $k@27@01))
(assert (<= $k@27@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@27@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@22@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               552
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               136
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             531
;  :mk-clause               31
;  :num-allocs              4040753
;  :num-checks              142
;  :propagations            34
;  :quant-instantiations    20
;  :rlimit-count            147414)
(push) ; 3
(assert (not (< $Perm.No $k@27@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               552
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             531
;  :mk-clause               31
;  :num-allocs              4040753
;  :num-checks              143
;  :propagations            34
;  :quant-instantiations    20
;  :rlimit-count            147462)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               558
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             534
;  :mk-clause               31
;  :num-allocs              4040753
;  :num-checks              144
;  :propagations            34
;  :quant-instantiations    21
;  :rlimit-count            148040)
(push) ; 3
(assert (not (< $Perm.No $k@27@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               558
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             534
;  :mk-clause               31
;  :num-allocs              4040753
;  :num-checks              145
;  :propagations            34
;  :quant-instantiations    21
;  :rlimit-count            148088)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               563
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             535
;  :mk-clause               31
;  :num-allocs              4040753
;  :num-checks              146
;  :propagations            34
;  :quant-instantiations    21
;  :rlimit-count            148555)
(push) ; 3
(assert (not (< $Perm.No $k@27@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               563
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               141
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             535
;  :mk-clause               31
;  :num-allocs              4040753
;  :num-checks              147
;  :propagations            34
;  :quant-instantiations    21
;  :rlimit-count            148603)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               568
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             536
;  :mk-clause               31
;  :num-allocs              4040753
;  :num-checks              148
;  :propagations            34
;  :quant-instantiations    21
;  :rlimit-count            149080)
(declare-const $k@28@01 $Perm)
(assert ($Perm.isReadVar $k@28@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@28@01 $Perm.No) (< $Perm.No $k@28@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               568
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      28
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             540
;  :mk-clause               33
;  :num-allocs              4040753
;  :num-checks              149
;  :propagations            35
;  :quant-instantiations    21
;  :rlimit-count            149279)
(assert (<= $Perm.No $k@28@01))
(assert (<= $k@28@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@28@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@22@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               574
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             543
;  :mk-clause               33
;  :num-allocs              4040753
;  :num-checks              150
;  :propagations            35
;  :quant-instantiations    21
;  :rlimit-count            149852)
(push) ; 3
(assert (not (< $Perm.No $k@28@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               574
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             543
;  :mk-clause               33
;  :num-allocs              4040753
;  :num-checks              151
;  :propagations            35
;  :quant-instantiations    21
;  :rlimit-count            149900)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               580
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             546
;  :mk-clause               33
;  :num-allocs              4040753
;  :num-checks              152
;  :propagations            35
;  :quant-instantiations    22
;  :rlimit-count            150508)
(push) ; 3
(assert (not (< $Perm.No $k@28@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               580
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               147
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             546
;  :mk-clause               33
;  :num-allocs              4040753
;  :num-checks              153
;  :propagations            35
;  :quant-instantiations    22
;  :rlimit-count            150556)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               585
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               148
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             547
;  :mk-clause               33
;  :num-allocs              4184269
;  :num-checks              154
;  :propagations            35
;  :quant-instantiations    22
;  :rlimit-count            151063)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               585
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               149
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             547
;  :mk-clause               33
;  :num-allocs              4184269
;  :num-checks              155
;  :propagations            35
;  :quant-instantiations    22
;  :rlimit-count            151111)
(declare-const $k@29@01 $Perm)
(assert ($Perm.isReadVar $k@29@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@29@01 $Perm.No) (< $Perm.No $k@29@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               585
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      30
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             551
;  :mk-clause               35
;  :num-allocs              4184269
;  :num-checks              156
;  :propagations            36
;  :quant-instantiations    22
;  :rlimit-count            151309)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@7@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               910
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      30
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             658
;  :mk-clause               37
;  :num-allocs              4329162
;  :num-checks              157
;  :propagations            37
;  :quant-instantiations    22
;  :rlimit-count            153478
;  :time                    0.00)
(assert (<= $Perm.No $k@29@01))
(assert (<= $k@29@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@29@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               916
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               153
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             661
;  :mk-clause               37
;  :num-allocs              4329162
;  :num-checks              158
;  :propagations            37
;  :quant-instantiations    22
;  :rlimit-count            154081)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               916
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               154
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             661
;  :mk-clause               37
;  :num-allocs              4329162
;  :num-checks              159
;  :propagations            37
;  :quant-instantiations    22
;  :rlimit-count            154129)
(push) ; 3
(assert (not (< $Perm.No $k@29@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               916
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               155
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             661
;  :mk-clause               37
;  :num-allocs              4329162
;  :num-checks              160
;  :propagations            37
;  :quant-instantiations    22
;  :rlimit-count            154177)
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               916
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               156
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             661
;  :mk-clause               37
;  :num-allocs              4329162
;  :num-checks              161
;  :propagations            37
;  :quant-instantiations    22
;  :rlimit-count            154225)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@22@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 3
(assert (not (< $Perm.No $k@23@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               921
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               157
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             664
;  :mk-clause               37
;  :num-allocs              4329162
;  :num-checks              162
;  :propagations            37
;  :quant-instantiations    23
;  :rlimit-count            154809)
(push) ; 3
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               921
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             664
;  :mk-clause               37
;  :num-allocs              4329162
;  :num-checks              163
;  :propagations            37
;  :quant-instantiations    23
;  :rlimit-count            154857)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
  diz@7@01))
(pop) ; 2
(push) ; 2
; [exec]
; var sys__local__result__26: Int
(declare-const sys__local__result__26@30@01 Int)
; [exec]
; var globals__27: Ref
(declare-const globals__27@31@01 $Ref)
; [exec]
; var var__28: Int
(declare-const var__28@32@01 Int)
; [exec]
; var pos__29: Int
(declare-const pos__29@33@01 Int)
; [exec]
; var A__30: Int
(declare-const A__30@34@01 Int)
; [exec]
; var B__31: Int
(declare-const B__31@35@01 Int)
; [exec]
; var __flatten_6__32: Int
(declare-const __flatten_6__32@36@01 Int)
; [exec]
; var __flatten_7__33: Int
(declare-const __flatten_7__33@37@01 Int)
; [exec]
; var __flatten_8__34: Int
(declare-const __flatten_8__34@38@01 Int)
; [exec]
; globals__27 := __globals
; [exec]
; var__28 := __var
; [exec]
; pos__29 := __pos
; [exec]
; A__30 := __A
; [exec]
; B__31 := __B
; [eval] A__30 == 1
(push) ; 3
(assert (not (not (= __A@11@01 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               994
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 215
;  :datatype-occurs-check   16
;  :datatype-splits         163
;  :decisions               209
;  :del-clause              35
;  :final-checks            12
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             668
;  :mk-clause               37
;  :num-allocs              4329162
;  :num-checks              164
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            155655)
(push) ; 3
(assert (not (= __A@11@01 1)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1066
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 245
;  :datatype-occurs-check   18
;  :datatype-splits         165
;  :decisions               238
;  :del-clause              35
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             672
;  :mk-clause               37
;  :num-allocs              4329162
;  :num-checks              165
;  :propagations            39
;  :quant-instantiations    23
;  :rlimit-count            156439)
; [then-branch: 8 | __A@11@01 == 1 | live]
; [else-branch: 8 | __A@11@01 != 1 | live]
(push) ; 3
; [then-branch: 8 | __A@11@01 == 1]
(assert (= __A@11@01 1))
; [eval] B__31 == 1
(push) ; 4
(assert (not (not (= __B@12@01 1))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1140
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 275
;  :datatype-occurs-check   20
;  :datatype-splits         167
;  :decisions               267
;  :del-clause              35
;  :final-checks            16
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             677
;  :mk-clause               37
;  :num-allocs              4329162
;  :num-checks              166
;  :propagations            40
;  :quant-instantiations    23
;  :rlimit-count            157252)
(push) ; 4
(assert (not (= __B@12@01 1)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1212
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             681
;  :mk-clause               37
;  :num-allocs              4329162
;  :num-checks              167
;  :propagations            41
;  :quant-instantiations    23
;  :rlimit-count            158037)
; [then-branch: 9 | __B@12@01 == 1 | live]
; [else-branch: 9 | __B@12@01 != 1 | live]
(push) ; 4
; [then-branch: 9 | __B@12@01 == 1]
(assert (= __B@12@01 1))
; [exec]
; __flatten_6__32 := Rng_exp2__EncodedGlobalVariables_Integer(diz, globals__27, pos__29)
; [eval] diz != null
(declare-const $k@39@01 $Perm)
(assert ($Perm.isReadVar $k@39@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@39@01 $Perm.No) (< $Perm.No $k@39@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             686
;  :mk-clause               39
;  :num-allocs              4329162
;  :num-checks              168
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            158271)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= $k@15@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             686
;  :mk-clause               39
;  :num-allocs              4329162
;  :num-checks              169
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            158282)
(assert (< $k@39@01 $k@15@01))
(assert (<= $Perm.No (- $k@15@01 $k@39@01)))
(assert (<= (- $k@15@01 $k@39@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@15@01 $k@39@01)) (not (= diz@7@01 $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      17
;  :arith-assert-lower      49
;  :arith-assert-upper      33
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             689
;  :mk-clause               39
;  :num-allocs              4329162
;  :num-checks              170
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            158490)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      17
;  :arith-assert-lower      49
;  :arith-assert-upper      33
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             689
;  :mk-clause               39
;  :num-allocs              4329162
;  :num-checks              171
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            158538
;  :time                    0.00)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      17
;  :arith-assert-lower      49
;  :arith-assert-upper      33
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             689
;  :mk-clause               39
;  :num-allocs              4329162
;  :num-checks              172
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            158586
;  :time                    0.00)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      17
;  :arith-assert-lower      49
;  :arith-assert-upper      33
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             689
;  :mk-clause               39
;  :num-allocs              4329162
;  :num-checks              173
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            158634)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      17
;  :arith-assert-lower      49
;  :arith-assert-upper      33
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               164
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             689
;  :mk-clause               39
;  :num-allocs              4329162
;  :num-checks              174
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            158682)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      17
;  :arith-assert-lower      49
;  :arith-assert-upper      33
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             689
;  :mk-clause               39
;  :num-allocs              4329162
;  :num-checks              175
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            158730)
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@40@01 Int)
(push) ; 5
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 6
; [then-branch: 10 | 0 <= i@40@01 | live]
; [else-branch: 10 | !(0 <= i@40@01) | live]
(push) ; 7
; [then-branch: 10 | 0 <= i@40@01]
(assert (<= 0 i@40@01))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 8
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      33
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             690
;  :mk-clause               39
;  :num-allocs              4329162
;  :num-checks              176
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            158830)
(pop) ; 7
(push) ; 7
; [else-branch: 10 | !(0 <= i@40@01)]
(assert (not (<= 0 i@40@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 11 | i@40@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@40@01 | live]
; [else-branch: 11 | !(i@40@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@40@01) | live]
(push) ; 7
; [then-branch: 11 | i@40@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@40@01]
(assert (and
  (<
    i@40@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
  (<= 0 i@40@01)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 8
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      17
;  :arith-assert-lower      51
;  :arith-assert-upper      34
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             692
;  :mk-clause               39
;  :num-allocs              4329162
;  :num-checks              177
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            158987)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@40@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      17
;  :arith-assert-lower      51
;  :arith-assert-upper      34
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             692
;  :mk-clause               39
;  :num-allocs              4329162
;  :num-checks              178
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            158996)
; [eval] -1
(push) ; 8
; [then-branch: 12 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@40@01] == -1 | live]
; [else-branch: 12 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@40@01] != -1 | live]
(push) ; 9
; [then-branch: 12 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@40@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@40@01)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 12 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@40@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
      i@40@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      18
;  :arith-assert-lower      54
;  :arith-assert-upper      35
;  :arith-eq-adapter        23
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             698
;  :mk-clause               43
;  :num-allocs              4329162
;  :num-checks              179
;  :propagations            44
;  :quant-instantiations    24
;  :rlimit-count            159279)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@40@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      18
;  :arith-assert-lower      54
;  :arith-assert-upper      35
;  :arith-eq-adapter        23
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             698
;  :mk-clause               43
;  :num-allocs              4329162
;  :num-checks              180
;  :propagations            44
;  :quant-instantiations    24
;  :rlimit-count            159288)
(push) ; 10
; [then-branch: 13 | 0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@40@01] | live]
; [else-branch: 13 | !(0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@40@01]) | live]
(push) ; 11
; [then-branch: 13 | 0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@40@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@40@01)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      18
;  :arith-assert-lower      54
;  :arith-assert-upper      35
;  :arith-eq-adapter        23
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             698
;  :mk-clause               43
;  :num-allocs              4329162
;  :num-checks              181
;  :propagations            44
;  :quant-instantiations    24
;  :rlimit-count            159451)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@40@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      18
;  :arith-assert-lower      54
;  :arith-assert-upper      35
;  :arith-eq-adapter        23
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             698
;  :mk-clause               43
;  :num-allocs              4329162
;  :num-checks              182
;  :propagations            44
;  :quant-instantiations    24
;  :rlimit-count            159460)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      18
;  :arith-assert-lower      54
;  :arith-assert-upper      35
;  :arith-eq-adapter        23
;  :binary-propagations     22
;  :conflicts               170
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              35
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             698
;  :mk-clause               43
;  :num-allocs              4329162
;  :num-checks              183
;  :propagations            44
;  :quant-instantiations    24
;  :rlimit-count            159508)
(pop) ; 11
(push) ; 11
; [else-branch: 13 | !(0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@40@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
      i@40@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 11 | !(i@40@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@40@01)]
(assert (not
  (and
    (<
      i@40@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
    (<= 0 i@40@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((i@40@01 Int)) (!
  (implies
    (and
      (<
        i@40@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
      (<= 0 i@40@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
          i@40@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@40@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@40@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@40@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      36
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             706
;  :mk-clause               55
;  :num-allocs              4329162
;  :num-checks              184
;  :propagations            46
;  :quant-instantiations    25
;  :rlimit-count            159966)
(assert (forall ((i@40@01 Int)) (!
  (implies
    (and
      (<
        i@40@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
      (<= 0 i@40@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
          i@40@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@40@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@40@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@40@01))
  :qid |prog.l<no position>|)))
(declare-const $k@41@01 $Perm)
(assert ($Perm.isReadVar $k@41@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      37
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             711
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              185
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            160543)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@41@01 $Perm.No) (< $Perm.No $k@41@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      37
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             711
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              186
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            160593)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= $k@17@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      37
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             711
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              187
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            160604)
(assert (< $k@41@01 $k@17@01))
(assert (<= $Perm.No (- $k@17@01 $k@41@01)))
(assert (<= (- $k@17@01 $k@41@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@17@01 $k@41@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              188
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            160812)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              189
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            160860)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              190
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            160908)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              191
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            160956)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              192
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161004)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               179
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              193
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161052)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              194
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161100)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               181
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              195
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161148)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              196
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161196)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              197
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161244)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               184
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              198
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161292)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              199
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161340)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               186
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              200
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161388)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               187
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              201
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161436)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              202
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161484)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               189
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              203
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161532)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               190
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              204
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161580)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              205
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161628)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               192
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              206
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161676)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              207
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161724)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               194
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              208
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161772)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      38
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             714
;  :mk-clause               57
;  :num-allocs              4329162
;  :num-checks              209
;  :propagations            47
;  :quant-instantiations    25
;  :rlimit-count            161820)
(declare-const $k@42@01 $Perm)
(assert ($Perm.isReadVar $k@42@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      61
;  :arith-assert-upper      39
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               196
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             718
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              210
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162016)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@42@01 $Perm.No) (< $Perm.No $k@42@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      61
;  :arith-assert-upper      39
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               197
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             718
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              211
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162066)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= $k@18@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      61
;  :arith-assert-upper      39
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               197
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             718
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              212
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162077)
(assert (< $k@42@01 $k@18@01))
(assert (<= $Perm.No (- $k@18@01 $k@42@01)))
(assert (<= (- $k@18@01 $k@42@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@18@01 $k@42@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               198
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              213
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162297)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              214
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162345)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               200
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              215
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162393)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               201
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              216
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162441)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              217
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162489)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              218
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162537)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              219
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162585)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              220
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162633)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               206
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              221
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162681)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              222
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162729)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               208
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              223
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162777)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              224
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162825)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              225
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162873)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               211
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              226
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162921)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              227
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            162969)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      40
;  :arith-eq-adapter        26
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               213
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             721
;  :mk-clause               59
;  :num-allocs              4329162
;  :num-checks              228
;  :propagations            48
;  :quant-instantiations    25
;  :rlimit-count            163017)
(declare-const $k@43@01 $Perm)
(assert ($Perm.isReadVar $k@43@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      22
;  :arith-assert-lower      65
;  :arith-assert-upper      41
;  :arith-eq-adapter        27
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               214
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             725
;  :mk-clause               61
;  :num-allocs              4329162
;  :num-checks              229
;  :propagations            49
;  :quant-instantiations    25
;  :rlimit-count            163213)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@43@01 $Perm.No) (< $Perm.No $k@43@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      22
;  :arith-assert-lower      65
;  :arith-assert-upper      41
;  :arith-eq-adapter        27
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             725
;  :mk-clause               61
;  :num-allocs              4329162
;  :num-checks              230
;  :propagations            49
;  :quant-instantiations    25
;  :rlimit-count            163263)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= $k@19@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      22
;  :arith-assert-lower      65
;  :arith-assert-upper      41
;  :arith-eq-adapter        27
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             725
;  :mk-clause               61
;  :num-allocs              4329162
;  :num-checks              231
;  :propagations            49
;  :quant-instantiations    25
;  :rlimit-count            163274)
(assert (< $k@43@01 $k@19@01))
(assert (<= $Perm.No (- $k@19@01 $k@43@01)))
(assert (<= (- $k@19@01 $k@43@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@19@01 $k@43@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      42
;  :arith-eq-adapter        27
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               216
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             728
;  :mk-clause               61
;  :num-allocs              4329162
;  :num-checks              232
;  :propagations            49
;  :quant-instantiations    25
;  :rlimit-count            163494)
(push) ; 5
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      42
;  :arith-eq-adapter        27
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               217
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             728
;  :mk-clause               61
;  :num-allocs              4329162
;  :num-checks              233
;  :propagations            49
;  :quant-instantiations    25
;  :rlimit-count            163542)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      42
;  :arith-eq-adapter        27
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             728
;  :mk-clause               61
;  :num-allocs              4329162
;  :num-checks              234
;  :propagations            49
;  :quant-instantiations    25
;  :rlimit-count            163590)
(push) ; 5
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      42
;  :arith-eq-adapter        27
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             728
;  :mk-clause               61
;  :num-allocs              4329162
;  :num-checks              235
;  :propagations            49
;  :quant-instantiations    25
;  :rlimit-count            163638)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      42
;  :arith-eq-adapter        27
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               220
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             728
;  :mk-clause               61
;  :num-allocs              4329162
;  :num-checks              236
;  :propagations            49
;  :quant-instantiations    25
;  :rlimit-count            163686)
(push) ; 5
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      42
;  :arith-eq-adapter        27
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               221
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             728
;  :mk-clause               61
;  :num-allocs              4329162
;  :num-checks              237
;  :propagations            49
;  :quant-instantiations    25
;  :rlimit-count            163734)
(declare-const $k@44@01 $Perm)
(assert ($Perm.isReadVar $k@44@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      23
;  :arith-assert-lower      69
;  :arith-assert-upper      43
;  :arith-eq-adapter        28
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               222
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             732
;  :mk-clause               63
;  :num-allocs              4329162
;  :num-checks              238
;  :propagations            50
;  :quant-instantiations    25
;  :rlimit-count            163930)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@44@01 $Perm.No) (< $Perm.No $k@44@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      23
;  :arith-assert-lower      69
;  :arith-assert-upper      43
;  :arith-eq-adapter        28
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             732
;  :mk-clause               63
;  :num-allocs              4329162
;  :num-checks              239
;  :propagations            50
;  :quant-instantiations    25
;  :rlimit-count            163980)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= $k@20@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      23
;  :arith-assert-lower      69
;  :arith-assert-upper      43
;  :arith-eq-adapter        28
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             732
;  :mk-clause               63
;  :num-allocs              4329162
;  :num-checks              240
;  :propagations            50
;  :quant-instantiations    25
;  :rlimit-count            163991)
(assert (< $k@44@01 $k@20@01))
(assert (<= $Perm.No (- $k@20@01 $k@44@01)))
(assert (<= (- $k@20@01 $k@44@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@20@01 $k@44@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      23
;  :arith-assert-lower      71
;  :arith-assert-upper      44
;  :arith-eq-adapter        28
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               224
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             735
;  :mk-clause               63
;  :num-allocs              4329162
;  :num-checks              241
;  :propagations            50
;  :quant-instantiations    25
;  :rlimit-count            164205)
(push) ; 5
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      23
;  :arith-assert-lower      71
;  :arith-assert-upper      44
;  :arith-eq-adapter        28
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             735
;  :mk-clause               63
;  :num-allocs              4329162
;  :num-checks              242
;  :propagations            50
;  :quant-instantiations    25
;  :rlimit-count            164253)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      23
;  :arith-assert-lower      71
;  :arith-assert-upper      44
;  :arith-eq-adapter        28
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             735
;  :mk-clause               63
;  :num-allocs              4329162
;  :num-checks              243
;  :propagations            50
;  :quant-instantiations    25
;  :rlimit-count            164301)
(push) ; 5
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      23
;  :arith-assert-lower      71
;  :arith-assert-upper      44
;  :arith-eq-adapter        28
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               227
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             735
;  :mk-clause               63
;  :num-allocs              4329162
;  :num-checks              244
;  :propagations            50
;  :quant-instantiations    25
;  :rlimit-count            164349)
(declare-const $k@45@01 $Perm)
(assert ($Perm.isReadVar $k@45@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      24
;  :arith-assert-lower      73
;  :arith-assert-upper      45
;  :arith-eq-adapter        29
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             739
;  :mk-clause               65
;  :num-allocs              4329162
;  :num-checks              245
;  :propagations            51
;  :quant-instantiations    25
;  :rlimit-count            164546)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      24
;  :arith-assert-lower      73
;  :arith-assert-upper      45
;  :arith-eq-adapter        29
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             739
;  :mk-clause               65
;  :num-allocs              4329162
;  :num-checks              246
;  :propagations            51
;  :quant-instantiations    25
;  :rlimit-count            164594)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@45@01 $Perm.No) (< $Perm.No $k@45@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      24
;  :arith-assert-lower      73
;  :arith-assert-upper      45
;  :arith-eq-adapter        29
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             739
;  :mk-clause               65
;  :num-allocs              4329162
;  :num-checks              247
;  :propagations            51
;  :quant-instantiations    25
;  :rlimit-count            164644)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= $k@21@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      24
;  :arith-assert-lower      73
;  :arith-assert-upper      45
;  :arith-eq-adapter        29
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             739
;  :mk-clause               65
;  :num-allocs              4329162
;  :num-checks              248
;  :propagations            51
;  :quant-instantiations    25
;  :rlimit-count            164655)
(assert (< $k@45@01 $k@21@01))
(assert (<= $Perm.No (- $k@21@01 $k@45@01)))
(assert (<= (- $k@21@01 $k@45@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@21@01 $k@45@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      24
;  :arith-assert-lower      75
;  :arith-assert-upper      46
;  :arith-eq-adapter        29
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             742
;  :mk-clause               65
;  :num-allocs              4329162
;  :num-checks              249
;  :propagations            51
;  :quant-instantiations    25
;  :rlimit-count            164869)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      24
;  :arith-assert-lower      75
;  :arith-assert-upper      46
;  :arith-eq-adapter        29
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             742
;  :mk-clause               65
;  :num-allocs              4329162
;  :num-checks              250
;  :propagations            51
;  :quant-instantiations    25
;  :rlimit-count            164917)
(push) ; 5
(assert (not (< $Perm.No $k@21@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      24
;  :arith-assert-lower      75
;  :arith-assert-upper      46
;  :arith-eq-adapter        29
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             742
;  :mk-clause               65
;  :num-allocs              4329162
;  :num-checks              251
;  :propagations            51
;  :quant-instantiations    25
;  :rlimit-count            164965)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      24
;  :arith-assert-lower      75
;  :arith-assert-upper      46
;  :arith-eq-adapter        29
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             742
;  :mk-clause               65
;  :num-allocs              4329162
;  :num-checks              252
;  :propagations            51
;  :quant-instantiations    25
;  :rlimit-count            165013)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      24
;  :arith-assert-lower      75
;  :arith-assert-upper      46
;  :arith-eq-adapter        29
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             742
;  :mk-clause               65
;  :num-allocs              4329162
;  :num-checks              253
;  :propagations            51
;  :quant-instantiations    25
;  :rlimit-count            165061)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1213
;  :arith-assert-diseq      24
;  :arith-assert-lower      75
;  :arith-assert-upper      46
;  :arith-eq-adapter        29
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             742
;  :mk-clause               65
;  :num-allocs              4329162
;  :num-checks              254
;  :propagations            51
;  :quant-instantiations    25
;  :rlimit-count            165109)
(declare-const sys__result@46@01 Int)
(declare-const $t@47@01 $Snap)
(assert (= $t@47@01 ($Snap.combine ($Snap.first $t@47@01) ($Snap.second $t@47@01))))
(declare-const $k@48@01 $Perm)
(assert ($Perm.isReadVar $k@48@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@48@01 $Perm.No) (< $Perm.No $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1218
;  :arith-assert-diseq      25
;  :arith-assert-lower      77
;  :arith-assert-upper      47
;  :arith-eq-adapter        30
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             747
;  :mk-clause               67
;  :num-allocs              4329162
;  :num-checks              255
;  :propagations            52
;  :quant-instantiations    25
;  :rlimit-count            165396)
(declare-const $t@49@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@15@01 $k@39@01))
    (=
      $t@49@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))))
  (implies
    (< $Perm.No $k@48@01)
    (= $t@49@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@47@01))))))
(assert (<= $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01)))
(assert (<= (+ (- $k@15@01 $k@39@01) $k@48@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second $t@47@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@47@01))
    ($Snap.second ($Snap.second $t@47@01)))))
(assert (= ($Snap.first ($Snap.second $t@47@01)) $Snap.unit))
; [eval] diz.Rng_m != null
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1228
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      78
;  :arith-assert-upper      49
;  :arith-conflicts         1
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         1
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             755
;  :mk-clause               67
;  :num-allocs              4329162
;  :num-checks              256
;  :propagations            52
;  :quant-instantiations    26
;  :rlimit-count            165950)
(assert (not (= $t@49@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@47@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@47@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1234
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      78
;  :arith-assert-upper      50
;  :arith-conflicts         2
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         2
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               239
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             758
;  :mk-clause               67
;  :num-allocs              4329162
;  :num-checks              257
;  :propagations            52
;  :quant-instantiations    26
;  :rlimit-count            166202)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@47@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1239
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      78
;  :arith-assert-upper      51
;  :arith-conflicts         3
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         3
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             760
;  :mk-clause               67
;  :num-allocs              4329162
;  :num-checks              258
;  :propagations            52
;  :quant-instantiations    26
;  :rlimit-count            166419)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1245
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      78
;  :arith-assert-upper      52
;  :arith-conflicts         4
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         4
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             763
;  :mk-clause               67
;  :num-allocs              4329162
;  :num-checks              259
;  :propagations            52
;  :quant-instantiations    26
;  :rlimit-count            166678)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1252
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      80
;  :arith-assert-upper      54
;  :arith-conflicts         5
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         5
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             770
;  :mk-clause               67
;  :num-allocs              4329162
;  :num-checks              260
;  :propagations            52
;  :quant-instantiations    28
;  :rlimit-count            167047)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1258
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      80
;  :arith-assert-upper      55
;  :arith-conflicts         6
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         6
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             773
;  :mk-clause               67
;  :num-allocs              4329162
;  :num-checks              261
;  :propagations            52
;  :quant-instantiations    28
;  :rlimit-count            167326)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@50@01 Int)
(push) ; 5
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 6
; [then-branch: 14 | 0 <= i@50@01 | live]
; [else-branch: 14 | !(0 <= i@50@01) | live]
(push) ; 7
; [then-branch: 14 | 0 <= i@50@01]
(assert (<= 0 i@50@01))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 8
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1266
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      83
;  :arith-assert-upper      57
;  :arith-conflicts         7
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             782
;  :mk-clause               67
;  :num-allocs              4329162
;  :num-checks              262
;  :propagations            52
;  :quant-instantiations    30
;  :rlimit-count            167805)
(pop) ; 7
(push) ; 7
; [else-branch: 14 | !(0 <= i@50@01)]
(assert (not (<= 0 i@50@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 15 | i@50@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i@50@01 | live]
; [else-branch: 15 | !(i@50@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i@50@01) | live]
(push) ; 7
; [then-branch: 15 | i@50@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i@50@01]
(assert (and
  (<
    i@50@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
  (<= 0 i@50@01)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 8
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1266
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      59
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         8
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             785
;  :mk-clause               67
;  :num-allocs              4329162
;  :num-checks              263
;  :propagations            52
;  :quant-instantiations    30
;  :rlimit-count            168002)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@50@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1266
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      59
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         8
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             785
;  :mk-clause               67
;  :num-allocs              4329162
;  :num-checks              264
;  :propagations            52
;  :quant-instantiations    30
;  :rlimit-count            168011)
; [eval] -1
(push) ; 8
; [then-branch: 16 | First:(Second:(Second:(Second:($t@47@01))))[i@50@01] == -1 | live]
; [else-branch: 16 | First:(Second:(Second:(Second:($t@47@01))))[i@50@01] != -1 | live]
(push) ; 9
; [then-branch: 16 | First:(Second:(Second:(Second:($t@47@01))))[i@50@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i@50@01)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 16 | First:(Second:(Second:(Second:($t@47@01))))[i@50@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      i@50@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1266
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      60
;  :arith-conflicts         9
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         9
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             787
;  :mk-clause               67
;  :num-allocs              4329162
;  :num-checks              265
;  :propagations            52
;  :quant-instantiations    30
;  :rlimit-count            168265)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@50@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1266
;  :arith-add-rows          1
;  :arith-assert-diseq      25
;  :arith-assert-lower      84
;  :arith-assert-upper      60
;  :arith-conflicts         9
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         9
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             787
;  :mk-clause               67
;  :num-allocs              4329162
;  :num-checks              266
;  :propagations            52
;  :quant-instantiations    30
;  :rlimit-count            168274)
(push) ; 10
; [then-branch: 17 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[i@50@01] | live]
; [else-branch: 17 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[i@50@01]) | live]
(push) ; 11
; [then-branch: 17 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[i@50@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i@50@01)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1266
;  :arith-add-rows          1
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      61
;  :arith-conflicts         10
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         10
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             791
;  :mk-clause               68
;  :num-allocs              4329162
;  :num-checks              267
;  :propagations            52
;  :quant-instantiations    30
;  :rlimit-count            168477)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@50@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1266
;  :arith-add-rows          1
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      61
;  :arith-conflicts         10
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         10
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             791
;  :mk-clause               68
;  :num-allocs              4329162
;  :num-checks              268
;  :propagations            52
;  :quant-instantiations    30
;  :rlimit-count            168486)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1266
;  :arith-add-rows          1
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      62
;  :arith-conflicts         11
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         11
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              51
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             792
;  :mk-clause               68
;  :num-allocs              4329162
;  :num-checks              269
;  :propagations            52
;  :quant-instantiations    30
;  :rlimit-count            168574)
(pop) ; 11
(push) ; 11
; [else-branch: 17 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[i@50@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      i@50@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 15 | !(i@50@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i@50@01)]
(assert (not
  (and
    (<
      i@50@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
    (<= 0 i@50@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@50@01 Int)) (!
  (implies
    (and
      (<
        i@50@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      (<= 0 i@50@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          i@50@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i@50@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i@50@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i@50@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1271
;  :arith-add-rows          1
;  :arith-assert-diseq      26
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         12
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         12
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             795
;  :mk-clause               68
;  :num-allocs              4329162
;  :num-checks              270
;  :propagations            52
;  :quant-instantiations    30
;  :rlimit-count            169239)
(declare-const $k@51@01 $Perm)
(assert ($Perm.isReadVar $k@51@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@51@01 $Perm.No) (< $Perm.No $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1271
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      89
;  :arith-assert-upper      64
;  :arith-conflicts         12
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         12
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             799
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              271
;  :propagations            53
;  :quant-instantiations    30
;  :rlimit-count            169437)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1271
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      89
;  :arith-assert-upper      64
;  :arith-conflicts         12
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         12
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             799
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              272
;  :propagations            53
;  :quant-instantiations    30
;  :rlimit-count            169448)
(declare-const $t@52@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@17@01 $k@41@01))
    (=
      $t@52@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
  (implies
    (< $Perm.No $k@51@01)
    (=
      $t@52@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
(assert (<= $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01)))
(assert (<= (+ (- $k@17@01 $k@41@01) $k@51@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1281
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      66
;  :arith-conflicts         13
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         13
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             807
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              273
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            170050)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1281
;  :arith-add-rows          1
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      66
;  :arith-conflicts         13
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         13
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             807
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              274
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            170061)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1281
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      67
;  :arith-conflicts         14
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         14
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             808
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              275
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            170170)
(assert (not (= $t@52@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      68
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         15
;  :arith-pivots            24
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             810
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              276
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            170475)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      68
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         15
;  :arith-pivots            24
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             810
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              277
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            170486)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1286
;  :arith-add-rows          3
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      69
;  :arith-conflicts         16
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         16
;  :arith-pivots            27
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             811
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              278
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            170599)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1291
;  :arith-add-rows          3
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      70
;  :arith-conflicts         17
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         17
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             813
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              279
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            170896)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1291
;  :arith-add-rows          3
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      70
;  :arith-conflicts         17
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         17
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             813
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              280
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            170907)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1291
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      71
;  :arith-conflicts         18
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         18
;  :arith-pivots            30
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             814
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              281
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            171015)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1296
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      72
;  :arith-conflicts         19
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         19
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               257
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             816
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              282
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            171322)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1296
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      72
;  :arith-conflicts         19
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         19
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               257
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             816
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              283
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            171333)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1296
;  :arith-add-rows          5
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      73
;  :arith-conflicts         20
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         20
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             817
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              284
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            171446)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1301
;  :arith-add-rows          5
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      74
;  :arith-conflicts         21
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         21
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               259
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             819
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              285
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            171763)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1301
;  :arith-add-rows          5
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      74
;  :arith-conflicts         21
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         21
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               259
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             819
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              286
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            171774)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1301
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      75
;  :arith-conflicts         22
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         22
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               260
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             820
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              287
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            171882)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1306
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      76
;  :arith-conflicts         23
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               261
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             822
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              288
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            172209)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1306
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      76
;  :arith-conflicts         23
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         23
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               261
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             822
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              289
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            172220)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1306
;  :arith-add-rows          7
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      77
;  :arith-conflicts         24
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         24
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             823
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              290
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            172333)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1311
;  :arith-add-rows          7
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      78
;  :arith-conflicts         25
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         25
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               263
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             825
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              291
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            172670)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1311
;  :arith-add-rows          7
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      78
;  :arith-conflicts         25
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         25
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               263
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             825
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              292
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            172681)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1311
;  :arith-add-rows          8
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      79
;  :arith-conflicts         26
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         26
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             826
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              293
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            172789)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1316
;  :arith-add-rows          8
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      80
;  :arith-conflicts         27
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         27
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               265
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             828
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              294
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            173136)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1316
;  :arith-add-rows          8
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      80
;  :arith-conflicts         27
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         27
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               265
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             828
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              295
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            173147)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1316
;  :arith-add-rows          9
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      81
;  :arith-conflicts         28
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         28
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               266
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             829
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              296
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            173260)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1321
;  :arith-add-rows          9
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      82
;  :arith-conflicts         29
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         29
;  :arith-pivots            49
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             831
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              297
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            173617)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1321
;  :arith-add-rows          9
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      82
;  :arith-conflicts         29
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         29
;  :arith-pivots            49
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             831
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              298
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            173628)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1321
;  :arith-add-rows          10
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      83
;  :arith-conflicts         30
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         30
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               268
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             832
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              299
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            173736)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1326
;  :arith-add-rows          10
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      84
;  :arith-conflicts         31
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         31
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               269
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             834
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              300
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            174103)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1326
;  :arith-add-rows          10
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      84
;  :arith-conflicts         31
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         31
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               269
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             834
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              301
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            174114)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1326
;  :arith-add-rows          11
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      85
;  :arith-conflicts         32
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         32
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             835
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              302
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            174227)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1331
;  :arith-add-rows          11
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      86
;  :arith-conflicts         33
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         33
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               271
;  :datatype-accessor-ax    107
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             837
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              303
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            174604)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1331
;  :arith-add-rows          11
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      86
;  :arith-conflicts         33
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         33
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               271
;  :datatype-accessor-ax    107
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             837
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              304
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            174615)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1331
;  :arith-add-rows          12
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      87
;  :arith-conflicts         34
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         34
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               272
;  :datatype-accessor-ax    107
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             838
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              305
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            174723)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1336
;  :arith-add-rows          12
;  :arith-assert-diseq      27
;  :arith-assert-lower      90
;  :arith-assert-upper      88
;  :arith-conflicts         35
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         35
;  :arith-pivots            59
;  :binary-propagations     22
;  :conflicts               273
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             840
;  :mk-clause               70
;  :num-allocs              4329162
;  :num-checks              306
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            175110)
(declare-const $k@53@01 $Perm)
(assert ($Perm.isReadVar $k@53@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@53@01 $Perm.No) (< $Perm.No $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1336
;  :arith-add-rows          12
;  :arith-assert-diseq      28
;  :arith-assert-lower      92
;  :arith-assert-upper      89
;  :arith-conflicts         35
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         35
;  :arith-pivots            59
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             844
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              307
;  :propagations            54
;  :quant-instantiations    31
;  :rlimit-count            175309)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1336
;  :arith-add-rows          12
;  :arith-assert-diseq      28
;  :arith-assert-lower      92
;  :arith-assert-upper      89
;  :arith-conflicts         35
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         35
;  :arith-pivots            59
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             844
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              308
;  :propagations            54
;  :quant-instantiations    31
;  :rlimit-count            175320)
(declare-const $t@54@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@18@01 $k@42@01))
    (=
      $t@54@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@53@01)
    (=
      $t@54@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01)))
(assert (<= (+ (- $k@18@01 $k@42@01) $k@53@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1346
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      91
;  :arith-conflicts         36
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         36
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               275
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             852
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              309
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            176282)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1346
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      91
;  :arith-conflicts         36
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         36
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               275
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             852
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              310
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            176293)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1346
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      92
;  :arith-conflicts         37
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         37
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             853
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              311
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            176371)
(assert (not (= $t@54@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1352
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      93
;  :arith-conflicts         38
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         38
;  :arith-pivots            61
;  :binary-propagations     22
;  :conflicts               277
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             856
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              312
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            176823)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1352
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      93
;  :arith-conflicts         38
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         38
;  :arith-pivots            61
;  :binary-propagations     22
;  :conflicts               277
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             856
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              313
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            176834)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1352
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      94
;  :arith-conflicts         39
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         39
;  :arith-pivots            61
;  :binary-propagations     22
;  :conflicts               278
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             857
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              314
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            176912)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1357
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      95
;  :arith-conflicts         40
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         40
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               279
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             859
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              315
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            177329)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1357
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      95
;  :arith-conflicts         40
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         40
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               279
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             859
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              316
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            177340)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1357
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      96
;  :arith-conflicts         41
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         41
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               280
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             860
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              317
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            177418)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1362
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      97
;  :arith-conflicts         42
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         42
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             862
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              318
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            177845)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1362
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      97
;  :arith-conflicts         42
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         42
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             862
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              319
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            177856)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1362
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      98
;  :arith-conflicts         43
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         43
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             863
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              320
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            177934)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1367
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      99
;  :arith-conflicts         44
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         44
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             865
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              321
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            178371)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1367
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      99
;  :arith-conflicts         44
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         44
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             865
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              322
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            178382)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1367
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      100
;  :arith-conflicts         45
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         45
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               284
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             866
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              323
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            178460)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1372
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      101
;  :arith-conflicts         46
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         46
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               285
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             868
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              324
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            178907)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1372
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      101
;  :arith-conflicts         46
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         46
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               285
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             868
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              325
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            178918)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1372
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      102
;  :arith-conflicts         47
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         47
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             869
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              326
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            178996)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1377
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      103
;  :arith-conflicts         48
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         48
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              327
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            179453)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1377
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      103
;  :arith-conflicts         48
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         48
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              328
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            179464)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1377
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      104
;  :arith-conflicts         49
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         49
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               288
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             872
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              329
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            179542)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1382
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      105
;  :arith-conflicts         50
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         50
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             874
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              330
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            180009)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1382
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      105
;  :arith-conflicts         50
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         50
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             874
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              331
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            180020)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1382
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      106
;  :arith-conflicts         51
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         51
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             875
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              332
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            180098)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1387
;  :arith-add-rows          13
;  :arith-assert-diseq      28
;  :arith-assert-lower      93
;  :arith-assert-upper      107
;  :arith-conflicts         52
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         52
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             877
;  :mk-clause               72
;  :num-allocs              4329162
;  :num-checks              333
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            180575)
(declare-const $k@55@01 $Perm)
(assert ($Perm.isReadVar $k@55@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@55@01 $Perm.No) (< $Perm.No $k@55@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1387
;  :arith-add-rows          13
;  :arith-assert-diseq      29
;  :arith-assert-lower      95
;  :arith-assert-upper      108
;  :arith-conflicts         52
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         52
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             881
;  :mk-clause               74
;  :num-allocs              4329162
;  :num-checks              334
;  :propagations            55
;  :quant-instantiations    32
;  :rlimit-count            180773)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1387
;  :arith-add-rows          13
;  :arith-assert-diseq      29
;  :arith-assert-lower      95
;  :arith-assert-upper      108
;  :arith-conflicts         52
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         52
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             881
;  :mk-clause               74
;  :num-allocs              4329162
;  :num-checks              335
;  :propagations            55
;  :quant-instantiations    32
;  :rlimit-count            180784)
(declare-const $t@56@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@19@01 $k@43@01))
    (=
      $t@56@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@55@01)
    (=
      $t@56@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@19@01 $k@43@01) $k@55@01)))
(assert (<= (+ (- $k@19@01 $k@43@01) $k@55@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@19@01 $k@43@01) $k@55@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1397
;  :arith-add-rows          14
;  :arith-assert-diseq      29
;  :arith-assert-lower      96
;  :arith-assert-upper      110
;  :arith-conflicts         53
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         53
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             889
;  :mk-clause               74
;  :num-allocs              4329162
;  :num-checks              336
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            181920)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1397
;  :arith-add-rows          14
;  :arith-assert-diseq      29
;  :arith-assert-lower      96
;  :arith-assert-upper      110
;  :arith-conflicts         53
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         53
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             889
;  :mk-clause               74
;  :num-allocs              4329162
;  :num-checks              337
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            181931)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@43@01) $k@55@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1397
;  :arith-add-rows          14
;  :arith-assert-diseq      29
;  :arith-assert-lower      96
;  :arith-assert-upper      111
;  :arith-conflicts         54
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         54
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             890
;  :mk-clause               74
;  :num-allocs              4329162
;  :num-checks              338
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            182015)
(assert (not (= $t@56@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1403
;  :arith-add-rows          14
;  :arith-assert-diseq      29
;  :arith-assert-lower      96
;  :arith-assert-upper      112
;  :arith-conflicts         55
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         55
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             893
;  :mk-clause               74
;  :num-allocs              4329162
;  :num-checks              339
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            182557)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1403
;  :arith-add-rows          14
;  :arith-assert-diseq      29
;  :arith-assert-lower      96
;  :arith-assert-upper      112
;  :arith-conflicts         55
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         55
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             893
;  :mk-clause               74
;  :num-allocs              4329162
;  :num-checks              340
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            182568)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@43@01) $k@55@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1403
;  :arith-add-rows          14
;  :arith-assert-diseq      29
;  :arith-assert-lower      96
;  :arith-assert-upper      113
;  :arith-conflicts         56
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         56
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             894
;  :mk-clause               74
;  :num-allocs              4329162
;  :num-checks              341
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            182648)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1408
;  :arith-add-rows          14
;  :arith-assert-diseq      29
;  :arith-assert-lower      96
;  :arith-assert-upper      114
;  :arith-conflicts         57
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         57
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             896
;  :mk-clause               74
;  :num-allocs              4329162
;  :num-checks              342
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            183155)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1408
;  :arith-add-rows          14
;  :arith-assert-diseq      29
;  :arith-assert-lower      96
;  :arith-assert-upper      114
;  :arith-conflicts         57
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         57
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             896
;  :mk-clause               74
;  :num-allocs              4329162
;  :num-checks              343
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            183166)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@43@01) $k@55@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1408
;  :arith-add-rows          14
;  :arith-assert-diseq      29
;  :arith-assert-lower      96
;  :arith-assert-upper      115
;  :arith-conflicts         58
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         58
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             897
;  :mk-clause               74
;  :num-allocs              4329162
;  :num-checks              344
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            183246)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1413
;  :arith-add-rows          14
;  :arith-assert-diseq      29
;  :arith-assert-lower      96
;  :arith-assert-upper      116
;  :arith-conflicts         59
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         59
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             899
;  :mk-clause               74
;  :num-allocs              4329162
;  :num-checks              345
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            183763)
(declare-const $k@57@01 $Perm)
(assert ($Perm.isReadVar $k@57@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@57@01 $Perm.No) (< $Perm.No $k@57@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1413
;  :arith-add-rows          14
;  :arith-assert-diseq      30
;  :arith-assert-lower      98
;  :arith-assert-upper      117
;  :arith-conflicts         59
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         59
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               300
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             903
;  :mk-clause               76
;  :num-allocs              4329162
;  :num-checks              346
;  :propagations            56
;  :quant-instantiations    33
;  :rlimit-count            183962)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1413
;  :arith-add-rows          14
;  :arith-assert-diseq      30
;  :arith-assert-lower      98
;  :arith-assert-upper      117
;  :arith-conflicts         59
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         59
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               300
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             903
;  :mk-clause               76
;  :num-allocs              4329162
;  :num-checks              347
;  :propagations            56
;  :quant-instantiations    33
;  :rlimit-count            183973)
(declare-const $t@58@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@20@01 $k@44@01))
    (=
      $t@58@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@57@01)
    (=
      $t@58@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@20@01 $k@44@01) $k@57@01)))
(assert (<= (+ (- $k@20@01 $k@44@01) $k@57@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@20@01 $k@44@01) $k@57@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1423
;  :arith-add-rows          15
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      119
;  :arith-conflicts         60
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         60
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             911
;  :mk-clause               76
;  :num-allocs              4329162
;  :num-checks              348
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            185179)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1423
;  :arith-add-rows          15
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      119
;  :arith-conflicts         60
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         60
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             911
;  :mk-clause               76
;  :num-allocs              4329162
;  :num-checks              349
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            185190)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@20@01 $k@44@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1423
;  :arith-add-rows          15
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      120
;  :arith-conflicts         61
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         61
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             912
;  :mk-clause               76
;  :num-allocs              4329162
;  :num-checks              350
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            185268)
(assert (not (= $t@58@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1429
;  :arith-add-rows          15
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      121
;  :arith-conflicts         62
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             915
;  :mk-clause               76
;  :num-allocs              4329162
;  :num-checks              351
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            185850)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1429
;  :arith-add-rows          15
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      121
;  :arith-conflicts         62
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         62
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             915
;  :mk-clause               76
;  :num-allocs              4329162
;  :num-checks              352
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            185861)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@20@01 $k@44@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1429
;  :arith-add-rows          15
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      122
;  :arith-conflicts         63
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         63
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               304
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             916
;  :mk-clause               76
;  :num-allocs              4329162
;  :num-checks              353
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            185939)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1434
;  :arith-add-rows          15
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      123
;  :arith-conflicts         64
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         64
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             918
;  :mk-clause               76
;  :num-allocs              4329162
;  :num-checks              354
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            186486)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@49@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1434
;  :arith-add-rows          15
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      123
;  :arith-conflicts         64
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         64
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             918
;  :mk-clause               76
;  :num-allocs              4329162
;  :num-checks              355
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            186497)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1434
;  :arith-add-rows          16
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      124
;  :arith-conflicts         65
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         65
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               306
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             919
;  :mk-clause               76
;  :num-allocs              4329162
;  :num-checks              356
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            186610)
(declare-const $k@59@01 $Perm)
(assert ($Perm.isReadVar $k@59@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@59@01 $Perm.No) (< $Perm.No $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1434
;  :arith-add-rows          16
;  :arith-assert-diseq      31
;  :arith-assert-lower      101
;  :arith-assert-upper      125
;  :arith-conflicts         65
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         65
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             923
;  :mk-clause               78
;  :num-allocs              4329162
;  :num-checks              357
;  :propagations            57
;  :quant-instantiations    34
;  :rlimit-count            186809)
(set-option :timeout 10)
(push) ; 5
(assert (not (= diz@7@01 $t@52@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1434
;  :arith-add-rows          16
;  :arith-assert-diseq      31
;  :arith-assert-lower      101
;  :arith-assert-upper      125
;  :arith-conflicts         65
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         65
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             923
;  :mk-clause               78
;  :num-allocs              4329162
;  :num-checks              358
;  :propagations            57
;  :quant-instantiations    34
;  :rlimit-count            186820)
(declare-const $t@60@01 $Ref)
(assert (and
  (implies (< $Perm.No (+ (- $k@15@01 $k@39@01) $k@48@01)) (= $t@60@01 $t@49@01))
  (implies
    (< $Perm.No $k@59@01)
    (=
      $t@60@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01)))
(assert (<= (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1442
;  :arith-add-rows          19
;  :arith-assert-diseq      31
;  :arith-assert-lower      102
;  :arith-assert-upper      127
;  :arith-conflicts         66
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         66
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             932
;  :mk-clause               79
;  :num-allocs              4329162
;  :num-checks              359
;  :propagations            57
;  :quant-instantiations    35
;  :rlimit-count            187769)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1443
;  :arith-add-rows          21
;  :arith-assert-diseq      31
;  :arith-assert-lower      102
;  :arith-assert-upper      128
;  :arith-conflicts         67
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         67
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               309
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             933
;  :mk-clause               79
;  :num-allocs              4329162
;  :num-checks              360
;  :propagations            58
;  :quant-instantiations    35
;  :rlimit-count            187881)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1443
;  :arith-add-rows          22
;  :arith-assert-diseq      31
;  :arith-assert-lower      102
;  :arith-assert-upper      129
;  :arith-conflicts         68
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         68
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             934
;  :mk-clause               79
;  :num-allocs              4329162
;  :num-checks              361
;  :propagations            58
;  :quant-instantiations    35
;  :rlimit-count            187989)
(push) ; 5
(assert (not (= diz@7@01 $t@52@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1443
;  :arith-add-rows          22
;  :arith-assert-diseq      31
;  :arith-assert-lower      102
;  :arith-assert-upper      129
;  :arith-conflicts         68
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         68
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             934
;  :mk-clause               79
;  :num-allocs              4329162
;  :num-checks              362
;  :propagations            58
;  :quant-instantiations    35
;  :rlimit-count            188000)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1443
;  :arith-add-rows          24
;  :arith-assert-diseq      31
;  :arith-assert-lower      102
;  :arith-assert-upper      130
;  :arith-conflicts         69
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         69
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               311
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             935
;  :mk-clause               79
;  :num-allocs              4329162
;  :num-checks              363
;  :propagations            58
;  :quant-instantiations    35
;  :rlimit-count            188128)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1443
;  :arith-add-rows          24
;  :arith-assert-diseq      31
;  :arith-assert-lower      102
;  :arith-assert-upper      131
;  :arith-conflicts         70
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         70
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             936
;  :mk-clause               79
;  :num-allocs              4329162
;  :num-checks              364
;  :propagations            58
;  :quant-instantiations    35
;  :rlimit-count            188222)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1445
;  :arith-add-rows          24
;  :arith-assert-diseq      31
;  :arith-assert-lower      102
;  :arith-assert-upper      132
;  :arith-conflicts         71
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         71
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             938
;  :mk-clause               79
;  :num-allocs              4329162
;  :num-checks              365
;  :propagations            58
;  :quant-instantiations    35
;  :rlimit-count            188734)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1446
;  :arith-add-rows          26
;  :arith-assert-diseq      31
;  :arith-assert-lower      102
;  :arith-assert-upper      133
;  :arith-conflicts         72
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         72
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               314
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             939
;  :mk-clause               79
;  :num-allocs              4329162
;  :num-checks              366
;  :propagations            59
;  :quant-instantiations    35
;  :rlimit-count            188846)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1446
;  :arith-add-rows          27
;  :arith-assert-diseq      31
;  :arith-assert-lower      102
;  :arith-assert-upper      134
;  :arith-conflicts         73
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         73
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 305
;  :datatype-occurs-check   22
;  :datatype-splits         169
;  :decisions               296
;  :del-clause              52
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             940
;  :mk-clause               79
;  :num-allocs              4329162
;  :num-checks              367
;  :propagations            59
;  :quant-instantiations    35
;  :rlimit-count            188959)
(assert (= $t@52@01 diz@7@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; var__28 := var__28 - __flatten_6__32
; [eval] var__28 - __flatten_6__32
(declare-const var__28@61@01 Int)
(assert (= var__28@61@01 (- __var@9@01 sys__result@46@01)))
; [exec]
; sys__local__result__26 := var__28
; [exec]
; // assert
; assert acc(diz.Rng_m, wildcard) && diz.Rng_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.Rng_m, __globals), write) && (true && (true && acc(diz.Rng_m.Main_process_state, write) && |diz.Rng_m.Main_process_state| == 3 && acc(diz.Rng_m.Main_event_state, write) && |diz.Rng_m.Main_event_state| == 6 && (forall i__35: Int :: { diz.Rng_m.Main_process_state[i__35] } 0 <= i__35 && i__35 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__35] == -1 || 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|)) && acc(diz.Rng_m.Main_rn, wildcard) && diz.Rng_m.Main_rn != null && acc(diz.Rng_m.Main_rn.Rng_clk, write) && acc(diz.Rng_m.Main_rn.Rng_reset, write) && acc(diz.Rng_m.Main_rn.Rng_loadseed_i, write) && acc(diz.Rng_m.Main_rn.Rng_seed_i, write) && acc(diz.Rng_m.Main_rn.Rng_number_o, write) && acc(diz.Rng_m.Main_rn.Rng_LFSR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_CASR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_result, write) && acc(diz.Rng_m.Main_rn.Rng_i, write) && acc(diz.Rng_m.Main_rn.Rng_aux, write) && acc(diz.Rng_m.Main_rn_casr, wildcard) && diz.Rng_m.Main_rn_casr != null && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_var, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_out, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_i, write) && acc(diz.Rng_m.Main_rn_lfsr, wildcard) && diz.Rng_m.Main_rn_lfsr != null && acc(diz.Rng_m.Main_rn_lfsr.LFSR_LFSR_var, write) && acc(diz.Rng_m.Main_rn_lfsr.LFSR_outbit, write) && acc(diz.Rng_m.Main_rn_combinate, wildcard) && diz.Rng_m.Main_rn_combinate != null && acc(diz.Rng_m.Main_rn_combinate.Combinate_i, write) && acc(diz.Rng_m.Main_rn.Rng_m, wildcard) && diz.Rng_m.Main_rn.Rng_m == diz.Rng_m) && diz.Rng_m.Main_rn == diz
(declare-const $k@62@01 $Perm)
(assert ($Perm.isReadVar $k@62@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@62@01 $Perm.No) (< $Perm.No $k@62@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1684
;  :arith-add-rows          27
;  :arith-assert-diseq      32
;  :arith-assert-lower      105
;  :arith-assert-upper      136
;  :arith-conflicts         73
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         73
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              76
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1002
;  :mk-clause               85
;  :num-allocs              4502041
;  :num-checks              369
;  :propagations            63
;  :quant-instantiations    35
;  :rlimit-count            190834)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1685
;  :arith-add-rows          29
;  :arith-assert-diseq      32
;  :arith-assert-lower      105
;  :arith-assert-upper      137
;  :arith-conflicts         74
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         73
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1004
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              370
;  :propagations            64
;  :quant-instantiations    35
;  :rlimit-count            190962)
(assert (< $k@62@01 (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01)))
(assert (<= $Perm.No (- (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01) $k@62@01)))
(assert (<= (- (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01) $k@62@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01) $k@62@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1685
;  :arith-add-rows          30
;  :arith-assert-diseq      32
;  :arith-assert-lower      107
;  :arith-assert-upper      139
;  :arith-conflicts         75
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         74
;  :arith-pivots            98
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1008
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              371
;  :propagations            64
;  :quant-instantiations    35
;  :rlimit-count            191248)
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= $t@60@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1687
;  :arith-add-rows          32
;  :arith-assert-diseq      32
;  :arith-assert-lower      107
;  :arith-assert-upper      140
;  :arith-conflicts         76
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         75
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               320
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1009
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              372
;  :propagations            65
;  :quant-instantiations    35
;  :rlimit-count            191346)
(assert (not (= $t@60@01 $Ref.null)))
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1687
;  :arith-add-rows          34
;  :arith-assert-diseq      32
;  :arith-assert-lower      107
;  :arith-assert-upper      141
;  :arith-conflicts         77
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         76
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               321
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1011
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              373
;  :propagations            65
;  :quant-instantiations    35
;  :rlimit-count            191532)
(push) ; 5
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1688
;  :arith-add-rows          36
;  :arith-assert-diseq      32
;  :arith-assert-lower      107
;  :arith-assert-upper      142
;  :arith-conflicts         78
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         77
;  :arith-pivots            104
;  :binary-propagations     22
;  :conflicts               322
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1012
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              374
;  :propagations            66
;  :quant-instantiations    35
;  :rlimit-count            191644)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1688
;  :arith-add-rows          38
;  :arith-assert-diseq      32
;  :arith-assert-lower      107
;  :arith-assert-upper      143
;  :arith-conflicts         79
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         78
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               323
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1013
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              375
;  :propagations            66
;  :quant-instantiations    35
;  :rlimit-count            191775)
(push) ; 5
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1689
;  :arith-add-rows          40
;  :arith-assert-diseq      32
;  :arith-assert-lower      107
;  :arith-assert-upper      144
;  :arith-conflicts         80
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         79
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1014
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              376
;  :propagations            67
;  :quant-instantiations    35
;  :rlimit-count            191887)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1689
;  :arith-add-rows          42
;  :arith-assert-diseq      32
;  :arith-assert-lower      107
;  :arith-assert-upper      145
;  :arith-conflicts         81
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         80
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1015
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              377
;  :propagations            67
;  :quant-instantiations    35
;  :rlimit-count            192018)
(push) ; 5
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1690
;  :arith-add-rows          44
;  :arith-assert-diseq      32
;  :arith-assert-lower      107
;  :arith-assert-upper      146
;  :arith-conflicts         82
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         81
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1016
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              378
;  :propagations            68
;  :quant-instantiations    35
;  :rlimit-count            192130)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1690
;  :arith-add-rows          46
;  :arith-assert-diseq      32
;  :arith-assert-lower      107
;  :arith-assert-upper      147
;  :arith-conflicts         83
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         82
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1017
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              379
;  :propagations            68
;  :quant-instantiations    35
;  :rlimit-count            192261)
(push) ; 5
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1691
;  :arith-add-rows          48
;  :arith-assert-diseq      32
;  :arith-assert-lower      107
;  :arith-assert-upper      148
;  :arith-conflicts         84
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         83
;  :arith-pivots            116
;  :binary-propagations     22
;  :conflicts               328
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1018
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              380
;  :propagations            69
;  :quant-instantiations    35
;  :rlimit-count            192373)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1691
;  :arith-add-rows          50
;  :arith-assert-diseq      32
;  :arith-assert-lower      107
;  :arith-assert-upper      149
;  :arith-conflicts         85
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         84
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               329
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1019
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              381
;  :propagations            69
;  :quant-instantiations    35
;  :rlimit-count            192504)
(push) ; 5
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1692
;  :arith-add-rows          52
;  :arith-assert-diseq      32
;  :arith-assert-lower      107
;  :arith-assert-upper      150
;  :arith-conflicts         86
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         85
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               330
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1020
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              382
;  :propagations            70
;  :quant-instantiations    35
;  :rlimit-count            192616)
; [eval] (forall i__35: Int :: { diz.Rng_m.Main_process_state[i__35] } 0 <= i__35 && i__35 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__35] == -1 || 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|)
(declare-const i__35@63@01 Int)
(push) ; 5
; [eval] 0 <= i__35 && i__35 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__35] == -1 || 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i__35 && i__35 < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i__35
(push) ; 6
; [then-branch: 18 | 0 <= i__35@63@01 | live]
; [else-branch: 18 | !(0 <= i__35@63@01) | live]
(push) ; 7
; [then-branch: 18 | 0 <= i__35@63@01]
(assert (<= 0 i__35@63@01))
; [eval] i__35 < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 8
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1692
;  :arith-add-rows          54
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      151
;  :arith-conflicts         87
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         86
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1022
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              383
;  :propagations            70
;  :quant-instantiations    35
;  :rlimit-count            192800)
(push) ; 8
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1693
;  :arith-add-rows          56
;  :arith-assert-diseq      32
;  :arith-assert-lower      108
;  :arith-assert-upper      152
;  :arith-conflicts         88
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         87
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               332
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1023
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              384
;  :propagations            71
;  :quant-instantiations    35
;  :rlimit-count            192912)
(pop) ; 7
(push) ; 7
; [else-branch: 18 | !(0 <= i__35@63@01)]
(assert (not (<= 0 i__35@63@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 19 | i__35@63@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i__35@63@01 | live]
; [else-branch: 19 | !(i__35@63@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i__35@63@01) | live]
(push) ; 7
; [then-branch: 19 | i__35@63@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i__35@63@01]
(assert (and
  (<
    i__35@63@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
  (<= 0 i__35@63@01)))
; [eval] diz.Rng_m.Main_process_state[i__35] == -1 || 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__35] == -1
; [eval] diz.Rng_m.Main_process_state[i__35]
(push) ; 8
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1693
;  :arith-add-rows          58
;  :arith-assert-diseq      32
;  :arith-assert-lower      109
;  :arith-assert-upper      154
;  :arith-conflicts         89
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         88
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1026
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              385
;  :propagations            71
;  :quant-instantiations    35
;  :rlimit-count            193152)
(push) ; 8
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1694
;  :arith-add-rows          60
;  :arith-assert-diseq      32
;  :arith-assert-lower      109
;  :arith-assert-upper      155
;  :arith-conflicts         90
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         89
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               334
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1027
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              386
;  :propagations            72
;  :quant-instantiations    35
;  :rlimit-count            193264)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i__35@63@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1694
;  :arith-add-rows          60
;  :arith-assert-diseq      32
;  :arith-assert-lower      109
;  :arith-assert-upper      155
;  :arith-conflicts         90
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         89
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               334
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1027
;  :mk-clause               87
;  :num-allocs              4502041
;  :num-checks              387
;  :propagations            72
;  :quant-instantiations    35
;  :rlimit-count            193273)
; [eval] -1
(push) ; 8
; [then-branch: 20 | First:(Second:(Second:(Second:($t@47@01))))[i__35@63@01] == -1 | live]
; [else-branch: 20 | First:(Second:(Second:(Second:($t@47@01))))[i__35@63@01] != -1 | live]
(push) ; 9
; [then-branch: 20 | First:(Second:(Second:(Second:($t@47@01))))[i__35@63@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i__35@63@01)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 20 | First:(Second:(Second:(Second:($t@47@01))))[i__35@63@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      i__35@63@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i__35]
; [eval] diz.Rng_m.Main_process_state[i__35]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1694
;  :arith-add-rows          62
;  :arith-assert-diseq      33
;  :arith-assert-lower      112
;  :arith-assert-upper      157
;  :arith-conflicts         91
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         90
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1034
;  :mk-clause               91
;  :num-allocs              4502041
;  :num-checks              388
;  :propagations            74
;  :quant-instantiations    36
;  :rlimit-count            193627)
(push) ; 10
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1695
;  :arith-add-rows          64
;  :arith-assert-diseq      33
;  :arith-assert-lower      112
;  :arith-assert-upper      158
;  :arith-conflicts         92
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         91
;  :arith-pivots            132
;  :binary-propagations     22
;  :conflicts               336
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1035
;  :mk-clause               91
;  :num-allocs              4502041
;  :num-checks              389
;  :propagations            75
;  :quant-instantiations    36
;  :rlimit-count            193739)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__35@63@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1695
;  :arith-add-rows          64
;  :arith-assert-diseq      33
;  :arith-assert-lower      112
;  :arith-assert-upper      158
;  :arith-conflicts         92
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         91
;  :arith-pivots            132
;  :binary-propagations     22
;  :conflicts               336
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1035
;  :mk-clause               91
;  :num-allocs              4502041
;  :num-checks              390
;  :propagations            75
;  :quant-instantiations    36
;  :rlimit-count            193748)
(push) ; 10
; [then-branch: 21 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[i__35@63@01] | live]
; [else-branch: 21 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[i__35@63@01]) | live]
(push) ; 11
; [then-branch: 21 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[i__35@63@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i__35@63@01)))
; [eval] diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__35]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1695
;  :arith-add-rows          66
;  :arith-assert-diseq      33
;  :arith-assert-lower      112
;  :arith-assert-upper      159
;  :arith-conflicts         93
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         92
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1036
;  :mk-clause               91
;  :num-allocs              4502041
;  :num-checks              391
;  :propagations            75
;  :quant-instantiations    36
;  :rlimit-count            193984)
(push) ; 12
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1696
;  :arith-add-rows          68
;  :arith-assert-diseq      33
;  :arith-assert-lower      112
;  :arith-assert-upper      160
;  :arith-conflicts         94
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         93
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               338
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1037
;  :mk-clause               91
;  :num-allocs              4502041
;  :num-checks              392
;  :propagations            76
;  :quant-instantiations    36
;  :rlimit-count            194096)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__35@63@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1696
;  :arith-add-rows          68
;  :arith-assert-diseq      33
;  :arith-assert-lower      112
;  :arith-assert-upper      160
;  :arith-conflicts         94
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         93
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               338
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1037
;  :mk-clause               91
;  :num-allocs              4502041
;  :num-checks              393
;  :propagations            76
;  :quant-instantiations    36
;  :rlimit-count            194105)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1696
;  :arith-add-rows          70
;  :arith-assert-diseq      33
;  :arith-assert-lower      112
;  :arith-assert-upper      161
;  :arith-conflicts         95
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         94
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1038
;  :mk-clause               91
;  :num-allocs              4502041
;  :num-checks              394
;  :propagations            76
;  :quant-instantiations    36
;  :rlimit-count            194236)
(push) ; 12
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1697
;  :arith-add-rows          72
;  :arith-assert-diseq      33
;  :arith-assert-lower      112
;  :arith-assert-upper      162
;  :arith-conflicts         96
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         95
;  :arith-pivots            140
;  :binary-propagations     22
;  :conflicts               340
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              78
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1039
;  :mk-clause               91
;  :num-allocs              4502041
;  :num-checks              395
;  :propagations            77
;  :quant-instantiations    36
;  :rlimit-count            194348)
(pop) ; 11
(push) ; 11
; [else-branch: 21 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[i__35@63@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      i__35@63@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 19 | !(i__35@63@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i__35@63@01)]
(assert (not
  (and
    (<
      i__35@63@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
    (<= 0 i__35@63@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((i__35@63@01 Int)) (!
  (implies
    (and
      (<
        i__35@63@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      (<= 0 i__35@63@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          i__35@63@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i__35@63@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i__35@63@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i__35@63@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1697
;  :arith-add-rows          72
;  :arith-assert-diseq      35
;  :arith-assert-lower      113
;  :arith-assert-upper      163
;  :arith-conflicts         96
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         95
;  :arith-pivots            140
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              96
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1047
;  :mk-clause               105
;  :num-allocs              4502041
;  :num-checks              396
;  :propagations            79
;  :quant-instantiations    37
;  :rlimit-count            194794)
(assert (forall ((i__35@63@01 Int)) (!
  (implies
    (and
      (<
        i__35@63@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      (<= 0 i__35@63@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          i__35@63@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i__35@63@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i__35@63@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i__35@63@01))
  :qid |prog.l<no position>|)))
(declare-const $k@64@01 $Perm)
(assert ($Perm.isReadVar $k@64@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1697
;  :arith-add-rows          74
;  :arith-assert-diseq      36
;  :arith-assert-lower      115
;  :arith-assert-upper      165
;  :arith-conflicts         97
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         96
;  :arith-pivots            142
;  :binary-propagations     22
;  :conflicts               342
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              96
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1053
;  :mk-clause               107
;  :num-allocs              4502041
;  :num-checks              397
;  :propagations            80
;  :quant-instantiations    37
;  :rlimit-count            195436)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@64@01 $Perm.No) (< $Perm.No $k@64@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1697
;  :arith-add-rows          74
;  :arith-assert-diseq      36
;  :arith-assert-lower      115
;  :arith-assert-upper      165
;  :arith-conflicts         97
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         96
;  :arith-pivots            142
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              96
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1053
;  :mk-clause               107
;  :num-allocs              4502041
;  :num-checks              398
;  :propagations            80
;  :quant-instantiations    37
;  :rlimit-count            195486)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1698
;  :arith-add-rows          76
;  :arith-assert-diseq      36
;  :arith-assert-lower      115
;  :arith-assert-upper      166
;  :arith-conflicts         98
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         97
;  :arith-pivots            144
;  :binary-propagations     22
;  :conflicts               344
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              96
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1054
;  :mk-clause               107
;  :num-allocs              4502041
;  :num-checks              399
;  :propagations            81
;  :quant-instantiations    37
;  :rlimit-count            195598)
(push) ; 5
(assert (not (not (= (+ (- $k@17@01 $k@41@01) $k@51@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1699
;  :arith-add-rows          77
;  :arith-assert-diseq      36
;  :arith-assert-lower      115
;  :arith-assert-upper      167
;  :arith-conflicts         99
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         97
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               345
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1056
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              400
;  :propagations            82
;  :quant-instantiations    37
;  :rlimit-count            195706)
(assert (< $k@64@01 (+ (- $k@17@01 $k@41@01) $k@51@01)))
(assert (<= $Perm.No (- (+ (- $k@17@01 $k@41@01) $k@51@01) $k@64@01)))
(assert (<= (- (+ (- $k@17@01 $k@41@01) $k@51@01) $k@64@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@17@01 $k@41@01) $k@51@01) $k@64@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1699
;  :arith-add-rows          80
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      169
;  :arith-conflicts         100
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         98
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1060
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              401
;  :propagations            82
;  :quant-instantiations    37
;  :rlimit-count            196024)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1700
;  :arith-add-rows          82
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      170
;  :arith-conflicts         101
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         99
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               347
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1061
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              402
;  :propagations            83
;  :quant-instantiations    37
;  :rlimit-count            196136)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1700
;  :arith-add-rows          83
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      171
;  :arith-conflicts         102
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         100
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               348
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1062
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              403
;  :propagations            83
;  :quant-instantiations    37
;  :rlimit-count            196250)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1700
;  :arith-add-rows          85
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      172
;  :arith-conflicts         103
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         101
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               349
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1063
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              404
;  :propagations            83
;  :quant-instantiations    37
;  :rlimit-count            196381)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1701
;  :arith-add-rows          87
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      173
;  :arith-conflicts         104
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         102
;  :arith-pivots            157
;  :binary-propagations     22
;  :conflicts               350
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1064
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              405
;  :propagations            84
;  :quant-instantiations    37
;  :rlimit-count            196493)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1701
;  :arith-add-rows          88
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      174
;  :arith-conflicts         105
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         103
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1065
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              406
;  :propagations            84
;  :quant-instantiations    37
;  :rlimit-count            196602)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1701
;  :arith-add-rows          90
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      175
;  :arith-conflicts         106
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         104
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               352
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1066
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              407
;  :propagations            84
;  :quant-instantiations    37
;  :rlimit-count            196733)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1702
;  :arith-add-rows          92
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      176
;  :arith-conflicts         107
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         105
;  :arith-pivots            163
;  :binary-propagations     22
;  :conflicts               353
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1067
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              408
;  :propagations            85
;  :quant-instantiations    37
;  :rlimit-count            196845)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1702
;  :arith-add-rows          93
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      177
;  :arith-conflicts         108
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         106
;  :arith-pivots            166
;  :binary-propagations     22
;  :conflicts               354
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1068
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              409
;  :propagations            85
;  :quant-instantiations    37
;  :rlimit-count            196959)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1702
;  :arith-add-rows          95
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      178
;  :arith-conflicts         109
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         107
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               355
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1069
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              410
;  :propagations            85
;  :quant-instantiations    37
;  :rlimit-count            197090)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1703
;  :arith-add-rows          97
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      179
;  :arith-conflicts         110
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         108
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               356
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1070
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              411
;  :propagations            86
;  :quant-instantiations    37
;  :rlimit-count            197202)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1703
;  :arith-add-rows          98
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      180
;  :arith-conflicts         111
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         109
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               357
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1071
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              412
;  :propagations            86
;  :quant-instantiations    37
;  :rlimit-count            197311)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1703
;  :arith-add-rows          100
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      181
;  :arith-conflicts         112
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         110
;  :arith-pivots            174
;  :binary-propagations     22
;  :conflicts               358
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1072
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              413
;  :propagations            86
;  :quant-instantiations    37
;  :rlimit-count            197442)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1704
;  :arith-add-rows          102
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      182
;  :arith-conflicts         113
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         111
;  :arith-pivots            176
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1073
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              414
;  :propagations            87
;  :quant-instantiations    37
;  :rlimit-count            197554)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1704
;  :arith-add-rows          103
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      183
;  :arith-conflicts         114
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         112
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               360
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1074
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              415
;  :propagations            87
;  :quant-instantiations    37
;  :rlimit-count            197668)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1704
;  :arith-add-rows          105
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      184
;  :arith-conflicts         115
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         113
;  :arith-pivots            181
;  :binary-propagations     22
;  :conflicts               361
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1075
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              416
;  :propagations            87
;  :quant-instantiations    37
;  :rlimit-count            197799)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1705
;  :arith-add-rows          107
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      185
;  :arith-conflicts         116
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         114
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1076
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              417
;  :propagations            88
;  :quant-instantiations    37
;  :rlimit-count            197911)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1705
;  :arith-add-rows          108
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      186
;  :arith-conflicts         117
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         115
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               363
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1077
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              418
;  :propagations            88
;  :quant-instantiations    37
;  :rlimit-count            198020)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1705
;  :arith-add-rows          110
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      187
;  :arith-conflicts         118
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         116
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               364
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1078
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              419
;  :propagations            88
;  :quant-instantiations    37
;  :rlimit-count            198151)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1706
;  :arith-add-rows          112
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      188
;  :arith-conflicts         119
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         117
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1079
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              420
;  :propagations            89
;  :quant-instantiations    37
;  :rlimit-count            198263)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1706
;  :arith-add-rows          113
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      189
;  :arith-conflicts         120
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         118
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               366
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1080
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              421
;  :propagations            89
;  :quant-instantiations    37
;  :rlimit-count            198377)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1706
;  :arith-add-rows          115
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      190
;  :arith-conflicts         121
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         119
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               367
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1081
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              422
;  :propagations            89
;  :quant-instantiations    37
;  :rlimit-count            198508)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1707
;  :arith-add-rows          117
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      191
;  :arith-conflicts         122
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         120
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               368
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1082
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              423
;  :propagations            90
;  :quant-instantiations    37
;  :rlimit-count            198620)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1707
;  :arith-add-rows          118
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      192
;  :arith-conflicts         123
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         121
;  :arith-pivots            198
;  :binary-propagations     22
;  :conflicts               369
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1083
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              424
;  :propagations            90
;  :quant-instantiations    37
;  :rlimit-count            198729)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1707
;  :arith-add-rows          120
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      193
;  :arith-conflicts         124
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         122
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               370
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1084
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              425
;  :propagations            90
;  :quant-instantiations    37
;  :rlimit-count            198860)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1708
;  :arith-add-rows          122
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      194
;  :arith-conflicts         125
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         123
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               371
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1085
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              426
;  :propagations            91
;  :quant-instantiations    37
;  :rlimit-count            198972)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1708
;  :arith-add-rows          123
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      195
;  :arith-conflicts         126
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         124
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               372
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1086
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              427
;  :propagations            91
;  :quant-instantiations    37
;  :rlimit-count            199086)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1708
;  :arith-add-rows          125
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      196
;  :arith-conflicts         127
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         125
;  :arith-pivots            207
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1087
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              428
;  :propagations            91
;  :quant-instantiations    37
;  :rlimit-count            199217)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1709
;  :arith-add-rows          127
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      197
;  :arith-conflicts         128
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         126
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1088
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              429
;  :propagations            92
;  :quant-instantiations    37
;  :rlimit-count            199329)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1709
;  :arith-add-rows          128
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      198
;  :arith-conflicts         129
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         127
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1089
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              430
;  :propagations            92
;  :quant-instantiations    37
;  :rlimit-count            199438)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1709
;  :arith-add-rows          130
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      199
;  :arith-conflicts         130
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         128
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1090
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              431
;  :propagations            92
;  :quant-instantiations    37
;  :rlimit-count            199569)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1710
;  :arith-add-rows          132
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      200
;  :arith-conflicts         131
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         129
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1091
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              432
;  :propagations            93
;  :quant-instantiations    37
;  :rlimit-count            199681)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1710
;  :arith-add-rows          133
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      201
;  :arith-conflicts         132
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         130
;  :arith-pivots            218
;  :binary-propagations     22
;  :conflicts               378
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1092
;  :mk-clause               109
;  :num-allocs              4502041
;  :num-checks              433
;  :propagations            93
;  :quant-instantiations    37
;  :rlimit-count            199795)
(declare-const $k@65@01 $Perm)
(assert ($Perm.isReadVar $k@65@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1710
;  :arith-add-rows          135
;  :arith-assert-diseq      37
;  :arith-assert-lower      119
;  :arith-assert-upper      203
;  :arith-conflicts         133
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         131
;  :arith-pivots            220
;  :binary-propagations     22
;  :conflicts               379
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1097
;  :mk-clause               111
;  :num-allocs              4502041
;  :num-checks              434
;  :propagations            94
;  :quant-instantiations    37
;  :rlimit-count            200075)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@65@01 $Perm.No) (< $Perm.No $k@65@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1710
;  :arith-add-rows          135
;  :arith-assert-diseq      37
;  :arith-assert-lower      119
;  :arith-assert-upper      203
;  :arith-conflicts         133
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         131
;  :arith-pivots            220
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1097
;  :mk-clause               111
;  :num-allocs              4502041
;  :num-checks              435
;  :propagations            94
;  :quant-instantiations    37
;  :rlimit-count            200125)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1711
;  :arith-add-rows          137
;  :arith-assert-diseq      37
;  :arith-assert-lower      119
;  :arith-assert-upper      204
;  :arith-conflicts         134
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         132
;  :arith-pivots            222
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              98
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1098
;  :mk-clause               111
;  :num-allocs              4502041
;  :num-checks              436
;  :propagations            95
;  :quant-instantiations    37
;  :rlimit-count            200237)
(push) ; 5
(assert (not (not (= (+ (- $k@18@01 $k@42@01) $k@53@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1712
;  :arith-add-rows          137
;  :arith-assert-diseq      37
;  :arith-assert-lower      119
;  :arith-assert-upper      205
;  :arith-conflicts         135
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         132
;  :arith-pivots            222
;  :binary-propagations     22
;  :conflicts               382
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1100
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              437
;  :propagations            96
;  :quant-instantiations    37
;  :rlimit-count            200315)
(assert (< $k@65@01 (+ (- $k@18@01 $k@42@01) $k@53@01)))
(assert (<= $Perm.No (- (+ (- $k@18@01 $k@42@01) $k@53@01) $k@65@01)))
(assert (<= (- (+ (- $k@18@01 $k@42@01) $k@53@01) $k@65@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@18@01 $k@42@01) $k@53@01) $k@65@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1712
;  :arith-add-rows          140
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      207
;  :arith-conflicts         136
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         133
;  :arith-pivots            224
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1104
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              438
;  :propagations            96
;  :quant-instantiations    37
;  :rlimit-count            200633)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1713
;  :arith-add-rows          142
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      208
;  :arith-conflicts         137
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         134
;  :arith-pivots            226
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1105
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              439
;  :propagations            97
;  :quant-instantiations    37
;  :rlimit-count            200745)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1713
;  :arith-add-rows          142
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      209
;  :arith-conflicts         138
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         135
;  :arith-pivots            226
;  :binary-propagations     22
;  :conflicts               385
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1106
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              440
;  :propagations            97
;  :quant-instantiations    37
;  :rlimit-count            200823)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1713
;  :arith-add-rows          144
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      210
;  :arith-conflicts         139
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         136
;  :arith-pivots            228
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1107
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              441
;  :propagations            97
;  :quant-instantiations    37
;  :rlimit-count            200954)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1714
;  :arith-add-rows          146
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      211
;  :arith-conflicts         140
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         137
;  :arith-pivots            230
;  :binary-propagations     22
;  :conflicts               387
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1108
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              442
;  :propagations            98
;  :quant-instantiations    37
;  :rlimit-count            201066)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1714
;  :arith-add-rows          146
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      212
;  :arith-conflicts         141
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         138
;  :arith-pivots            230
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1109
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              443
;  :propagations            98
;  :quant-instantiations    37
;  :rlimit-count            201144)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1714
;  :arith-add-rows          148
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      213
;  :arith-conflicts         142
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         139
;  :arith-pivots            232
;  :binary-propagations     22
;  :conflicts               389
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1110
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              444
;  :propagations            98
;  :quant-instantiations    37
;  :rlimit-count            201275)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1715
;  :arith-add-rows          150
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      214
;  :arith-conflicts         143
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         140
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1111
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              445
;  :propagations            99
;  :quant-instantiations    37
;  :rlimit-count            201387)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1715
;  :arith-add-rows          150
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      215
;  :arith-conflicts         144
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         141
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1112
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              446
;  :propagations            99
;  :quant-instantiations    37
;  :rlimit-count            201465)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1715
;  :arith-add-rows          152
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      216
;  :arith-conflicts         145
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         142
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               392
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1113
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              447
;  :propagations            99
;  :quant-instantiations    37
;  :rlimit-count            201596)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1716
;  :arith-add-rows          154
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      217
;  :arith-conflicts         146
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         143
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1114
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              448
;  :propagations            100
;  :quant-instantiations    37
;  :rlimit-count            201708)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1716
;  :arith-add-rows          154
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      218
;  :arith-conflicts         147
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         144
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               394
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1115
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              449
;  :propagations            100
;  :quant-instantiations    37
;  :rlimit-count            201786)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1716
;  :arith-add-rows          156
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      219
;  :arith-conflicts         148
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         145
;  :arith-pivots            240
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1116
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              450
;  :propagations            100
;  :quant-instantiations    37
;  :rlimit-count            201917)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1717
;  :arith-add-rows          158
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      220
;  :arith-conflicts         149
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         146
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               396
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1117
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              451
;  :propagations            101
;  :quant-instantiations    37
;  :rlimit-count            202029)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1717
;  :arith-add-rows          158
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      221
;  :arith-conflicts         150
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         147
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1118
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              452
;  :propagations            101
;  :quant-instantiations    37
;  :rlimit-count            202107)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1717
;  :arith-add-rows          160
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      222
;  :arith-conflicts         151
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         148
;  :arith-pivots            244
;  :binary-propagations     22
;  :conflicts               398
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1119
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              453
;  :propagations            101
;  :quant-instantiations    37
;  :rlimit-count            202238)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1718
;  :arith-add-rows          162
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      223
;  :arith-conflicts         152
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         149
;  :arith-pivots            246
;  :binary-propagations     22
;  :conflicts               399
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1120
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              454
;  :propagations            102
;  :quant-instantiations    37
;  :rlimit-count            202350)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1718
;  :arith-add-rows          162
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      224
;  :arith-conflicts         153
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         150
;  :arith-pivots            246
;  :binary-propagations     22
;  :conflicts               400
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1121
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              455
;  :propagations            102
;  :quant-instantiations    37
;  :rlimit-count            202428)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1718
;  :arith-add-rows          164
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      225
;  :arith-conflicts         154
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         151
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1122
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              456
;  :propagations            102
;  :quant-instantiations    37
;  :rlimit-count            202559)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1719
;  :arith-add-rows          166
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      226
;  :arith-conflicts         155
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         152
;  :arith-pivots            250
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1123
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              457
;  :propagations            103
;  :quant-instantiations    37
;  :rlimit-count            202671)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1719
;  :arith-add-rows          166
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      227
;  :arith-conflicts         156
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         153
;  :arith-pivots            250
;  :binary-propagations     22
;  :conflicts               403
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1124
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              458
;  :propagations            103
;  :quant-instantiations    37
;  :rlimit-count            202749)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1719
;  :arith-add-rows          168
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      228
;  :arith-conflicts         157
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         154
;  :arith-pivots            252
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1125
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              459
;  :propagations            103
;  :quant-instantiations    37
;  :rlimit-count            202880)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1720
;  :arith-add-rows          170
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      229
;  :arith-conflicts         158
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         155
;  :arith-pivots            254
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1126
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              460
;  :propagations            104
;  :quant-instantiations    37
;  :rlimit-count            202992)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1720
;  :arith-add-rows          170
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      230
;  :arith-conflicts         159
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         156
;  :arith-pivots            254
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1127
;  :mk-clause               113
;  :num-allocs              4502041
;  :num-checks              461
;  :propagations            104
;  :quant-instantiations    37
;  :rlimit-count            203070)
(declare-const $k@66@01 $Perm)
(assert ($Perm.isReadVar $k@66@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1720
;  :arith-add-rows          172
;  :arith-assert-diseq      38
;  :arith-assert-lower      123
;  :arith-assert-upper      232
;  :arith-conflicts         160
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         157
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1132
;  :mk-clause               115
;  :num-allocs              4502041
;  :num-checks              462
;  :propagations            105
;  :quant-instantiations    37
;  :rlimit-count            203349)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@66@01 $Perm.No) (< $Perm.No $k@66@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1720
;  :arith-add-rows          172
;  :arith-assert-diseq      38
;  :arith-assert-lower      123
;  :arith-assert-upper      232
;  :arith-conflicts         160
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         157
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1132
;  :mk-clause               115
;  :num-allocs              4502041
;  :num-checks              463
;  :propagations            105
;  :quant-instantiations    37
;  :rlimit-count            203399)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1721
;  :arith-add-rows          174
;  :arith-assert-diseq      38
;  :arith-assert-lower      123
;  :arith-assert-upper      233
;  :arith-conflicts         161
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         158
;  :arith-pivots            258
;  :binary-propagations     22
;  :conflicts               409
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              100
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1133
;  :mk-clause               115
;  :num-allocs              4502041
;  :num-checks              464
;  :propagations            106
;  :quant-instantiations    37
;  :rlimit-count            203511)
(push) ; 5
(assert (not (not (= (+ (- $k@19@01 $k@43@01) $k@55@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1722
;  :arith-add-rows          174
;  :arith-assert-diseq      38
;  :arith-assert-lower      123
;  :arith-assert-upper      234
;  :arith-conflicts         162
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         158
;  :arith-pivots            258
;  :binary-propagations     22
;  :conflicts               410
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              102
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1135
;  :mk-clause               117
;  :num-allocs              4502041
;  :num-checks              465
;  :propagations            107
;  :quant-instantiations    37
;  :rlimit-count            203591)
(assert (< $k@66@01 (+ (- $k@19@01 $k@43@01) $k@55@01)))
(assert (<= $Perm.No (- (+ (- $k@19@01 $k@43@01) $k@55@01) $k@66@01)))
(assert (<= (- (+ (- $k@19@01 $k@43@01) $k@55@01) $k@66@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@19@01 $k@43@01) $k@55@01) $k@66@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1722
;  :arith-add-rows          178
;  :arith-assert-diseq      38
;  :arith-assert-lower      125
;  :arith-assert-upper      236
;  :arith-conflicts         163
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         159
;  :arith-pivots            260
;  :binary-propagations     22
;  :conflicts               411
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              102
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1139
;  :mk-clause               117
;  :num-allocs              4502041
;  :num-checks              466
;  :propagations            107
;  :quant-instantiations    37
;  :rlimit-count            203910)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1723
;  :arith-add-rows          180
;  :arith-assert-diseq      38
;  :arith-assert-lower      125
;  :arith-assert-upper      237
;  :arith-conflicts         164
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         160
;  :arith-pivots            262
;  :binary-propagations     22
;  :conflicts               412
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              102
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1140
;  :mk-clause               117
;  :num-allocs              4502041
;  :num-checks              467
;  :propagations            108
;  :quant-instantiations    37
;  :rlimit-count            204022)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@43@01) $k@55@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1723
;  :arith-add-rows          180
;  :arith-assert-diseq      38
;  :arith-assert-lower      125
;  :arith-assert-upper      238
;  :arith-conflicts         165
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         161
;  :arith-pivots            262
;  :binary-propagations     22
;  :conflicts               413
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              102
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1141
;  :mk-clause               117
;  :num-allocs              4502041
;  :num-checks              468
;  :propagations            108
;  :quant-instantiations    37
;  :rlimit-count            204103)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1723
;  :arith-add-rows          182
;  :arith-assert-diseq      38
;  :arith-assert-lower      125
;  :arith-assert-upper      239
;  :arith-conflicts         166
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         162
;  :arith-pivots            264
;  :binary-propagations     22
;  :conflicts               414
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              102
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1142
;  :mk-clause               117
;  :num-allocs              4502041
;  :num-checks              469
;  :propagations            108
;  :quant-instantiations    37
;  :rlimit-count            204234)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1724
;  :arith-add-rows          184
;  :arith-assert-diseq      38
;  :arith-assert-lower      125
;  :arith-assert-upper      240
;  :arith-conflicts         167
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         163
;  :arith-pivots            266
;  :binary-propagations     22
;  :conflicts               415
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              102
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1143
;  :mk-clause               117
;  :num-allocs              4502041
;  :num-checks              470
;  :propagations            109
;  :quant-instantiations    37
;  :rlimit-count            204346)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@43@01) $k@55@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1724
;  :arith-add-rows          184
;  :arith-assert-diseq      38
;  :arith-assert-lower      125
;  :arith-assert-upper      241
;  :arith-conflicts         168
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         164
;  :arith-pivots            266
;  :binary-propagations     22
;  :conflicts               416
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              102
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1144
;  :mk-clause               117
;  :num-allocs              4502041
;  :num-checks              471
;  :propagations            109
;  :quant-instantiations    37
;  :rlimit-count            204427)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1724
;  :arith-add-rows          186
;  :arith-assert-diseq      38
;  :arith-assert-lower      125
;  :arith-assert-upper      242
;  :arith-conflicts         169
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         165
;  :arith-pivots            268
;  :binary-propagations     22
;  :conflicts               417
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              102
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1145
;  :mk-clause               117
;  :num-allocs              4502041
;  :num-checks              472
;  :propagations            109
;  :quant-instantiations    37
;  :rlimit-count            204558)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1725
;  :arith-add-rows          188
;  :arith-assert-diseq      38
;  :arith-assert-lower      125
;  :arith-assert-upper      243
;  :arith-conflicts         170
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         166
;  :arith-pivots            270
;  :binary-propagations     22
;  :conflicts               418
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              102
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1146
;  :mk-clause               117
;  :num-allocs              4502041
;  :num-checks              473
;  :propagations            110
;  :quant-instantiations    37
;  :rlimit-count            204670)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@43@01) $k@55@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1725
;  :arith-add-rows          188
;  :arith-assert-diseq      38
;  :arith-assert-lower      125
;  :arith-assert-upper      244
;  :arith-conflicts         171
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         167
;  :arith-pivots            270
;  :binary-propagations     22
;  :conflicts               419
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              102
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1147
;  :mk-clause               117
;  :num-allocs              4502041
;  :num-checks              474
;  :propagations            110
;  :quant-instantiations    37
;  :rlimit-count            204751)
(declare-const $k@67@01 $Perm)
(assert ($Perm.isReadVar $k@67@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1725
;  :arith-add-rows          190
;  :arith-assert-diseq      39
;  :arith-assert-lower      127
;  :arith-assert-upper      246
;  :arith-conflicts         172
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         168
;  :arith-pivots            272
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              102
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1152
;  :mk-clause               119
;  :num-allocs              4502041
;  :num-checks              475
;  :propagations            111
;  :quant-instantiations    37
;  :rlimit-count            205031)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@67@01 $Perm.No) (< $Perm.No $k@67@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1725
;  :arith-add-rows          190
;  :arith-assert-diseq      39
;  :arith-assert-lower      127
;  :arith-assert-upper      246
;  :arith-conflicts         172
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         168
;  :arith-pivots            272
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              102
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1152
;  :mk-clause               119
;  :num-allocs              4502041
;  :num-checks              476
;  :propagations            111
;  :quant-instantiations    37
;  :rlimit-count            205081)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1726
;  :arith-add-rows          192
;  :arith-assert-diseq      39
;  :arith-assert-lower      127
;  :arith-assert-upper      247
;  :arith-conflicts         173
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         169
;  :arith-pivots            274
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              102
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1153
;  :mk-clause               119
;  :num-allocs              4502041
;  :num-checks              477
;  :propagations            112
;  :quant-instantiations    37
;  :rlimit-count            205193)
(push) ; 5
(assert (not (not (= (+ (- $k@20@01 $k@44@01) $k@57@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1727
;  :arith-add-rows          192
;  :arith-assert-diseq      39
;  :arith-assert-lower      127
;  :arith-assert-upper      248
;  :arith-conflicts         174
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         169
;  :arith-pivots            274
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1155
;  :mk-clause               121
;  :num-allocs              4502041
;  :num-checks              478
;  :propagations            113
;  :quant-instantiations    37
;  :rlimit-count            205271)
(assert (< $k@67@01 (+ (- $k@20@01 $k@44@01) $k@57@01)))
(assert (<= $Perm.No (- (+ (- $k@20@01 $k@44@01) $k@57@01) $k@67@01)))
(assert (<= (- (+ (- $k@20@01 $k@44@01) $k@57@01) $k@67@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@20@01 $k@44@01) $k@57@01) $k@67@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1727
;  :arith-add-rows          195
;  :arith-assert-diseq      39
;  :arith-assert-lower      129
;  :arith-assert-upper      250
;  :arith-conflicts         175
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         170
;  :arith-pivots            276
;  :binary-propagations     22
;  :conflicts               424
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1159
;  :mk-clause               121
;  :num-allocs              4502041
;  :num-checks              479
;  :propagations            113
;  :quant-instantiations    37
;  :rlimit-count            205589)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1728
;  :arith-add-rows          197
;  :arith-assert-diseq      39
;  :arith-assert-lower      129
;  :arith-assert-upper      251
;  :arith-conflicts         176
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         171
;  :arith-pivots            278
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1160
;  :mk-clause               121
;  :num-allocs              4502041
;  :num-checks              480
;  :propagations            114
;  :quant-instantiations    37
;  :rlimit-count            205701)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@20@01 $k@44@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1728
;  :arith-add-rows          197
;  :arith-assert-diseq      39
;  :arith-assert-lower      129
;  :arith-assert-upper      252
;  :arith-conflicts         177
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         172
;  :arith-pivots            278
;  :binary-propagations     22
;  :conflicts               426
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1161
;  :mk-clause               121
;  :num-allocs              4502041
;  :num-checks              481
;  :propagations            114
;  :quant-instantiations    37
;  :rlimit-count            205779)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1728
;  :arith-add-rows          199
;  :arith-assert-diseq      39
;  :arith-assert-lower      129
;  :arith-assert-upper      253
;  :arith-conflicts         178
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         173
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1162
;  :mk-clause               121
;  :num-allocs              4502041
;  :num-checks              482
;  :propagations            114
;  :quant-instantiations    37
;  :rlimit-count            205910)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1729
;  :arith-add-rows          201
;  :arith-assert-diseq      39
;  :arith-assert-lower      129
;  :arith-assert-upper      254
;  :arith-conflicts         179
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         174
;  :arith-pivots            282
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1163
;  :mk-clause               121
;  :num-allocs              4502041
;  :num-checks              483
;  :propagations            115
;  :quant-instantiations    37
;  :rlimit-count            206022)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@20@01 $k@44@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1729
;  :arith-add-rows          201
;  :arith-assert-diseq      39
;  :arith-assert-lower      129
;  :arith-assert-upper      255
;  :arith-conflicts         180
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         175
;  :arith-pivots            282
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1164
;  :mk-clause               121
;  :num-allocs              4502041
;  :num-checks              484
;  :propagations            115
;  :quant-instantiations    37
;  :rlimit-count            206100)
(declare-const $k@68@01 $Perm)
(assert ($Perm.isReadVar $k@68@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1729
;  :arith-add-rows          203
;  :arith-assert-diseq      40
;  :arith-assert-lower      131
;  :arith-assert-upper      257
;  :arith-conflicts         181
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         176
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1169
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              485
;  :propagations            116
;  :quant-instantiations    37
;  :rlimit-count            206379)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1730
;  :arith-add-rows          205
;  :arith-assert-diseq      40
;  :arith-assert-lower      131
;  :arith-assert-upper      258
;  :arith-conflicts         182
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         177
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1170
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              486
;  :propagations            117
;  :quant-instantiations    37
;  :rlimit-count            206491)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1730
;  :arith-add-rows          206
;  :arith-assert-diseq      40
;  :arith-assert-lower      131
;  :arith-assert-upper      259
;  :arith-conflicts         183
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         178
;  :arith-pivots            288
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1171
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              487
;  :propagations            117
;  :quant-instantiations    37
;  :rlimit-count            206600)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@68@01 $Perm.No) (< $Perm.No $k@68@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1730
;  :arith-add-rows          206
;  :arith-assert-diseq      40
;  :arith-assert-lower      131
;  :arith-assert-upper      259
;  :arith-conflicts         183
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         178
;  :arith-pivots            288
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1171
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              488
;  :propagations            117
;  :quant-instantiations    37
;  :rlimit-count            206650)
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
  $t@52@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1730
;  :arith-add-rows          206
;  :arith-assert-diseq      40
;  :arith-assert-lower      131
;  :arith-assert-upper      259
;  :arith-conflicts         183
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         178
;  :arith-pivots            288
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1171
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              489
;  :propagations            117
;  :quant-instantiations    37
;  :rlimit-count            206661)
(push) ; 5
(assert (not (not (= (- $k@21@01 $k@45@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1730
;  :arith-add-rows          206
;  :arith-assert-diseq      40
;  :arith-assert-lower      131
;  :arith-assert-upper      259
;  :arith-conflicts         183
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         178
;  :arith-pivots            288
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1172
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              490
;  :propagations            117
;  :quant-instantiations    37
;  :rlimit-count            206729)
(assert (< $k@68@01 (- $k@21@01 $k@45@01)))
(assert (<= $Perm.No (- (- $k@21@01 $k@45@01) $k@68@01)))
(assert (<= (- (- $k@21@01 $k@45@01) $k@68@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@21@01 $k@45@01) $k@68@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1730
;  :arith-add-rows          210
;  :arith-assert-diseq      40
;  :arith-assert-lower      133
;  :arith-assert-upper      261
;  :arith-conflicts         184
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         179
;  :arith-pivots            292
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1176
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              491
;  :propagations            117
;  :quant-instantiations    37
;  :rlimit-count            207072)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1731
;  :arith-add-rows          212
;  :arith-assert-diseq      40
;  :arith-assert-lower      133
;  :arith-assert-upper      262
;  :arith-conflicts         185
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         180
;  :arith-pivots            294
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1177
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              492
;  :propagations            118
;  :quant-instantiations    37
;  :rlimit-count            207184)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1731
;  :arith-add-rows          213
;  :arith-assert-diseq      40
;  :arith-assert-lower      133
;  :arith-assert-upper      263
;  :arith-conflicts         186
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         181
;  :arith-pivots            297
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1178
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              493
;  :propagations            118
;  :quant-instantiations    37
;  :rlimit-count            207298)
(push) ; 5
(assert (not (= diz@7@01 $t@52@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1731
;  :arith-add-rows          213
;  :arith-assert-diseq      40
;  :arith-assert-lower      133
;  :arith-assert-upper      263
;  :arith-conflicts         186
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         181
;  :arith-pivots            297
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1178
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              494
;  :propagations            118
;  :quant-instantiations    37
;  :rlimit-count            207309)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1731
;  :arith-add-rows          215
;  :arith-assert-diseq      40
;  :arith-assert-lower      133
;  :arith-assert-upper      264
;  :arith-conflicts         187
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         182
;  :arith-pivots            299
;  :binary-propagations     22
;  :conflicts               438
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1179
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              495
;  :propagations            118
;  :quant-instantiations    37
;  :rlimit-count            207440)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1731
;  :arith-add-rows          215
;  :arith-assert-diseq      40
;  :arith-assert-lower      133
;  :arith-assert-upper      265
;  :arith-conflicts         188
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         183
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               439
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1180
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              496
;  :propagations            118
;  :quant-instantiations    37
;  :rlimit-count            207535)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1731
;  :arith-add-rows          215
;  :arith-assert-diseq      40
;  :arith-assert-lower      133
;  :arith-assert-upper      266
;  :arith-conflicts         189
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         184
;  :arith-pivots            301
;  :binary-propagations     22
;  :conflicts               440
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1181
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              497
;  :propagations            118
;  :quant-instantiations    37
;  :rlimit-count            207630)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1732
;  :arith-add-rows          217
;  :arith-assert-diseq      40
;  :arith-assert-lower      133
;  :arith-assert-upper      267
;  :arith-conflicts         190
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         185
;  :arith-pivots            303
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1182
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              498
;  :propagations            119
;  :quant-instantiations    37
;  :rlimit-count            207742)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1732
;  :arith-add-rows          218
;  :arith-assert-diseq      40
;  :arith-assert-lower      133
;  :arith-assert-upper      268
;  :arith-conflicts         191
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         186
;  :arith-pivots            305
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1183
;  :mk-clause               123
;  :num-allocs              4502041
;  :num-checks              499
;  :propagations            119
;  :quant-instantiations    37
;  :rlimit-count            207851)
; [exec]
; label __return_xor_
; [exec]
; sys__result := sys__local__result__26
; [exec]
; // assert
; assert acc(diz.Rng_m, wildcard) && diz.Rng_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.Rng_m, __globals), write) && acc(diz.Rng_m.Main_process_state, write) && |diz.Rng_m.Main_process_state| == 3 && acc(diz.Rng_m.Main_event_state, write) && |diz.Rng_m.Main_event_state| == 6 && (forall i__36: Int :: { diz.Rng_m.Main_process_state[i__36] } 0 <= i__36 && i__36 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__36] == -1 || 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|) && acc(diz.Rng_m.Main_rn, wildcard) && diz.Rng_m.Main_rn != null && acc(diz.Rng_m.Main_rn.Rng_clk, write) && acc(diz.Rng_m.Main_rn.Rng_reset, write) && acc(diz.Rng_m.Main_rn.Rng_loadseed_i, write) && acc(diz.Rng_m.Main_rn.Rng_seed_i, write) && acc(diz.Rng_m.Main_rn.Rng_number_o, write) && acc(diz.Rng_m.Main_rn.Rng_LFSR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_CASR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_result, write) && acc(diz.Rng_m.Main_rn.Rng_i, write) && acc(diz.Rng_m.Main_rn.Rng_aux, write) && acc(diz.Rng_m.Main_rn_casr, wildcard) && diz.Rng_m.Main_rn_casr != null && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_var, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_out, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_i, write) && acc(diz.Rng_m.Main_rn_lfsr, wildcard) && diz.Rng_m.Main_rn_lfsr != null && acc(diz.Rng_m.Main_rn_lfsr.LFSR_LFSR_var, write) && acc(diz.Rng_m.Main_rn_lfsr.LFSR_outbit, write) && acc(diz.Rng_m.Main_rn_combinate, wildcard) && diz.Rng_m.Main_rn_combinate != null && acc(diz.Rng_m.Main_rn_combinate.Combinate_i, write) && acc(diz.Rng_m.Main_rn.Rng_m, wildcard) && diz.Rng_m.Main_rn.Rng_m == diz.Rng_m && diz.Rng_m.Main_rn == diz
(declare-const $k@69@01 $Perm)
(assert ($Perm.isReadVar $k@69@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@69@01 $Perm.No) (< $Perm.No $k@69@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1732
;  :arith-add-rows          218
;  :arith-assert-diseq      41
;  :arith-assert-lower      135
;  :arith-assert-upper      269
;  :arith-conflicts         191
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         186
;  :arith-pivots            305
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              104
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1187
;  :mk-clause               125
;  :num-allocs              4502041
;  :num-checks              500
;  :propagations            120
;  :quant-instantiations    37
;  :rlimit-count            208050)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1733
;  :arith-add-rows          220
;  :arith-assert-diseq      41
;  :arith-assert-lower      135
;  :arith-assert-upper      270
;  :arith-conflicts         192
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         186
;  :arith-pivots            307
;  :binary-propagations     22
;  :conflicts               444
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1189
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              501
;  :propagations            121
;  :quant-instantiations    37
;  :rlimit-count            208181)
(assert (< $k@69@01 (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01)))
(assert (<= $Perm.No (- (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01) $k@69@01)))
(assert (<= (- (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01) $k@69@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01) $k@69@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1733
;  :arith-add-rows          221
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      272
;  :arith-conflicts         193
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         187
;  :arith-pivots            308
;  :binary-propagations     22
;  :conflicts               445
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1193
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              502
;  :propagations            121
;  :quant-instantiations    37
;  :rlimit-count            208468)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1733
;  :arith-add-rows          221
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      273
;  :arith-conflicts         194
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         188
;  :arith-pivots            309
;  :binary-propagations     22
;  :conflicts               446
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1194
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              503
;  :propagations            121
;  :quant-instantiations    37
;  :rlimit-count            208564)
(push) ; 5
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          223
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      274
;  :arith-conflicts         195
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         189
;  :arith-pivots            311
;  :binary-propagations     22
;  :conflicts               447
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1195
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              504
;  :propagations            122
;  :quant-instantiations    37
;  :rlimit-count            208676)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          225
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      275
;  :arith-conflicts         196
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         190
;  :arith-pivots            313
;  :binary-propagations     22
;  :conflicts               448
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1196
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              505
;  :propagations            122
;  :quant-instantiations    37
;  :rlimit-count            208808)
(push) ; 5
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1735
;  :arith-add-rows          227
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      276
;  :arith-conflicts         197
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         191
;  :arith-pivots            315
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1197
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              506
;  :propagations            123
;  :quant-instantiations    37
;  :rlimit-count            208920)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1735
;  :arith-add-rows          229
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      277
;  :arith-conflicts         198
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         192
;  :arith-pivots            317
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1198
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              507
;  :propagations            123
;  :quant-instantiations    37
;  :rlimit-count            209052)
(push) ; 5
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1736
;  :arith-add-rows          231
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      278
;  :arith-conflicts         199
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         193
;  :arith-pivots            319
;  :binary-propagations     22
;  :conflicts               451
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1199
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              508
;  :propagations            124
;  :quant-instantiations    37
;  :rlimit-count            209164)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1736
;  :arith-add-rows          233
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      279
;  :arith-conflicts         200
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         194
;  :arith-pivots            321
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1200
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              509
;  :propagations            124
;  :quant-instantiations    37
;  :rlimit-count            209296)
(push) ; 5
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1737
;  :arith-add-rows          235
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      280
;  :arith-conflicts         201
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         195
;  :arith-pivots            323
;  :binary-propagations     22
;  :conflicts               453
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1201
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              510
;  :propagations            125
;  :quant-instantiations    37
;  :rlimit-count            209408)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1737
;  :arith-add-rows          237
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      281
;  :arith-conflicts         202
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         196
;  :arith-pivots            325
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1202
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              511
;  :propagations            125
;  :quant-instantiations    37
;  :rlimit-count            209540)
(push) ; 5
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1738
;  :arith-add-rows          239
;  :arith-assert-diseq      41
;  :arith-assert-lower      137
;  :arith-assert-upper      282
;  :arith-conflicts         203
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         197
;  :arith-pivots            327
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1203
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              512
;  :propagations            126
;  :quant-instantiations    37
;  :rlimit-count            209652)
; [eval] (forall i__36: Int :: { diz.Rng_m.Main_process_state[i__36] } 0 <= i__36 && i__36 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__36] == -1 || 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|)
(declare-const i__36@70@01 Int)
(push) ; 5
; [eval] 0 <= i__36 && i__36 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__36] == -1 || 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i__36 && i__36 < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i__36
(push) ; 6
; [then-branch: 22 | 0 <= i__36@70@01 | live]
; [else-branch: 22 | !(0 <= i__36@70@01) | live]
(push) ; 7
; [then-branch: 22 | 0 <= i__36@70@01]
(assert (<= 0 i__36@70@01))
; [eval] i__36 < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 8
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1738
;  :arith-add-rows          241
;  :arith-assert-diseq      41
;  :arith-assert-lower      138
;  :arith-assert-upper      283
;  :arith-conflicts         204
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         198
;  :arith-pivots            329
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1205
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              513
;  :propagations            126
;  :quant-instantiations    37
;  :rlimit-count            209836)
(push) ; 8
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1739
;  :arith-add-rows          243
;  :arith-assert-diseq      41
;  :arith-assert-lower      138
;  :arith-assert-upper      284
;  :arith-conflicts         205
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         199
;  :arith-pivots            331
;  :binary-propagations     22
;  :conflicts               457
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1206
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              514
;  :propagations            127
;  :quant-instantiations    37
;  :rlimit-count            209948)
(pop) ; 7
(push) ; 7
; [else-branch: 22 | !(0 <= i__36@70@01)]
(assert (not (<= 0 i__36@70@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 23 | i__36@70@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i__36@70@01 | live]
; [else-branch: 23 | !(i__36@70@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i__36@70@01) | live]
(push) ; 7
; [then-branch: 23 | i__36@70@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i__36@70@01]
(assert (and
  (<
    i__36@70@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
  (<= 0 i__36@70@01)))
; [eval] diz.Rng_m.Main_process_state[i__36] == -1 || 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__36] == -1
; [eval] diz.Rng_m.Main_process_state[i__36]
(push) ; 8
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1739
;  :arith-add-rows          245
;  :arith-assert-diseq      41
;  :arith-assert-lower      139
;  :arith-assert-upper      286
;  :arith-conflicts         206
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         200
;  :arith-pivots            333
;  :binary-propagations     22
;  :conflicts               458
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1209
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              515
;  :propagations            127
;  :quant-instantiations    37
;  :rlimit-count            210189)
(push) ; 8
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1740
;  :arith-add-rows          247
;  :arith-assert-diseq      41
;  :arith-assert-lower      139
;  :arith-assert-upper      287
;  :arith-conflicts         207
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         201
;  :arith-pivots            335
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1210
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              516
;  :propagations            128
;  :quant-instantiations    37
;  :rlimit-count            210301)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i__36@70@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1740
;  :arith-add-rows          247
;  :arith-assert-diseq      41
;  :arith-assert-lower      139
;  :arith-assert-upper      287
;  :arith-conflicts         207
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         201
;  :arith-pivots            335
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1210
;  :mk-clause               127
;  :num-allocs              4502041
;  :num-checks              517
;  :propagations            128
;  :quant-instantiations    37
;  :rlimit-count            210310)
; [eval] -1
(push) ; 8
; [then-branch: 24 | First:(Second:(Second:(Second:($t@47@01))))[i__36@70@01] == -1 | live]
; [else-branch: 24 | First:(Second:(Second:(Second:($t@47@01))))[i__36@70@01] != -1 | live]
(push) ; 9
; [then-branch: 24 | First:(Second:(Second:(Second:($t@47@01))))[i__36@70@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i__36@70@01)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 24 | First:(Second:(Second:(Second:($t@47@01))))[i__36@70@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      i__36@70@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i__36]
; [eval] diz.Rng_m.Main_process_state[i__36]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1740
;  :arith-add-rows          249
;  :arith-assert-diseq      42
;  :arith-assert-lower      142
;  :arith-assert-upper      289
;  :arith-conflicts         208
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         202
;  :arith-pivots            337
;  :binary-propagations     22
;  :conflicts               460
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1217
;  :mk-clause               131
;  :num-allocs              4502041
;  :num-checks              518
;  :propagations            130
;  :quant-instantiations    39
;  :rlimit-count            210690)
(push) ; 10
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1741
;  :arith-add-rows          251
;  :arith-assert-diseq      42
;  :arith-assert-lower      142
;  :arith-assert-upper      290
;  :arith-conflicts         209
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         203
;  :arith-pivots            339
;  :binary-propagations     22
;  :conflicts               461
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1218
;  :mk-clause               131
;  :num-allocs              4502041
;  :num-checks              519
;  :propagations            131
;  :quant-instantiations    39
;  :rlimit-count            210802)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__36@70@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1741
;  :arith-add-rows          251
;  :arith-assert-diseq      42
;  :arith-assert-lower      142
;  :arith-assert-upper      290
;  :arith-conflicts         209
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         203
;  :arith-pivots            339
;  :binary-propagations     22
;  :conflicts               461
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1218
;  :mk-clause               131
;  :num-allocs              4502041
;  :num-checks              520
;  :propagations            131
;  :quant-instantiations    39
;  :rlimit-count            210811)
(push) ; 10
; [then-branch: 25 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[i__36@70@01] | live]
; [else-branch: 25 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[i__36@70@01]) | live]
(push) ; 11
; [then-branch: 25 | 0 <= First:(Second:(Second:(Second:($t@47@01))))[i__36@70@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i__36@70@01)))
; [eval] diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__36]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1741
;  :arith-add-rows          253
;  :arith-assert-diseq      42
;  :arith-assert-lower      142
;  :arith-assert-upper      291
;  :arith-conflicts         210
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         204
;  :arith-pivots            341
;  :binary-propagations     22
;  :conflicts               462
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1219
;  :mk-clause               131
;  :num-allocs              4502041
;  :num-checks              521
;  :propagations            131
;  :quant-instantiations    39
;  :rlimit-count            211048)
(push) ; 12
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1742
;  :arith-add-rows          255
;  :arith-assert-diseq      42
;  :arith-assert-lower      142
;  :arith-assert-upper      292
;  :arith-conflicts         211
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         205
;  :arith-pivots            343
;  :binary-propagations     22
;  :conflicts               463
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1220
;  :mk-clause               131
;  :num-allocs              4502041
;  :num-checks              522
;  :propagations            132
;  :quant-instantiations    39
;  :rlimit-count            211160)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__36@70@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1742
;  :arith-add-rows          255
;  :arith-assert-diseq      42
;  :arith-assert-lower      142
;  :arith-assert-upper      292
;  :arith-conflicts         211
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         205
;  :arith-pivots            343
;  :binary-propagations     22
;  :conflicts               463
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1220
;  :mk-clause               131
;  :num-allocs              4502041
;  :num-checks              523
;  :propagations            132
;  :quant-instantiations    39
;  :rlimit-count            211169)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1742
;  :arith-add-rows          257
;  :arith-assert-diseq      42
;  :arith-assert-lower      142
;  :arith-assert-upper      293
;  :arith-conflicts         212
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         206
;  :arith-pivots            345
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1221
;  :mk-clause               131
;  :num-allocs              4502041
;  :num-checks              524
;  :propagations            132
;  :quant-instantiations    39
;  :rlimit-count            211301)
(push) ; 12
(assert (not (= $t@49@01 $t@60@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1743
;  :arith-add-rows          259
;  :arith-assert-diseq      42
;  :arith-assert-lower      142
;  :arith-assert-upper      294
;  :arith-conflicts         213
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         207
;  :arith-pivots            347
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              106
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1222
;  :mk-clause               131
;  :num-allocs              4502041
;  :num-checks              525
;  :propagations            133
;  :quant-instantiations    39
;  :rlimit-count            211413)
(pop) ; 11
(push) ; 11
; [else-branch: 25 | !(0 <= First:(Second:(Second:(Second:($t@47@01))))[i__36@70@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
      i__36@70@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 23 | !(i__36@70@01 < |First:(Second:(Second:(Second:($t@47@01))))| && 0 <= i__36@70@01)]
(assert (not
  (and
    (<
      i__36@70@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
    (<= 0 i__36@70@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((i__36@70@01 Int)) (!
  (implies
    (and
      (<
        i__36@70@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      (<= 0 i__36@70@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          i__36@70@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i__36@70@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i__36@70@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i__36@70@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1743
;  :arith-add-rows          259
;  :arith-assert-diseq      44
;  :arith-assert-lower      143
;  :arith-assert-upper      295
;  :arith-conflicts         213
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         207
;  :arith-pivots            347
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              124
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1230
;  :mk-clause               145
;  :num-allocs              4502041
;  :num-checks              526
;  :propagations            135
;  :quant-instantiations    41
;  :rlimit-count            211884)
(assert (forall ((i__36@70@01 Int)) (!
  (implies
    (and
      (<
        i__36@70@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
      (<= 0 i__36@70@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
          i__36@70@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i__36@70@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
            i__36@70@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    i__36@70@01))
  :qid |prog.l<no position>|)))
(declare-const $k@71@01 $Perm)
(assert ($Perm.isReadVar $k@71@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1743
;  :arith-add-rows          261
;  :arith-assert-diseq      45
;  :arith-assert-lower      145
;  :arith-assert-upper      297
;  :arith-conflicts         214
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         208
;  :arith-pivots            349
;  :binary-propagations     22
;  :conflicts               467
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              124
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1236
;  :mk-clause               147
;  :num-allocs              4502041
;  :num-checks              527
;  :propagations            136
;  :quant-instantiations    41
;  :rlimit-count            212527)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@71@01 $Perm.No) (< $Perm.No $k@71@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1743
;  :arith-add-rows          261
;  :arith-assert-diseq      45
;  :arith-assert-lower      145
;  :arith-assert-upper      297
;  :arith-conflicts         214
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         208
;  :arith-pivots            349
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              124
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1236
;  :mk-clause               147
;  :num-allocs              4502041
;  :num-checks              528
;  :propagations            136
;  :quant-instantiations    41
;  :rlimit-count            212577)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1744
;  :arith-add-rows          263
;  :arith-assert-diseq      45
;  :arith-assert-lower      145
;  :arith-assert-upper      298
;  :arith-conflicts         215
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         209
;  :arith-pivots            351
;  :binary-propagations     22
;  :conflicts               469
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              124
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1237
;  :mk-clause               147
;  :num-allocs              4502041
;  :num-checks              529
;  :propagations            137
;  :quant-instantiations    41
;  :rlimit-count            212689)
(push) ; 5
(assert (not (not (= (+ (- $k@17@01 $k@41@01) $k@51@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1745
;  :arith-add-rows          264
;  :arith-assert-diseq      45
;  :arith-assert-lower      145
;  :arith-assert-upper      299
;  :arith-conflicts         216
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         209
;  :arith-pivots            354
;  :binary-propagations     22
;  :conflicts               470
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1239
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              530
;  :propagations            138
;  :quant-instantiations    41
;  :rlimit-count            212803)
(assert (< $k@71@01 (+ (- $k@17@01 $k@41@01) $k@51@01)))
(assert (<= $Perm.No (- (+ (- $k@17@01 $k@41@01) $k@51@01) $k@71@01)))
(assert (<= (- (+ (- $k@17@01 $k@41@01) $k@51@01) $k@71@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@17@01 $k@41@01) $k@51@01) $k@71@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1745
;  :arith-add-rows          268
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      301
;  :arith-conflicts         217
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         210
;  :arith-pivots            356
;  :binary-propagations     22
;  :conflicts               471
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1243
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              531
;  :propagations            138
;  :quant-instantiations    41
;  :rlimit-count            213123)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1746
;  :arith-add-rows          270
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      302
;  :arith-conflicts         218
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         211
;  :arith-pivots            358
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1244
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              532
;  :propagations            139
;  :quant-instantiations    41
;  :rlimit-count            213235)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1746
;  :arith-add-rows          271
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      303
;  :arith-conflicts         219
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         212
;  :arith-pivots            360
;  :binary-propagations     22
;  :conflicts               473
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1245
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              533
;  :propagations            139
;  :quant-instantiations    41
;  :rlimit-count            213345)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1746
;  :arith-add-rows          273
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      304
;  :arith-conflicts         220
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         213
;  :arith-pivots            362
;  :binary-propagations     22
;  :conflicts               474
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1246
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              534
;  :propagations            139
;  :quant-instantiations    41
;  :rlimit-count            213477)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1747
;  :arith-add-rows          275
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      305
;  :arith-conflicts         221
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         214
;  :arith-pivots            364
;  :binary-propagations     22
;  :conflicts               475
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1247
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              535
;  :propagations            140
;  :quant-instantiations    41
;  :rlimit-count            213589)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1747
;  :arith-add-rows          276
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      306
;  :arith-conflicts         222
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         215
;  :arith-pivots            367
;  :binary-propagations     22
;  :conflicts               476
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1248
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              536
;  :propagations            140
;  :quant-instantiations    41
;  :rlimit-count            213704)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1747
;  :arith-add-rows          278
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      307
;  :arith-conflicts         223
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         216
;  :arith-pivots            369
;  :binary-propagations     22
;  :conflicts               477
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1249
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              537
;  :propagations            140
;  :quant-instantiations    41
;  :rlimit-count            213836)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1748
;  :arith-add-rows          280
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      308
;  :arith-conflicts         224
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         217
;  :arith-pivots            371
;  :binary-propagations     22
;  :conflicts               478
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1250
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              538
;  :propagations            141
;  :quant-instantiations    41
;  :rlimit-count            213948)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1748
;  :arith-add-rows          281
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      309
;  :arith-conflicts         225
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         218
;  :arith-pivots            373
;  :binary-propagations     22
;  :conflicts               479
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1251
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              539
;  :propagations            141
;  :quant-instantiations    41
;  :rlimit-count            214058)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1748
;  :arith-add-rows          283
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      310
;  :arith-conflicts         226
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         219
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               480
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1252
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              540
;  :propagations            141
;  :quant-instantiations    41
;  :rlimit-count            214190)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1749
;  :arith-add-rows          285
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      311
;  :arith-conflicts         227
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         220
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               481
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1253
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              541
;  :propagations            142
;  :quant-instantiations    41
;  :rlimit-count            214302)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1749
;  :arith-add-rows          286
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      312
;  :arith-conflicts         228
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         221
;  :arith-pivots            380
;  :binary-propagations     22
;  :conflicts               482
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1254
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              542
;  :propagations            142
;  :quant-instantiations    41
;  :rlimit-count            214417)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1749
;  :arith-add-rows          288
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      313
;  :arith-conflicts         229
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         222
;  :arith-pivots            382
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1255
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              543
;  :propagations            142
;  :quant-instantiations    41
;  :rlimit-count            214549)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1750
;  :arith-add-rows          290
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      314
;  :arith-conflicts         230
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         223
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               484
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1256
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              544
;  :propagations            143
;  :quant-instantiations    41
;  :rlimit-count            214661)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1750
;  :arith-add-rows          291
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      315
;  :arith-conflicts         231
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         224
;  :arith-pivots            386
;  :binary-propagations     22
;  :conflicts               485
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1257
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              545
;  :propagations            143
;  :quant-instantiations    41
;  :rlimit-count            214771)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1750
;  :arith-add-rows          293
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      316
;  :arith-conflicts         232
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         225
;  :arith-pivots            388
;  :binary-propagations     22
;  :conflicts               486
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1258
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              546
;  :propagations            143
;  :quant-instantiations    41
;  :rlimit-count            214903)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1751
;  :arith-add-rows          295
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      317
;  :arith-conflicts         233
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         226
;  :arith-pivots            390
;  :binary-propagations     22
;  :conflicts               487
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1259
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              547
;  :propagations            144
;  :quant-instantiations    41
;  :rlimit-count            215015)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1751
;  :arith-add-rows          296
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      318
;  :arith-conflicts         234
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         227
;  :arith-pivots            393
;  :binary-propagations     22
;  :conflicts               488
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1260
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              548
;  :propagations            144
;  :quant-instantiations    41
;  :rlimit-count            215130)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1751
;  :arith-add-rows          298
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      319
;  :arith-conflicts         235
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         228
;  :arith-pivots            395
;  :binary-propagations     22
;  :conflicts               489
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1261
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              549
;  :propagations            144
;  :quant-instantiations    41
;  :rlimit-count            215262)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1752
;  :arith-add-rows          300
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      320
;  :arith-conflicts         236
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         229
;  :arith-pivots            397
;  :binary-propagations     22
;  :conflicts               490
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1262
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              550
;  :propagations            145
;  :quant-instantiations    41
;  :rlimit-count            215374)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1752
;  :arith-add-rows          301
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      321
;  :arith-conflicts         237
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         230
;  :arith-pivots            399
;  :binary-propagations     22
;  :conflicts               491
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1263
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              551
;  :propagations            145
;  :quant-instantiations    41
;  :rlimit-count            215484)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1752
;  :arith-add-rows          303
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      322
;  :arith-conflicts         238
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         231
;  :arith-pivots            401
;  :binary-propagations     22
;  :conflicts               492
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1264
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              552
;  :propagations            145
;  :quant-instantiations    41
;  :rlimit-count            215616)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1753
;  :arith-add-rows          305
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      323
;  :arith-conflicts         239
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         232
;  :arith-pivots            403
;  :binary-propagations     22
;  :conflicts               493
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1265
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              553
;  :propagations            146
;  :quant-instantiations    41
;  :rlimit-count            215728)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1753
;  :arith-add-rows          306
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      324
;  :arith-conflicts         240
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         233
;  :arith-pivots            406
;  :binary-propagations     22
;  :conflicts               494
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1266
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              554
;  :propagations            146
;  :quant-instantiations    41
;  :rlimit-count            215843)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1753
;  :arith-add-rows          308
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      325
;  :arith-conflicts         241
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         234
;  :arith-pivots            408
;  :binary-propagations     22
;  :conflicts               495
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1267
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              555
;  :propagations            146
;  :quant-instantiations    41
;  :rlimit-count            215975)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1754
;  :arith-add-rows          310
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      326
;  :arith-conflicts         242
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         235
;  :arith-pivots            410
;  :binary-propagations     22
;  :conflicts               496
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1268
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              556
;  :propagations            147
;  :quant-instantiations    41
;  :rlimit-count            216087)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1754
;  :arith-add-rows          311
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      327
;  :arith-conflicts         243
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         236
;  :arith-pivots            412
;  :binary-propagations     22
;  :conflicts               497
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1269
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              557
;  :propagations            147
;  :quant-instantiations    41
;  :rlimit-count            216197)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1754
;  :arith-add-rows          313
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      328
;  :arith-conflicts         244
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         237
;  :arith-pivots            414
;  :binary-propagations     22
;  :conflicts               498
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1270
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              558
;  :propagations            147
;  :quant-instantiations    41
;  :rlimit-count            216329)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1755
;  :arith-add-rows          315
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      329
;  :arith-conflicts         245
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         238
;  :arith-pivots            416
;  :binary-propagations     22
;  :conflicts               499
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1271
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              559
;  :propagations            148
;  :quant-instantiations    41
;  :rlimit-count            216441)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1755
;  :arith-add-rows          316
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      330
;  :arith-conflicts         246
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         239
;  :arith-pivots            419
;  :binary-propagations     22
;  :conflicts               500
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1272
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              560
;  :propagations            148
;  :quant-instantiations    41
;  :rlimit-count            216556)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1755
;  :arith-add-rows          318
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      331
;  :arith-conflicts         247
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         240
;  :arith-pivots            421
;  :binary-propagations     22
;  :conflicts               501
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1273
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              561
;  :propagations            148
;  :quant-instantiations    41
;  :rlimit-count            216688)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1756
;  :arith-add-rows          320
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      332
;  :arith-conflicts         248
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         241
;  :arith-pivots            423
;  :binary-propagations     22
;  :conflicts               502
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1274
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              562
;  :propagations            149
;  :quant-instantiations    41
;  :rlimit-count            216800)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1756
;  :arith-add-rows          321
;  :arith-assert-diseq      45
;  :arith-assert-lower      147
;  :arith-assert-upper      333
;  :arith-conflicts         249
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         242
;  :arith-pivots            425
;  :binary-propagations     22
;  :conflicts               503
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1275
;  :mk-clause               149
;  :num-allocs              4502041
;  :num-checks              563
;  :propagations            149
;  :quant-instantiations    41
;  :rlimit-count            216910)
(declare-const $k@72@01 $Perm)
(assert ($Perm.isReadVar $k@72@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1756
;  :arith-add-rows          323
;  :arith-assert-diseq      46
;  :arith-assert-lower      149
;  :arith-assert-upper      335
;  :arith-conflicts         250
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         243
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               504
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1280
;  :mk-clause               151
;  :num-allocs              4502041
;  :num-checks              564
;  :propagations            150
;  :quant-instantiations    41
;  :rlimit-count            217191)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@72@01 $Perm.No) (< $Perm.No $k@72@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1756
;  :arith-add-rows          323
;  :arith-assert-diseq      46
;  :arith-assert-lower      149
;  :arith-assert-upper      335
;  :arith-conflicts         250
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         243
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               505
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1280
;  :mk-clause               151
;  :num-allocs              4502041
;  :num-checks              565
;  :propagations            150
;  :quant-instantiations    41
;  :rlimit-count            217241)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1757
;  :arith-add-rows          325
;  :arith-assert-diseq      46
;  :arith-assert-lower      149
;  :arith-assert-upper      336
;  :arith-conflicts         251
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         244
;  :arith-pivots            429
;  :binary-propagations     22
;  :conflicts               506
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              126
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1281
;  :mk-clause               151
;  :num-allocs              4502041
;  :num-checks              566
;  :propagations            151
;  :quant-instantiations    41
;  :rlimit-count            217353)
(push) ; 5
(assert (not (not (= (+ (- $k@18@01 $k@42@01) $k@53@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1758
;  :arith-add-rows          325
;  :arith-assert-diseq      46
;  :arith-assert-lower      149
;  :arith-assert-upper      337
;  :arith-conflicts         252
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         244
;  :arith-pivots            429
;  :binary-propagations     22
;  :conflicts               507
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1283
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              567
;  :propagations            152
;  :quant-instantiations    41
;  :rlimit-count            217431)
(assert (< $k@72@01 (+ (- $k@18@01 $k@42@01) $k@53@01)))
(assert (<= $Perm.No (- (+ (- $k@18@01 $k@42@01) $k@53@01) $k@72@01)))
(assert (<= (- (+ (- $k@18@01 $k@42@01) $k@53@01) $k@72@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@18@01 $k@42@01) $k@53@01) $k@72@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1758
;  :arith-add-rows          328
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      339
;  :arith-conflicts         253
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         245
;  :arith-pivots            431
;  :binary-propagations     22
;  :conflicts               508
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1287
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              568
;  :propagations            152
;  :quant-instantiations    41
;  :rlimit-count            217750)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1759
;  :arith-add-rows          330
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      340
;  :arith-conflicts         254
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         246
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               509
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1288
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              569
;  :propagations            153
;  :quant-instantiations    41
;  :rlimit-count            217862)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1759
;  :arith-add-rows          330
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      341
;  :arith-conflicts         255
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         247
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               510
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1289
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              570
;  :propagations            153
;  :quant-instantiations    41
;  :rlimit-count            217940)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1759
;  :arith-add-rows          332
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      342
;  :arith-conflicts         256
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         248
;  :arith-pivots            435
;  :binary-propagations     22
;  :conflicts               511
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1290
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              571
;  :propagations            153
;  :quant-instantiations    41
;  :rlimit-count            218072)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1760
;  :arith-add-rows          334
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      343
;  :arith-conflicts         257
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         249
;  :arith-pivots            437
;  :binary-propagations     22
;  :conflicts               512
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1291
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              572
;  :propagations            154
;  :quant-instantiations    41
;  :rlimit-count            218184)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1760
;  :arith-add-rows          334
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      344
;  :arith-conflicts         258
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         250
;  :arith-pivots            437
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1292
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              573
;  :propagations            154
;  :quant-instantiations    41
;  :rlimit-count            218262)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1760
;  :arith-add-rows          336
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      345
;  :arith-conflicts         259
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         251
;  :arith-pivots            439
;  :binary-propagations     22
;  :conflicts               514
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1293
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              574
;  :propagations            154
;  :quant-instantiations    41
;  :rlimit-count            218394)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1761
;  :arith-add-rows          338
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      346
;  :arith-conflicts         260
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         252
;  :arith-pivots            441
;  :binary-propagations     22
;  :conflicts               515
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1294
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              575
;  :propagations            155
;  :quant-instantiations    41
;  :rlimit-count            218506)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1761
;  :arith-add-rows          338
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      347
;  :arith-conflicts         261
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         253
;  :arith-pivots            441
;  :binary-propagations     22
;  :conflicts               516
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1295
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              576
;  :propagations            155
;  :quant-instantiations    41
;  :rlimit-count            218584)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1761
;  :arith-add-rows          340
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      348
;  :arith-conflicts         262
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         254
;  :arith-pivots            443
;  :binary-propagations     22
;  :conflicts               517
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1296
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              577
;  :propagations            155
;  :quant-instantiations    41
;  :rlimit-count            218716)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1762
;  :arith-add-rows          342
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      349
;  :arith-conflicts         263
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         255
;  :arith-pivots            445
;  :binary-propagations     22
;  :conflicts               518
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1297
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              578
;  :propagations            156
;  :quant-instantiations    41
;  :rlimit-count            218828)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1762
;  :arith-add-rows          342
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      350
;  :arith-conflicts         264
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         256
;  :arith-pivots            445
;  :binary-propagations     22
;  :conflicts               519
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1298
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              579
;  :propagations            156
;  :quant-instantiations    41
;  :rlimit-count            218906)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1762
;  :arith-add-rows          344
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      351
;  :arith-conflicts         265
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         257
;  :arith-pivots            447
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1299
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              580
;  :propagations            156
;  :quant-instantiations    41
;  :rlimit-count            219038)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1763
;  :arith-add-rows          346
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      352
;  :arith-conflicts         266
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         258
;  :arith-pivots            449
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1300
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              581
;  :propagations            157
;  :quant-instantiations    41
;  :rlimit-count            219150)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1763
;  :arith-add-rows          346
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      353
;  :arith-conflicts         267
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         259
;  :arith-pivots            449
;  :binary-propagations     22
;  :conflicts               522
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1301
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              582
;  :propagations            157
;  :quant-instantiations    41
;  :rlimit-count            219228)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1763
;  :arith-add-rows          348
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      354
;  :arith-conflicts         268
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         260
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               523
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1302
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              583
;  :propagations            157
;  :quant-instantiations    41
;  :rlimit-count            219360)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1764
;  :arith-add-rows          350
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      355
;  :arith-conflicts         269
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         261
;  :arith-pivots            453
;  :binary-propagations     22
;  :conflicts               524
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1303
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              584
;  :propagations            158
;  :quant-instantiations    41
;  :rlimit-count            219472)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1764
;  :arith-add-rows          350
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      356
;  :arith-conflicts         270
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         262
;  :arith-pivots            453
;  :binary-propagations     22
;  :conflicts               525
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1304
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              585
;  :propagations            158
;  :quant-instantiations    41
;  :rlimit-count            219550)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1764
;  :arith-add-rows          352
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      357
;  :arith-conflicts         271
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         263
;  :arith-pivots            455
;  :binary-propagations     22
;  :conflicts               526
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1305
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              586
;  :propagations            158
;  :quant-instantiations    41
;  :rlimit-count            219682)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1765
;  :arith-add-rows          354
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      358
;  :arith-conflicts         272
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         264
;  :arith-pivots            457
;  :binary-propagations     22
;  :conflicts               527
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1306
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              587
;  :propagations            159
;  :quant-instantiations    41
;  :rlimit-count            219794)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1765
;  :arith-add-rows          354
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      359
;  :arith-conflicts         273
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         265
;  :arith-pivots            457
;  :binary-propagations     22
;  :conflicts               528
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1307
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              588
;  :propagations            159
;  :quant-instantiations    41
;  :rlimit-count            219872)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1765
;  :arith-add-rows          356
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      360
;  :arith-conflicts         274
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         266
;  :arith-pivots            459
;  :binary-propagations     22
;  :conflicts               529
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1308
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              589
;  :propagations            159
;  :quant-instantiations    41
;  :rlimit-count            220004)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1766
;  :arith-add-rows          358
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      361
;  :arith-conflicts         275
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         267
;  :arith-pivots            461
;  :binary-propagations     22
;  :conflicts               530
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1309
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              590
;  :propagations            160
;  :quant-instantiations    41
;  :rlimit-count            220116)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@42@01) $k@53@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1766
;  :arith-add-rows          358
;  :arith-assert-diseq      46
;  :arith-assert-lower      151
;  :arith-assert-upper      362
;  :arith-conflicts         276
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         268
;  :arith-pivots            461
;  :binary-propagations     22
;  :conflicts               531
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1310
;  :mk-clause               153
;  :num-allocs              4502041
;  :num-checks              591
;  :propagations            160
;  :quant-instantiations    41
;  :rlimit-count            220194)
(declare-const $k@73@01 $Perm)
(assert ($Perm.isReadVar $k@73@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1766
;  :arith-add-rows          360
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      364
;  :arith-conflicts         277
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         269
;  :arith-pivots            463
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1315
;  :mk-clause               155
;  :num-allocs              4502041
;  :num-checks              592
;  :propagations            161
;  :quant-instantiations    41
;  :rlimit-count            220475)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@73@01 $Perm.No) (< $Perm.No $k@73@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1766
;  :arith-add-rows          360
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      364
;  :arith-conflicts         277
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         269
;  :arith-pivots            463
;  :binary-propagations     22
;  :conflicts               533
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1315
;  :mk-clause               155
;  :num-allocs              4502041
;  :num-checks              593
;  :propagations            161
;  :quant-instantiations    41
;  :rlimit-count            220525)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1767
;  :arith-add-rows          362
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      365
;  :arith-conflicts         278
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         270
;  :arith-pivots            465
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              128
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1316
;  :mk-clause               155
;  :num-allocs              4502041
;  :num-checks              594
;  :propagations            162
;  :quant-instantiations    41
;  :rlimit-count            220637)
(push) ; 5
(assert (not (not (= (+ (- $k@19@01 $k@43@01) $k@55@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1768
;  :arith-add-rows          362
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      366
;  :arith-conflicts         279
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         270
;  :arith-pivots            465
;  :binary-propagations     22
;  :conflicts               535
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              130
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1318
;  :mk-clause               157
;  :num-allocs              4502041
;  :num-checks              595
;  :propagations            163
;  :quant-instantiations    41
;  :rlimit-count            220718)
(assert (< $k@73@01 (+ (- $k@19@01 $k@43@01) $k@55@01)))
(assert (<= $Perm.No (- (+ (- $k@19@01 $k@43@01) $k@55@01) $k@73@01)))
(assert (<= (- (+ (- $k@19@01 $k@43@01) $k@55@01) $k@73@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@19@01 $k@43@01) $k@55@01) $k@73@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1768
;  :arith-add-rows          366
;  :arith-assert-diseq      47
;  :arith-assert-lower      155
;  :arith-assert-upper      368
;  :arith-conflicts         280
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         271
;  :arith-pivots            467
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              130
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1322
;  :mk-clause               157
;  :num-allocs              4502041
;  :num-checks              596
;  :propagations            163
;  :quant-instantiations    41
;  :rlimit-count            221038)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1769
;  :arith-add-rows          368
;  :arith-assert-diseq      47
;  :arith-assert-lower      155
;  :arith-assert-upper      369
;  :arith-conflicts         281
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         272
;  :arith-pivots            469
;  :binary-propagations     22
;  :conflicts               537
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              130
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1323
;  :mk-clause               157
;  :num-allocs              4502041
;  :num-checks              597
;  :propagations            164
;  :quant-instantiations    41
;  :rlimit-count            221150)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@43@01) $k@55@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1769
;  :arith-add-rows          368
;  :arith-assert-diseq      47
;  :arith-assert-lower      155
;  :arith-assert-upper      370
;  :arith-conflicts         282
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         273
;  :arith-pivots            469
;  :binary-propagations     22
;  :conflicts               538
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              130
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1324
;  :mk-clause               157
;  :num-allocs              4502041
;  :num-checks              598
;  :propagations            164
;  :quant-instantiations    41
;  :rlimit-count            221232)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1769
;  :arith-add-rows          370
;  :arith-assert-diseq      47
;  :arith-assert-lower      155
;  :arith-assert-upper      371
;  :arith-conflicts         283
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         274
;  :arith-pivots            471
;  :binary-propagations     22
;  :conflicts               539
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              130
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1325
;  :mk-clause               157
;  :num-allocs              4502041
;  :num-checks              599
;  :propagations            164
;  :quant-instantiations    41
;  :rlimit-count            221364)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1770
;  :arith-add-rows          372
;  :arith-assert-diseq      47
;  :arith-assert-lower      155
;  :arith-assert-upper      372
;  :arith-conflicts         284
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         275
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               540
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              130
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1326
;  :mk-clause               157
;  :num-allocs              4502041
;  :num-checks              600
;  :propagations            165
;  :quant-instantiations    41
;  :rlimit-count            221476)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@43@01) $k@55@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1770
;  :arith-add-rows          372
;  :arith-assert-diseq      47
;  :arith-assert-lower      155
;  :arith-assert-upper      373
;  :arith-conflicts         285
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         276
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               541
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              130
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1327
;  :mk-clause               157
;  :num-allocs              4502041
;  :num-checks              601
;  :propagations            165
;  :quant-instantiations    41
;  :rlimit-count            221558)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1770
;  :arith-add-rows          374
;  :arith-assert-diseq      47
;  :arith-assert-lower      155
;  :arith-assert-upper      374
;  :arith-conflicts         286
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         277
;  :arith-pivots            475
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              130
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1328
;  :mk-clause               157
;  :num-allocs              4502041
;  :num-checks              602
;  :propagations            165
;  :quant-instantiations    41
;  :rlimit-count            221690)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1771
;  :arith-add-rows          376
;  :arith-assert-diseq      47
;  :arith-assert-lower      155
;  :arith-assert-upper      375
;  :arith-conflicts         287
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         278
;  :arith-pivots            477
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              130
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1329
;  :mk-clause               157
;  :num-allocs              4502041
;  :num-checks              603
;  :propagations            166
;  :quant-instantiations    41
;  :rlimit-count            221802)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@43@01) $k@55@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1771
;  :arith-add-rows          376
;  :arith-assert-diseq      47
;  :arith-assert-lower      155
;  :arith-assert-upper      376
;  :arith-conflicts         288
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         279
;  :arith-pivots            477
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              130
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1330
;  :mk-clause               157
;  :num-allocs              4502041
;  :num-checks              604
;  :propagations            166
;  :quant-instantiations    41
;  :rlimit-count            221884)
(declare-const $k@74@01 $Perm)
(assert ($Perm.isReadVar $k@74@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1771
;  :arith-add-rows          378
;  :arith-assert-diseq      48
;  :arith-assert-lower      157
;  :arith-assert-upper      378
;  :arith-conflicts         289
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         280
;  :arith-pivots            479
;  :binary-propagations     22
;  :conflicts               545
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              130
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1335
;  :mk-clause               159
;  :num-allocs              4502041
;  :num-checks              605
;  :propagations            167
;  :quant-instantiations    41
;  :rlimit-count            222164)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@74@01 $Perm.No) (< $Perm.No $k@74@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1771
;  :arith-add-rows          378
;  :arith-assert-diseq      48
;  :arith-assert-lower      157
;  :arith-assert-upper      378
;  :arith-conflicts         289
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         280
;  :arith-pivots            479
;  :binary-propagations     22
;  :conflicts               546
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              130
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1335
;  :mk-clause               159
;  :num-allocs              4502041
;  :num-checks              606
;  :propagations            167
;  :quant-instantiations    41
;  :rlimit-count            222214)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1772
;  :arith-add-rows          380
;  :arith-assert-diseq      48
;  :arith-assert-lower      157
;  :arith-assert-upper      379
;  :arith-conflicts         290
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         281
;  :arith-pivots            481
;  :binary-propagations     22
;  :conflicts               547
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              130
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1336
;  :mk-clause               159
;  :num-allocs              4502041
;  :num-checks              607
;  :propagations            168
;  :quant-instantiations    41
;  :rlimit-count            222326)
(push) ; 5
(assert (not (not (= (+ (- $k@20@01 $k@44@01) $k@57@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1773
;  :arith-add-rows          380
;  :arith-assert-diseq      48
;  :arith-assert-lower      157
;  :arith-assert-upper      380
;  :arith-conflicts         291
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         281
;  :arith-pivots            481
;  :binary-propagations     22
;  :conflicts               548
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1338
;  :mk-clause               161
;  :num-allocs              4502041
;  :num-checks              608
;  :propagations            169
;  :quant-instantiations    41
;  :rlimit-count            222404)
(assert (< $k@74@01 (+ (- $k@20@01 $k@44@01) $k@57@01)))
(assert (<= $Perm.No (- (+ (- $k@20@01 $k@44@01) $k@57@01) $k@74@01)))
(assert (<= (- (+ (- $k@20@01 $k@44@01) $k@57@01) $k@74@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@20@01 $k@44@01) $k@57@01) $k@74@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1773
;  :arith-add-rows          383
;  :arith-assert-diseq      48
;  :arith-assert-lower      159
;  :arith-assert-upper      382
;  :arith-conflicts         292
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         282
;  :arith-pivots            484
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1342
;  :mk-clause               161
;  :num-allocs              4502041
;  :num-checks              609
;  :propagations            169
;  :quant-instantiations    41
;  :rlimit-count            222730)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1774
;  :arith-add-rows          385
;  :arith-assert-diseq      48
;  :arith-assert-lower      159
;  :arith-assert-upper      383
;  :arith-conflicts         293
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         283
;  :arith-pivots            486
;  :binary-propagations     22
;  :conflicts               550
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1343
;  :mk-clause               161
;  :num-allocs              4502041
;  :num-checks              610
;  :propagations            170
;  :quant-instantiations    41
;  :rlimit-count            222842)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@20@01 $k@44@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1774
;  :arith-add-rows          385
;  :arith-assert-diseq      48
;  :arith-assert-lower      159
;  :arith-assert-upper      384
;  :arith-conflicts         294
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         284
;  :arith-pivots            486
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1344
;  :mk-clause               161
;  :num-allocs              4502041
;  :num-checks              611
;  :propagations            170
;  :quant-instantiations    41
;  :rlimit-count            222920)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1774
;  :arith-add-rows          387
;  :arith-assert-diseq      48
;  :arith-assert-lower      159
;  :arith-assert-upper      385
;  :arith-conflicts         295
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         285
;  :arith-pivots            488
;  :binary-propagations     22
;  :conflicts               552
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1345
;  :mk-clause               161
;  :num-allocs              4502041
;  :num-checks              612
;  :propagations            170
;  :quant-instantiations    41
;  :rlimit-count            223052)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1775
;  :arith-add-rows          389
;  :arith-assert-diseq      48
;  :arith-assert-lower      159
;  :arith-assert-upper      386
;  :arith-conflicts         296
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         286
;  :arith-pivots            490
;  :binary-propagations     22
;  :conflicts               553
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1346
;  :mk-clause               161
;  :num-allocs              4502041
;  :num-checks              613
;  :propagations            171
;  :quant-instantiations    41
;  :rlimit-count            223164)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@20@01 $k@44@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1775
;  :arith-add-rows          389
;  :arith-assert-diseq      48
;  :arith-assert-lower      159
;  :arith-assert-upper      387
;  :arith-conflicts         297
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         287
;  :arith-pivots            490
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1347
;  :mk-clause               161
;  :num-allocs              4502041
;  :num-checks              614
;  :propagations            171
;  :quant-instantiations    41
;  :rlimit-count            223242)
(declare-const $k@75@01 $Perm)
(assert ($Perm.isReadVar $k@75@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1775
;  :arith-add-rows          391
;  :arith-assert-diseq      49
;  :arith-assert-lower      161
;  :arith-assert-upper      389
;  :arith-conflicts         298
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         288
;  :arith-pivots            492
;  :binary-propagations     22
;  :conflicts               555
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1352
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              615
;  :propagations            172
;  :quant-instantiations    41
;  :rlimit-count            223523)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1776
;  :arith-add-rows          393
;  :arith-assert-diseq      49
;  :arith-assert-lower      161
;  :arith-assert-upper      390
;  :arith-conflicts         299
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         289
;  :arith-pivots            494
;  :binary-propagations     22
;  :conflicts               556
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1353
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              616
;  :propagations            173
;  :quant-instantiations    41
;  :rlimit-count            223635)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1776
;  :arith-add-rows          394
;  :arith-assert-diseq      49
;  :arith-assert-lower      161
;  :arith-assert-upper      391
;  :arith-conflicts         300
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         290
;  :arith-pivots            497
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1354
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              617
;  :propagations            173
;  :quant-instantiations    41
;  :rlimit-count            223750)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@75@01 $Perm.No) (< $Perm.No $k@75@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1776
;  :arith-add-rows          394
;  :arith-assert-diseq      49
;  :arith-assert-lower      161
;  :arith-assert-upper      391
;  :arith-conflicts         300
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         290
;  :arith-pivots            497
;  :binary-propagations     22
;  :conflicts               558
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1354
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              618
;  :propagations            173
;  :quant-instantiations    41
;  :rlimit-count            223800)
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
  $t@52@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1776
;  :arith-add-rows          394
;  :arith-assert-diseq      49
;  :arith-assert-lower      161
;  :arith-assert-upper      391
;  :arith-conflicts         300
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         290
;  :arith-pivots            497
;  :binary-propagations     22
;  :conflicts               558
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1354
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              619
;  :propagations            173
;  :quant-instantiations    41
;  :rlimit-count            223811)
(push) ; 5
(assert (not (not (= (- $k@21@01 $k@45@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1776
;  :arith-add-rows          394
;  :arith-assert-diseq      49
;  :arith-assert-lower      161
;  :arith-assert-upper      391
;  :arith-conflicts         300
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         290
;  :arith-pivots            497
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1355
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              620
;  :propagations            173
;  :quant-instantiations    41
;  :rlimit-count            223879)
(assert (< $k@75@01 (- $k@21@01 $k@45@01)))
(assert (<= $Perm.No (- (- $k@21@01 $k@45@01) $k@75@01)))
(assert (<= (- (- $k@21@01 $k@45@01) $k@75@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@21@01 $k@45@01) $k@75@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1776
;  :arith-add-rows          397
;  :arith-assert-diseq      49
;  :arith-assert-lower      163
;  :arith-assert-upper      393
;  :arith-conflicts         301
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         291
;  :arith-pivots            499
;  :binary-propagations     22
;  :conflicts               560
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1359
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              621
;  :propagations            173
;  :quant-instantiations    41
;  :rlimit-count            224192)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1777
;  :arith-add-rows          399
;  :arith-assert-diseq      49
;  :arith-assert-lower      163
;  :arith-assert-upper      394
;  :arith-conflicts         302
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         292
;  :arith-pivots            501
;  :binary-propagations     22
;  :conflicts               561
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1360
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              622
;  :propagations            174
;  :quant-instantiations    41
;  :rlimit-count            224304)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1777
;  :arith-add-rows          400
;  :arith-assert-diseq      49
;  :arith-assert-lower      163
;  :arith-assert-upper      395
;  :arith-conflicts         303
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         293
;  :arith-pivots            503
;  :binary-propagations     22
;  :conflicts               562
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1361
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              623
;  :propagations            174
;  :quant-instantiations    41
;  :rlimit-count            224414)
(push) ; 5
(assert (not (= diz@7@01 $t@52@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1777
;  :arith-add-rows          400
;  :arith-assert-diseq      49
;  :arith-assert-lower      163
;  :arith-assert-upper      395
;  :arith-conflicts         303
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         293
;  :arith-pivots            503
;  :binary-propagations     22
;  :conflicts               562
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1361
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              624
;  :propagations            174
;  :quant-instantiations    41
;  :rlimit-count            224425)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1777
;  :arith-add-rows          402
;  :arith-assert-diseq      49
;  :arith-assert-lower      163
;  :arith-assert-upper      396
;  :arith-conflicts         304
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         294
;  :arith-pivots            505
;  :binary-propagations     22
;  :conflicts               563
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1362
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              625
;  :propagations            174
;  :quant-instantiations    41
;  :rlimit-count            224557)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1777
;  :arith-add-rows          402
;  :arith-assert-diseq      49
;  :arith-assert-lower      163
;  :arith-assert-upper      397
;  :arith-conflicts         305
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         295
;  :arith-pivots            506
;  :binary-propagations     22
;  :conflicts               564
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1363
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              626
;  :propagations            174
;  :quant-instantiations    41
;  :rlimit-count            224653)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@39@01) $k@48@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1777
;  :arith-add-rows          402
;  :arith-assert-diseq      49
;  :arith-assert-lower      163
;  :arith-assert-upper      398
;  :arith-conflicts         306
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         296
;  :arith-pivots            507
;  :binary-propagations     22
;  :conflicts               565
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1364
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              627
;  :propagations            174
;  :quant-instantiations    41
;  :rlimit-count            224749)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@60@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1778
;  :arith-add-rows          404
;  :arith-assert-diseq      49
;  :arith-assert-lower      163
;  :arith-assert-upper      399
;  :arith-conflicts         307
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         297
;  :arith-pivots            509
;  :binary-propagations     22
;  :conflicts               566
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1365
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              628
;  :propagations            175
;  :quant-instantiations    41
;  :rlimit-count            224861)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@41@01) $k@51@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1778
;  :arith-add-rows          405
;  :arith-assert-diseq      49
;  :arith-assert-lower      163
;  :arith-assert-upper      400
;  :arith-conflicts         308
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         298
;  :arith-pivots            512
;  :binary-propagations     22
;  :conflicts               567
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 388
;  :datatype-occurs-check   27
;  :datatype-splits         220
;  :decisions               379
;  :del-clause              132
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1366
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              629
;  :propagations            175
;  :quant-instantiations    41
;  :rlimit-count            224976)
; [exec]
; inhale false
(pop) ; 4
(push) ; 4
; [else-branch: 9 | __B@12@01 != 1]
(assert (not (= __B@12@01 1)))
(pop) ; 4
; [eval] !(B__31 == 1)
; [eval] B__31 == 1
(push) ; 4
(assert (not (= __B@12@01 1)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1850
;  :arith-add-rows          407
;  :arith-assert-diseq      49
;  :arith-assert-lower      163
;  :arith-assert-upper      400
;  :arith-conflicts         308
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         298
;  :arith-pivots            524
;  :binary-propagations     22
;  :conflicts               567
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 418
;  :datatype-occurs-check   29
;  :datatype-splits         222
;  :decisions               408
;  :del-clause              161
;  :final-checks            23
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1370
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              630
;  :propagations            176
;  :quant-instantiations    41
;  :rlimit-count            225836)
(push) ; 4
(assert (not (not (= __B@12@01 1))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      49
;  :arith-assert-lower      163
;  :arith-assert-upper      400
;  :arith-conflicts         308
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         298
;  :arith-pivots            524
;  :binary-propagations     22
;  :conflicts               567
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1374
;  :mk-clause               163
;  :num-allocs              4502041
;  :num-checks              631
;  :propagations            177
;  :quant-instantiations    41
;  :rlimit-count            226607)
; [then-branch: 26 | __B@12@01 != 1 | live]
; [else-branch: 26 | __B@12@01 == 1 | live]
(push) ; 4
; [then-branch: 26 | __B@12@01 != 1]
(assert (not (= __B@12@01 1)))
; [exec]
; __flatten_7__33 := Rng_exp2__EncodedGlobalVariables_Integer(diz, globals__27, pos__29)
; [eval] diz != null
(declare-const $k@76@01 $Perm)
(assert ($Perm.isReadVar $k@76@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@76@01 $Perm.No) (< $Perm.No $k@76@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      50
;  :arith-assert-lower      165
;  :arith-assert-upper      401
;  :arith-conflicts         308
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         298
;  :arith-pivots            524
;  :binary-propagations     22
;  :conflicts               568
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1379
;  :mk-clause               165
;  :num-allocs              4502041
;  :num-checks              632
;  :propagations            178
;  :quant-instantiations    41
;  :rlimit-count            226858)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= $k@15@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      50
;  :arith-assert-lower      165
;  :arith-assert-upper      401
;  :arith-conflicts         308
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         298
;  :arith-pivots            524
;  :binary-propagations     22
;  :conflicts               568
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1379
;  :mk-clause               165
;  :num-allocs              4502041
;  :num-checks              633
;  :propagations            178
;  :quant-instantiations    41
;  :rlimit-count            226869)
(assert (< $k@76@01 $k@15@01))
(assert (<= $Perm.No (- $k@15@01 $k@76@01)))
(assert (<= (- $k@15@01 $k@76@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@15@01 $k@76@01)) (not (= diz@7@01 $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      50
;  :arith-assert-lower      167
;  :arith-assert-upper      402
;  :arith-conflicts         308
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               569
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1382
;  :mk-clause               165
;  :num-allocs              4502041
;  :num-checks              634
;  :propagations            178
;  :quant-instantiations    41
;  :rlimit-count            227083)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      50
;  :arith-assert-lower      167
;  :arith-assert-upper      402
;  :arith-conflicts         308
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               570
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1382
;  :mk-clause               165
;  :num-allocs              4502041
;  :num-checks              635
;  :propagations            178
;  :quant-instantiations    41
;  :rlimit-count            227131)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      50
;  :arith-assert-lower      167
;  :arith-assert-upper      402
;  :arith-conflicts         308
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               571
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1382
;  :mk-clause               165
;  :num-allocs              4502041
;  :num-checks              636
;  :propagations            178
;  :quant-instantiations    41
;  :rlimit-count            227179)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      50
;  :arith-assert-lower      167
;  :arith-assert-upper      402
;  :arith-conflicts         308
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               572
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1382
;  :mk-clause               165
;  :num-allocs              4502041
;  :num-checks              637
;  :propagations            178
;  :quant-instantiations    41
;  :rlimit-count            227227)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      50
;  :arith-assert-lower      167
;  :arith-assert-upper      402
;  :arith-conflicts         308
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               573
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1382
;  :mk-clause               165
;  :num-allocs              4502041
;  :num-checks              638
;  :propagations            178
;  :quant-instantiations    41
;  :rlimit-count            227275)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      50
;  :arith-assert-lower      167
;  :arith-assert-upper      402
;  :arith-conflicts         308
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               574
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1382
;  :mk-clause               165
;  :num-allocs              4502041
;  :num-checks              639
;  :propagations            178
;  :quant-instantiations    41
;  :rlimit-count            227323)
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@77@01 Int)
(push) ; 5
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 6
; [then-branch: 27 | 0 <= i@77@01 | live]
; [else-branch: 27 | !(0 <= i@77@01) | live]
(push) ; 7
; [then-branch: 27 | 0 <= i@77@01]
(assert (<= 0 i@77@01))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 8
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      50
;  :arith-assert-lower      168
;  :arith-assert-upper      402
;  :arith-conflicts         308
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1383
;  :mk-clause               165
;  :num-allocs              4502041
;  :num-checks              640
;  :propagations            178
;  :quant-instantiations    41
;  :rlimit-count            227423)
(pop) ; 7
(push) ; 7
; [else-branch: 27 | !(0 <= i@77@01)]
(assert (not (<= 0 i@77@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 28 | i@77@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@77@01 | live]
; [else-branch: 28 | !(i@77@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@77@01) | live]
(push) ; 7
; [then-branch: 28 | i@77@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@77@01]
(assert (and
  (<
    i@77@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
  (<= 0 i@77@01)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 8
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      50
;  :arith-assert-lower      169
;  :arith-assert-upper      403
;  :arith-conflicts         308
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               576
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1385
;  :mk-clause               165
;  :num-allocs              4502041
;  :num-checks              641
;  :propagations            178
;  :quant-instantiations    41
;  :rlimit-count            227580)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@77@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      50
;  :arith-assert-lower      169
;  :arith-assert-upper      403
;  :arith-conflicts         308
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               576
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1385
;  :mk-clause               165
;  :num-allocs              4502041
;  :num-checks              642
;  :propagations            178
;  :quant-instantiations    41
;  :rlimit-count            227589)
; [eval] -1
(push) ; 8
; [then-branch: 29 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@77@01] == -1 | live]
; [else-branch: 29 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@77@01] != -1 | live]
(push) ; 9
; [then-branch: 29 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@77@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@77@01)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 29 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@77@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
      i@77@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      51
;  :arith-assert-lower      172
;  :arith-assert-upper      404
;  :arith-conflicts         308
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               577
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1391
;  :mk-clause               169
;  :num-allocs              4502041
;  :num-checks              643
;  :propagations            180
;  :quant-instantiations    42
;  :rlimit-count            227872)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@77@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      51
;  :arith-assert-lower      172
;  :arith-assert-upper      404
;  :arith-conflicts         308
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               577
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1391
;  :mk-clause               169
;  :num-allocs              4502041
;  :num-checks              644
;  :propagations            180
;  :quant-instantiations    42
;  :rlimit-count            227881)
(push) ; 10
; [then-branch: 30 | 0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@77@01] | live]
; [else-branch: 30 | !(0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@77@01]) | live]
(push) ; 11
; [then-branch: 30 | 0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@77@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@77@01)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      51
;  :arith-assert-lower      172
;  :arith-assert-upper      404
;  :arith-conflicts         308
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               578
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1391
;  :mk-clause               169
;  :num-allocs              4502041
;  :num-checks              645
;  :propagations            180
;  :quant-instantiations    42
;  :rlimit-count            228044)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@77@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      51
;  :arith-assert-lower      172
;  :arith-assert-upper      404
;  :arith-conflicts         308
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               578
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1391
;  :mk-clause               169
;  :num-allocs              4502041
;  :num-checks              646
;  :propagations            180
;  :quant-instantiations    42
;  :rlimit-count            228053)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      51
;  :arith-assert-lower      172
;  :arith-assert-upper      404
;  :arith-conflicts         308
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               579
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              161
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1391
;  :mk-clause               169
;  :num-allocs              4502041
;  :num-checks              647
;  :propagations            180
;  :quant-instantiations    42
;  :rlimit-count            228101)
(pop) ; 11
(push) ; 11
; [else-branch: 30 | !(0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@77@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
      i@77@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 28 | !(i@77@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@77@01)]
(assert (not
  (and
    (<
      i@77@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
    (<= 0 i@77@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((i@77@01 Int)) (!
  (implies
    (and
      (<
        i@77@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
      (<= 0 i@77@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
          i@77@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@77@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@77@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@77@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      52
;  :arith-assert-lower      173
;  :arith-assert-upper      405
;  :arith-conflicts         308
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               580
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1399
;  :mk-clause               181
;  :num-allocs              4502041
;  :num-checks              648
;  :propagations            182
;  :quant-instantiations    43
;  :rlimit-count            228559)
(assert (forall ((i@77@01 Int)) (!
  (implies
    (and
      (<
        i@77@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
      (<= 0 i@77@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
          i@77@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@77@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@77@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@77@01))
  :qid |prog.l<no position>|)))
(declare-const $k@78@01 $Perm)
(assert ($Perm.isReadVar $k@78@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      175
;  :arith-assert-upper      406
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               581
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1404
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              649
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229136)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@78@01 $Perm.No) (< $Perm.No $k@78@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      175
;  :arith-assert-upper      406
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               582
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1404
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              650
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229186)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= $k@17@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      175
;  :arith-assert-upper      406
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               582
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1404
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              651
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229197)
(assert (< $k@78@01 $k@17@01))
(assert (<= $Perm.No (- $k@17@01 $k@78@01)))
(assert (<= (- $k@17@01 $k@78@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@17@01 $k@78@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               583
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              652
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229405)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               584
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              653
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229453)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               585
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              654
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229501)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               586
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              655
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229549)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               587
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              656
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229597)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               588
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              657
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229645)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               589
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              658
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229693)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               590
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              659
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229741)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               591
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              660
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229789)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               592
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              661
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229837)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               593
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              662
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229885)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               594
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              663
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229933)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               595
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              664
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            229981)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               596
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              665
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            230029)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               597
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              666
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            230077)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               598
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              667
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            230125)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               599
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              668
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            230173)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               600
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              669
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            230221)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               601
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              670
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            230269)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               602
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              671
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            230317)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               603
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              672
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            230365)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      53
;  :arith-assert-lower      177
;  :arith-assert-upper      407
;  :arith-conflicts         308
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               604
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1407
;  :mk-clause               183
;  :num-allocs              4502041
;  :num-checks              673
;  :propagations            183
;  :quant-instantiations    43
;  :rlimit-count            230413)
(declare-const $k@79@01 $Perm)
(assert ($Perm.isReadVar $k@79@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      179
;  :arith-assert-upper      408
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               605
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1411
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              674
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            230610)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@79@01 $Perm.No) (< $Perm.No $k@79@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      179
;  :arith-assert-upper      408
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               606
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1411
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              675
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            230660)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= $k@18@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      179
;  :arith-assert-upper      408
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               606
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1411
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              676
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            230671)
(assert (< $k@79@01 $k@18@01))
(assert (<= $Perm.No (- $k@18@01 $k@79@01)))
(assert (<= (- $k@18@01 $k@79@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@18@01 $k@79@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               607
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              677
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            230879)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               608
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              678
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            230927)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               609
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              679
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            230975)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               610
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              680
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            231023)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               611
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              681
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            231071)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               612
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              682
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            231119)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               613
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              683
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            231167)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               614
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              684
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            231215)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               615
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              685
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            231263)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               616
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              686
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            231311)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               617
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              687
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            231359)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               618
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              688
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            231407)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               619
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              689
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            231455)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               620
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              690
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            231503)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               621
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              691
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            231551)
(push) ; 5
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      54
;  :arith-assert-lower      181
;  :arith-assert-upper      409
;  :arith-conflicts         308
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               622
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1414
;  :mk-clause               185
;  :num-allocs              4502041
;  :num-checks              692
;  :propagations            184
;  :quant-instantiations    43
;  :rlimit-count            231599)
(declare-const $k@80@01 $Perm)
(assert ($Perm.isReadVar $k@80@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      55
;  :arith-assert-lower      183
;  :arith-assert-upper      410
;  :arith-conflicts         308
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               623
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1418
;  :mk-clause               187
;  :num-allocs              4502041
;  :num-checks              693
;  :propagations            185
;  :quant-instantiations    43
;  :rlimit-count            231795)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@80@01 $Perm.No) (< $Perm.No $k@80@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      55
;  :arith-assert-lower      183
;  :arith-assert-upper      410
;  :arith-conflicts         308
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               624
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1418
;  :mk-clause               187
;  :num-allocs              4502041
;  :num-checks              694
;  :propagations            185
;  :quant-instantiations    43
;  :rlimit-count            231845)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= $k@19@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      55
;  :arith-assert-lower      183
;  :arith-assert-upper      410
;  :arith-conflicts         308
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         298
;  :arith-pivots            525
;  :binary-propagations     22
;  :conflicts               624
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1418
;  :mk-clause               187
;  :num-allocs              4502041
;  :num-checks              695
;  :propagations            185
;  :quant-instantiations    43
;  :rlimit-count            231856)
(assert (< $k@80@01 $k@19@01))
(assert (<= $Perm.No (- $k@19@01 $k@80@01)))
(assert (<= (- $k@19@01 $k@80@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@19@01 $k@80@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      55
;  :arith-assert-lower      185
;  :arith-assert-upper      411
;  :arith-conflicts         308
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               625
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1421
;  :mk-clause               187
;  :num-allocs              4502041
;  :num-checks              696
;  :propagations            185
;  :quant-instantiations    43
;  :rlimit-count            232070)
(push) ; 5
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      55
;  :arith-assert-lower      185
;  :arith-assert-upper      411
;  :arith-conflicts         308
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               626
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1421
;  :mk-clause               187
;  :num-allocs              4502041
;  :num-checks              697
;  :propagations            185
;  :quant-instantiations    43
;  :rlimit-count            232118)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      55
;  :arith-assert-lower      185
;  :arith-assert-upper      411
;  :arith-conflicts         308
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               627
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1421
;  :mk-clause               187
;  :num-allocs              4502041
;  :num-checks              698
;  :propagations            185
;  :quant-instantiations    43
;  :rlimit-count            232166)
(push) ; 5
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      55
;  :arith-assert-lower      185
;  :arith-assert-upper      411
;  :arith-conflicts         308
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               628
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1421
;  :mk-clause               187
;  :num-allocs              4502041
;  :num-checks              699
;  :propagations            185
;  :quant-instantiations    43
;  :rlimit-count            232214)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      55
;  :arith-assert-lower      185
;  :arith-assert-upper      411
;  :arith-conflicts         308
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               629
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1421
;  :mk-clause               187
;  :num-allocs              4502041
;  :num-checks              700
;  :propagations            185
;  :quant-instantiations    43
;  :rlimit-count            232262)
(push) ; 5
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      55
;  :arith-assert-lower      185
;  :arith-assert-upper      411
;  :arith-conflicts         308
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               630
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1421
;  :mk-clause               187
;  :num-allocs              4502041
;  :num-checks              701
;  :propagations            185
;  :quant-instantiations    43
;  :rlimit-count            232310)
(declare-const $k@81@01 $Perm)
(assert ($Perm.isReadVar $k@81@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      56
;  :arith-assert-lower      187
;  :arith-assert-upper      412
;  :arith-conflicts         308
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               631
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1425
;  :mk-clause               189
;  :num-allocs              4502041
;  :num-checks              702
;  :propagations            186
;  :quant-instantiations    43
;  :rlimit-count            232507)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@81@01 $Perm.No) (< $Perm.No $k@81@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      56
;  :arith-assert-lower      187
;  :arith-assert-upper      412
;  :arith-conflicts         308
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               632
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1425
;  :mk-clause               189
;  :num-allocs              4502041
;  :num-checks              703
;  :propagations            186
;  :quant-instantiations    43
;  :rlimit-count            232557)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= $k@20@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      56
;  :arith-assert-lower      187
;  :arith-assert-upper      412
;  :arith-conflicts         308
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               632
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1425
;  :mk-clause               189
;  :num-allocs              4502041
;  :num-checks              704
;  :propagations            186
;  :quant-instantiations    43
;  :rlimit-count            232568)
(assert (< $k@81@01 $k@20@01))
(assert (<= $Perm.No (- $k@20@01 $k@81@01)))
(assert (<= (- $k@20@01 $k@81@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@20@01 $k@81@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      56
;  :arith-assert-lower      189
;  :arith-assert-upper      413
;  :arith-conflicts         308
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               633
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1428
;  :mk-clause               189
;  :num-allocs              4502041
;  :num-checks              705
;  :propagations            186
;  :quant-instantiations    43
;  :rlimit-count            232776)
(push) ; 5
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      56
;  :arith-assert-lower      189
;  :arith-assert-upper      413
;  :arith-conflicts         308
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               634
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1428
;  :mk-clause               189
;  :num-allocs              4502041
;  :num-checks              706
;  :propagations            186
;  :quant-instantiations    43
;  :rlimit-count            232824)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      56
;  :arith-assert-lower      189
;  :arith-assert-upper      413
;  :arith-conflicts         308
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               635
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1428
;  :mk-clause               189
;  :num-allocs              4502041
;  :num-checks              707
;  :propagations            186
;  :quant-instantiations    43
;  :rlimit-count            232872)
(push) ; 5
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      56
;  :arith-assert-lower      189
;  :arith-assert-upper      413
;  :arith-conflicts         308
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               636
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1428
;  :mk-clause               189
;  :num-allocs              4502041
;  :num-checks              708
;  :propagations            186
;  :quant-instantiations    43
;  :rlimit-count            232920)
(declare-const $k@82@01 $Perm)
(assert ($Perm.isReadVar $k@82@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      57
;  :arith-assert-lower      191
;  :arith-assert-upper      414
;  :arith-conflicts         308
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               637
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1432
;  :mk-clause               191
;  :num-allocs              4502041
;  :num-checks              709
;  :propagations            187
;  :quant-instantiations    43
;  :rlimit-count            233116)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      57
;  :arith-assert-lower      191
;  :arith-assert-upper      414
;  :arith-conflicts         308
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               638
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1432
;  :mk-clause               191
;  :num-allocs              4502041
;  :num-checks              710
;  :propagations            187
;  :quant-instantiations    43
;  :rlimit-count            233164)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@82@01 $Perm.No) (< $Perm.No $k@82@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      57
;  :arith-assert-lower      191
;  :arith-assert-upper      414
;  :arith-conflicts         308
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               639
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1432
;  :mk-clause               191
;  :num-allocs              4502041
;  :num-checks              711
;  :propagations            187
;  :quant-instantiations    43
;  :rlimit-count            233214)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= $k@21@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      57
;  :arith-assert-lower      191
;  :arith-assert-upper      414
;  :arith-conflicts         308
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         298
;  :arith-pivots            526
;  :binary-propagations     22
;  :conflicts               639
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1432
;  :mk-clause               191
;  :num-allocs              4502041
;  :num-checks              712
;  :propagations            187
;  :quant-instantiations    43
;  :rlimit-count            233225)
(assert (< $k@82@01 $k@21@01))
(assert (<= $Perm.No (- $k@21@01 $k@82@01)))
(assert (<= (- $k@21@01 $k@82@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@21@01 $k@82@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      415
;  :arith-conflicts         308
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         298
;  :arith-pivots            527
;  :binary-propagations     22
;  :conflicts               640
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1435
;  :mk-clause               191
;  :num-allocs              4502041
;  :num-checks              713
;  :propagations            187
;  :quant-instantiations    43
;  :rlimit-count            233439)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      415
;  :arith-conflicts         308
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         298
;  :arith-pivots            527
;  :binary-propagations     22
;  :conflicts               641
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1435
;  :mk-clause               191
;  :num-allocs              4502041
;  :num-checks              714
;  :propagations            187
;  :quant-instantiations    43
;  :rlimit-count            233487)
(push) ; 5
(assert (not (< $Perm.No $k@21@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      415
;  :arith-conflicts         308
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         298
;  :arith-pivots            527
;  :binary-propagations     22
;  :conflicts               642
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1435
;  :mk-clause               191
;  :num-allocs              4502041
;  :num-checks              715
;  :propagations            187
;  :quant-instantiations    43
;  :rlimit-count            233535)
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      415
;  :arith-conflicts         308
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         298
;  :arith-pivots            527
;  :binary-propagations     22
;  :conflicts               643
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1435
;  :mk-clause               191
;  :num-allocs              4502041
;  :num-checks              716
;  :propagations            187
;  :quant-instantiations    43
;  :rlimit-count            233583)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 5
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      415
;  :arith-conflicts         308
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         298
;  :arith-pivots            527
;  :binary-propagations     22
;  :conflicts               644
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1435
;  :mk-clause               191
;  :num-allocs              4502041
;  :num-checks              717
;  :propagations            187
;  :quant-instantiations    43
;  :rlimit-count            233631)
(push) ; 5
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1923
;  :arith-add-rows          407
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      415
;  :arith-conflicts         308
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         298
;  :arith-pivots            527
;  :binary-propagations     22
;  :conflicts               645
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1435
;  :mk-clause               191
;  :num-allocs              4502041
;  :num-checks              718
;  :propagations            187
;  :quant-instantiations    43
;  :rlimit-count            233679)
(declare-const sys__result@83@01 Int)
(declare-const $t@84@01 $Snap)
(assert (= $t@84@01 ($Snap.combine ($Snap.first $t@84@01) ($Snap.second $t@84@01))))
(declare-const $k@85@01 $Perm)
(assert ($Perm.isReadVar $k@85@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@85@01 $Perm.No) (< $Perm.No $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1928
;  :arith-add-rows          407
;  :arith-assert-diseq      58
;  :arith-assert-lower      195
;  :arith-assert-upper      416
;  :arith-conflicts         308
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         298
;  :arith-pivots            527
;  :binary-propagations     22
;  :conflicts               646
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1440
;  :mk-clause               193
;  :num-allocs              4502041
;  :num-checks              719
;  :propagations            188
;  :quant-instantiations    43
;  :rlimit-count            233965)
(declare-const $t@86@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@15@01 $k@76@01))
    (=
      $t@86@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))))
  (implies
    (< $Perm.No $k@85@01)
    (= $t@86@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@84@01))))))
(assert (<= $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01)))
(assert (<= (+ (- $k@15@01 $k@76@01) $k@85@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second $t@84@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@84@01))
    ($Snap.second ($Snap.second $t@84@01)))))
(assert (= ($Snap.first ($Snap.second $t@84@01)) $Snap.unit))
; [eval] diz.Rng_m != null
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1938
;  :arith-add-rows          408
;  :arith-assert-diseq      58
;  :arith-assert-lower      196
;  :arith-assert-upper      418
;  :arith-conflicts         309
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         299
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               647
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1448
;  :mk-clause               193
;  :num-allocs              4502041
;  :num-checks              720
;  :propagations            188
;  :quant-instantiations    44
;  :rlimit-count            234497)
(assert (not (= $t@86@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@84@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@84@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1944
;  :arith-add-rows          408
;  :arith-assert-diseq      58
;  :arith-assert-lower      196
;  :arith-assert-upper      419
;  :arith-conflicts         310
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         300
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               648
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1451
;  :mk-clause               193
;  :num-allocs              4502041
;  :num-checks              721
;  :propagations            188
;  :quant-instantiations    44
;  :rlimit-count            234741)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@84@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1949
;  :arith-add-rows          408
;  :arith-assert-diseq      58
;  :arith-assert-lower      196
;  :arith-assert-upper      420
;  :arith-conflicts         311
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         301
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               649
;  :datatype-accessor-ax    133
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1453
;  :mk-clause               193
;  :num-allocs              4502041
;  :num-checks              722
;  :propagations            188
;  :quant-instantiations    44
;  :rlimit-count            234950)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1955
;  :arith-add-rows          408
;  :arith-assert-diseq      58
;  :arith-assert-lower      196
;  :arith-assert-upper      421
;  :arith-conflicts         312
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         302
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               650
;  :datatype-accessor-ax    134
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1456
;  :mk-clause               193
;  :num-allocs              4502041
;  :num-checks              723
;  :propagations            188
;  :quant-instantiations    44
;  :rlimit-count            235201)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1962
;  :arith-add-rows          408
;  :arith-assert-diseq      58
;  :arith-assert-lower      198
;  :arith-assert-upper      423
;  :arith-conflicts         313
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         303
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               651
;  :datatype-accessor-ax    135
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1463
;  :mk-clause               193
;  :num-allocs              4502041
;  :num-checks              724
;  :propagations            188
;  :quant-instantiations    46
;  :rlimit-count            235563)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1968
;  :arith-add-rows          408
;  :arith-assert-diseq      58
;  :arith-assert-lower      198
;  :arith-assert-upper      424
;  :arith-conflicts         314
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         304
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               652
;  :datatype-accessor-ax    136
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1466
;  :mk-clause               193
;  :num-allocs              4502041
;  :num-checks              725
;  :propagations            188
;  :quant-instantiations    46
;  :rlimit-count            235834)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@87@01 Int)
(push) ; 5
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 6
; [then-branch: 31 | 0 <= i@87@01 | live]
; [else-branch: 31 | !(0 <= i@87@01) | live]
(push) ; 7
; [then-branch: 31 | 0 <= i@87@01]
(assert (<= 0 i@87@01))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 8
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1976
;  :arith-add-rows          408
;  :arith-assert-diseq      58
;  :arith-assert-lower      201
;  :arith-assert-upper      426
;  :arith-conflicts         315
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         305
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               653
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1475
;  :mk-clause               193
;  :num-allocs              4502041
;  :num-checks              726
;  :propagations            188
;  :quant-instantiations    48
;  :rlimit-count            236305)
(pop) ; 7
(push) ; 7
; [else-branch: 31 | !(0 <= i@87@01)]
(assert (not (<= 0 i@87@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 32 | i@87@01 < |First:(Second:(Second:(Second:($t@84@01))))| && 0 <= i@87@01 | live]
; [else-branch: 32 | !(i@87@01 < |First:(Second:(Second:(Second:($t@84@01))))| && 0 <= i@87@01) | live]
(push) ; 7
; [then-branch: 32 | i@87@01 < |First:(Second:(Second:(Second:($t@84@01))))| && 0 <= i@87@01]
(assert (and
  (<
    i@87@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
  (<= 0 i@87@01)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 8
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1976
;  :arith-add-rows          408
;  :arith-assert-diseq      58
;  :arith-assert-lower      202
;  :arith-assert-upper      428
;  :arith-conflicts         316
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         306
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               654
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1478
;  :mk-clause               193
;  :num-allocs              4502041
;  :num-checks              727
;  :propagations            188
;  :quant-instantiations    48
;  :rlimit-count            236494)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@87@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1976
;  :arith-add-rows          408
;  :arith-assert-diseq      58
;  :arith-assert-lower      202
;  :arith-assert-upper      428
;  :arith-conflicts         316
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         306
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               654
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1478
;  :mk-clause               193
;  :num-allocs              4502041
;  :num-checks              728
;  :propagations            188
;  :quant-instantiations    48
;  :rlimit-count            236503)
; [eval] -1
(push) ; 8
; [then-branch: 33 | First:(Second:(Second:(Second:($t@84@01))))[i@87@01] == -1 | live]
; [else-branch: 33 | First:(Second:(Second:(Second:($t@84@01))))[i@87@01] != -1 | live]
(push) ; 9
; [then-branch: 33 | First:(Second:(Second:(Second:($t@84@01))))[i@87@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    i@87@01)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 33 | First:(Second:(Second:(Second:($t@84@01))))[i@87@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
      i@87@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1976
;  :arith-add-rows          408
;  :arith-assert-diseq      58
;  :arith-assert-lower      202
;  :arith-assert-upper      429
;  :arith-conflicts         317
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         307
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               655
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1480
;  :mk-clause               193
;  :num-allocs              4502041
;  :num-checks              729
;  :propagations            188
;  :quant-instantiations    48
;  :rlimit-count            236749)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@87@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1976
;  :arith-add-rows          408
;  :arith-assert-diseq      58
;  :arith-assert-lower      202
;  :arith-assert-upper      429
;  :arith-conflicts         317
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         307
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               655
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1480
;  :mk-clause               193
;  :num-allocs              4502041
;  :num-checks              730
;  :propagations            188
;  :quant-instantiations    48
;  :rlimit-count            236758)
(push) ; 10
; [then-branch: 34 | 0 <= First:(Second:(Second:(Second:($t@84@01))))[i@87@01] | live]
; [else-branch: 34 | !(0 <= First:(Second:(Second:(Second:($t@84@01))))[i@87@01]) | live]
(push) ; 11
; [then-branch: 34 | 0 <= First:(Second:(Second:(Second:($t@84@01))))[i@87@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    i@87@01)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1976
;  :arith-add-rows          408
;  :arith-assert-diseq      59
;  :arith-assert-lower      205
;  :arith-assert-upper      430
;  :arith-conflicts         318
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         308
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               656
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1484
;  :mk-clause               194
;  :num-allocs              4502041
;  :num-checks              731
;  :propagations            188
;  :quant-instantiations    48
;  :rlimit-count            236952)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@87@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1976
;  :arith-add-rows          408
;  :arith-assert-diseq      59
;  :arith-assert-lower      205
;  :arith-assert-upper      430
;  :arith-conflicts         318
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         308
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               656
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1484
;  :mk-clause               194
;  :num-allocs              4502041
;  :num-checks              732
;  :propagations            188
;  :quant-instantiations    48
;  :rlimit-count            236961)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1976
;  :arith-add-rows          408
;  :arith-assert-diseq      59
;  :arith-assert-lower      205
;  :arith-assert-upper      431
;  :arith-conflicts         319
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         309
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               657
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              177
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1485
;  :mk-clause               194
;  :num-allocs              4502041
;  :num-checks              733
;  :propagations            188
;  :quant-instantiations    48
;  :rlimit-count            237041)
(pop) ; 11
(push) ; 11
; [else-branch: 34 | !(0 <= First:(Second:(Second:(Second:($t@84@01))))[i@87@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
      i@87@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 32 | !(i@87@01 < |First:(Second:(Second:(Second:($t@84@01))))| && 0 <= i@87@01)]
(assert (not
  (and
    (<
      i@87@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
    (<= 0 i@87@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@87@01 Int)) (!
  (implies
    (and
      (<
        i@87@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
      (<= 0 i@87@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
          i@87@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
            i@87@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
            i@87@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    i@87@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1981
;  :arith-add-rows          408
;  :arith-assert-diseq      59
;  :arith-assert-lower      205
;  :arith-assert-upper      432
;  :arith-conflicts         320
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         310
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               658
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1488
;  :mk-clause               194
;  :num-allocs              4502041
;  :num-checks              734
;  :propagations            188
;  :quant-instantiations    48
;  :rlimit-count            237698)
(declare-const $k@88@01 $Perm)
(assert ($Perm.isReadVar $k@88@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@88@01 $Perm.No) (< $Perm.No $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1981
;  :arith-add-rows          408
;  :arith-assert-diseq      60
;  :arith-assert-lower      207
;  :arith-assert-upper      433
;  :arith-conflicts         320
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         310
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               659
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1492
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              735
;  :propagations            189
;  :quant-instantiations    48
;  :rlimit-count            237896)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1981
;  :arith-add-rows          408
;  :arith-assert-diseq      60
;  :arith-assert-lower      207
;  :arith-assert-upper      433
;  :arith-conflicts         320
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         310
;  :arith-pivots            528
;  :binary-propagations     22
;  :conflicts               659
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1492
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              736
;  :propagations            189
;  :quant-instantiations    48
;  :rlimit-count            237907)
(declare-const $t@89@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@17@01 $k@78@01))
    (=
      $t@89@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
  (implies
    (< $Perm.No $k@88@01)
    (=
      $t@89@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))
(assert (<= $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01)))
(assert (<= (+ (- $k@17@01 $k@78@01) $k@88@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1991
;  :arith-add-rows          408
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      435
;  :arith-conflicts         321
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         311
;  :arith-pivots            529
;  :binary-propagations     22
;  :conflicts               660
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1500
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              737
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            238501)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1991
;  :arith-add-rows          408
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      435
;  :arith-conflicts         321
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         311
;  :arith-pivots            529
;  :binary-propagations     22
;  :conflicts               660
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1500
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              738
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            238512)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1991
;  :arith-add-rows          409
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      436
;  :arith-conflicts         322
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         312
;  :arith-pivots            531
;  :binary-propagations     22
;  :conflicts               661
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1501
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              739
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            238621)
(assert (not (= $t@89@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1996
;  :arith-add-rows          409
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      437
;  :arith-conflicts         323
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         313
;  :arith-pivots            531
;  :binary-propagations     22
;  :conflicts               662
;  :datatype-accessor-ax    140
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1503
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              740
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            238918)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1996
;  :arith-add-rows          409
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      437
;  :arith-conflicts         323
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         313
;  :arith-pivots            531
;  :binary-propagations     22
;  :conflicts               662
;  :datatype-accessor-ax    140
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1503
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              741
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            238929)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1996
;  :arith-add-rows          410
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      438
;  :arith-conflicts         324
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         314
;  :arith-pivots            534
;  :binary-propagations     22
;  :conflicts               663
;  :datatype-accessor-ax    140
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1504
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              742
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            239042)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2001
;  :arith-add-rows          410
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      439
;  :arith-conflicts         325
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         315
;  :arith-pivots            534
;  :binary-propagations     22
;  :conflicts               664
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1506
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              743
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            239331)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2001
;  :arith-add-rows          410
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      439
;  :arith-conflicts         325
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         315
;  :arith-pivots            534
;  :binary-propagations     22
;  :conflicts               664
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1506
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              744
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            239342)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2001
;  :arith-add-rows          411
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      440
;  :arith-conflicts         326
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         316
;  :arith-pivots            536
;  :binary-propagations     22
;  :conflicts               665
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1507
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              745
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            239450)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2006
;  :arith-add-rows          411
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      441
;  :arith-conflicts         327
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         317
;  :arith-pivots            536
;  :binary-propagations     22
;  :conflicts               666
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1509
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              746
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            239749)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2006
;  :arith-add-rows          411
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      441
;  :arith-conflicts         327
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         317
;  :arith-pivots            536
;  :binary-propagations     22
;  :conflicts               666
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1509
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              747
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            239760)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2006
;  :arith-add-rows          412
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      442
;  :arith-conflicts         328
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         318
;  :arith-pivots            539
;  :binary-propagations     22
;  :conflicts               667
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1510
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              748
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            239873)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2011
;  :arith-add-rows          412
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      443
;  :arith-conflicts         329
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         319
;  :arith-pivots            539
;  :binary-propagations     22
;  :conflicts               668
;  :datatype-accessor-ax    143
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1512
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              749
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            240182)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2011
;  :arith-add-rows          412
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      443
;  :arith-conflicts         329
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         319
;  :arith-pivots            539
;  :binary-propagations     22
;  :conflicts               668
;  :datatype-accessor-ax    143
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1512
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              750
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            240193)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2011
;  :arith-add-rows          413
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      444
;  :arith-conflicts         330
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         320
;  :arith-pivots            541
;  :binary-propagations     22
;  :conflicts               669
;  :datatype-accessor-ax    143
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1513
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              751
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            240301)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2016
;  :arith-add-rows          413
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      445
;  :arith-conflicts         331
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         321
;  :arith-pivots            541
;  :binary-propagations     22
;  :conflicts               670
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1515
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              752
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            240620)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2016
;  :arith-add-rows          413
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      445
;  :arith-conflicts         331
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         321
;  :arith-pivots            541
;  :binary-propagations     22
;  :conflicts               670
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1515
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              753
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            240631)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2016
;  :arith-add-rows          414
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      446
;  :arith-conflicts         332
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         322
;  :arith-pivots            544
;  :binary-propagations     22
;  :conflicts               671
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1516
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              754
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            240744)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2021
;  :arith-add-rows          414
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      447
;  :arith-conflicts         333
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         323
;  :arith-pivots            544
;  :binary-propagations     22
;  :conflicts               672
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1518
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              755
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            241073)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2021
;  :arith-add-rows          414
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      447
;  :arith-conflicts         333
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         323
;  :arith-pivots            544
;  :binary-propagations     22
;  :conflicts               672
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1518
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              756
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            241084)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2021
;  :arith-add-rows          415
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      448
;  :arith-conflicts         334
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         324
;  :arith-pivots            546
;  :binary-propagations     22
;  :conflicts               673
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1519
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              757
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            241192)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2026
;  :arith-add-rows          415
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      449
;  :arith-conflicts         335
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         325
;  :arith-pivots            546
;  :binary-propagations     22
;  :conflicts               674
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1521
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              758
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            241531)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2026
;  :arith-add-rows          415
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      449
;  :arith-conflicts         335
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         325
;  :arith-pivots            546
;  :binary-propagations     22
;  :conflicts               674
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1521
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              759
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            241542)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2026
;  :arith-add-rows          416
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      450
;  :arith-conflicts         336
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         326
;  :arith-pivots            549
;  :binary-propagations     22
;  :conflicts               675
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1522
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              760
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            241655)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2031
;  :arith-add-rows          416
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      451
;  :arith-conflicts         337
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         327
;  :arith-pivots            549
;  :binary-propagations     22
;  :conflicts               676
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1524
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              761
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            242004)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2031
;  :arith-add-rows          416
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      451
;  :arith-conflicts         337
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         327
;  :arith-pivots            549
;  :binary-propagations     22
;  :conflicts               676
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1524
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              762
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            242015)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2031
;  :arith-add-rows          417
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      452
;  :arith-conflicts         338
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         328
;  :arith-pivots            551
;  :binary-propagations     22
;  :conflicts               677
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1525
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              763
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            242123)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2036
;  :arith-add-rows          417
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      453
;  :arith-conflicts         339
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         329
;  :arith-pivots            551
;  :binary-propagations     22
;  :conflicts               678
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1527
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              764
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            242482)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2036
;  :arith-add-rows          417
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      453
;  :arith-conflicts         339
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         329
;  :arith-pivots            551
;  :binary-propagations     22
;  :conflicts               678
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1527
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              765
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            242493)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2036
;  :arith-add-rows          418
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      454
;  :arith-conflicts         340
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         330
;  :arith-pivots            554
;  :binary-propagations     22
;  :conflicts               679
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1528
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              766
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            242606)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2041
;  :arith-add-rows          418
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      455
;  :arith-conflicts         341
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         331
;  :arith-pivots            554
;  :binary-propagations     22
;  :conflicts               680
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1530
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              767
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            242975)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2041
;  :arith-add-rows          418
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      455
;  :arith-conflicts         341
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         331
;  :arith-pivots            554
;  :binary-propagations     22
;  :conflicts               680
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1530
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              768
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            242986)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2041
;  :arith-add-rows          419
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      456
;  :arith-conflicts         342
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         332
;  :arith-pivots            556
;  :binary-propagations     22
;  :conflicts               681
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1531
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              769
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            243094)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2046
;  :arith-add-rows          419
;  :arith-assert-diseq      60
;  :arith-assert-lower      208
;  :arith-assert-upper      457
;  :arith-conflicts         343
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         333
;  :arith-pivots            556
;  :binary-propagations     22
;  :conflicts               682
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1533
;  :mk-clause               196
;  :num-allocs              4502041
;  :num-checks              770
;  :propagations            189
;  :quant-instantiations    49
;  :rlimit-count            243473)
(declare-const $k@90@01 $Perm)
(assert ($Perm.isReadVar $k@90@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@90@01 $Perm.No) (< $Perm.No $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2046
;  :arith-add-rows          419
;  :arith-assert-diseq      61
;  :arith-assert-lower      210
;  :arith-assert-upper      458
;  :arith-conflicts         343
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         333
;  :arith-pivots            556
;  :binary-propagations     22
;  :conflicts               683
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1537
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              771
;  :propagations            190
;  :quant-instantiations    49
;  :rlimit-count            243672)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2046
;  :arith-add-rows          419
;  :arith-assert-diseq      61
;  :arith-assert-lower      210
;  :arith-assert-upper      458
;  :arith-conflicts         343
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         333
;  :arith-pivots            556
;  :binary-propagations     22
;  :conflicts               683
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1537
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              772
;  :propagations            190
;  :quant-instantiations    49
;  :rlimit-count            243683)
(declare-const $t@91@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@18@01 $k@79@01))
    (=
      $t@91@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@90@01)
    (=
      $t@91@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01)))
(assert (<= (+ (- $k@18@01 $k@79@01) $k@90@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2056
;  :arith-add-rows          419
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      460
;  :arith-conflicts         344
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         334
;  :arith-pivots            556
;  :binary-propagations     22
;  :conflicts               684
;  :datatype-accessor-ax    151
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1545
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              773
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            244632)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2056
;  :arith-add-rows          419
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      460
;  :arith-conflicts         344
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         334
;  :arith-pivots            556
;  :binary-propagations     22
;  :conflicts               684
;  :datatype-accessor-ax    151
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1545
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              774
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            244643)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2056
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      461
;  :arith-conflicts         345
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         335
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               685
;  :datatype-accessor-ax    151
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1546
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              775
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            244750)
(assert (not (= $t@91@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2062
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      462
;  :arith-conflicts         346
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         336
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               686
;  :datatype-accessor-ax    152
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1549
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              776
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            245194)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2062
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      462
;  :arith-conflicts         346
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         336
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               686
;  :datatype-accessor-ax    152
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1549
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              777
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            245205)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2062
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      463
;  :arith-conflicts         347
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         337
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               687
;  :datatype-accessor-ax    152
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1550
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              778
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            245286)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2067
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      464
;  :arith-conflicts         348
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         338
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               688
;  :datatype-accessor-ax    153
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1552
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              779
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            245695)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2067
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      464
;  :arith-conflicts         348
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         338
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               688
;  :datatype-accessor-ax    153
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1552
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              780
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            245706)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2067
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      465
;  :arith-conflicts         349
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         339
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               689
;  :datatype-accessor-ax    153
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1553
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              781
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            245787)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2072
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      466
;  :arith-conflicts         350
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         340
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               690
;  :datatype-accessor-ax    154
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1555
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              782
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            246206)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2072
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      466
;  :arith-conflicts         350
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         340
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               690
;  :datatype-accessor-ax    154
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1555
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              783
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            246217)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2072
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      467
;  :arith-conflicts         351
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         341
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               691
;  :datatype-accessor-ax    154
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1556
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              784
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            246298)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2077
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      468
;  :arith-conflicts         352
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         342
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               692
;  :datatype-accessor-ax    155
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1558
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              785
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            246727)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2077
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      468
;  :arith-conflicts         352
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         342
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               692
;  :datatype-accessor-ax    155
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1558
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              786
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            246738)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2077
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      469
;  :arith-conflicts         353
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         343
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               693
;  :datatype-accessor-ax    155
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1559
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              787
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            246819)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2082
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      470
;  :arith-conflicts         354
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         344
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               694
;  :datatype-accessor-ax    156
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1561
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              788
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            247258)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2082
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      470
;  :arith-conflicts         354
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         344
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               694
;  :datatype-accessor-ax    156
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1561
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              789
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            247269)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2082
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      471
;  :arith-conflicts         355
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         345
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               695
;  :datatype-accessor-ax    156
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1562
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              790
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            247350)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2087
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      472
;  :arith-conflicts         356
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         346
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               696
;  :datatype-accessor-ax    157
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1564
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              791
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            247799)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2087
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      472
;  :arith-conflicts         356
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         346
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               696
;  :datatype-accessor-ax    157
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1564
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              792
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            247810)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2087
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      473
;  :arith-conflicts         357
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         347
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               697
;  :datatype-accessor-ax    157
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1565
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              793
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            247891)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2092
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      474
;  :arith-conflicts         358
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         348
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               698
;  :datatype-accessor-ax    158
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1567
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              794
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            248350)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2092
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      474
;  :arith-conflicts         358
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         348
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               698
;  :datatype-accessor-ax    158
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1567
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              795
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            248361)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2092
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      475
;  :arith-conflicts         359
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         349
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               699
;  :datatype-accessor-ax    158
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1568
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              796
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            248442)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2097
;  :arith-add-rows          420
;  :arith-assert-diseq      61
;  :arith-assert-lower      211
;  :arith-assert-upper      476
;  :arith-conflicts         360
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         350
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               700
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1570
;  :mk-clause               198
;  :num-allocs              4502041
;  :num-checks              797
;  :propagations            190
;  :quant-instantiations    50
;  :rlimit-count            248911)
(declare-const $k@92@01 $Perm)
(assert ($Perm.isReadVar $k@92@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@92@01 $Perm.No) (< $Perm.No $k@92@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2097
;  :arith-add-rows          420
;  :arith-assert-diseq      62
;  :arith-assert-lower      213
;  :arith-assert-upper      477
;  :arith-conflicts         360
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         350
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               701
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1574
;  :mk-clause               200
;  :num-allocs              4502041
;  :num-checks              798
;  :propagations            191
;  :quant-instantiations    50
;  :rlimit-count            249109)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2097
;  :arith-add-rows          420
;  :arith-assert-diseq      62
;  :arith-assert-lower      213
;  :arith-assert-upper      477
;  :arith-conflicts         360
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         350
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               701
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1574
;  :mk-clause               200
;  :num-allocs              4502041
;  :num-checks              799
;  :propagations            191
;  :quant-instantiations    50
;  :rlimit-count            249120)
(declare-const $t@93@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@19@01 $k@80@01))
    (=
      $t@93@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@92@01)
    (=
      $t@93@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@19@01 $k@80@01) $k@92@01)))
(assert (<= (+ (- $k@19@01 $k@80@01) $k@92@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@19@01 $k@80@01) $k@92@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2107
;  :arith-add-rows          421
;  :arith-assert-diseq      62
;  :arith-assert-lower      214
;  :arith-assert-upper      479
;  :arith-conflicts         361
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         351
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               702
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1582
;  :mk-clause               200
;  :num-allocs              4502041
;  :num-checks              800
;  :propagations            191
;  :quant-instantiations    51
;  :rlimit-count            250244)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2107
;  :arith-add-rows          421
;  :arith-assert-diseq      62
;  :arith-assert-lower      214
;  :arith-assert-upper      479
;  :arith-conflicts         361
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         351
;  :arith-pivots            558
;  :binary-propagations     22
;  :conflicts               702
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1582
;  :mk-clause               200
;  :num-allocs              4502041
;  :num-checks              801
;  :propagations            191
;  :quant-instantiations    51
;  :rlimit-count            250255)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@80@01) $k@92@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2107
;  :arith-add-rows          421
;  :arith-assert-diseq      62
;  :arith-assert-lower      214
;  :arith-assert-upper      480
;  :arith-conflicts         362
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         352
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               703
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1583
;  :mk-clause               200
;  :num-allocs              4502041
;  :num-checks              802
;  :propagations            191
;  :quant-instantiations    51
;  :rlimit-count            250339)
(assert (not (= $t@93@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2113
;  :arith-add-rows          421
;  :arith-assert-diseq      62
;  :arith-assert-lower      214
;  :arith-assert-upper      481
;  :arith-conflicts         363
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         353
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               704
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1586
;  :mk-clause               200
;  :num-allocs              4502041
;  :num-checks              803
;  :propagations            191
;  :quant-instantiations    51
;  :rlimit-count            250873)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2113
;  :arith-add-rows          421
;  :arith-assert-diseq      62
;  :arith-assert-lower      214
;  :arith-assert-upper      481
;  :arith-conflicts         363
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         353
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               704
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1586
;  :mk-clause               200
;  :num-allocs              4502041
;  :num-checks              804
;  :propagations            191
;  :quant-instantiations    51
;  :rlimit-count            250884)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@80@01) $k@92@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2113
;  :arith-add-rows          421
;  :arith-assert-diseq      62
;  :arith-assert-lower      214
;  :arith-assert-upper      482
;  :arith-conflicts         364
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         354
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               705
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1587
;  :mk-clause               200
;  :num-allocs              4502041
;  :num-checks              805
;  :propagations            191
;  :quant-instantiations    51
;  :rlimit-count            250964)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2118
;  :arith-add-rows          421
;  :arith-assert-diseq      62
;  :arith-assert-lower      214
;  :arith-assert-upper      483
;  :arith-conflicts         365
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         355
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               706
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1589
;  :mk-clause               200
;  :num-allocs              4502041
;  :num-checks              806
;  :propagations            191
;  :quant-instantiations    51
;  :rlimit-count            251463)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2118
;  :arith-add-rows          421
;  :arith-assert-diseq      62
;  :arith-assert-lower      214
;  :arith-assert-upper      483
;  :arith-conflicts         365
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         355
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               706
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1589
;  :mk-clause               200
;  :num-allocs              4502041
;  :num-checks              807
;  :propagations            191
;  :quant-instantiations    51
;  :rlimit-count            251474)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@80@01) $k@92@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2118
;  :arith-add-rows          421
;  :arith-assert-diseq      62
;  :arith-assert-lower      214
;  :arith-assert-upper      484
;  :arith-conflicts         366
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         356
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               707
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1590
;  :mk-clause               200
;  :num-allocs              4502041
;  :num-checks              808
;  :propagations            191
;  :quant-instantiations    51
;  :rlimit-count            251554)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2123
;  :arith-add-rows          421
;  :arith-assert-diseq      62
;  :arith-assert-lower      214
;  :arith-assert-upper      485
;  :arith-conflicts         367
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         357
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               708
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1592
;  :mk-clause               200
;  :num-allocs              4502041
;  :num-checks              809
;  :propagations            191
;  :quant-instantiations    51
;  :rlimit-count            252063)
(declare-const $k@94@01 $Perm)
(assert ($Perm.isReadVar $k@94@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@94@01 $Perm.No) (< $Perm.No $k@94@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2123
;  :arith-add-rows          421
;  :arith-assert-diseq      63
;  :arith-assert-lower      216
;  :arith-assert-upper      486
;  :arith-conflicts         367
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         357
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               709
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1596
;  :mk-clause               202
;  :num-allocs              4502041
;  :num-checks              810
;  :propagations            192
;  :quant-instantiations    51
;  :rlimit-count            252262)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2123
;  :arith-add-rows          421
;  :arith-assert-diseq      63
;  :arith-assert-lower      216
;  :arith-assert-upper      486
;  :arith-conflicts         367
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         357
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               709
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1596
;  :mk-clause               202
;  :num-allocs              4502041
;  :num-checks              811
;  :propagations            192
;  :quant-instantiations    51
;  :rlimit-count            252273)
(declare-const $t@95@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@20@01 $k@81@01))
    (=
      $t@95@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@94@01)
    (=
      $t@95@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@20@01 $k@81@01) $k@94@01)))
(assert (<= (+ (- $k@20@01 $k@81@01) $k@94@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@20@01 $k@81@01) $k@94@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          421
;  :arith-assert-diseq      63
;  :arith-assert-lower      217
;  :arith-assert-upper      488
;  :arith-conflicts         368
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         358
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               710
;  :datatype-accessor-ax    164
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1604
;  :mk-clause               202
;  :num-allocs              4502041
;  :num-checks              812
;  :propagations            192
;  :quant-instantiations    52
;  :rlimit-count            253466)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          421
;  :arith-assert-diseq      63
;  :arith-assert-lower      217
;  :arith-assert-upper      488
;  :arith-conflicts         368
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         358
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               710
;  :datatype-accessor-ax    164
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1604
;  :mk-clause               202
;  :num-allocs              4502041
;  :num-checks              813
;  :propagations            192
;  :quant-instantiations    52
;  :rlimit-count            253477)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@20@01 $k@81@01) $k@94@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          422
;  :arith-assert-diseq      63
;  :arith-assert-lower      217
;  :arith-assert-upper      489
;  :arith-conflicts         369
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         359
;  :arith-pivots            561
;  :binary-propagations     22
;  :conflicts               711
;  :datatype-accessor-ax    164
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1605
;  :mk-clause               202
;  :num-allocs              4502041
;  :num-checks              814
;  :propagations            192
;  :quant-instantiations    52
;  :rlimit-count            253584)
(assert (not (= $t@95@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2139
;  :arith-add-rows          422
;  :arith-assert-diseq      63
;  :arith-assert-lower      217
;  :arith-assert-upper      490
;  :arith-conflicts         370
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         360
;  :arith-pivots            561
;  :binary-propagations     22
;  :conflicts               712
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1608
;  :mk-clause               202
;  :num-allocs              4502041
;  :num-checks              815
;  :propagations            192
;  :quant-instantiations    52
;  :rlimit-count            254158)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2139
;  :arith-add-rows          422
;  :arith-assert-diseq      63
;  :arith-assert-lower      217
;  :arith-assert-upper      490
;  :arith-conflicts         370
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         360
;  :arith-pivots            561
;  :binary-propagations     22
;  :conflicts               712
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1608
;  :mk-clause               202
;  :num-allocs              4502041
;  :num-checks              816
;  :propagations            192
;  :quant-instantiations    52
;  :rlimit-count            254169)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@20@01 $k@81@01) $k@94@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2139
;  :arith-add-rows          422
;  :arith-assert-diseq      63
;  :arith-assert-lower      217
;  :arith-assert-upper      491
;  :arith-conflicts         371
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         361
;  :arith-pivots            562
;  :binary-propagations     22
;  :conflicts               713
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1609
;  :mk-clause               202
;  :num-allocs              4502041
;  :num-checks              817
;  :propagations            192
;  :quant-instantiations    52
;  :rlimit-count            254257)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2144
;  :arith-add-rows          422
;  :arith-assert-diseq      63
;  :arith-assert-lower      217
;  :arith-assert-upper      492
;  :arith-conflicts         372
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         362
;  :arith-pivots            562
;  :binary-propagations     22
;  :conflicts               714
;  :datatype-accessor-ax    166
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1611
;  :mk-clause               202
;  :num-allocs              4502041
;  :num-checks              818
;  :propagations            192
;  :quant-instantiations    52
;  :rlimit-count            254796)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@86@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2144
;  :arith-add-rows          422
;  :arith-assert-diseq      63
;  :arith-assert-lower      217
;  :arith-assert-upper      492
;  :arith-conflicts         372
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         362
;  :arith-pivots            562
;  :binary-propagations     22
;  :conflicts               714
;  :datatype-accessor-ax    166
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1611
;  :mk-clause               202
;  :num-allocs              4502041
;  :num-checks              819
;  :propagations            192
;  :quant-instantiations    52
;  :rlimit-count            254807)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2144
;  :arith-add-rows          423
;  :arith-assert-diseq      63
;  :arith-assert-lower      217
;  :arith-assert-upper      493
;  :arith-conflicts         373
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         363
;  :arith-pivots            565
;  :binary-propagations     22
;  :conflicts               715
;  :datatype-accessor-ax    166
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1612
;  :mk-clause               202
;  :num-allocs              4502041
;  :num-checks              820
;  :propagations            192
;  :quant-instantiations    52
;  :rlimit-count            254920)
(declare-const $k@96@01 $Perm)
(assert ($Perm.isReadVar $k@96@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@96@01 $Perm.No) (< $Perm.No $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2144
;  :arith-add-rows          423
;  :arith-assert-diseq      64
;  :arith-assert-lower      219
;  :arith-assert-upper      494
;  :arith-conflicts         373
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         363
;  :arith-pivots            565
;  :binary-propagations     22
;  :conflicts               716
;  :datatype-accessor-ax    166
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1616
;  :mk-clause               204
;  :num-allocs              4502041
;  :num-checks              821
;  :propagations            193
;  :quant-instantiations    52
;  :rlimit-count            255118)
(set-option :timeout 10)
(push) ; 5
(assert (not (= diz@7@01 $t@89@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2144
;  :arith-add-rows          423
;  :arith-assert-diseq      64
;  :arith-assert-lower      219
;  :arith-assert-upper      494
;  :arith-conflicts         373
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         363
;  :arith-pivots            565
;  :binary-propagations     22
;  :conflicts               716
;  :datatype-accessor-ax    166
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1616
;  :mk-clause               204
;  :num-allocs              4502041
;  :num-checks              822
;  :propagations            193
;  :quant-instantiations    52
;  :rlimit-count            255129)
(declare-const $t@97@01 $Ref)
(assert (and
  (implies (< $Perm.No (+ (- $k@15@01 $k@76@01) $k@85@01)) (= $t@97@01 $t@86@01))
  (implies
    (< $Perm.No $k@96@01)
    (=
      $t@97@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01)))
(assert (<= (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2152
;  :arith-add-rows          426
;  :arith-assert-diseq      64
;  :arith-assert-lower      220
;  :arith-assert-upper      496
;  :arith-conflicts         374
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         364
;  :arith-pivots            567
;  :binary-propagations     22
;  :conflicts               717
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1625
;  :mk-clause               205
;  :num-allocs              4502041
;  :num-checks              823
;  :propagations            193
;  :quant-instantiations    53
;  :rlimit-count            256063)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2153
;  :arith-add-rows          427
;  :arith-assert-diseq      64
;  :arith-assert-lower      220
;  :arith-assert-upper      497
;  :arith-conflicts         375
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         365
;  :arith-pivots            568
;  :binary-propagations     22
;  :conflicts               718
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1626
;  :mk-clause               205
;  :num-allocs              4502041
;  :num-checks              824
;  :propagations            194
;  :quant-instantiations    53
;  :rlimit-count            256153)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2153
;  :arith-add-rows          428
;  :arith-assert-diseq      64
;  :arith-assert-lower      220
;  :arith-assert-upper      498
;  :arith-conflicts         376
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         366
;  :arith-pivots            570
;  :binary-propagations     22
;  :conflicts               719
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1627
;  :mk-clause               205
;  :num-allocs              4502041
;  :num-checks              825
;  :propagations            194
;  :quant-instantiations    53
;  :rlimit-count            256261)
(push) ; 5
(assert (not (= diz@7@01 $t@89@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2153
;  :arith-add-rows          428
;  :arith-assert-diseq      64
;  :arith-assert-lower      220
;  :arith-assert-upper      498
;  :arith-conflicts         376
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         366
;  :arith-pivots            570
;  :binary-propagations     22
;  :conflicts               719
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1627
;  :mk-clause               205
;  :num-allocs              4502041
;  :num-checks              826
;  :propagations            194
;  :quant-instantiations    53
;  :rlimit-count            256272)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2153
;  :arith-add-rows          429
;  :arith-assert-diseq      64
;  :arith-assert-lower      220
;  :arith-assert-upper      499
;  :arith-conflicts         377
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         367
;  :arith-pivots            571
;  :binary-propagations     22
;  :conflicts               720
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1628
;  :mk-clause               205
;  :num-allocs              4502041
;  :num-checks              827
;  :propagations            194
;  :quant-instantiations    53
;  :rlimit-count            256375)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2153
;  :arith-add-rows          429
;  :arith-assert-diseq      64
;  :arith-assert-lower      220
;  :arith-assert-upper      500
;  :arith-conflicts         378
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         368
;  :arith-pivots            571
;  :binary-propagations     22
;  :conflicts               721
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1629
;  :mk-clause               205
;  :num-allocs              4502041
;  :num-checks              828
;  :propagations            194
;  :quant-instantiations    53
;  :rlimit-count            256460)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2155
;  :arith-add-rows          429
;  :arith-assert-diseq      64
;  :arith-assert-lower      220
;  :arith-assert-upper      501
;  :arith-conflicts         379
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         369
;  :arith-pivots            571
;  :binary-propagations     22
;  :conflicts               722
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1631
;  :mk-clause               205
;  :num-allocs              4502041
;  :num-checks              829
;  :propagations            194
;  :quant-instantiations    53
;  :rlimit-count            256963)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2156
;  :arith-add-rows          430
;  :arith-assert-diseq      64
;  :arith-assert-lower      220
;  :arith-assert-upper      502
;  :arith-conflicts         380
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         370
;  :arith-pivots            572
;  :binary-propagations     22
;  :conflicts               723
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1632
;  :mk-clause               205
;  :num-allocs              4502041
;  :num-checks              830
;  :propagations            195
;  :quant-instantiations    53
;  :rlimit-count            257053)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2156
;  :arith-add-rows          431
;  :arith-assert-diseq      64
;  :arith-assert-lower      220
;  :arith-assert-upper      503
;  :arith-conflicts         381
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         371
;  :arith-pivots            575
;  :binary-propagations     22
;  :conflicts               724
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 448
;  :datatype-occurs-check   31
;  :datatype-splits         224
;  :decisions               437
;  :del-clause              178
;  :final-checks            25
;  :max-generation          1
;  :max-memory              4.47
;  :memory                  4.47
;  :mk-bool-var             1633
;  :mk-clause               205
;  :num-allocs              4502041
;  :num-checks              831
;  :propagations            195
;  :quant-instantiations    53
;  :rlimit-count            257166)
(assert (= $t@89@01 diz@7@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; var__28 := var__28 + __flatten_7__33
; [eval] var__28 + __flatten_7__33
(declare-const var__28@98@01 Int)
(assert (= var__28@98@01 (+ __var@9@01 sys__result@83@01)))
; [exec]
; sys__local__result__26 := var__28
; [exec]
; // assert
; assert acc(diz.Rng_m, wildcard) && diz.Rng_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.Rng_m, __globals), write) && (true && (true && acc(diz.Rng_m.Main_process_state, write) && |diz.Rng_m.Main_process_state| == 3 && acc(diz.Rng_m.Main_event_state, write) && |diz.Rng_m.Main_event_state| == 6 && (forall i__35: Int :: { diz.Rng_m.Main_process_state[i__35] } 0 <= i__35 && i__35 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__35] == -1 || 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|)) && acc(diz.Rng_m.Main_rn, wildcard) && diz.Rng_m.Main_rn != null && acc(diz.Rng_m.Main_rn.Rng_clk, write) && acc(diz.Rng_m.Main_rn.Rng_reset, write) && acc(diz.Rng_m.Main_rn.Rng_loadseed_i, write) && acc(diz.Rng_m.Main_rn.Rng_seed_i, write) && acc(diz.Rng_m.Main_rn.Rng_number_o, write) && acc(diz.Rng_m.Main_rn.Rng_LFSR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_CASR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_result, write) && acc(diz.Rng_m.Main_rn.Rng_i, write) && acc(diz.Rng_m.Main_rn.Rng_aux, write) && acc(diz.Rng_m.Main_rn_casr, wildcard) && diz.Rng_m.Main_rn_casr != null && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_var, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_out, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_i, write) && acc(diz.Rng_m.Main_rn_lfsr, wildcard) && diz.Rng_m.Main_rn_lfsr != null && acc(diz.Rng_m.Main_rn_lfsr.LFSR_LFSR_var, write) && acc(diz.Rng_m.Main_rn_lfsr.LFSR_outbit, write) && acc(diz.Rng_m.Main_rn_combinate, wildcard) && diz.Rng_m.Main_rn_combinate != null && acc(diz.Rng_m.Main_rn_combinate.Combinate_i, write) && acc(diz.Rng_m.Main_rn.Rng_m, wildcard) && diz.Rng_m.Main_rn.Rng_m == diz.Rng_m) && diz.Rng_m.Main_rn == diz
(declare-const $k@99@01 $Perm)
(assert ($Perm.isReadVar $k@99@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@99@01 $Perm.No) (< $Perm.No $k@99@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2394
;  :arith-add-rows          431
;  :arith-assert-diseq      65
;  :arith-assert-lower      223
;  :arith-assert-upper      505
;  :arith-conflicts         381
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         371
;  :arith-pivots            576
;  :binary-propagations     22
;  :conflicts               726
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              202
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1695
;  :mk-clause               211
;  :num-allocs              4727468
;  :num-checks              833
;  :propagations            199
;  :quant-instantiations    53
;  :rlimit-count            259052)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2395
;  :arith-add-rows          432
;  :arith-assert-diseq      65
;  :arith-assert-lower      223
;  :arith-assert-upper      506
;  :arith-conflicts         382
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         371
;  :arith-pivots            577
;  :binary-propagations     22
;  :conflicts               727
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1697
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              834
;  :propagations            200
;  :quant-instantiations    53
;  :rlimit-count            259157)
(assert (< $k@99@01 (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01)))
(assert (<= $Perm.No (- (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01) $k@99@01)))
(assert (<= (- (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01) $k@99@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01) $k@99@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2395
;  :arith-add-rows          434
;  :arith-assert-diseq      65
;  :arith-assert-lower      225
;  :arith-assert-upper      508
;  :arith-conflicts         383
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         372
;  :arith-pivots            577
;  :binary-propagations     22
;  :conflicts               728
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1701
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              835
;  :propagations            200
;  :quant-instantiations    53
;  :rlimit-count            259435)
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= $t@97@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2397
;  :arith-add-rows          435
;  :arith-assert-diseq      65
;  :arith-assert-lower      225
;  :arith-assert-upper      509
;  :arith-conflicts         384
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         373
;  :arith-pivots            578
;  :binary-propagations     22
;  :conflicts               729
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1702
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              836
;  :propagations            201
;  :quant-instantiations    53
;  :rlimit-count            259511)
(assert (not (= $t@97@01 $Ref.null)))
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2397
;  :arith-add-rows          436
;  :arith-assert-diseq      65
;  :arith-assert-lower      225
;  :arith-assert-upper      510
;  :arith-conflicts         385
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         374
;  :arith-pivots            579
;  :binary-propagations     22
;  :conflicts               730
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1704
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              837
;  :propagations            201
;  :quant-instantiations    53
;  :rlimit-count            259672)
(push) ; 5
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2398
;  :arith-add-rows          437
;  :arith-assert-diseq      65
;  :arith-assert-lower      225
;  :arith-assert-upper      511
;  :arith-conflicts         386
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         375
;  :arith-pivots            580
;  :binary-propagations     22
;  :conflicts               731
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1705
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              838
;  :propagations            202
;  :quant-instantiations    53
;  :rlimit-count            259762)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2398
;  :arith-add-rows          438
;  :arith-assert-diseq      65
;  :arith-assert-lower      225
;  :arith-assert-upper      512
;  :arith-conflicts         387
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         376
;  :arith-pivots            581
;  :binary-propagations     22
;  :conflicts               732
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1706
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              839
;  :propagations            202
;  :quant-instantiations    53
;  :rlimit-count            259868)
(push) ; 5
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2399
;  :arith-add-rows          439
;  :arith-assert-diseq      65
;  :arith-assert-lower      225
;  :arith-assert-upper      513
;  :arith-conflicts         388
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         377
;  :arith-pivots            582
;  :binary-propagations     22
;  :conflicts               733
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1707
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              840
;  :propagations            203
;  :quant-instantiations    53
;  :rlimit-count            259958)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2399
;  :arith-add-rows          440
;  :arith-assert-diseq      65
;  :arith-assert-lower      225
;  :arith-assert-upper      514
;  :arith-conflicts         389
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         378
;  :arith-pivots            583
;  :binary-propagations     22
;  :conflicts               734
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1708
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              841
;  :propagations            203
;  :quant-instantiations    53
;  :rlimit-count            260064)
(push) ; 5
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2400
;  :arith-add-rows          441
;  :arith-assert-diseq      65
;  :arith-assert-lower      225
;  :arith-assert-upper      515
;  :arith-conflicts         390
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         379
;  :arith-pivots            584
;  :binary-propagations     22
;  :conflicts               735
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1709
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              842
;  :propagations            204
;  :quant-instantiations    53
;  :rlimit-count            260154)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2400
;  :arith-add-rows          442
;  :arith-assert-diseq      65
;  :arith-assert-lower      225
;  :arith-assert-upper      516
;  :arith-conflicts         391
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         380
;  :arith-pivots            585
;  :binary-propagations     22
;  :conflicts               736
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1710
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              843
;  :propagations            204
;  :quant-instantiations    53
;  :rlimit-count            260260)
(push) ; 5
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2401
;  :arith-add-rows          443
;  :arith-assert-diseq      65
;  :arith-assert-lower      225
;  :arith-assert-upper      517
;  :arith-conflicts         392
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         381
;  :arith-pivots            586
;  :binary-propagations     22
;  :conflicts               737
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1711
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              844
;  :propagations            205
;  :quant-instantiations    53
;  :rlimit-count            260350)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2401
;  :arith-add-rows          444
;  :arith-assert-diseq      65
;  :arith-assert-lower      225
;  :arith-assert-upper      518
;  :arith-conflicts         393
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         382
;  :arith-pivots            587
;  :binary-propagations     22
;  :conflicts               738
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1712
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              845
;  :propagations            205
;  :quant-instantiations    53
;  :rlimit-count            260456)
(push) ; 5
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2402
;  :arith-add-rows          445
;  :arith-assert-diseq      65
;  :arith-assert-lower      225
;  :arith-assert-upper      519
;  :arith-conflicts         394
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         383
;  :arith-pivots            588
;  :binary-propagations     22
;  :conflicts               739
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1713
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              846
;  :propagations            206
;  :quant-instantiations    53
;  :rlimit-count            260546)
; [eval] (forall i__35: Int :: { diz.Rng_m.Main_process_state[i__35] } 0 <= i__35 && i__35 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__35] == -1 || 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|)
(declare-const i__35@100@01 Int)
(push) ; 5
; [eval] 0 <= i__35 && i__35 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__35] == -1 || 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i__35 && i__35 < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i__35
(push) ; 6
; [then-branch: 35 | 0 <= i__35@100@01 | live]
; [else-branch: 35 | !(0 <= i__35@100@01) | live]
(push) ; 7
; [then-branch: 35 | 0 <= i__35@100@01]
(assert (<= 0 i__35@100@01))
; [eval] i__35 < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 8
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2402
;  :arith-add-rows          446
;  :arith-assert-diseq      65
;  :arith-assert-lower      226
;  :arith-assert-upper      520
;  :arith-conflicts         395
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         384
;  :arith-pivots            589
;  :binary-propagations     22
;  :conflicts               740
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1715
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              847
;  :propagations            206
;  :quant-instantiations    53
;  :rlimit-count            260705)
(push) ; 8
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2403
;  :arith-add-rows          447
;  :arith-assert-diseq      65
;  :arith-assert-lower      226
;  :arith-assert-upper      521
;  :arith-conflicts         396
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         385
;  :arith-pivots            590
;  :binary-propagations     22
;  :conflicts               741
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1716
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              848
;  :propagations            207
;  :quant-instantiations    53
;  :rlimit-count            260795)
(pop) ; 7
(push) ; 7
; [else-branch: 35 | !(0 <= i__35@100@01)]
(assert (not (<= 0 i__35@100@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 36 | i__35@100@01 < |First:(Second:(Second:(Second:($t@84@01))))| && 0 <= i__35@100@01 | live]
; [else-branch: 36 | !(i__35@100@01 < |First:(Second:(Second:(Second:($t@84@01))))| && 0 <= i__35@100@01) | live]
(push) ; 7
; [then-branch: 36 | i__35@100@01 < |First:(Second:(Second:(Second:($t@84@01))))| && 0 <= i__35@100@01]
(assert (and
  (<
    i__35@100@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
  (<= 0 i__35@100@01)))
; [eval] diz.Rng_m.Main_process_state[i__35] == -1 || 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__35] == -1
; [eval] diz.Rng_m.Main_process_state[i__35]
(push) ; 8
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2403
;  :arith-add-rows          448
;  :arith-assert-diseq      65
;  :arith-assert-lower      227
;  :arith-assert-upper      523
;  :arith-conflicts         397
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         386
;  :arith-pivots            591
;  :binary-propagations     22
;  :conflicts               742
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1719
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              849
;  :propagations            207
;  :quant-instantiations    53
;  :rlimit-count            261010)
(push) ; 8
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2404
;  :arith-add-rows          449
;  :arith-assert-diseq      65
;  :arith-assert-lower      227
;  :arith-assert-upper      524
;  :arith-conflicts         398
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         387
;  :arith-pivots            592
;  :binary-propagations     22
;  :conflicts               743
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1720
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              850
;  :propagations            208
;  :quant-instantiations    53
;  :rlimit-count            261100)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i__35@100@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2404
;  :arith-add-rows          449
;  :arith-assert-diseq      65
;  :arith-assert-lower      227
;  :arith-assert-upper      524
;  :arith-conflicts         398
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         387
;  :arith-pivots            592
;  :binary-propagations     22
;  :conflicts               743
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1720
;  :mk-clause               213
;  :num-allocs              4727468
;  :num-checks              851
;  :propagations            208
;  :quant-instantiations    53
;  :rlimit-count            261109)
; [eval] -1
(push) ; 8
; [then-branch: 37 | First:(Second:(Second:(Second:($t@84@01))))[i__35@100@01] == -1 | live]
; [else-branch: 37 | First:(Second:(Second:(Second:($t@84@01))))[i__35@100@01] != -1 | live]
(push) ; 9
; [then-branch: 37 | First:(Second:(Second:(Second:($t@84@01))))[i__35@100@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    i__35@100@01)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 37 | First:(Second:(Second:(Second:($t@84@01))))[i__35@100@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
      i__35@100@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i__35]
; [eval] diz.Rng_m.Main_process_state[i__35]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2404
;  :arith-add-rows          450
;  :arith-assert-diseq      66
;  :arith-assert-lower      230
;  :arith-assert-upper      526
;  :arith-conflicts         399
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         388
;  :arith-pivots            593
;  :binary-propagations     22
;  :conflicts               744
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1727
;  :mk-clause               217
;  :num-allocs              4727468
;  :num-checks              852
;  :propagations            210
;  :quant-instantiations    54
;  :rlimit-count            261438)
(push) ; 10
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2405
;  :arith-add-rows          451
;  :arith-assert-diseq      66
;  :arith-assert-lower      230
;  :arith-assert-upper      527
;  :arith-conflicts         400
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         389
;  :arith-pivots            594
;  :binary-propagations     22
;  :conflicts               745
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1728
;  :mk-clause               217
;  :num-allocs              4727468
;  :num-checks              853
;  :propagations            211
;  :quant-instantiations    54
;  :rlimit-count            261528)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__35@100@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2405
;  :arith-add-rows          451
;  :arith-assert-diseq      66
;  :arith-assert-lower      230
;  :arith-assert-upper      527
;  :arith-conflicts         400
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         389
;  :arith-pivots            594
;  :binary-propagations     22
;  :conflicts               745
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1728
;  :mk-clause               217
;  :num-allocs              4727468
;  :num-checks              854
;  :propagations            211
;  :quant-instantiations    54
;  :rlimit-count            261537)
(push) ; 10
; [then-branch: 38 | 0 <= First:(Second:(Second:(Second:($t@84@01))))[i__35@100@01] | live]
; [else-branch: 38 | !(0 <= First:(Second:(Second:(Second:($t@84@01))))[i__35@100@01]) | live]
(push) ; 11
; [then-branch: 38 | 0 <= First:(Second:(Second:(Second:($t@84@01))))[i__35@100@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    i__35@100@01)))
; [eval] diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__35]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2405
;  :arith-add-rows          452
;  :arith-assert-diseq      66
;  :arith-assert-lower      230
;  :arith-assert-upper      528
;  :arith-conflicts         401
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         390
;  :arith-pivots            595
;  :binary-propagations     22
;  :conflicts               746
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1729
;  :mk-clause               217
;  :num-allocs              4727468
;  :num-checks              855
;  :propagations            211
;  :quant-instantiations    54
;  :rlimit-count            261748)
(push) ; 12
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2406
;  :arith-add-rows          453
;  :arith-assert-diseq      66
;  :arith-assert-lower      230
;  :arith-assert-upper      529
;  :arith-conflicts         402
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         391
;  :arith-pivots            596
;  :binary-propagations     22
;  :conflicts               747
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1730
;  :mk-clause               217
;  :num-allocs              4727468
;  :num-checks              856
;  :propagations            212
;  :quant-instantiations    54
;  :rlimit-count            261838)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__35@100@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2406
;  :arith-add-rows          453
;  :arith-assert-diseq      66
;  :arith-assert-lower      230
;  :arith-assert-upper      529
;  :arith-conflicts         402
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         391
;  :arith-pivots            596
;  :binary-propagations     22
;  :conflicts               747
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1730
;  :mk-clause               217
;  :num-allocs              4727468
;  :num-checks              857
;  :propagations            212
;  :quant-instantiations    54
;  :rlimit-count            261847)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2406
;  :arith-add-rows          454
;  :arith-assert-diseq      66
;  :arith-assert-lower      230
;  :arith-assert-upper      530
;  :arith-conflicts         403
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         392
;  :arith-pivots            597
;  :binary-propagations     22
;  :conflicts               748
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1731
;  :mk-clause               217
;  :num-allocs              4727468
;  :num-checks              858
;  :propagations            212
;  :quant-instantiations    54
;  :rlimit-count            261953)
(push) ; 12
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2407
;  :arith-add-rows          455
;  :arith-assert-diseq      66
;  :arith-assert-lower      230
;  :arith-assert-upper      531
;  :arith-conflicts         404
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         393
;  :arith-pivots            598
;  :binary-propagations     22
;  :conflicts               749
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              204
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1732
;  :mk-clause               217
;  :num-allocs              4727468
;  :num-checks              859
;  :propagations            213
;  :quant-instantiations    54
;  :rlimit-count            262043)
(pop) ; 11
(push) ; 11
; [else-branch: 38 | !(0 <= First:(Second:(Second:(Second:($t@84@01))))[i__35@100@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
      i__35@100@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 36 | !(i__35@100@01 < |First:(Second:(Second:(Second:($t@84@01))))| && 0 <= i__35@100@01)]
(assert (not
  (and
    (<
      i__35@100@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
    (<= 0 i__35@100@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((i__35@100@01 Int)) (!
  (implies
    (and
      (<
        i__35@100@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
      (<= 0 i__35@100@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
          i__35@100@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
            i__35@100@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
            i__35@100@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    i__35@100@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2407
;  :arith-add-rows          455
;  :arith-assert-diseq      67
;  :arith-assert-lower      231
;  :arith-assert-upper      532
;  :arith-conflicts         404
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         393
;  :arith-pivots            598
;  :binary-propagations     22
;  :conflicts               750
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              220
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1740
;  :mk-clause               229
;  :num-allocs              4727468
;  :num-checks              860
;  :propagations            215
;  :quant-instantiations    55
;  :rlimit-count            262489)
(assert (forall ((i__35@100@01 Int)) (!
  (implies
    (and
      (<
        i__35@100@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
      (<= 0 i__35@100@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
          i__35@100@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
            i__35@100@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
            i__35@100@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    i__35@100@01))
  :qid |prog.l<no position>|)))
(declare-const $k@101@01 $Perm)
(assert ($Perm.isReadVar $k@101@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2407
;  :arith-add-rows          456
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      534
;  :arith-conflicts         405
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         394
;  :arith-pivots            599
;  :binary-propagations     22
;  :conflicts               751
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              220
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1746
;  :mk-clause               231
;  :num-allocs              4727468
;  :num-checks              861
;  :propagations            216
;  :quant-instantiations    55
;  :rlimit-count            263106)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@101@01 $Perm.No) (< $Perm.No $k@101@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2407
;  :arith-add-rows          456
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      534
;  :arith-conflicts         405
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         394
;  :arith-pivots            599
;  :binary-propagations     22
;  :conflicts               752
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              220
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1746
;  :mk-clause               231
;  :num-allocs              4727468
;  :num-checks              862
;  :propagations            216
;  :quant-instantiations    55
;  :rlimit-count            263156)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2408
;  :arith-add-rows          457
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      535
;  :arith-conflicts         406
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         395
;  :arith-pivots            600
;  :binary-propagations     22
;  :conflicts               753
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              220
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1747
;  :mk-clause               231
;  :num-allocs              4727468
;  :num-checks              863
;  :propagations            217
;  :quant-instantiations    55
;  :rlimit-count            263246)
(push) ; 5
(assert (not (not (= (+ (- $k@17@01 $k@78@01) $k@88@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2409
;  :arith-add-rows          458
;  :arith-assert-diseq      68
;  :arith-assert-lower      233
;  :arith-assert-upper      536
;  :arith-conflicts         407
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         395
;  :arith-pivots            602
;  :binary-propagations     22
;  :conflicts               754
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1749
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              864
;  :propagations            218
;  :quant-instantiations    55
;  :rlimit-count            263354)
(assert (< $k@101@01 (+ (- $k@17@01 $k@78@01) $k@88@01)))
(assert (<= $Perm.No (- (+ (- $k@17@01 $k@78@01) $k@88@01) $k@101@01)))
(assert (<= (- (+ (- $k@17@01 $k@78@01) $k@88@01) $k@101@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@17@01 $k@78@01) $k@88@01) $k@101@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2409
;  :arith-add-rows          460
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      538
;  :arith-conflicts         408
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         396
;  :arith-pivots            603
;  :binary-propagations     22
;  :conflicts               755
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1753
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              865
;  :propagations            218
;  :quant-instantiations    55
;  :rlimit-count            263647)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2410
;  :arith-add-rows          461
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      539
;  :arith-conflicts         409
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         397
;  :arith-pivots            604
;  :binary-propagations     22
;  :conflicts               756
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1754
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              866
;  :propagations            219
;  :quant-instantiations    55
;  :rlimit-count            263737)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2410
;  :arith-add-rows          462
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      540
;  :arith-conflicts         410
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         398
;  :arith-pivots            607
;  :binary-propagations     22
;  :conflicts               757
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1755
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              867
;  :propagations            219
;  :quant-instantiations    55
;  :rlimit-count            263851)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2410
;  :arith-add-rows          463
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      541
;  :arith-conflicts         411
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         399
;  :arith-pivots            608
;  :binary-propagations     22
;  :conflicts               758
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1756
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              868
;  :propagations            219
;  :quant-instantiations    55
;  :rlimit-count            263957)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2411
;  :arith-add-rows          464
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      542
;  :arith-conflicts         412
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         400
;  :arith-pivots            609
;  :binary-propagations     22
;  :conflicts               759
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1757
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              869
;  :propagations            220
;  :quant-instantiations    55
;  :rlimit-count            264047)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2411
;  :arith-add-rows          465
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      543
;  :arith-conflicts         413
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         401
;  :arith-pivots            611
;  :binary-propagations     22
;  :conflicts               760
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1758
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              870
;  :propagations            220
;  :quant-instantiations    55
;  :rlimit-count            264156)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2411
;  :arith-add-rows          466
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      544
;  :arith-conflicts         414
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         402
;  :arith-pivots            612
;  :binary-propagations     22
;  :conflicts               761
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1759
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              871
;  :propagations            220
;  :quant-instantiations    55
;  :rlimit-count            264262)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2412
;  :arith-add-rows          467
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      545
;  :arith-conflicts         415
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         403
;  :arith-pivots            613
;  :binary-propagations     22
;  :conflicts               762
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1760
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              872
;  :propagations            221
;  :quant-instantiations    55
;  :rlimit-count            264352)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2412
;  :arith-add-rows          468
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      546
;  :arith-conflicts         416
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         404
;  :arith-pivots            616
;  :binary-propagations     22
;  :conflicts               763
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1761
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              873
;  :propagations            221
;  :quant-instantiations    55
;  :rlimit-count            264466)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2412
;  :arith-add-rows          469
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      547
;  :arith-conflicts         417
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         405
;  :arith-pivots            617
;  :binary-propagations     22
;  :conflicts               764
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1762
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              874
;  :propagations            221
;  :quant-instantiations    55
;  :rlimit-count            264572)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2413
;  :arith-add-rows          470
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      548
;  :arith-conflicts         418
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         406
;  :arith-pivots            618
;  :binary-propagations     22
;  :conflicts               765
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1763
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              875
;  :propagations            222
;  :quant-instantiations    55
;  :rlimit-count            264662)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2413
;  :arith-add-rows          471
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      549
;  :arith-conflicts         419
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         407
;  :arith-pivots            620
;  :binary-propagations     22
;  :conflicts               766
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1764
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              876
;  :propagations            222
;  :quant-instantiations    55
;  :rlimit-count            264771)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2413
;  :arith-add-rows          472
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      550
;  :arith-conflicts         420
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         408
;  :arith-pivots            621
;  :binary-propagations     22
;  :conflicts               767
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1765
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              877
;  :propagations            222
;  :quant-instantiations    55
;  :rlimit-count            264877)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2414
;  :arith-add-rows          473
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      551
;  :arith-conflicts         421
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         409
;  :arith-pivots            622
;  :binary-propagations     22
;  :conflicts               768
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1766
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              878
;  :propagations            223
;  :quant-instantiations    55
;  :rlimit-count            264967)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2414
;  :arith-add-rows          474
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      552
;  :arith-conflicts         422
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         410
;  :arith-pivots            625
;  :binary-propagations     22
;  :conflicts               769
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1767
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              879
;  :propagations            223
;  :quant-instantiations    55
;  :rlimit-count            265081)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2414
;  :arith-add-rows          475
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      553
;  :arith-conflicts         423
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         411
;  :arith-pivots            626
;  :binary-propagations     22
;  :conflicts               770
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1768
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              880
;  :propagations            223
;  :quant-instantiations    55
;  :rlimit-count            265187)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2415
;  :arith-add-rows          476
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      554
;  :arith-conflicts         424
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         412
;  :arith-pivots            627
;  :binary-propagations     22
;  :conflicts               771
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1769
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              881
;  :propagations            224
;  :quant-instantiations    55
;  :rlimit-count            265277)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2415
;  :arith-add-rows          477
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      555
;  :arith-conflicts         425
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         413
;  :arith-pivots            629
;  :binary-propagations     22
;  :conflicts               772
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1770
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              882
;  :propagations            224
;  :quant-instantiations    55
;  :rlimit-count            265386)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2415
;  :arith-add-rows          478
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      556
;  :arith-conflicts         426
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         414
;  :arith-pivots            630
;  :binary-propagations     22
;  :conflicts               773
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1771
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              883
;  :propagations            224
;  :quant-instantiations    55
;  :rlimit-count            265492)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2416
;  :arith-add-rows          479
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      557
;  :arith-conflicts         427
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         415
;  :arith-pivots            631
;  :binary-propagations     22
;  :conflicts               774
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1772
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              884
;  :propagations            225
;  :quant-instantiations    55
;  :rlimit-count            265582)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2416
;  :arith-add-rows          480
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      558
;  :arith-conflicts         428
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         416
;  :arith-pivots            634
;  :binary-propagations     22
;  :conflicts               775
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1773
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              885
;  :propagations            225
;  :quant-instantiations    55
;  :rlimit-count            265696)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2416
;  :arith-add-rows          481
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      559
;  :arith-conflicts         429
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         417
;  :arith-pivots            635
;  :binary-propagations     22
;  :conflicts               776
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1774
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              886
;  :propagations            225
;  :quant-instantiations    55
;  :rlimit-count            265802)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2417
;  :arith-add-rows          482
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      560
;  :arith-conflicts         430
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         418
;  :arith-pivots            636
;  :binary-propagations     22
;  :conflicts               777
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1775
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              887
;  :propagations            226
;  :quant-instantiations    55
;  :rlimit-count            265892)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2417
;  :arith-add-rows          483
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      561
;  :arith-conflicts         431
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         419
;  :arith-pivots            638
;  :binary-propagations     22
;  :conflicts               778
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1776
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              888
;  :propagations            226
;  :quant-instantiations    55
;  :rlimit-count            266001)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2417
;  :arith-add-rows          484
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      562
;  :arith-conflicts         432
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         420
;  :arith-pivots            639
;  :binary-propagations     22
;  :conflicts               779
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1777
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              889
;  :propagations            226
;  :quant-instantiations    55
;  :rlimit-count            266107)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2418
;  :arith-add-rows          485
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      563
;  :arith-conflicts         433
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         421
;  :arith-pivots            640
;  :binary-propagations     22
;  :conflicts               780
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1778
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              890
;  :propagations            227
;  :quant-instantiations    55
;  :rlimit-count            266197)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2418
;  :arith-add-rows          486
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      564
;  :arith-conflicts         434
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         422
;  :arith-pivots            643
;  :binary-propagations     22
;  :conflicts               781
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1779
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              891
;  :propagations            227
;  :quant-instantiations    55
;  :rlimit-count            266311)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2418
;  :arith-add-rows          487
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      565
;  :arith-conflicts         435
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         423
;  :arith-pivots            644
;  :binary-propagations     22
;  :conflicts               782
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1780
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              892
;  :propagations            227
;  :quant-instantiations    55
;  :rlimit-count            266417)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2419
;  :arith-add-rows          488
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      566
;  :arith-conflicts         436
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         424
;  :arith-pivots            645
;  :binary-propagations     22
;  :conflicts               783
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1781
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              893
;  :propagations            228
;  :quant-instantiations    55
;  :rlimit-count            266507)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2419
;  :arith-add-rows          489
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      567
;  :arith-conflicts         437
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         425
;  :arith-pivots            647
;  :binary-propagations     22
;  :conflicts               784
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1782
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              894
;  :propagations            228
;  :quant-instantiations    55
;  :rlimit-count            266616)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2419
;  :arith-add-rows          490
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      568
;  :arith-conflicts         438
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         426
;  :arith-pivots            648
;  :binary-propagations     22
;  :conflicts               785
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1783
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              895
;  :propagations            228
;  :quant-instantiations    55
;  :rlimit-count            266722)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2420
;  :arith-add-rows          491
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      569
;  :arith-conflicts         439
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         427
;  :arith-pivots            649
;  :binary-propagations     22
;  :conflicts               786
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1784
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              896
;  :propagations            229
;  :quant-instantiations    55
;  :rlimit-count            266812)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2420
;  :arith-add-rows          492
;  :arith-assert-diseq      68
;  :arith-assert-lower      235
;  :arith-assert-upper      570
;  :arith-conflicts         440
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         428
;  :arith-pivots            652
;  :binary-propagations     22
;  :conflicts               787
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1785
;  :mk-clause               233
;  :num-allocs              4727468
;  :num-checks              897
;  :propagations            229
;  :quant-instantiations    55
;  :rlimit-count            266926
;  :time                    0.00)
(declare-const $k@102@01 $Perm)
(assert ($Perm.isReadVar $k@102@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2420
;  :arith-add-rows          493
;  :arith-assert-diseq      69
;  :arith-assert-lower      237
;  :arith-assert-upper      572
;  :arith-conflicts         441
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         429
;  :arith-pivots            653
;  :binary-propagations     22
;  :conflicts               788
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1790
;  :mk-clause               235
;  :num-allocs              4727468
;  :num-checks              898
;  :propagations            230
;  :quant-instantiations    55
;  :rlimit-count            267180)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@102@01 $Perm.No) (< $Perm.No $k@102@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2420
;  :arith-add-rows          493
;  :arith-assert-diseq      69
;  :arith-assert-lower      237
;  :arith-assert-upper      572
;  :arith-conflicts         441
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         429
;  :arith-pivots            653
;  :binary-propagations     22
;  :conflicts               789
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1790
;  :mk-clause               235
;  :num-allocs              4727468
;  :num-checks              899
;  :propagations            230
;  :quant-instantiations    55
;  :rlimit-count            267230)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2421
;  :arith-add-rows          494
;  :arith-assert-diseq      69
;  :arith-assert-lower      237
;  :arith-assert-upper      573
;  :arith-conflicts         442
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         430
;  :arith-pivots            654
;  :binary-propagations     22
;  :conflicts               790
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              222
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1791
;  :mk-clause               235
;  :num-allocs              4727468
;  :num-checks              900
;  :propagations            231
;  :quant-instantiations    55
;  :rlimit-count            267320)
(push) ; 5
(assert (not (not (= (+ (- $k@18@01 $k@79@01) $k@90@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2422
;  :arith-add-rows          494
;  :arith-assert-diseq      69
;  :arith-assert-lower      237
;  :arith-assert-upper      574
;  :arith-conflicts         443
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         430
;  :arith-pivots            654
;  :binary-propagations     22
;  :conflicts               791
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1793
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              901
;  :propagations            232
;  :quant-instantiations    55
;  :rlimit-count            267401)
(assert (< $k@102@01 (+ (- $k@18@01 $k@79@01) $k@90@01)))
(assert (<= $Perm.No (- (+ (- $k@18@01 $k@79@01) $k@90@01) $k@102@01)))
(assert (<= (- (+ (- $k@18@01 $k@79@01) $k@90@01) $k@102@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@18@01 $k@79@01) $k@90@01) $k@102@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2422
;  :arith-add-rows          496
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      576
;  :arith-conflicts         444
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         431
;  :arith-pivots            656
;  :binary-propagations     22
;  :conflicts               792
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1797
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              902
;  :propagations            232
;  :quant-instantiations    55
;  :rlimit-count            267700)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2423
;  :arith-add-rows          497
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      577
;  :arith-conflicts         445
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         432
;  :arith-pivots            657
;  :binary-propagations     22
;  :conflicts               793
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1798
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              903
;  :propagations            233
;  :quant-instantiations    55
;  :rlimit-count            267790)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2423
;  :arith-add-rows          497
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      578
;  :arith-conflicts         446
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         433
;  :arith-pivots            657
;  :binary-propagations     22
;  :conflicts               794
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1799
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              904
;  :propagations            233
;  :quant-instantiations    55
;  :rlimit-count            267872)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2423
;  :arith-add-rows          498
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      579
;  :arith-conflicts         447
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         434
;  :arith-pivots            658
;  :binary-propagations     22
;  :conflicts               795
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1800
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              905
;  :propagations            233
;  :quant-instantiations    55
;  :rlimit-count            267978)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2424
;  :arith-add-rows          499
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      580
;  :arith-conflicts         448
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         435
;  :arith-pivots            659
;  :binary-propagations     22
;  :conflicts               796
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1801
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              906
;  :propagations            234
;  :quant-instantiations    55
;  :rlimit-count            268068)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2424
;  :arith-add-rows          499
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      581
;  :arith-conflicts         449
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         436
;  :arith-pivots            659
;  :binary-propagations     22
;  :conflicts               797
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1802
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              907
;  :propagations            234
;  :quant-instantiations    55
;  :rlimit-count            268150)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2424
;  :arith-add-rows          500
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      582
;  :arith-conflicts         450
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         437
;  :arith-pivots            660
;  :binary-propagations     22
;  :conflicts               798
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1803
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              908
;  :propagations            234
;  :quant-instantiations    55
;  :rlimit-count            268256)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2425
;  :arith-add-rows          501
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      583
;  :arith-conflicts         451
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         438
;  :arith-pivots            661
;  :binary-propagations     22
;  :conflicts               799
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1804
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              909
;  :propagations            235
;  :quant-instantiations    55
;  :rlimit-count            268346)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2425
;  :arith-add-rows          501
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      584
;  :arith-conflicts         452
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         439
;  :arith-pivots            661
;  :binary-propagations     22
;  :conflicts               800
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1805
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              910
;  :propagations            235
;  :quant-instantiations    55
;  :rlimit-count            268428)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2425
;  :arith-add-rows          502
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      585
;  :arith-conflicts         453
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         440
;  :arith-pivots            662
;  :binary-propagations     22
;  :conflicts               801
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1806
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              911
;  :propagations            235
;  :quant-instantiations    55
;  :rlimit-count            268534)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2426
;  :arith-add-rows          503
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      586
;  :arith-conflicts         454
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         441
;  :arith-pivots            663
;  :binary-propagations     22
;  :conflicts               802
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1807
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              912
;  :propagations            236
;  :quant-instantiations    55
;  :rlimit-count            268624)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2426
;  :arith-add-rows          503
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      587
;  :arith-conflicts         455
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         442
;  :arith-pivots            663
;  :binary-propagations     22
;  :conflicts               803
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1808
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              913
;  :propagations            236
;  :quant-instantiations    55
;  :rlimit-count            268706)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2426
;  :arith-add-rows          504
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      588
;  :arith-conflicts         456
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         443
;  :arith-pivots            664
;  :binary-propagations     22
;  :conflicts               804
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1809
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              914
;  :propagations            236
;  :quant-instantiations    55
;  :rlimit-count            268812)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2427
;  :arith-add-rows          505
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      589
;  :arith-conflicts         457
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         444
;  :arith-pivots            665
;  :binary-propagations     22
;  :conflicts               805
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1810
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              915
;  :propagations            237
;  :quant-instantiations    55
;  :rlimit-count            268902)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2427
;  :arith-add-rows          505
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      590
;  :arith-conflicts         458
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         445
;  :arith-pivots            665
;  :binary-propagations     22
;  :conflicts               806
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1811
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              916
;  :propagations            237
;  :quant-instantiations    55
;  :rlimit-count            268984)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2427
;  :arith-add-rows          506
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      591
;  :arith-conflicts         459
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         446
;  :arith-pivots            666
;  :binary-propagations     22
;  :conflicts               807
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1812
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              917
;  :propagations            237
;  :quant-instantiations    55
;  :rlimit-count            269090)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2428
;  :arith-add-rows          507
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      592
;  :arith-conflicts         460
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         447
;  :arith-pivots            667
;  :binary-propagations     22
;  :conflicts               808
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1813
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              918
;  :propagations            238
;  :quant-instantiations    55
;  :rlimit-count            269180)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2428
;  :arith-add-rows          507
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      593
;  :arith-conflicts         461
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         448
;  :arith-pivots            667
;  :binary-propagations     22
;  :conflicts               809
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1814
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              919
;  :propagations            238
;  :quant-instantiations    55
;  :rlimit-count            269262)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2428
;  :arith-add-rows          508
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      594
;  :arith-conflicts         462
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         449
;  :arith-pivots            668
;  :binary-propagations     22
;  :conflicts               810
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1815
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              920
;  :propagations            238
;  :quant-instantiations    55
;  :rlimit-count            269368)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2429
;  :arith-add-rows          509
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      595
;  :arith-conflicts         463
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         450
;  :arith-pivots            669
;  :binary-propagations     22
;  :conflicts               811
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1816
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              921
;  :propagations            239
;  :quant-instantiations    55
;  :rlimit-count            269458)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2429
;  :arith-add-rows          509
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      596
;  :arith-conflicts         464
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         451
;  :arith-pivots            669
;  :binary-propagations     22
;  :conflicts               812
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1817
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              922
;  :propagations            239
;  :quant-instantiations    55
;  :rlimit-count            269540)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2429
;  :arith-add-rows          510
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      597
;  :arith-conflicts         465
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         452
;  :arith-pivots            670
;  :binary-propagations     22
;  :conflicts               813
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1818
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              923
;  :propagations            239
;  :quant-instantiations    55
;  :rlimit-count            269646)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2430
;  :arith-add-rows          511
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      598
;  :arith-conflicts         466
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         453
;  :arith-pivots            671
;  :binary-propagations     22
;  :conflicts               814
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1819
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              924
;  :propagations            240
;  :quant-instantiations    55
;  :rlimit-count            269736)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2430
;  :arith-add-rows          511
;  :arith-assert-diseq      69
;  :arith-assert-lower      239
;  :arith-assert-upper      599
;  :arith-conflicts         467
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         454
;  :arith-pivots            671
;  :binary-propagations     22
;  :conflicts               815
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1820
;  :mk-clause               237
;  :num-allocs              4727468
;  :num-checks              925
;  :propagations            240
;  :quant-instantiations    55
;  :rlimit-count            269818)
(declare-const $k@103@01 $Perm)
(assert ($Perm.isReadVar $k@103@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2430
;  :arith-add-rows          512
;  :arith-assert-diseq      70
;  :arith-assert-lower      241
;  :arith-assert-upper      601
;  :arith-conflicts         468
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         455
;  :arith-pivots            672
;  :binary-propagations     22
;  :conflicts               816
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1825
;  :mk-clause               239
;  :num-allocs              4727468
;  :num-checks              926
;  :propagations            241
;  :quant-instantiations    55
;  :rlimit-count            270073)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@103@01 $Perm.No) (< $Perm.No $k@103@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2430
;  :arith-add-rows          512
;  :arith-assert-diseq      70
;  :arith-assert-lower      241
;  :arith-assert-upper      601
;  :arith-conflicts         468
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         455
;  :arith-pivots            672
;  :binary-propagations     22
;  :conflicts               817
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1825
;  :mk-clause               239
;  :num-allocs              4727468
;  :num-checks              927
;  :propagations            241
;  :quant-instantiations    55
;  :rlimit-count            270123)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2431
;  :arith-add-rows          513
;  :arith-assert-diseq      70
;  :arith-assert-lower      241
;  :arith-assert-upper      602
;  :arith-conflicts         469
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         456
;  :arith-pivots            673
;  :binary-propagations     22
;  :conflicts               818
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              224
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1826
;  :mk-clause               239
;  :num-allocs              4727468
;  :num-checks              928
;  :propagations            242
;  :quant-instantiations    55
;  :rlimit-count            270213)
(push) ; 5
(assert (not (not (= (+ (- $k@19@01 $k@80@01) $k@92@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2432
;  :arith-add-rows          513
;  :arith-assert-diseq      70
;  :arith-assert-lower      241
;  :arith-assert-upper      603
;  :arith-conflicts         470
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         456
;  :arith-pivots            673
;  :binary-propagations     22
;  :conflicts               819
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              226
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1828
;  :mk-clause               241
;  :num-allocs              4727468
;  :num-checks              929
;  :propagations            243
;  :quant-instantiations    55
;  :rlimit-count            270293)
(assert (< $k@103@01 (+ (- $k@19@01 $k@80@01) $k@92@01)))
(assert (<= $Perm.No (- (+ (- $k@19@01 $k@80@01) $k@92@01) $k@103@01)))
(assert (<= (- (+ (- $k@19@01 $k@80@01) $k@92@01) $k@103@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@19@01 $k@80@01) $k@92@01) $k@103@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2432
;  :arith-add-rows          516
;  :arith-assert-diseq      70
;  :arith-assert-lower      243
;  :arith-assert-upper      605
;  :arith-conflicts         471
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         457
;  :arith-pivots            674
;  :binary-propagations     22
;  :conflicts               820
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              226
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1832
;  :mk-clause               241
;  :num-allocs              4727468
;  :num-checks              930
;  :propagations            243
;  :quant-instantiations    55
;  :rlimit-count            270587)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2433
;  :arith-add-rows          517
;  :arith-assert-diseq      70
;  :arith-assert-lower      243
;  :arith-assert-upper      606
;  :arith-conflicts         472
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         458
;  :arith-pivots            675
;  :binary-propagations     22
;  :conflicts               821
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              226
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1833
;  :mk-clause               241
;  :num-allocs              4727468
;  :num-checks              931
;  :propagations            244
;  :quant-instantiations    55
;  :rlimit-count            270677)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@80@01) $k@92@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2433
;  :arith-add-rows          517
;  :arith-assert-diseq      70
;  :arith-assert-lower      243
;  :arith-assert-upper      607
;  :arith-conflicts         473
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         459
;  :arith-pivots            675
;  :binary-propagations     22
;  :conflicts               822
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              226
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1834
;  :mk-clause               241
;  :num-allocs              4727468
;  :num-checks              932
;  :propagations            244
;  :quant-instantiations    55
;  :rlimit-count            270758)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2433
;  :arith-add-rows          518
;  :arith-assert-diseq      70
;  :arith-assert-lower      243
;  :arith-assert-upper      608
;  :arith-conflicts         474
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         460
;  :arith-pivots            676
;  :binary-propagations     22
;  :conflicts               823
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              226
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1835
;  :mk-clause               241
;  :num-allocs              4727468
;  :num-checks              933
;  :propagations            244
;  :quant-instantiations    55
;  :rlimit-count            270864)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2434
;  :arith-add-rows          519
;  :arith-assert-diseq      70
;  :arith-assert-lower      243
;  :arith-assert-upper      609
;  :arith-conflicts         475
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         461
;  :arith-pivots            677
;  :binary-propagations     22
;  :conflicts               824
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              226
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1836
;  :mk-clause               241
;  :num-allocs              4727468
;  :num-checks              934
;  :propagations            245
;  :quant-instantiations    55
;  :rlimit-count            270954)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@80@01) $k@92@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2434
;  :arith-add-rows          519
;  :arith-assert-diseq      70
;  :arith-assert-lower      243
;  :arith-assert-upper      610
;  :arith-conflicts         476
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         462
;  :arith-pivots            677
;  :binary-propagations     22
;  :conflicts               825
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              226
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1837
;  :mk-clause               241
;  :num-allocs              4727468
;  :num-checks              935
;  :propagations            245
;  :quant-instantiations    55
;  :rlimit-count            271035)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2434
;  :arith-add-rows          520
;  :arith-assert-diseq      70
;  :arith-assert-lower      243
;  :arith-assert-upper      611
;  :arith-conflicts         477
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         463
;  :arith-pivots            678
;  :binary-propagations     22
;  :conflicts               826
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              226
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1838
;  :mk-clause               241
;  :num-allocs              4727468
;  :num-checks              936
;  :propagations            245
;  :quant-instantiations    55
;  :rlimit-count            271141)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2435
;  :arith-add-rows          521
;  :arith-assert-diseq      70
;  :arith-assert-lower      243
;  :arith-assert-upper      612
;  :arith-conflicts         478
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         464
;  :arith-pivots            679
;  :binary-propagations     22
;  :conflicts               827
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              226
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1839
;  :mk-clause               241
;  :num-allocs              4727468
;  :num-checks              937
;  :propagations            246
;  :quant-instantiations    55
;  :rlimit-count            271231)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@80@01) $k@92@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2435
;  :arith-add-rows          521
;  :arith-assert-diseq      70
;  :arith-assert-lower      243
;  :arith-assert-upper      613
;  :arith-conflicts         479
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         465
;  :arith-pivots            679
;  :binary-propagations     22
;  :conflicts               828
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              226
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1840
;  :mk-clause               241
;  :num-allocs              4727468
;  :num-checks              938
;  :propagations            246
;  :quant-instantiations    55
;  :rlimit-count            271312)
(declare-const $k@104@01 $Perm)
(assert ($Perm.isReadVar $k@104@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2435
;  :arith-add-rows          522
;  :arith-assert-diseq      71
;  :arith-assert-lower      245
;  :arith-assert-upper      615
;  :arith-conflicts         480
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         466
;  :arith-pivots            680
;  :binary-propagations     22
;  :conflicts               829
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              226
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1845
;  :mk-clause               243
;  :num-allocs              4727468
;  :num-checks              939
;  :propagations            247
;  :quant-instantiations    55
;  :rlimit-count            271567)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@104@01 $Perm.No) (< $Perm.No $k@104@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2435
;  :arith-add-rows          522
;  :arith-assert-diseq      71
;  :arith-assert-lower      245
;  :arith-assert-upper      615
;  :arith-conflicts         480
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         466
;  :arith-pivots            680
;  :binary-propagations     22
;  :conflicts               830
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              226
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1845
;  :mk-clause               243
;  :num-allocs              4727468
;  :num-checks              940
;  :propagations            247
;  :quant-instantiations    55
;  :rlimit-count            271617)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2436
;  :arith-add-rows          523
;  :arith-assert-diseq      71
;  :arith-assert-lower      245
;  :arith-assert-upper      616
;  :arith-conflicts         481
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         467
;  :arith-pivots            681
;  :binary-propagations     22
;  :conflicts               831
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              226
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1846
;  :mk-clause               243
;  :num-allocs              4727468
;  :num-checks              941
;  :propagations            248
;  :quant-instantiations    55
;  :rlimit-count            271707)
(push) ; 5
(assert (not (not (= (+ (- $k@20@01 $k@81@01) $k@94@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2437
;  :arith-add-rows          523
;  :arith-assert-diseq      71
;  :arith-assert-lower      245
;  :arith-assert-upper      617
;  :arith-conflicts         482
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         467
;  :arith-pivots            682
;  :binary-propagations     22
;  :conflicts               832
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1848
;  :mk-clause               245
;  :num-allocs              4727468
;  :num-checks              942
;  :propagations            249
;  :quant-instantiations    55
;  :rlimit-count            271795)
(assert (< $k@104@01 (+ (- $k@20@01 $k@81@01) $k@94@01)))
(assert (<= $Perm.No (- (+ (- $k@20@01 $k@81@01) $k@94@01) $k@104@01)))
(assert (<= (- (+ (- $k@20@01 $k@81@01) $k@94@01) $k@104@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@20@01 $k@81@01) $k@94@01) $k@104@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2437
;  :arith-add-rows          525
;  :arith-assert-diseq      71
;  :arith-assert-lower      247
;  :arith-assert-upper      619
;  :arith-conflicts         483
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         468
;  :arith-pivots            683
;  :binary-propagations     22
;  :conflicts               833
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1852
;  :mk-clause               245
;  :num-allocs              4727468
;  :num-checks              943
;  :propagations            249
;  :quant-instantiations    55
;  :rlimit-count            272088)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2438
;  :arith-add-rows          526
;  :arith-assert-diseq      71
;  :arith-assert-lower      247
;  :arith-assert-upper      620
;  :arith-conflicts         484
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         469
;  :arith-pivots            684
;  :binary-propagations     22
;  :conflicts               834
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1853
;  :mk-clause               245
;  :num-allocs              4727468
;  :num-checks              944
;  :propagations            250
;  :quant-instantiations    55
;  :rlimit-count            272178)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@20@01 $k@81@01) $k@94@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2438
;  :arith-add-rows          526
;  :arith-assert-diseq      71
;  :arith-assert-lower      247
;  :arith-assert-upper      621
;  :arith-conflicts         485
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         470
;  :arith-pivots            685
;  :binary-propagations     22
;  :conflicts               835
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1854
;  :mk-clause               245
;  :num-allocs              4727468
;  :num-checks              945
;  :propagations            250
;  :quant-instantiations    55
;  :rlimit-count            272267)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2438
;  :arith-add-rows          527
;  :arith-assert-diseq      71
;  :arith-assert-lower      247
;  :arith-assert-upper      622
;  :arith-conflicts         486
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         471
;  :arith-pivots            686
;  :binary-propagations     22
;  :conflicts               836
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1855
;  :mk-clause               245
;  :num-allocs              4727468
;  :num-checks              946
;  :propagations            250
;  :quant-instantiations    55
;  :rlimit-count            272373)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2439
;  :arith-add-rows          528
;  :arith-assert-diseq      71
;  :arith-assert-lower      247
;  :arith-assert-upper      623
;  :arith-conflicts         487
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         472
;  :arith-pivots            687
;  :binary-propagations     22
;  :conflicts               837
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1856
;  :mk-clause               245
;  :num-allocs              4727468
;  :num-checks              947
;  :propagations            251
;  :quant-instantiations    55
;  :rlimit-count            272463
;  :time                    0.00)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@20@01 $k@81@01) $k@94@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2439
;  :arith-add-rows          528
;  :arith-assert-diseq      71
;  :arith-assert-lower      247
;  :arith-assert-upper      624
;  :arith-conflicts         488
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         473
;  :arith-pivots            688
;  :binary-propagations     22
;  :conflicts               838
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1857
;  :mk-clause               245
;  :num-allocs              4727468
;  :num-checks              948
;  :propagations            251
;  :quant-instantiations    55
;  :rlimit-count            272552)
(declare-const $k@105@01 $Perm)
(assert ($Perm.isReadVar $k@105@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2439
;  :arith-add-rows          529
;  :arith-assert-diseq      72
;  :arith-assert-lower      249
;  :arith-assert-upper      626
;  :arith-conflicts         489
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         474
;  :arith-pivots            689
;  :binary-propagations     22
;  :conflicts               839
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1862
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              949
;  :propagations            252
;  :quant-instantiations    55
;  :rlimit-count            272807)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2440
;  :arith-add-rows          530
;  :arith-assert-diseq      72
;  :arith-assert-lower      249
;  :arith-assert-upper      627
;  :arith-conflicts         490
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         475
;  :arith-pivots            690
;  :binary-propagations     22
;  :conflicts               840
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1863
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              950
;  :propagations            253
;  :quant-instantiations    55
;  :rlimit-count            272897)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2440
;  :arith-add-rows          531
;  :arith-assert-diseq      72
;  :arith-assert-lower      249
;  :arith-assert-upper      628
;  :arith-conflicts         491
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         476
;  :arith-pivots            692
;  :binary-propagations     22
;  :conflicts               841
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1864
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              951
;  :propagations            253
;  :quant-instantiations    55
;  :rlimit-count            273006)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@105@01 $Perm.No) (< $Perm.No $k@105@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2440
;  :arith-add-rows          531
;  :arith-assert-diseq      72
;  :arith-assert-lower      249
;  :arith-assert-upper      628
;  :arith-conflicts         491
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         476
;  :arith-pivots            692
;  :binary-propagations     22
;  :conflicts               842
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1864
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              952
;  :propagations            253
;  :quant-instantiations    55
;  :rlimit-count            273056)
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
  $t@89@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2440
;  :arith-add-rows          531
;  :arith-assert-diseq      72
;  :arith-assert-lower      249
;  :arith-assert-upper      628
;  :arith-conflicts         491
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         476
;  :arith-pivots            692
;  :binary-propagations     22
;  :conflicts               842
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1864
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              953
;  :propagations            253
;  :quant-instantiations    55
;  :rlimit-count            273067)
(push) ; 5
(assert (not (not (= (- $k@21@01 $k@82@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2440
;  :arith-add-rows          531
;  :arith-assert-diseq      72
;  :arith-assert-lower      249
;  :arith-assert-upper      628
;  :arith-conflicts         491
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         476
;  :arith-pivots            692
;  :binary-propagations     22
;  :conflicts               843
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1865
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              954
;  :propagations            253
;  :quant-instantiations    55
;  :rlimit-count            273135)
(assert (< $k@105@01 (- $k@21@01 $k@82@01)))
(assert (<= $Perm.No (- (- $k@21@01 $k@82@01) $k@105@01)))
(assert (<= (- (- $k@21@01 $k@82@01) $k@105@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@21@01 $k@82@01) $k@105@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2440
;  :arith-add-rows          534
;  :arith-assert-diseq      72
;  :arith-assert-lower      251
;  :arith-assert-upper      630
;  :arith-conflicts         492
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         477
;  :arith-pivots            694
;  :binary-propagations     22
;  :conflicts               844
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1869
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              955
;  :propagations            253
;  :quant-instantiations    55
;  :rlimit-count            273447)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2441
;  :arith-add-rows          535
;  :arith-assert-diseq      72
;  :arith-assert-lower      251
;  :arith-assert-upper      631
;  :arith-conflicts         493
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         478
;  :arith-pivots            695
;  :binary-propagations     22
;  :conflicts               845
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1870
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              956
;  :propagations            254
;  :quant-instantiations    55
;  :rlimit-count            273537)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2441
;  :arith-add-rows          536
;  :arith-assert-diseq      72
;  :arith-assert-lower      251
;  :arith-assert-upper      632
;  :arith-conflicts         494
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         479
;  :arith-pivots            698
;  :binary-propagations     22
;  :conflicts               846
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1871
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              957
;  :propagations            254
;  :quant-instantiations    55
;  :rlimit-count            273651)
(push) ; 5
(assert (not (= diz@7@01 $t@89@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2441
;  :arith-add-rows          536
;  :arith-assert-diseq      72
;  :arith-assert-lower      251
;  :arith-assert-upper      632
;  :arith-conflicts         494
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         479
;  :arith-pivots            698
;  :binary-propagations     22
;  :conflicts               846
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1871
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              958
;  :propagations            254
;  :quant-instantiations    55
;  :rlimit-count            273662)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2441
;  :arith-add-rows          537
;  :arith-assert-diseq      72
;  :arith-assert-lower      251
;  :arith-assert-upper      633
;  :arith-conflicts         495
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         480
;  :arith-pivots            699
;  :binary-propagations     22
;  :conflicts               847
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1872
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              959
;  :propagations            254
;  :quant-instantiations    55
;  :rlimit-count            273768)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2441
;  :arith-add-rows          537
;  :arith-assert-diseq      72
;  :arith-assert-lower      251
;  :arith-assert-upper      634
;  :arith-conflicts         496
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         481
;  :arith-pivots            699
;  :binary-propagations     22
;  :conflicts               848
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1873
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              960
;  :propagations            254
;  :quant-instantiations    55
;  :rlimit-count            273854)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2441
;  :arith-add-rows          537
;  :arith-assert-diseq      72
;  :arith-assert-lower      251
;  :arith-assert-upper      635
;  :arith-conflicts         497
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         482
;  :arith-pivots            699
;  :binary-propagations     22
;  :conflicts               849
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1874
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              961
;  :propagations            254
;  :quant-instantiations    55
;  :rlimit-count            273940)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2442
;  :arith-add-rows          538
;  :arith-assert-diseq      72
;  :arith-assert-lower      251
;  :arith-assert-upper      636
;  :arith-conflicts         498
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         483
;  :arith-pivots            700
;  :binary-propagations     22
;  :conflicts               850
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1875
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              962
;  :propagations            255
;  :quant-instantiations    55
;  :rlimit-count            274030)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2442
;  :arith-add-rows          539
;  :arith-assert-diseq      72
;  :arith-assert-lower      251
;  :arith-assert-upper      637
;  :arith-conflicts         499
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         484
;  :arith-pivots            702
;  :binary-propagations     22
;  :conflicts               851
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1876
;  :mk-clause               247
;  :num-allocs              4727468
;  :num-checks              963
;  :propagations            255
;  :quant-instantiations    55
;  :rlimit-count            274139)
; [exec]
; label __return_xor_
; [exec]
; sys__result := sys__local__result__26
; [exec]
; // assert
; assert acc(diz.Rng_m, wildcard) && diz.Rng_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.Rng_m, __globals), write) && acc(diz.Rng_m.Main_process_state, write) && |diz.Rng_m.Main_process_state| == 3 && acc(diz.Rng_m.Main_event_state, write) && |diz.Rng_m.Main_event_state| == 6 && (forall i__36: Int :: { diz.Rng_m.Main_process_state[i__36] } 0 <= i__36 && i__36 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__36] == -1 || 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|) && acc(diz.Rng_m.Main_rn, wildcard) && diz.Rng_m.Main_rn != null && acc(diz.Rng_m.Main_rn.Rng_clk, write) && acc(diz.Rng_m.Main_rn.Rng_reset, write) && acc(diz.Rng_m.Main_rn.Rng_loadseed_i, write) && acc(diz.Rng_m.Main_rn.Rng_seed_i, write) && acc(diz.Rng_m.Main_rn.Rng_number_o, write) && acc(diz.Rng_m.Main_rn.Rng_LFSR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_CASR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_result, write) && acc(diz.Rng_m.Main_rn.Rng_i, write) && acc(diz.Rng_m.Main_rn.Rng_aux, write) && acc(diz.Rng_m.Main_rn_casr, wildcard) && diz.Rng_m.Main_rn_casr != null && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_var, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_out, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_i, write) && acc(diz.Rng_m.Main_rn_lfsr, wildcard) && diz.Rng_m.Main_rn_lfsr != null && acc(diz.Rng_m.Main_rn_lfsr.LFSR_LFSR_var, write) && acc(diz.Rng_m.Main_rn_lfsr.LFSR_outbit, write) && acc(diz.Rng_m.Main_rn_combinate, wildcard) && diz.Rng_m.Main_rn_combinate != null && acc(diz.Rng_m.Main_rn_combinate.Combinate_i, write) && acc(diz.Rng_m.Main_rn.Rng_m, wildcard) && diz.Rng_m.Main_rn.Rng_m == diz.Rng_m && diz.Rng_m.Main_rn == diz
(declare-const $k@106@01 $Perm)
(assert ($Perm.isReadVar $k@106@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@106@01 $Perm.No) (< $Perm.No $k@106@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2442
;  :arith-add-rows          539
;  :arith-assert-diseq      73
;  :arith-assert-lower      253
;  :arith-assert-upper      638
;  :arith-conflicts         499
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         484
;  :arith-pivots            702
;  :binary-propagations     22
;  :conflicts               852
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              228
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1880
;  :mk-clause               249
;  :num-allocs              4727468
;  :num-checks              964
;  :propagations            256
;  :quant-instantiations    55
;  :rlimit-count            274338)
(set-option :timeout 10)
(push) ; 5
(assert (not (not (= (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2443
;  :arith-add-rows          540
;  :arith-assert-diseq      73
;  :arith-assert-lower      253
;  :arith-assert-upper      639
;  :arith-conflicts         500
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         484
;  :arith-pivots            703
;  :binary-propagations     22
;  :conflicts               853
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1882
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              965
;  :propagations            257
;  :quant-instantiations    55
;  :rlimit-count            274444)
(assert (< $k@106@01 (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01)))
(assert (<= $Perm.No (- (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01) $k@106@01)))
(assert (<= (- (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01) $k@106@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01) $k@106@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2443
;  :arith-add-rows          542
;  :arith-assert-diseq      73
;  :arith-assert-lower      255
;  :arith-assert-upper      641
;  :arith-conflicts         501
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         485
;  :arith-pivots            703
;  :binary-propagations     22
;  :conflicts               854
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1886
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              966
;  :propagations            257
;  :quant-instantiations    55
;  :rlimit-count            274723)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2443
;  :arith-add-rows          542
;  :arith-assert-diseq      73
;  :arith-assert-lower      255
;  :arith-assert-upper      642
;  :arith-conflicts         502
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         486
;  :arith-pivots            703
;  :binary-propagations     22
;  :conflicts               855
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1887
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              967
;  :propagations            257
;  :quant-instantiations    55
;  :rlimit-count            274810)
(push) ; 5
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2444
;  :arith-add-rows          543
;  :arith-assert-diseq      73
;  :arith-assert-lower      255
;  :arith-assert-upper      643
;  :arith-conflicts         503
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         487
;  :arith-pivots            704
;  :binary-propagations     22
;  :conflicts               856
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1888
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              968
;  :propagations            258
;  :quant-instantiations    55
;  :rlimit-count            274900)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2444
;  :arith-add-rows          544
;  :arith-assert-diseq      73
;  :arith-assert-lower      255
;  :arith-assert-upper      644
;  :arith-conflicts         504
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         488
;  :arith-pivots            705
;  :binary-propagations     22
;  :conflicts               857
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1889
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              969
;  :propagations            258
;  :quant-instantiations    55
;  :rlimit-count            275007)
(push) ; 5
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2445
;  :arith-add-rows          545
;  :arith-assert-diseq      73
;  :arith-assert-lower      255
;  :arith-assert-upper      645
;  :arith-conflicts         505
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         489
;  :arith-pivots            706
;  :binary-propagations     22
;  :conflicts               858
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1890
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              970
;  :propagations            259
;  :quant-instantiations    55
;  :rlimit-count            275097)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2445
;  :arith-add-rows          546
;  :arith-assert-diseq      73
;  :arith-assert-lower      255
;  :arith-assert-upper      646
;  :arith-conflicts         506
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         490
;  :arith-pivots            707
;  :binary-propagations     22
;  :conflicts               859
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1891
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              971
;  :propagations            259
;  :quant-instantiations    55
;  :rlimit-count            275204)
(push) ; 5
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2446
;  :arith-add-rows          547
;  :arith-assert-diseq      73
;  :arith-assert-lower      255
;  :arith-assert-upper      647
;  :arith-conflicts         507
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         491
;  :arith-pivots            708
;  :binary-propagations     22
;  :conflicts               860
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1892
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              972
;  :propagations            260
;  :quant-instantiations    55
;  :rlimit-count            275294)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2446
;  :arith-add-rows          548
;  :arith-assert-diseq      73
;  :arith-assert-lower      255
;  :arith-assert-upper      648
;  :arith-conflicts         508
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         492
;  :arith-pivots            709
;  :binary-propagations     22
;  :conflicts               861
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1893
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              973
;  :propagations            260
;  :quant-instantiations    55
;  :rlimit-count            275401)
(push) ; 5
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2447
;  :arith-add-rows          549
;  :arith-assert-diseq      73
;  :arith-assert-lower      255
;  :arith-assert-upper      649
;  :arith-conflicts         509
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         493
;  :arith-pivots            710
;  :binary-propagations     22
;  :conflicts               862
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1894
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              974
;  :propagations            261
;  :quant-instantiations    55
;  :rlimit-count            275491)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2447
;  :arith-add-rows          550
;  :arith-assert-diseq      73
;  :arith-assert-lower      255
;  :arith-assert-upper      650
;  :arith-conflicts         510
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         494
;  :arith-pivots            711
;  :binary-propagations     22
;  :conflicts               863
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1895
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              975
;  :propagations            261
;  :quant-instantiations    55
;  :rlimit-count            275598)
(push) ; 5
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2448
;  :arith-add-rows          551
;  :arith-assert-diseq      73
;  :arith-assert-lower      255
;  :arith-assert-upper      651
;  :arith-conflicts         511
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         495
;  :arith-pivots            712
;  :binary-propagations     22
;  :conflicts               864
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1896
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              976
;  :propagations            262
;  :quant-instantiations    55
;  :rlimit-count            275688)
; [eval] (forall i__36: Int :: { diz.Rng_m.Main_process_state[i__36] } 0 <= i__36 && i__36 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__36] == -1 || 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|)
(declare-const i__36@107@01 Int)
(push) ; 5
; [eval] 0 <= i__36 && i__36 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__36] == -1 || 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i__36 && i__36 < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i__36
(push) ; 6
; [then-branch: 39 | 0 <= i__36@107@01 | live]
; [else-branch: 39 | !(0 <= i__36@107@01) | live]
(push) ; 7
; [then-branch: 39 | 0 <= i__36@107@01]
(assert (<= 0 i__36@107@01))
; [eval] i__36 < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 8
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2448
;  :arith-add-rows          552
;  :arith-assert-diseq      73
;  :arith-assert-lower      256
;  :arith-assert-upper      652
;  :arith-conflicts         512
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         496
;  :arith-pivots            713
;  :binary-propagations     22
;  :conflicts               865
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1898
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              977
;  :propagations            262
;  :quant-instantiations    55
;  :rlimit-count            275848)
(push) ; 8
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2449
;  :arith-add-rows          553
;  :arith-assert-diseq      73
;  :arith-assert-lower      256
;  :arith-assert-upper      653
;  :arith-conflicts         513
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         497
;  :arith-pivots            714
;  :binary-propagations     22
;  :conflicts               866
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1899
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              978
;  :propagations            263
;  :quant-instantiations    55
;  :rlimit-count            275938)
(pop) ; 7
(push) ; 7
; [else-branch: 39 | !(0 <= i__36@107@01)]
(assert (not (<= 0 i__36@107@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 40 | i__36@107@01 < |First:(Second:(Second:(Second:($t@84@01))))| && 0 <= i__36@107@01 | live]
; [else-branch: 40 | !(i__36@107@01 < |First:(Second:(Second:(Second:($t@84@01))))| && 0 <= i__36@107@01) | live]
(push) ; 7
; [then-branch: 40 | i__36@107@01 < |First:(Second:(Second:(Second:($t@84@01))))| && 0 <= i__36@107@01]
(assert (and
  (<
    i__36@107@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
  (<= 0 i__36@107@01)))
; [eval] diz.Rng_m.Main_process_state[i__36] == -1 || 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__36] == -1
; [eval] diz.Rng_m.Main_process_state[i__36]
(push) ; 8
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2449
;  :arith-add-rows          554
;  :arith-assert-diseq      73
;  :arith-assert-lower      257
;  :arith-assert-upper      655
;  :arith-conflicts         514
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         498
;  :arith-pivots            715
;  :binary-propagations     22
;  :conflicts               867
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1902
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              979
;  :propagations            263
;  :quant-instantiations    55
;  :rlimit-count            276154)
(push) ; 8
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2450
;  :arith-add-rows          555
;  :arith-assert-diseq      73
;  :arith-assert-lower      257
;  :arith-assert-upper      656
;  :arith-conflicts         515
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         499
;  :arith-pivots            716
;  :binary-propagations     22
;  :conflicts               868
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1903
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              980
;  :propagations            264
;  :quant-instantiations    55
;  :rlimit-count            276244)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i__36@107@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2450
;  :arith-add-rows          555
;  :arith-assert-diseq      73
;  :arith-assert-lower      257
;  :arith-assert-upper      656
;  :arith-conflicts         515
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         499
;  :arith-pivots            716
;  :binary-propagations     22
;  :conflicts               868
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1903
;  :mk-clause               251
;  :num-allocs              4727468
;  :num-checks              981
;  :propagations            264
;  :quant-instantiations    55
;  :rlimit-count            276253)
; [eval] -1
(push) ; 8
; [then-branch: 41 | First:(Second:(Second:(Second:($t@84@01))))[i__36@107@01] == -1 | live]
; [else-branch: 41 | First:(Second:(Second:(Second:($t@84@01))))[i__36@107@01] != -1 | live]
(push) ; 9
; [then-branch: 41 | First:(Second:(Second:(Second:($t@84@01))))[i__36@107@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    i__36@107@01)
  (- 0 1)))
(pop) ; 9
(push) ; 9
; [else-branch: 41 | First:(Second:(Second:(Second:($t@84@01))))[i__36@107@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
      i__36@107@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i__36]
; [eval] diz.Rng_m.Main_process_state[i__36]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2450
;  :arith-add-rows          556
;  :arith-assert-diseq      74
;  :arith-assert-lower      260
;  :arith-assert-upper      658
;  :arith-conflicts         516
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         500
;  :arith-pivots            717
;  :binary-propagations     22
;  :conflicts               869
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1910
;  :mk-clause               255
;  :num-allocs              4727468
;  :num-checks              982
;  :propagations            266
;  :quant-instantiations    57
;  :rlimit-count            276608)
(push) ; 10
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2451
;  :arith-add-rows          557
;  :arith-assert-diseq      74
;  :arith-assert-lower      260
;  :arith-assert-upper      659
;  :arith-conflicts         517
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         501
;  :arith-pivots            718
;  :binary-propagations     22
;  :conflicts               870
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1911
;  :mk-clause               255
;  :num-allocs              4727468
;  :num-checks              983
;  :propagations            267
;  :quant-instantiations    57
;  :rlimit-count            276698)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__36@107@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2451
;  :arith-add-rows          557
;  :arith-assert-diseq      74
;  :arith-assert-lower      260
;  :arith-assert-upper      659
;  :arith-conflicts         517
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         501
;  :arith-pivots            718
;  :binary-propagations     22
;  :conflicts               870
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1911
;  :mk-clause               255
;  :num-allocs              4727468
;  :num-checks              984
;  :propagations            267
;  :quant-instantiations    57
;  :rlimit-count            276707)
(push) ; 10
; [then-branch: 42 | 0 <= First:(Second:(Second:(Second:($t@84@01))))[i__36@107@01] | live]
; [else-branch: 42 | !(0 <= First:(Second:(Second:(Second:($t@84@01))))[i__36@107@01]) | live]
(push) ; 11
; [then-branch: 42 | 0 <= First:(Second:(Second:(Second:($t@84@01))))[i__36@107@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    i__36@107@01)))
; [eval] diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__36]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2451
;  :arith-add-rows          558
;  :arith-assert-diseq      74
;  :arith-assert-lower      260
;  :arith-assert-upper      660
;  :arith-conflicts         518
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         502
;  :arith-pivots            719
;  :binary-propagations     22
;  :conflicts               871
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1912
;  :mk-clause               255
;  :num-allocs              4727468
;  :num-checks              985
;  :propagations            267
;  :quant-instantiations    57
;  :rlimit-count            276919)
(push) ; 12
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2452
;  :arith-add-rows          559
;  :arith-assert-diseq      74
;  :arith-assert-lower      260
;  :arith-assert-upper      661
;  :arith-conflicts         519
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         503
;  :arith-pivots            720
;  :binary-propagations     22
;  :conflicts               872
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1913
;  :mk-clause               255
;  :num-allocs              4727468
;  :num-checks              986
;  :propagations            268
;  :quant-instantiations    57
;  :rlimit-count            277009)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__36@107@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2452
;  :arith-add-rows          559
;  :arith-assert-diseq      74
;  :arith-assert-lower      260
;  :arith-assert-upper      661
;  :arith-conflicts         519
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         503
;  :arith-pivots            720
;  :binary-propagations     22
;  :conflicts               872
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1913
;  :mk-clause               255
;  :num-allocs              4727468
;  :num-checks              987
;  :propagations            268
;  :quant-instantiations    57
;  :rlimit-count            277018)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2452
;  :arith-add-rows          560
;  :arith-assert-diseq      74
;  :arith-assert-lower      260
;  :arith-assert-upper      662
;  :arith-conflicts         520
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         504
;  :arith-pivots            721
;  :binary-propagations     22
;  :conflicts               873
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1914
;  :mk-clause               255
;  :num-allocs              4727468
;  :num-checks              988
;  :propagations            268
;  :quant-instantiations    57
;  :rlimit-count            277125)
(push) ; 12
(assert (not (= $t@86@01 $t@97@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2453
;  :arith-add-rows          561
;  :arith-assert-diseq      74
;  :arith-assert-lower      260
;  :arith-assert-upper      663
;  :arith-conflicts         521
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         505
;  :arith-pivots            722
;  :binary-propagations     22
;  :conflicts               874
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              230
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1915
;  :mk-clause               255
;  :num-allocs              4727468
;  :num-checks              989
;  :propagations            269
;  :quant-instantiations    57
;  :rlimit-count            277215)
(pop) ; 11
(push) ; 11
; [else-branch: 42 | !(0 <= First:(Second:(Second:(Second:($t@84@01))))[i__36@107@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
      i__36@107@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 40 | !(i__36@107@01 < |First:(Second:(Second:(Second:($t@84@01))))| && 0 <= i__36@107@01)]
(assert (not
  (and
    (<
      i__36@107@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
    (<= 0 i__36@107@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((i__36@107@01 Int)) (!
  (implies
    (and
      (<
        i__36@107@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
      (<= 0 i__36@107@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
          i__36@107@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
            i__36@107@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
            i__36@107@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    i__36@107@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2453
;  :arith-add-rows          561
;  :arith-assert-diseq      76
;  :arith-assert-lower      261
;  :arith-assert-upper      664
;  :arith-conflicts         521
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         505
;  :arith-pivots            722
;  :binary-propagations     22
;  :conflicts               875
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              248
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1923
;  :mk-clause               269
;  :num-allocs              4727468
;  :num-checks              990
;  :propagations            271
;  :quant-instantiations    59
;  :rlimit-count            277686)
(assert (forall ((i__36@107@01 Int)) (!
  (implies
    (and
      (<
        i__36@107@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
      (<= 0 i__36@107@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
          i__36@107@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
            i__36@107@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
            i__36@107@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    i__36@107@01))
  :qid |prog.l<no position>|)))
(declare-const $k@108@01 $Perm)
(assert ($Perm.isReadVar $k@108@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2453
;  :arith-add-rows          562
;  :arith-assert-diseq      77
;  :arith-assert-lower      263
;  :arith-assert-upper      666
;  :arith-conflicts         522
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         506
;  :arith-pivots            723
;  :binary-propagations     22
;  :conflicts               876
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              248
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1929
;  :mk-clause               271
;  :num-allocs              4727468
;  :num-checks              991
;  :propagations            272
;  :quant-instantiations    59
;  :rlimit-count            278304)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@108@01 $Perm.No) (< $Perm.No $k@108@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2453
;  :arith-add-rows          562
;  :arith-assert-diseq      77
;  :arith-assert-lower      263
;  :arith-assert-upper      666
;  :arith-conflicts         522
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         506
;  :arith-pivots            723
;  :binary-propagations     22
;  :conflicts               877
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              248
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1929
;  :mk-clause               271
;  :num-allocs              4727468
;  :num-checks              992
;  :propagations            272
;  :quant-instantiations    59
;  :rlimit-count            278354)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2454
;  :arith-add-rows          563
;  :arith-assert-diseq      77
;  :arith-assert-lower      263
;  :arith-assert-upper      667
;  :arith-conflicts         523
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         507
;  :arith-pivots            724
;  :binary-propagations     22
;  :conflicts               878
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              248
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1930
;  :mk-clause               271
;  :num-allocs              4727468
;  :num-checks              993
;  :propagations            273
;  :quant-instantiations    59
;  :rlimit-count            278444
;  :time                    0.00)
(push) ; 5
(assert (not (not (= (+ (- $k@17@01 $k@78@01) $k@88@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2455
;  :arith-add-rows          564
;  :arith-assert-diseq      77
;  :arith-assert-lower      263
;  :arith-assert-upper      668
;  :arith-conflicts         524
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         507
;  :arith-pivots            727
;  :binary-propagations     22
;  :conflicts               879
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1932
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              994
;  :propagations            274
;  :quant-instantiations    59
;  :rlimit-count            278558)
(assert (< $k@108@01 (+ (- $k@17@01 $k@78@01) $k@88@01)))
(assert (<= $Perm.No (- (+ (- $k@17@01 $k@78@01) $k@88@01) $k@108@01)))
(assert (<= (- (+ (- $k@17@01 $k@78@01) $k@88@01) $k@108@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@17@01 $k@78@01) $k@88@01) $k@108@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2455
;  :arith-add-rows          567
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      670
;  :arith-conflicts         525
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         508
;  :arith-pivots            728
;  :binary-propagations     22
;  :conflicts               880
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1936
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              995
;  :propagations            274
;  :quant-instantiations    59
;  :rlimit-count            278853)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2456
;  :arith-add-rows          568
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      671
;  :arith-conflicts         526
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         509
;  :arith-pivots            729
;  :binary-propagations     22
;  :conflicts               881
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1937
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              996
;  :propagations            275
;  :quant-instantiations    59
;  :rlimit-count            278943)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2456
;  :arith-add-rows          569
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      672
;  :arith-conflicts         527
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         510
;  :arith-pivots            731
;  :binary-propagations     22
;  :conflicts               882
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1938
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              997
;  :propagations            275
;  :quant-instantiations    59
;  :rlimit-count            279053)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2456
;  :arith-add-rows          570
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      673
;  :arith-conflicts         528
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         511
;  :arith-pivots            732
;  :binary-propagations     22
;  :conflicts               883
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1939
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              998
;  :propagations            275
;  :quant-instantiations    59
;  :rlimit-count            279160)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2457
;  :arith-add-rows          571
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      674
;  :arith-conflicts         529
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         512
;  :arith-pivots            733
;  :binary-propagations     22
;  :conflicts               884
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1940
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              999
;  :propagations            276
;  :quant-instantiations    59
;  :rlimit-count            279250)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2457
;  :arith-add-rows          572
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      675
;  :arith-conflicts         530
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         513
;  :arith-pivots            736
;  :binary-propagations     22
;  :conflicts               885
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1941
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1000
;  :propagations            276
;  :quant-instantiations    59
;  :rlimit-count            279365)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2457
;  :arith-add-rows          573
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      676
;  :arith-conflicts         531
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         514
;  :arith-pivots            737
;  :binary-propagations     22
;  :conflicts               886
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1942
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1001
;  :propagations            276
;  :quant-instantiations    59
;  :rlimit-count            279472)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2458
;  :arith-add-rows          574
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      677
;  :arith-conflicts         532
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         515
;  :arith-pivots            738
;  :binary-propagations     22
;  :conflicts               887
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1943
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1002
;  :propagations            277
;  :quant-instantiations    59
;  :rlimit-count            279562)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2458
;  :arith-add-rows          575
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      678
;  :arith-conflicts         533
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         516
;  :arith-pivots            740
;  :binary-propagations     22
;  :conflicts               888
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1944
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1003
;  :propagations            277
;  :quant-instantiations    59
;  :rlimit-count            279672)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2458
;  :arith-add-rows          576
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      679
;  :arith-conflicts         534
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         517
;  :arith-pivots            741
;  :binary-propagations     22
;  :conflicts               889
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1945
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1004
;  :propagations            277
;  :quant-instantiations    59
;  :rlimit-count            279779)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2459
;  :arith-add-rows          577
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      680
;  :arith-conflicts         535
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         518
;  :arith-pivots            742
;  :binary-propagations     22
;  :conflicts               890
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1946
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1005
;  :propagations            278
;  :quant-instantiations    59
;  :rlimit-count            279869)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2459
;  :arith-add-rows          578
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      681
;  :arith-conflicts         536
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         519
;  :arith-pivots            745
;  :binary-propagations     22
;  :conflicts               891
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1947
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1006
;  :propagations            278
;  :quant-instantiations    59
;  :rlimit-count            279984)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2459
;  :arith-add-rows          579
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      682
;  :arith-conflicts         537
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         520
;  :arith-pivots            746
;  :binary-propagations     22
;  :conflicts               892
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1948
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1007
;  :propagations            278
;  :quant-instantiations    59
;  :rlimit-count            280091)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2460
;  :arith-add-rows          580
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      683
;  :arith-conflicts         538
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         521
;  :arith-pivots            747
;  :binary-propagations     22
;  :conflicts               893
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1949
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1008
;  :propagations            279
;  :quant-instantiations    59
;  :rlimit-count            280181)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2460
;  :arith-add-rows          581
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      684
;  :arith-conflicts         539
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         522
;  :arith-pivots            749
;  :binary-propagations     22
;  :conflicts               894
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1950
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1009
;  :propagations            279
;  :quant-instantiations    59
;  :rlimit-count            280291)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2460
;  :arith-add-rows          582
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      685
;  :arith-conflicts         540
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         523
;  :arith-pivots            750
;  :binary-propagations     22
;  :conflicts               895
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1951
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1010
;  :propagations            279
;  :quant-instantiations    59
;  :rlimit-count            280398)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2461
;  :arith-add-rows          583
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      686
;  :arith-conflicts         541
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         524
;  :arith-pivots            751
;  :binary-propagations     22
;  :conflicts               896
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1952
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1011
;  :propagations            280
;  :quant-instantiations    59
;  :rlimit-count            280488)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2461
;  :arith-add-rows          584
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      687
;  :arith-conflicts         542
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         525
;  :arith-pivots            754
;  :binary-propagations     22
;  :conflicts               897
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1953
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1012
;  :propagations            280
;  :quant-instantiations    59
;  :rlimit-count            280603)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2461
;  :arith-add-rows          585
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      688
;  :arith-conflicts         543
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         526
;  :arith-pivots            755
;  :binary-propagations     22
;  :conflicts               898
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1954
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1013
;  :propagations            280
;  :quant-instantiations    59
;  :rlimit-count            280710)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2462
;  :arith-add-rows          586
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      689
;  :arith-conflicts         544
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         527
;  :arith-pivots            756
;  :binary-propagations     22
;  :conflicts               899
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1955
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1014
;  :propagations            281
;  :quant-instantiations    59
;  :rlimit-count            280800)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2462
;  :arith-add-rows          587
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      690
;  :arith-conflicts         545
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         528
;  :arith-pivots            758
;  :binary-propagations     22
;  :conflicts               900
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1956
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1015
;  :propagations            281
;  :quant-instantiations    59
;  :rlimit-count            280910)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2462
;  :arith-add-rows          588
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      691
;  :arith-conflicts         546
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         529
;  :arith-pivots            759
;  :binary-propagations     22
;  :conflicts               901
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1957
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1016
;  :propagations            281
;  :quant-instantiations    59
;  :rlimit-count            281017
;  :time                    0.00)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2463
;  :arith-add-rows          589
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      692
;  :arith-conflicts         547
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         530
;  :arith-pivots            760
;  :binary-propagations     22
;  :conflicts               902
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1958
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1017
;  :propagations            282
;  :quant-instantiations    59
;  :rlimit-count            281107)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2463
;  :arith-add-rows          590
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      693
;  :arith-conflicts         548
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         531
;  :arith-pivots            763
;  :binary-propagations     22
;  :conflicts               903
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1959
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1018
;  :propagations            282
;  :quant-instantiations    59
;  :rlimit-count            281222)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2463
;  :arith-add-rows          591
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      694
;  :arith-conflicts         549
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         532
;  :arith-pivots            764
;  :binary-propagations     22
;  :conflicts               904
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1960
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1019
;  :propagations            282
;  :quant-instantiations    59
;  :rlimit-count            281329)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2464
;  :arith-add-rows          592
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      695
;  :arith-conflicts         550
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         533
;  :arith-pivots            765
;  :binary-propagations     22
;  :conflicts               905
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1961
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1020
;  :propagations            283
;  :quant-instantiations    59
;  :rlimit-count            281419)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2464
;  :arith-add-rows          593
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      696
;  :arith-conflicts         551
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         534
;  :arith-pivots            767
;  :binary-propagations     22
;  :conflicts               906
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1962
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1021
;  :propagations            283
;  :quant-instantiations    59
;  :rlimit-count            281529)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2464
;  :arith-add-rows          594
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      697
;  :arith-conflicts         552
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         535
;  :arith-pivots            768
;  :binary-propagations     22
;  :conflicts               907
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1963
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1022
;  :propagations            283
;  :quant-instantiations    59
;  :rlimit-count            281636)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2465
;  :arith-add-rows          595
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      698
;  :arith-conflicts         553
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         536
;  :arith-pivots            769
;  :binary-propagations     22
;  :conflicts               908
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1964
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1023
;  :propagations            284
;  :quant-instantiations    59
;  :rlimit-count            281726)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2465
;  :arith-add-rows          596
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      699
;  :arith-conflicts         554
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         537
;  :arith-pivots            772
;  :binary-propagations     22
;  :conflicts               909
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1965
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1024
;  :propagations            284
;  :quant-instantiations    59
;  :rlimit-count            281841)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2465
;  :arith-add-rows          597
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      700
;  :arith-conflicts         555
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         538
;  :arith-pivots            773
;  :binary-propagations     22
;  :conflicts               910
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1966
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1025
;  :propagations            284
;  :quant-instantiations    59
;  :rlimit-count            281948)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2466
;  :arith-add-rows          598
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      701
;  :arith-conflicts         556
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         539
;  :arith-pivots            774
;  :binary-propagations     22
;  :conflicts               911
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1967
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1026
;  :propagations            285
;  :quant-instantiations    59
;  :rlimit-count            282038)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2466
;  :arith-add-rows          599
;  :arith-assert-diseq      77
;  :arith-assert-lower      265
;  :arith-assert-upper      702
;  :arith-conflicts         557
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         540
;  :arith-pivots            776
;  :binary-propagations     22
;  :conflicts               912
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1968
;  :mk-clause               273
;  :num-allocs              4727468
;  :num-checks              1027
;  :propagations            285
;  :quant-instantiations    59
;  :rlimit-count            282148)
(declare-const $k@109@01 $Perm)
(assert ($Perm.isReadVar $k@109@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2466
;  :arith-add-rows          600
;  :arith-assert-diseq      78
;  :arith-assert-lower      267
;  :arith-assert-upper      704
;  :arith-conflicts         558
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         541
;  :arith-pivots            777
;  :binary-propagations     22
;  :conflicts               913
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1973
;  :mk-clause               275
;  :num-allocs              4727468
;  :num-checks              1028
;  :propagations            286
;  :quant-instantiations    59
;  :rlimit-count            282404)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@109@01 $Perm.No) (< $Perm.No $k@109@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2466
;  :arith-add-rows          600
;  :arith-assert-diseq      78
;  :arith-assert-lower      267
;  :arith-assert-upper      704
;  :arith-conflicts         558
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         541
;  :arith-pivots            777
;  :binary-propagations     22
;  :conflicts               914
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1973
;  :mk-clause               275
;  :num-allocs              4727468
;  :num-checks              1029
;  :propagations            286
;  :quant-instantiations    59
;  :rlimit-count            282454)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2467
;  :arith-add-rows          601
;  :arith-assert-diseq      78
;  :arith-assert-lower      267
;  :arith-assert-upper      705
;  :arith-conflicts         559
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         542
;  :arith-pivots            778
;  :binary-propagations     22
;  :conflicts               915
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              250
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1974
;  :mk-clause               275
;  :num-allocs              4727468
;  :num-checks              1030
;  :propagations            287
;  :quant-instantiations    59
;  :rlimit-count            282544)
(push) ; 5
(assert (not (not (= (+ (- $k@18@01 $k@79@01) $k@90@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2468
;  :arith-add-rows          601
;  :arith-assert-diseq      78
;  :arith-assert-lower      267
;  :arith-assert-upper      706
;  :arith-conflicts         560
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         542
;  :arith-pivots            778
;  :binary-propagations     22
;  :conflicts               916
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1976
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1031
;  :propagations            288
;  :quant-instantiations    59
;  :rlimit-count            282626)
(assert (< $k@109@01 (+ (- $k@18@01 $k@79@01) $k@90@01)))
(assert (<= $Perm.No (- (+ (- $k@18@01 $k@79@01) $k@90@01) $k@109@01)))
(assert (<= (- (+ (- $k@18@01 $k@79@01) $k@90@01) $k@109@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@18@01 $k@79@01) $k@90@01) $k@109@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2468
;  :arith-add-rows          603
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      708
;  :arith-conflicts         561
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         543
;  :arith-pivots            779
;  :binary-propagations     22
;  :conflicts               917
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1980
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1032
;  :propagations            288
;  :quant-instantiations    59
;  :rlimit-count            282920)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2469
;  :arith-add-rows          604
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      709
;  :arith-conflicts         562
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         544
;  :arith-pivots            780
;  :binary-propagations     22
;  :conflicts               918
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1981
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1033
;  :propagations            289
;  :quant-instantiations    59
;  :rlimit-count            283010)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2469
;  :arith-add-rows          604
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      710
;  :arith-conflicts         563
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         545
;  :arith-pivots            780
;  :binary-propagations     22
;  :conflicts               919
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1982
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1034
;  :propagations            289
;  :quant-instantiations    59
;  :rlimit-count            283093)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2469
;  :arith-add-rows          605
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      711
;  :arith-conflicts         564
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         546
;  :arith-pivots            781
;  :binary-propagations     22
;  :conflicts               920
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1983
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1035
;  :propagations            289
;  :quant-instantiations    59
;  :rlimit-count            283200)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2470
;  :arith-add-rows          606
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      712
;  :arith-conflicts         565
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         547
;  :arith-pivots            782
;  :binary-propagations     22
;  :conflicts               921
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1984
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1036
;  :propagations            290
;  :quant-instantiations    59
;  :rlimit-count            283290)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2470
;  :arith-add-rows          606
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      713
;  :arith-conflicts         566
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         548
;  :arith-pivots            782
;  :binary-propagations     22
;  :conflicts               922
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1985
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1037
;  :propagations            290
;  :quant-instantiations    59
;  :rlimit-count            283373)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2470
;  :arith-add-rows          607
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      714
;  :arith-conflicts         567
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         549
;  :arith-pivots            783
;  :binary-propagations     22
;  :conflicts               923
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1986
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1038
;  :propagations            290
;  :quant-instantiations    59
;  :rlimit-count            283480)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2471
;  :arith-add-rows          608
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      715
;  :arith-conflicts         568
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         550
;  :arith-pivots            784
;  :binary-propagations     22
;  :conflicts               924
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1987
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1039
;  :propagations            291
;  :quant-instantiations    59
;  :rlimit-count            283570)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2471
;  :arith-add-rows          608
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      716
;  :arith-conflicts         569
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         551
;  :arith-pivots            784
;  :binary-propagations     22
;  :conflicts               925
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1988
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1040
;  :propagations            291
;  :quant-instantiations    59
;  :rlimit-count            283653)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2471
;  :arith-add-rows          609
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      717
;  :arith-conflicts         570
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         552
;  :arith-pivots            785
;  :binary-propagations     22
;  :conflicts               926
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1989
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1041
;  :propagations            291
;  :quant-instantiations    59
;  :rlimit-count            283760)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2472
;  :arith-add-rows          610
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      718
;  :arith-conflicts         571
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         553
;  :arith-pivots            786
;  :binary-propagations     22
;  :conflicts               927
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1990
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1042
;  :propagations            292
;  :quant-instantiations    59
;  :rlimit-count            283850)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2472
;  :arith-add-rows          610
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      719
;  :arith-conflicts         572
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         554
;  :arith-pivots            786
;  :binary-propagations     22
;  :conflicts               928
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1991
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1043
;  :propagations            292
;  :quant-instantiations    59
;  :rlimit-count            283933)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2472
;  :arith-add-rows          611
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      720
;  :arith-conflicts         573
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         555
;  :arith-pivots            787
;  :binary-propagations     22
;  :conflicts               929
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1992
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1044
;  :propagations            292
;  :quant-instantiations    59
;  :rlimit-count            284040)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2473
;  :arith-add-rows          612
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      721
;  :arith-conflicts         574
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         556
;  :arith-pivots            788
;  :binary-propagations     22
;  :conflicts               930
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1993
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1045
;  :propagations            293
;  :quant-instantiations    59
;  :rlimit-count            284130)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2473
;  :arith-add-rows          612
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      722
;  :arith-conflicts         575
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         557
;  :arith-pivots            788
;  :binary-propagations     22
;  :conflicts               931
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1994
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1046
;  :propagations            293
;  :quant-instantiations    59
;  :rlimit-count            284213)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2473
;  :arith-add-rows          613
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      723
;  :arith-conflicts         576
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         558
;  :arith-pivots            789
;  :binary-propagations     22
;  :conflicts               932
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1995
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1047
;  :propagations            293
;  :quant-instantiations    59
;  :rlimit-count            284320)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2474
;  :arith-add-rows          614
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      724
;  :arith-conflicts         577
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         559
;  :arith-pivots            790
;  :binary-propagations     22
;  :conflicts               933
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1996
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1048
;  :propagations            294
;  :quant-instantiations    59
;  :rlimit-count            284410)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2474
;  :arith-add-rows          614
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      725
;  :arith-conflicts         578
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         560
;  :arith-pivots            790
;  :binary-propagations     22
;  :conflicts               934
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1997
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1049
;  :propagations            294
;  :quant-instantiations    59
;  :rlimit-count            284493)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2474
;  :arith-add-rows          615
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      726
;  :arith-conflicts         579
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         561
;  :arith-pivots            791
;  :binary-propagations     22
;  :conflicts               935
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1998
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1050
;  :propagations            294
;  :quant-instantiations    59
;  :rlimit-count            284600)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2475
;  :arith-add-rows          616
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      727
;  :arith-conflicts         580
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         562
;  :arith-pivots            792
;  :binary-propagations     22
;  :conflicts               936
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1999
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1051
;  :propagations            295
;  :quant-instantiations    59
;  :rlimit-count            284690)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2475
;  :arith-add-rows          616
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      728
;  :arith-conflicts         581
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         563
;  :arith-pivots            792
;  :binary-propagations     22
;  :conflicts               937
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2000
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1052
;  :propagations            295
;  :quant-instantiations    59
;  :rlimit-count            284773)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2475
;  :arith-add-rows          617
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      729
;  :arith-conflicts         582
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         564
;  :arith-pivots            793
;  :binary-propagations     22
;  :conflicts               938
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2001
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1053
;  :propagations            295
;  :quant-instantiations    59
;  :rlimit-count            284880)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-add-rows          618
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      730
;  :arith-conflicts         583
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         565
;  :arith-pivots            794
;  :binary-propagations     22
;  :conflicts               939
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2002
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1054
;  :propagations            296
;  :quant-instantiations    59
;  :rlimit-count            284970)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@18@01 $k@79@01) $k@90@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-add-rows          618
;  :arith-assert-diseq      78
;  :arith-assert-lower      269
;  :arith-assert-upper      731
;  :arith-conflicts         584
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         566
;  :arith-pivots            794
;  :binary-propagations     22
;  :conflicts               940
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2003
;  :mk-clause               277
;  :num-allocs              4727468
;  :num-checks              1055
;  :propagations            296
;  :quant-instantiations    59
;  :rlimit-count            285053)
(declare-const $k@110@01 $Perm)
(assert ($Perm.isReadVar $k@110@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-add-rows          619
;  :arith-assert-diseq      79
;  :arith-assert-lower      271
;  :arith-assert-upper      733
;  :arith-conflicts         585
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         567
;  :arith-pivots            795
;  :binary-propagations     22
;  :conflicts               941
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2008
;  :mk-clause               279
;  :num-allocs              4727468
;  :num-checks              1056
;  :propagations            297
;  :quant-instantiations    59
;  :rlimit-count            285308)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@110@01 $Perm.No) (< $Perm.No $k@110@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-add-rows          619
;  :arith-assert-diseq      79
;  :arith-assert-lower      271
;  :arith-assert-upper      733
;  :arith-conflicts         585
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         567
;  :arith-pivots            795
;  :binary-propagations     22
;  :conflicts               942
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2008
;  :mk-clause               279
;  :num-allocs              4727468
;  :num-checks              1057
;  :propagations            297
;  :quant-instantiations    59
;  :rlimit-count            285358)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2477
;  :arith-add-rows          620
;  :arith-assert-diseq      79
;  :arith-assert-lower      271
;  :arith-assert-upper      734
;  :arith-conflicts         586
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         568
;  :arith-pivots            796
;  :binary-propagations     22
;  :conflicts               943
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              252
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2009
;  :mk-clause               279
;  :num-allocs              4727468
;  :num-checks              1058
;  :propagations            298
;  :quant-instantiations    59
;  :rlimit-count            285448)
(push) ; 5
(assert (not (not (= (+ (- $k@19@01 $k@80@01) $k@92@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2478
;  :arith-add-rows          620
;  :arith-assert-diseq      79
;  :arith-assert-lower      271
;  :arith-assert-upper      735
;  :arith-conflicts         587
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         568
;  :arith-pivots            796
;  :binary-propagations     22
;  :conflicts               944
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              254
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2011
;  :mk-clause               281
;  :num-allocs              4727468
;  :num-checks              1059
;  :propagations            299
;  :quant-instantiations    59
;  :rlimit-count            285529)
(assert (< $k@110@01 (+ (- $k@19@01 $k@80@01) $k@92@01)))
(assert (<= $Perm.No (- (+ (- $k@19@01 $k@80@01) $k@92@01) $k@110@01)))
(assert (<= (- (+ (- $k@19@01 $k@80@01) $k@92@01) $k@110@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@19@01 $k@80@01) $k@92@01) $k@110@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2478
;  :arith-add-rows          623
;  :arith-assert-diseq      79
;  :arith-assert-lower      273
;  :arith-assert-upper      737
;  :arith-conflicts         588
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         569
;  :arith-pivots            797
;  :binary-propagations     22
;  :conflicts               945
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              254
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2015
;  :mk-clause               281
;  :num-allocs              4727468
;  :num-checks              1060
;  :propagations            299
;  :quant-instantiations    59
;  :rlimit-count            285824)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2479
;  :arith-add-rows          624
;  :arith-assert-diseq      79
;  :arith-assert-lower      273
;  :arith-assert-upper      738
;  :arith-conflicts         589
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         570
;  :arith-pivots            798
;  :binary-propagations     22
;  :conflicts               946
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              254
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2016
;  :mk-clause               281
;  :num-allocs              4727468
;  :num-checks              1061
;  :propagations            300
;  :quant-instantiations    59
;  :rlimit-count            285914)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@80@01) $k@92@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2479
;  :arith-add-rows          624
;  :arith-assert-diseq      79
;  :arith-assert-lower      273
;  :arith-assert-upper      739
;  :arith-conflicts         590
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         571
;  :arith-pivots            798
;  :binary-propagations     22
;  :conflicts               947
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              254
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2017
;  :mk-clause               281
;  :num-allocs              4727468
;  :num-checks              1062
;  :propagations            300
;  :quant-instantiations    59
;  :rlimit-count            285996)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2479
;  :arith-add-rows          625
;  :arith-assert-diseq      79
;  :arith-assert-lower      273
;  :arith-assert-upper      740
;  :arith-conflicts         591
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         572
;  :arith-pivots            799
;  :binary-propagations     22
;  :conflicts               948
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              254
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2018
;  :mk-clause               281
;  :num-allocs              4727468
;  :num-checks              1063
;  :propagations            300
;  :quant-instantiations    59
;  :rlimit-count            286103)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2480
;  :arith-add-rows          626
;  :arith-assert-diseq      79
;  :arith-assert-lower      273
;  :arith-assert-upper      741
;  :arith-conflicts         592
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         573
;  :arith-pivots            800
;  :binary-propagations     22
;  :conflicts               949
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              254
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2019
;  :mk-clause               281
;  :num-allocs              4727468
;  :num-checks              1064
;  :propagations            301
;  :quant-instantiations    59
;  :rlimit-count            286193)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@80@01) $k@92@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2480
;  :arith-add-rows          626
;  :arith-assert-diseq      79
;  :arith-assert-lower      273
;  :arith-assert-upper      742
;  :arith-conflicts         593
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         574
;  :arith-pivots            800
;  :binary-propagations     22
;  :conflicts               950
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              254
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2020
;  :mk-clause               281
;  :num-allocs              4727468
;  :num-checks              1065
;  :propagations            301
;  :quant-instantiations    59
;  :rlimit-count            286275)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2480
;  :arith-add-rows          627
;  :arith-assert-diseq      79
;  :arith-assert-lower      273
;  :arith-assert-upper      743
;  :arith-conflicts         594
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         575
;  :arith-pivots            801
;  :binary-propagations     22
;  :conflicts               951
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              254
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2021
;  :mk-clause               281
;  :num-allocs              4727468
;  :num-checks              1066
;  :propagations            301
;  :quant-instantiations    59
;  :rlimit-count            286382)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2481
;  :arith-add-rows          628
;  :arith-assert-diseq      79
;  :arith-assert-lower      273
;  :arith-assert-upper      744
;  :arith-conflicts         595
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         576
;  :arith-pivots            802
;  :binary-propagations     22
;  :conflicts               952
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              254
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2022
;  :mk-clause               281
;  :num-allocs              4727468
;  :num-checks              1067
;  :propagations            302
;  :quant-instantiations    59
;  :rlimit-count            286472)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@19@01 $k@80@01) $k@92@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2481
;  :arith-add-rows          628
;  :arith-assert-diseq      79
;  :arith-assert-lower      273
;  :arith-assert-upper      745
;  :arith-conflicts         596
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         577
;  :arith-pivots            802
;  :binary-propagations     22
;  :conflicts               953
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              254
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2023
;  :mk-clause               281
;  :num-allocs              4727468
;  :num-checks              1068
;  :propagations            302
;  :quant-instantiations    59
;  :rlimit-count            286554)
(declare-const $k@111@01 $Perm)
(assert ($Perm.isReadVar $k@111@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2481
;  :arith-add-rows          629
;  :arith-assert-diseq      80
;  :arith-assert-lower      275
;  :arith-assert-upper      747
;  :arith-conflicts         597
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         578
;  :arith-pivots            803
;  :binary-propagations     22
;  :conflicts               954
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              254
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2028
;  :mk-clause               283
;  :num-allocs              4727468
;  :num-checks              1069
;  :propagations            303
;  :quant-instantiations    59
;  :rlimit-count            286809)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@111@01 $Perm.No) (< $Perm.No $k@111@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2481
;  :arith-add-rows          629
;  :arith-assert-diseq      80
;  :arith-assert-lower      275
;  :arith-assert-upper      747
;  :arith-conflicts         597
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         578
;  :arith-pivots            803
;  :binary-propagations     22
;  :conflicts               955
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              254
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2028
;  :mk-clause               283
;  :num-allocs              4727468
;  :num-checks              1070
;  :propagations            303
;  :quant-instantiations    59
;  :rlimit-count            286859)
(set-option :timeout 10)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2482
;  :arith-add-rows          630
;  :arith-assert-diseq      80
;  :arith-assert-lower      275
;  :arith-assert-upper      748
;  :arith-conflicts         598
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         579
;  :arith-pivots            804
;  :binary-propagations     22
;  :conflicts               956
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              254
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2029
;  :mk-clause               283
;  :num-allocs              4727468
;  :num-checks              1071
;  :propagations            304
;  :quant-instantiations    59
;  :rlimit-count            286949)
(push) ; 5
(assert (not (not (= (+ (- $k@20@01 $k@81@01) $k@94@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2483
;  :arith-add-rows          630
;  :arith-assert-diseq      80
;  :arith-assert-lower      275
;  :arith-assert-upper      749
;  :arith-conflicts         599
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         579
;  :arith-pivots            805
;  :binary-propagations     22
;  :conflicts               957
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2031
;  :mk-clause               285
;  :num-allocs              4727468
;  :num-checks              1072
;  :propagations            305
;  :quant-instantiations    59
;  :rlimit-count            287038)
(assert (< $k@111@01 (+ (- $k@20@01 $k@81@01) $k@94@01)))
(assert (<= $Perm.No (- (+ (- $k@20@01 $k@81@01) $k@94@01) $k@111@01)))
(assert (<= (- (+ (- $k@20@01 $k@81@01) $k@94@01) $k@111@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@20@01 $k@81@01) $k@94@01) $k@111@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2483
;  :arith-add-rows          632
;  :arith-assert-diseq      80
;  :arith-assert-lower      277
;  :arith-assert-upper      751
;  :arith-conflicts         600
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         580
;  :arith-pivots            807
;  :binary-propagations     22
;  :conflicts               958
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2035
;  :mk-clause               285
;  :num-allocs              4727468
;  :num-checks              1073
;  :propagations            305
;  :quant-instantiations    59
;  :rlimit-count            287338)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2484
;  :arith-add-rows          633
;  :arith-assert-diseq      80
;  :arith-assert-lower      277
;  :arith-assert-upper      752
;  :arith-conflicts         601
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         581
;  :arith-pivots            808
;  :binary-propagations     22
;  :conflicts               959
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2036
;  :mk-clause               285
;  :num-allocs              4727468
;  :num-checks              1074
;  :propagations            306
;  :quant-instantiations    59
;  :rlimit-count            287428)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@20@01 $k@81@01) $k@94@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2484
;  :arith-add-rows          633
;  :arith-assert-diseq      80
;  :arith-assert-lower      277
;  :arith-assert-upper      753
;  :arith-conflicts         602
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         582
;  :arith-pivots            809
;  :binary-propagations     22
;  :conflicts               960
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2037
;  :mk-clause               285
;  :num-allocs              4727468
;  :num-checks              1075
;  :propagations            306
;  :quant-instantiations    59
;  :rlimit-count            287518)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2484
;  :arith-add-rows          634
;  :arith-assert-diseq      80
;  :arith-assert-lower      277
;  :arith-assert-upper      754
;  :arith-conflicts         603
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         583
;  :arith-pivots            810
;  :binary-propagations     22
;  :conflicts               961
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2038
;  :mk-clause               285
;  :num-allocs              4727468
;  :num-checks              1076
;  :propagations            306
;  :quant-instantiations    59
;  :rlimit-count            287625)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2485
;  :arith-add-rows          635
;  :arith-assert-diseq      80
;  :arith-assert-lower      277
;  :arith-assert-upper      755
;  :arith-conflicts         604
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         584
;  :arith-pivots            811
;  :binary-propagations     22
;  :conflicts               962
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2039
;  :mk-clause               285
;  :num-allocs              4727468
;  :num-checks              1077
;  :propagations            307
;  :quant-instantiations    59
;  :rlimit-count            287715)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@20@01 $k@81@01) $k@94@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2485
;  :arith-add-rows          635
;  :arith-assert-diseq      80
;  :arith-assert-lower      277
;  :arith-assert-upper      756
;  :arith-conflicts         605
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         585
;  :arith-pivots            812
;  :binary-propagations     22
;  :conflicts               963
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2040
;  :mk-clause               285
;  :num-allocs              4727468
;  :num-checks              1078
;  :propagations            307
;  :quant-instantiations    59
;  :rlimit-count            287805)
(declare-const $k@112@01 $Perm)
(assert ($Perm.isReadVar $k@112@01 $Perm.Write))
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2485
;  :arith-add-rows          636
;  :arith-assert-diseq      81
;  :arith-assert-lower      279
;  :arith-assert-upper      758
;  :arith-conflicts         606
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         586
;  :arith-pivots            813
;  :binary-propagations     22
;  :conflicts               964
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2045
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1079
;  :propagations            308
;  :quant-instantiations    59
;  :rlimit-count            288061)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2486
;  :arith-add-rows          637
;  :arith-assert-diseq      81
;  :arith-assert-lower      279
;  :arith-assert-upper      759
;  :arith-conflicts         607
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         587
;  :arith-pivots            814
;  :binary-propagations     22
;  :conflicts               965
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2046
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1080
;  :propagations            309
;  :quant-instantiations    59
;  :rlimit-count            288151)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2486
;  :arith-add-rows          638
;  :arith-assert-diseq      81
;  :arith-assert-lower      279
;  :arith-assert-upper      760
;  :arith-conflicts         608
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         588
;  :arith-pivots            817
;  :binary-propagations     22
;  :conflicts               966
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2047
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1081
;  :propagations            309
;  :quant-instantiations    59
;  :rlimit-count            288266)
(set-option :timeout 0)
(push) ; 5
(assert (not (or (= $k@112@01 $Perm.No) (< $Perm.No $k@112@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2486
;  :arith-add-rows          638
;  :arith-assert-diseq      81
;  :arith-assert-lower      279
;  :arith-assert-upper      760
;  :arith-conflicts         608
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         588
;  :arith-pivots            817
;  :binary-propagations     22
;  :conflicts               967
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2047
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1082
;  :propagations            309
;  :quant-instantiations    59
;  :rlimit-count            288316)
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
  $t@89@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2486
;  :arith-add-rows          638
;  :arith-assert-diseq      81
;  :arith-assert-lower      279
;  :arith-assert-upper      760
;  :arith-conflicts         608
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         588
;  :arith-pivots            817
;  :binary-propagations     22
;  :conflicts               967
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2047
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1083
;  :propagations            309
;  :quant-instantiations    59
;  :rlimit-count            288327)
(push) ; 5
(assert (not (not (= (- $k@21@01 $k@82@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2486
;  :arith-add-rows          638
;  :arith-assert-diseq      81
;  :arith-assert-lower      279
;  :arith-assert-upper      760
;  :arith-conflicts         608
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         588
;  :arith-pivots            817
;  :binary-propagations     22
;  :conflicts               968
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2048
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1084
;  :propagations            309
;  :quant-instantiations    59
;  :rlimit-count            288395)
(assert (< $k@112@01 (- $k@21@01 $k@82@01)))
(assert (<= $Perm.No (- (- $k@21@01 $k@82@01) $k@112@01)))
(assert (<= (- (- $k@21@01 $k@82@01) $k@112@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@21@01 $k@82@01) $k@112@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2486
;  :arith-add-rows          640
;  :arith-assert-diseq      81
;  :arith-assert-lower      281
;  :arith-assert-upper      762
;  :arith-conflicts         609
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         589
;  :arith-pivots            818
;  :binary-propagations     22
;  :conflicts               969
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2052
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1085
;  :propagations            309
;  :quant-instantiations    59
;  :rlimit-count            288683)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2487
;  :arith-add-rows          641
;  :arith-assert-diseq      81
;  :arith-assert-lower      281
;  :arith-assert-upper      763
;  :arith-conflicts         610
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         590
;  :arith-pivots            819
;  :binary-propagations     22
;  :conflicts               970
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2053
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1086
;  :propagations            310
;  :quant-instantiations    59
;  :rlimit-count            288773)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2487
;  :arith-add-rows          642
;  :arith-assert-diseq      81
;  :arith-assert-lower      281
;  :arith-assert-upper      764
;  :arith-conflicts         611
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         591
;  :arith-pivots            821
;  :binary-propagations     22
;  :conflicts               971
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2054
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1087
;  :propagations            310
;  :quant-instantiations    59
;  :rlimit-count            288883)
(push) ; 5
(assert (not (= diz@7@01 $t@89@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2487
;  :arith-add-rows          642
;  :arith-assert-diseq      81
;  :arith-assert-lower      281
;  :arith-assert-upper      764
;  :arith-conflicts         611
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         591
;  :arith-pivots            821
;  :binary-propagations     22
;  :conflicts               971
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2054
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1088
;  :propagations            310
;  :quant-instantiations    59
;  :rlimit-count            288894)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2487
;  :arith-add-rows          643
;  :arith-assert-diseq      81
;  :arith-assert-lower      281
;  :arith-assert-upper      765
;  :arith-conflicts         612
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         592
;  :arith-pivots            822
;  :binary-propagations     22
;  :conflicts               972
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2055
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1089
;  :propagations            310
;  :quant-instantiations    59
;  :rlimit-count            289001)
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2487
;  :arith-add-rows          643
;  :arith-assert-diseq      81
;  :arith-assert-lower      281
;  :arith-assert-upper      766
;  :arith-conflicts         613
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         593
;  :arith-pivots            822
;  :binary-propagations     22
;  :conflicts               973
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2056
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1090
;  :propagations            310
;  :quant-instantiations    59
;  :rlimit-count            289088)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 5
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@76@01) $k@85@01) $k@96@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2487
;  :arith-add-rows          643
;  :arith-assert-diseq      81
;  :arith-assert-lower      281
;  :arith-assert-upper      767
;  :arith-conflicts         614
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         594
;  :arith-pivots            822
;  :binary-propagations     22
;  :conflicts               974
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2057
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1091
;  :propagations            310
;  :quant-instantiations    59
;  :rlimit-count            289175)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@97@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2488
;  :arith-add-rows          644
;  :arith-assert-diseq      81
;  :arith-assert-lower      281
;  :arith-assert-upper      768
;  :arith-conflicts         615
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         595
;  :arith-pivots            823
;  :binary-propagations     22
;  :conflicts               975
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2058
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1092
;  :propagations            311
;  :quant-instantiations    59
;  :rlimit-count            289265)
(push) ; 5
(assert (not (< $Perm.No (+ (- $k@17@01 $k@78@01) $k@88@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2488
;  :arith-add-rows          645
;  :arith-assert-diseq      81
;  :arith-assert-lower      281
;  :arith-assert-upper      769
;  :arith-conflicts         616
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         596
;  :arith-pivots            826
;  :binary-propagations     22
;  :conflicts               976
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 531
;  :datatype-occurs-check   36
;  :datatype-splits         275
;  :decisions               520
;  :del-clause              256
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2059
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1093
;  :propagations            311
;  :quant-instantiations    59
;  :rlimit-count            289380)
; [exec]
; inhale false
(pop) ; 4
(push) ; 4
; [else-branch: 26 | __B@12@01 == 1]
(assert (= __B@12@01 1))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 8 | __A@11@01 != 1]
(assert (not (= __A@11@01 1)))
(pop) ; 3
; [eval] !(A__30 == 1)
; [eval] A__30 == 1
(push) ; 3
(assert (not (= __A@11@01 1)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2560
;  :arith-add-rows          648
;  :arith-assert-diseq      81
;  :arith-assert-lower      281
;  :arith-assert-upper      769
;  :arith-conflicts         616
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               976
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 561
;  :datatype-occurs-check   38
;  :datatype-splits         277
;  :decisions               549
;  :del-clause              285
;  :final-checks            30
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2063
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1094
;  :propagations            312
;  :quant-instantiations    59
;  :rlimit-count            290267
;  :time                    0.00)
(push) ; 3
(assert (not (not (= __A@11@01 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      81
;  :arith-assert-lower      281
;  :arith-assert-upper      769
;  :arith-conflicts         616
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               976
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2067
;  :mk-clause               287
;  :num-allocs              4727468
;  :num-checks              1095
;  :propagations            313
;  :quant-instantiations    59
;  :rlimit-count            291037)
; [then-branch: 43 | __A@11@01 != 1 | live]
; [else-branch: 43 | __A@11@01 == 1 | live]
(push) ; 3
; [then-branch: 43 | __A@11@01 != 1]
(assert (not (= __A@11@01 1)))
; [exec]
; __flatten_8__34 := Rng_exp2__EncodedGlobalVariables_Integer(diz, globals__27, pos__29)
; [eval] diz != null
(declare-const $k@113@01 $Perm)
(assert ($Perm.isReadVar $k@113@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@113@01 $Perm.No) (< $Perm.No $k@113@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      82
;  :arith-assert-lower      283
;  :arith-assert-upper      770
;  :arith-conflicts         616
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               977
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2072
;  :mk-clause               289
;  :num-allocs              4727468
;  :num-checks              1096
;  :propagations            314
;  :quant-instantiations    59
;  :rlimit-count            291289)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@15@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      82
;  :arith-assert-lower      283
;  :arith-assert-upper      770
;  :arith-conflicts         616
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               977
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2072
;  :mk-clause               289
;  :num-allocs              4727468
;  :num-checks              1097
;  :propagations            314
;  :quant-instantiations    59
;  :rlimit-count            291300)
(assert (< $k@113@01 $k@15@01))
(assert (<= $Perm.No (- $k@15@01 $k@113@01)))
(assert (<= (- $k@15@01 $k@113@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@15@01 $k@113@01)) (not (= diz@7@01 $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      82
;  :arith-assert-lower      285
;  :arith-assert-upper      771
;  :arith-conflicts         616
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               978
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2075
;  :mk-clause               289
;  :num-allocs              4727468
;  :num-checks              1098
;  :propagations            314
;  :quant-instantiations    59
;  :rlimit-count            291508)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      82
;  :arith-assert-lower      285
;  :arith-assert-upper      771
;  :arith-conflicts         616
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               979
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2075
;  :mk-clause               289
;  :num-allocs              4727468
;  :num-checks              1099
;  :propagations            314
;  :quant-instantiations    59
;  :rlimit-count            291556)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      82
;  :arith-assert-lower      285
;  :arith-assert-upper      771
;  :arith-conflicts         616
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               980
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2075
;  :mk-clause               289
;  :num-allocs              4727468
;  :num-checks              1100
;  :propagations            314
;  :quant-instantiations    59
;  :rlimit-count            291604)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      82
;  :arith-assert-lower      285
;  :arith-assert-upper      771
;  :arith-conflicts         616
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               981
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2075
;  :mk-clause               289
;  :num-allocs              4727468
;  :num-checks              1101
;  :propagations            314
;  :quant-instantiations    59
;  :rlimit-count            291652)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      82
;  :arith-assert-lower      285
;  :arith-assert-upper      771
;  :arith-conflicts         616
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               982
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2075
;  :mk-clause               289
;  :num-allocs              4727468
;  :num-checks              1102
;  :propagations            314
;  :quant-instantiations    59
;  :rlimit-count            291700)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      82
;  :arith-assert-lower      285
;  :arith-assert-upper      771
;  :arith-conflicts         616
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               983
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2075
;  :mk-clause               289
;  :num-allocs              4727468
;  :num-checks              1103
;  :propagations            314
;  :quant-instantiations    59
;  :rlimit-count            291748)
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@114@01 Int)
(push) ; 4
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 5
; [then-branch: 44 | 0 <= i@114@01 | live]
; [else-branch: 44 | !(0 <= i@114@01) | live]
(push) ; 6
; [then-branch: 44 | 0 <= i@114@01]
(assert (<= 0 i@114@01))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      82
;  :arith-assert-lower      286
;  :arith-assert-upper      771
;  :arith-conflicts         616
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               984
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2076
;  :mk-clause               289
;  :num-allocs              4727468
;  :num-checks              1104
;  :propagations            314
;  :quant-instantiations    59
;  :rlimit-count            291849)
(pop) ; 6
(push) ; 6
; [else-branch: 44 | !(0 <= i@114@01)]
(assert (not (<= 0 i@114@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 45 | i@114@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@114@01 | live]
; [else-branch: 45 | !(i@114@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@114@01) | live]
(push) ; 6
; [then-branch: 45 | i@114@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@114@01]
(assert (and
  (<
    i@114@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
  (<= 0 i@114@01)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 7
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      82
;  :arith-assert-lower      287
;  :arith-assert-upper      772
;  :arith-conflicts         616
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               985
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2078
;  :mk-clause               289
;  :num-allocs              4727468
;  :num-checks              1105
;  :propagations            314
;  :quant-instantiations    59
;  :rlimit-count            292006)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i@114@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      82
;  :arith-assert-lower      287
;  :arith-assert-upper      772
;  :arith-conflicts         616
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               985
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2078
;  :mk-clause               289
;  :num-allocs              4727468
;  :num-checks              1106
;  :propagations            314
;  :quant-instantiations    59
;  :rlimit-count            292015)
; [eval] -1
(push) ; 7
; [then-branch: 46 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@114@01] == -1 | live]
; [else-branch: 46 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@114@01] != -1 | live]
(push) ; 8
; [then-branch: 46 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@114@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@114@01)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 46 | First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@114@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
      i@114@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      83
;  :arith-assert-lower      290
;  :arith-assert-upper      773
;  :arith-conflicts         616
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               986
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2084
;  :mk-clause               293
;  :num-allocs              4727468
;  :num-checks              1107
;  :propagations            316
;  :quant-instantiations    60
;  :rlimit-count            292298)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@114@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      83
;  :arith-assert-lower      290
;  :arith-assert-upper      773
;  :arith-conflicts         616
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               986
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2084
;  :mk-clause               293
;  :num-allocs              4727468
;  :num-checks              1108
;  :propagations            316
;  :quant-instantiations    60
;  :rlimit-count            292307)
(push) ; 9
; [then-branch: 47 | 0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@114@01] | live]
; [else-branch: 47 | !(0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@114@01]) | live]
(push) ; 10
; [then-branch: 47 | 0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@114@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@114@01)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      83
;  :arith-assert-lower      290
;  :arith-assert-upper      773
;  :arith-conflicts         616
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               987
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2084
;  :mk-clause               293
;  :num-allocs              4727468
;  :num-checks              1109
;  :propagations            316
;  :quant-instantiations    60
;  :rlimit-count            292470)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@114@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      83
;  :arith-assert-lower      290
;  :arith-assert-upper      773
;  :arith-conflicts         616
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               987
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2084
;  :mk-clause               293
;  :num-allocs              4727468
;  :num-checks              1110
;  :propagations            316
;  :quant-instantiations    60
;  :rlimit-count            292479)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      83
;  :arith-assert-lower      290
;  :arith-assert-upper      773
;  :arith-conflicts         616
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               988
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              285
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2084
;  :mk-clause               293
;  :num-allocs              4727468
;  :num-checks              1111
;  :propagations            316
;  :quant-instantiations    60
;  :rlimit-count            292527)
(pop) ; 10
(push) ; 10
; [else-branch: 47 | !(0 <= First:(Second:(Second:(Second:(Second:($t@14@01)))))[i@114@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
      i@114@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 45 | !(i@114@01 < |First:(Second:(Second:(Second:(Second:($t@14@01)))))| && 0 <= i@114@01)]
(assert (not
  (and
    (<
      i@114@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
    (<= 0 i@114@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i@114@01 Int)) (!
  (implies
    (and
      (<
        i@114@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
      (<= 0 i@114@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
          i@114@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@114@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@114@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@114@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      84
;  :arith-assert-lower      291
;  :arith-assert-upper      774
;  :arith-conflicts         616
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               989
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2092
;  :mk-clause               305
;  :num-allocs              4727468
;  :num-checks              1112
;  :propagations            318
;  :quant-instantiations    61
;  :rlimit-count            292985)
(assert (forall ((i@114@01 Int)) (!
  (implies
    (and
      (<
        i@114@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
      (<= 0 i@114@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
          i@114@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@114@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
            i@114@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    i@114@01))
  :qid |prog.l<no position>|)))
(declare-const $k@115@01 $Perm)
(assert ($Perm.isReadVar $k@115@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      293
;  :arith-assert-upper      775
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               990
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2097
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1113
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            293561)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@115@01 $Perm.No) (< $Perm.No $k@115@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      293
;  :arith-assert-upper      775
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               991
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2097
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1114
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            293611)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@17@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      293
;  :arith-assert-upper      775
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            840
;  :binary-propagations     22
;  :conflicts               991
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2097
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1115
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            293622)
(assert (< $k@115@01 $k@17@01))
(assert (<= $Perm.No (- $k@17@01 $k@115@01)))
(assert (<= (- $k@17@01 $k@115@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@17@01 $k@115@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               992
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1116
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            293836)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               993
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1117
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            293884)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               994
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1118
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            293932)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               995
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1119
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            293980)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               996
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1120
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294028)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               997
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1121
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294076)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               998
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1122
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294124)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               999
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1123
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294172)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1000
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1124
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294220)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1001
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1125
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294268)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1002
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1126
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294316)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1003
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1127
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294364)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1004
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1128
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294412)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1005
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1129
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294460)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1006
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1130
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294508)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1007
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1131
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294556)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1008
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1132
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294604)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1009
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1133
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294652)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1010
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1134
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294700)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1011
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1135
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294748)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1012
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1136
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294796)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      85
;  :arith-assert-lower      295
;  :arith-assert-upper      776
;  :arith-conflicts         616
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1013
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2100
;  :mk-clause               307
;  :num-allocs              4727468
;  :num-checks              1137
;  :propagations            319
;  :quant-instantiations    61
;  :rlimit-count            294844)
(declare-const $k@116@01 $Perm)
(assert ($Perm.isReadVar $k@116@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      297
;  :arith-assert-upper      777
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1014
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2104
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1138
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295041)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@116@01 $Perm.No) (< $Perm.No $k@116@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      297
;  :arith-assert-upper      777
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1015
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2104
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1139
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295091)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@18@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      297
;  :arith-assert-upper      777
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1015
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2104
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1140
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295102)
(assert (< $k@116@01 $k@18@01))
(assert (<= $Perm.No (- $k@18@01 $k@116@01)))
(assert (<= (- $k@18@01 $k@116@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@18@01 $k@116@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1016
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1141
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295310)
(push) ; 4
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1017
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1142
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295358)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1018
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1143
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295406)
(push) ; 4
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1019
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1144
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295454)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1020
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1145
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295502)
(push) ; 4
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1021
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1146
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295550)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1022
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1147
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295598)
(push) ; 4
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1023
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1148
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295646)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1024
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1149
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295694)
(push) ; 4
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1025
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1150
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295742)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1026
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1151
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295790)
(push) ; 4
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1027
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1152
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295838)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1028
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1153
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295886)
(push) ; 4
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1029
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1154
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295934)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1030
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1155
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            295982)
(push) ; 4
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      86
;  :arith-assert-lower      299
;  :arith-assert-upper      778
;  :arith-conflicts         616
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1031
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2107
;  :mk-clause               309
;  :num-allocs              4727468
;  :num-checks              1156
;  :propagations            320
;  :quant-instantiations    61
;  :rlimit-count            296030)
(declare-const $k@117@01 $Perm)
(assert ($Perm.isReadVar $k@117@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      87
;  :arith-assert-lower      301
;  :arith-assert-upper      779
;  :arith-conflicts         616
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1032
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2111
;  :mk-clause               311
;  :num-allocs              4727468
;  :num-checks              1157
;  :propagations            321
;  :quant-instantiations    61
;  :rlimit-count            296227)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@117@01 $Perm.No) (< $Perm.No $k@117@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      87
;  :arith-assert-lower      301
;  :arith-assert-upper      779
;  :arith-conflicts         616
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1033
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2111
;  :mk-clause               311
;  :num-allocs              4727468
;  :num-checks              1158
;  :propagations            321
;  :quant-instantiations    61
;  :rlimit-count            296277)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@19@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      87
;  :arith-assert-lower      301
;  :arith-assert-upper      779
;  :arith-conflicts         616
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1033
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2111
;  :mk-clause               311
;  :num-allocs              4727468
;  :num-checks              1159
;  :propagations            321
;  :quant-instantiations    61
;  :rlimit-count            296288)
(assert (< $k@117@01 $k@19@01))
(assert (<= $Perm.No (- $k@19@01 $k@117@01)))
(assert (<= (- $k@19@01 $k@117@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@19@01 $k@117@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      87
;  :arith-assert-lower      303
;  :arith-assert-upper      780
;  :arith-conflicts         616
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1034
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2114
;  :mk-clause               311
;  :num-allocs              4727468
;  :num-checks              1160
;  :propagations            321
;  :quant-instantiations    61
;  :rlimit-count            296496)
(push) ; 4
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      87
;  :arith-assert-lower      303
;  :arith-assert-upper      780
;  :arith-conflicts         616
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1035
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2114
;  :mk-clause               311
;  :num-allocs              4727468
;  :num-checks              1161
;  :propagations            321
;  :quant-instantiations    61
;  :rlimit-count            296544)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      87
;  :arith-assert-lower      303
;  :arith-assert-upper      780
;  :arith-conflicts         616
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1036
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2114
;  :mk-clause               311
;  :num-allocs              4727468
;  :num-checks              1162
;  :propagations            321
;  :quant-instantiations    61
;  :rlimit-count            296592)
(push) ; 4
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      87
;  :arith-assert-lower      303
;  :arith-assert-upper      780
;  :arith-conflicts         616
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1037
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2114
;  :mk-clause               311
;  :num-allocs              4727468
;  :num-checks              1163
;  :propagations            321
;  :quant-instantiations    61
;  :rlimit-count            296640)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      87
;  :arith-assert-lower      303
;  :arith-assert-upper      780
;  :arith-conflicts         616
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1038
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2114
;  :mk-clause               311
;  :num-allocs              4727468
;  :num-checks              1164
;  :propagations            321
;  :quant-instantiations    61
;  :rlimit-count            296688)
(push) ; 4
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      87
;  :arith-assert-lower      303
;  :arith-assert-upper      780
;  :arith-conflicts         616
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1039
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2114
;  :mk-clause               311
;  :num-allocs              4727468
;  :num-checks              1165
;  :propagations            321
;  :quant-instantiations    61
;  :rlimit-count            296736)
(declare-const $k@118@01 $Perm)
(assert ($Perm.isReadVar $k@118@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      88
;  :arith-assert-lower      305
;  :arith-assert-upper      781
;  :arith-conflicts         616
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1040
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2118
;  :mk-clause               313
;  :num-allocs              4727468
;  :num-checks              1166
;  :propagations            322
;  :quant-instantiations    61
;  :rlimit-count            296933)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@118@01 $Perm.No) (< $Perm.No $k@118@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      88
;  :arith-assert-lower      305
;  :arith-assert-upper      781
;  :arith-conflicts         616
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1041
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2118
;  :mk-clause               313
;  :num-allocs              4727468
;  :num-checks              1167
;  :propagations            322
;  :quant-instantiations    61
;  :rlimit-count            296983)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@20@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      88
;  :arith-assert-lower      305
;  :arith-assert-upper      781
;  :arith-conflicts         616
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1041
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2118
;  :mk-clause               313
;  :num-allocs              4727468
;  :num-checks              1168
;  :propagations            322
;  :quant-instantiations    61
;  :rlimit-count            296994)
(assert (< $k@118@01 $k@20@01))
(assert (<= $Perm.No (- $k@20@01 $k@118@01)))
(assert (<= (- $k@20@01 $k@118@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@20@01 $k@118@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      88
;  :arith-assert-lower      307
;  :arith-assert-upper      782
;  :arith-conflicts         616
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1042
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2121
;  :mk-clause               313
;  :num-allocs              4727468
;  :num-checks              1169
;  :propagations            322
;  :quant-instantiations    61
;  :rlimit-count            297202)
(push) ; 4
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      88
;  :arith-assert-lower      307
;  :arith-assert-upper      782
;  :arith-conflicts         616
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1043
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2121
;  :mk-clause               313
;  :num-allocs              4727468
;  :num-checks              1170
;  :propagations            322
;  :quant-instantiations    61
;  :rlimit-count            297250)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      88
;  :arith-assert-lower      307
;  :arith-assert-upper      782
;  :arith-conflicts         616
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1044
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2121
;  :mk-clause               313
;  :num-allocs              4727468
;  :num-checks              1171
;  :propagations            322
;  :quant-instantiations    61
;  :rlimit-count            297298)
(push) ; 4
(assert (not (< $Perm.No $k@20@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      88
;  :arith-assert-lower      307
;  :arith-assert-upper      782
;  :arith-conflicts         616
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1045
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2121
;  :mk-clause               313
;  :num-allocs              4727468
;  :num-checks              1172
;  :propagations            322
;  :quant-instantiations    61
;  :rlimit-count            297346)
(declare-const $k@119@01 $Perm)
(assert ($Perm.isReadVar $k@119@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      89
;  :arith-assert-lower      309
;  :arith-assert-upper      783
;  :arith-conflicts         616
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1046
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2125
;  :mk-clause               315
;  :num-allocs              4727468
;  :num-checks              1173
;  :propagations            323
;  :quant-instantiations    61
;  :rlimit-count            297542)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      89
;  :arith-assert-lower      309
;  :arith-assert-upper      783
;  :arith-conflicts         616
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1047
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2125
;  :mk-clause               315
;  :num-allocs              4727468
;  :num-checks              1174
;  :propagations            323
;  :quant-instantiations    61
;  :rlimit-count            297590)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@119@01 $Perm.No) (< $Perm.No $k@119@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      89
;  :arith-assert-lower      309
;  :arith-assert-upper      783
;  :arith-conflicts         616
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1048
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2125
;  :mk-clause               315
;  :num-allocs              4727468
;  :num-checks              1175
;  :propagations            323
;  :quant-instantiations    61
;  :rlimit-count            297640)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@21@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      89
;  :arith-assert-lower      309
;  :arith-assert-upper      783
;  :arith-conflicts         616
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         596
;  :arith-pivots            841
;  :binary-propagations     22
;  :conflicts               1048
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2125
;  :mk-clause               315
;  :num-allocs              4727468
;  :num-checks              1176
;  :propagations            323
;  :quant-instantiations    61
;  :rlimit-count            297651)
(assert (< $k@119@01 $k@21@01))
(assert (<= $Perm.No (- $k@21@01 $k@119@01)))
(assert (<= (- $k@21@01 $k@119@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@21@01 $k@119@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      89
;  :arith-assert-lower      311
;  :arith-assert-upper      784
;  :arith-conflicts         616
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         596
;  :arith-pivots            843
;  :binary-propagations     22
;  :conflicts               1049
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2128
;  :mk-clause               315
;  :num-allocs              4727468
;  :num-checks              1177
;  :propagations            323
;  :quant-instantiations    61
;  :rlimit-count            297871)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      89
;  :arith-assert-lower      311
;  :arith-assert-upper      784
;  :arith-conflicts         616
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         596
;  :arith-pivots            843
;  :binary-propagations     22
;  :conflicts               1050
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2128
;  :mk-clause               315
;  :num-allocs              4727468
;  :num-checks              1178
;  :propagations            323
;  :quant-instantiations    61
;  :rlimit-count            297919)
(push) ; 4
(assert (not (< $Perm.No $k@21@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      89
;  :arith-assert-lower      311
;  :arith-assert-upper      784
;  :arith-conflicts         616
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         596
;  :arith-pivots            843
;  :binary-propagations     22
;  :conflicts               1051
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2128
;  :mk-clause               315
;  :num-allocs              4727468
;  :num-checks              1179
;  :propagations            323
;  :quant-instantiations    61
;  :rlimit-count            297967)
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      89
;  :arith-assert-lower      311
;  :arith-assert-upper      784
;  :arith-conflicts         616
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         596
;  :arith-pivots            843
;  :binary-propagations     22
;  :conflicts               1052
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2128
;  :mk-clause               315
;  :num-allocs              4727468
;  :num-checks              1180
;  :propagations            323
;  :quant-instantiations    61
;  :rlimit-count            298015)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 4
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      89
;  :arith-assert-lower      311
;  :arith-assert-upper      784
;  :arith-conflicts         616
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         596
;  :arith-pivots            843
;  :binary-propagations     22
;  :conflicts               1053
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2128
;  :mk-clause               315
;  :num-allocs              4727468
;  :num-checks              1181
;  :propagations            323
;  :quant-instantiations    61
;  :rlimit-count            298063)
(push) ; 4
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2633
;  :arith-add-rows          648
;  :arith-assert-diseq      89
;  :arith-assert-lower      311
;  :arith-assert-upper      784
;  :arith-conflicts         616
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         596
;  :arith-pivots            843
;  :binary-propagations     22
;  :conflicts               1054
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2128
;  :mk-clause               315
;  :num-allocs              4727468
;  :num-checks              1182
;  :propagations            323
;  :quant-instantiations    61
;  :rlimit-count            298111)
(declare-const sys__result@120@01 Int)
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 ($Snap.combine ($Snap.first $t@121@01) ($Snap.second $t@121@01))))
(declare-const $k@122@01 $Perm)
(assert ($Perm.isReadVar $k@122@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@122@01 $Perm.No) (< $Perm.No $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2638
;  :arith-add-rows          648
;  :arith-assert-diseq      90
;  :arith-assert-lower      313
;  :arith-assert-upper      785
;  :arith-conflicts         616
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         596
;  :arith-pivots            843
;  :binary-propagations     22
;  :conflicts               1055
;  :datatype-accessor-ax    172
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2133
;  :mk-clause               317
;  :num-allocs              4727468
;  :num-checks              1183
;  :propagations            324
;  :quant-instantiations    61
;  :rlimit-count            298397)
(declare-const $t@123@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@15@01 $k@113@01))
    (=
      $t@123@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))))
  (implies
    (< $Perm.No $k@122@01)
    (= $t@123@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@121@01))))))
(assert (<= $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01)))
(assert (<= (+ (- $k@15@01 $k@113@01) $k@122@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second $t@121@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@121@01))
    ($Snap.second ($Snap.second $t@121@01)))))
(assert (= ($Snap.first ($Snap.second $t@121@01)) $Snap.unit))
; [eval] diz.Rng_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2648
;  :arith-add-rows          649
;  :arith-assert-diseq      90
;  :arith-assert-lower      314
;  :arith-assert-upper      787
;  :arith-conflicts         617
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         597
;  :arith-pivots            846
;  :binary-propagations     22
;  :conflicts               1056
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2141
;  :mk-clause               317
;  :num-allocs              4727468
;  :num-checks              1184
;  :propagations            324
;  :quant-instantiations    62
;  :rlimit-count            298960)
(assert (not (= $t@123@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@121@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@121@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2654
;  :arith-add-rows          650
;  :arith-assert-diseq      90
;  :arith-assert-lower      314
;  :arith-assert-upper      788
;  :arith-conflicts         618
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         598
;  :arith-pivots            849
;  :binary-propagations     22
;  :conflicts               1057
;  :datatype-accessor-ax    174
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2144
;  :mk-clause               317
;  :num-allocs              4727468
;  :num-checks              1185
;  :propagations            324
;  :quant-instantiations    62
;  :rlimit-count            299237)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@121@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2659
;  :arith-add-rows          651
;  :arith-assert-diseq      90
;  :arith-assert-lower      314
;  :arith-assert-upper      789
;  :arith-conflicts         619
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         599
;  :arith-pivots            851
;  :binary-propagations     22
;  :conflicts               1058
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2146
;  :mk-clause               317
;  :num-allocs              4727468
;  :num-checks              1186
;  :propagations            324
;  :quant-instantiations    62
;  :rlimit-count            299474)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2665
;  :arith-add-rows          652
;  :arith-assert-diseq      90
;  :arith-assert-lower      314
;  :arith-assert-upper      790
;  :arith-conflicts         620
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         600
;  :arith-pivots            854
;  :binary-propagations     22
;  :conflicts               1059
;  :datatype-accessor-ax    176
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2149
;  :mk-clause               317
;  :num-allocs              4727468
;  :num-checks              1187
;  :propagations            324
;  :quant-instantiations    62
;  :rlimit-count            299758)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2672
;  :arith-add-rows          653
;  :arith-assert-diseq      90
;  :arith-assert-lower      316
;  :arith-assert-upper      792
;  :arith-conflicts         621
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         601
;  :arith-pivots            856
;  :binary-propagations     22
;  :conflicts               1060
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2156
;  :mk-clause               317
;  :num-allocs              4727468
;  :num-checks              1188
;  :propagations            324
;  :quant-instantiations    64
;  :rlimit-count            300147)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2678
;  :arith-add-rows          654
;  :arith-assert-diseq      90
;  :arith-assert-lower      316
;  :arith-assert-upper      793
;  :arith-conflicts         622
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         602
;  :arith-pivots            859
;  :binary-propagations     22
;  :conflicts               1061
;  :datatype-accessor-ax    178
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2159
;  :mk-clause               317
;  :num-allocs              4727468
;  :num-checks              1189
;  :propagations            324
;  :quant-instantiations    64
;  :rlimit-count            300451)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@124@01 Int)
(push) ; 4
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 5
; [then-branch: 48 | 0 <= i@124@01 | live]
; [else-branch: 48 | !(0 <= i@124@01) | live]
(push) ; 6
; [then-branch: 48 | 0 <= i@124@01]
(assert (<= 0 i@124@01))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2686
;  :arith-add-rows          655
;  :arith-assert-diseq      90
;  :arith-assert-lower      319
;  :arith-assert-upper      795
;  :arith-conflicts         623
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         603
;  :arith-pivots            861
;  :binary-propagations     22
;  :conflicts               1062
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2168
;  :mk-clause               317
;  :num-allocs              4727468
;  :num-checks              1190
;  :propagations            324
;  :quant-instantiations    66
;  :rlimit-count            300951)
(pop) ; 6
(push) ; 6
; [else-branch: 48 | !(0 <= i@124@01)]
(assert (not (<= 0 i@124@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 49 | i@124@01 < |First:(Second:(Second:(Second:($t@121@01))))| && 0 <= i@124@01 | live]
; [else-branch: 49 | !(i@124@01 < |First:(Second:(Second:(Second:($t@121@01))))| && 0 <= i@124@01) | live]
(push) ; 6
; [then-branch: 49 | i@124@01 < |First:(Second:(Second:(Second:($t@121@01))))| && 0 <= i@124@01]
(assert (and
  (<
    i@124@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
  (<= 0 i@124@01)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 7
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2686
;  :arith-add-rows          656
;  :arith-assert-diseq      90
;  :arith-assert-lower      320
;  :arith-assert-upper      797
;  :arith-conflicts         624
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         604
;  :arith-pivots            864
;  :binary-propagations     22
;  :conflicts               1063
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2171
;  :mk-clause               317
;  :num-allocs              4727468
;  :num-checks              1191
;  :propagations            324
;  :quant-instantiations    66
;  :rlimit-count            301173)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i@124@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2686
;  :arith-add-rows          656
;  :arith-assert-diseq      90
;  :arith-assert-lower      320
;  :arith-assert-upper      797
;  :arith-conflicts         624
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         604
;  :arith-pivots            864
;  :binary-propagations     22
;  :conflicts               1063
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2171
;  :mk-clause               317
;  :num-allocs              4727468
;  :num-checks              1192
;  :propagations            324
;  :quant-instantiations    66
;  :rlimit-count            301182)
; [eval] -1
(push) ; 7
; [then-branch: 50 | First:(Second:(Second:(Second:($t@121@01))))[i@124@01] == -1 | live]
; [else-branch: 50 | First:(Second:(Second:(Second:($t@121@01))))[i@124@01] != -1 | live]
(push) ; 8
; [then-branch: 50 | First:(Second:(Second:(Second:($t@121@01))))[i@124@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
    i@124@01)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 50 | First:(Second:(Second:(Second:($t@121@01))))[i@124@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
      i@124@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2686
;  :arith-add-rows          657
;  :arith-assert-diseq      90
;  :arith-assert-lower      320
;  :arith-assert-upper      798
;  :arith-conflicts         625
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         605
;  :arith-pivots            866
;  :binary-propagations     22
;  :conflicts               1064
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2173
;  :mk-clause               317
;  :num-allocs              4727468
;  :num-checks              1193
;  :propagations            324
;  :quant-instantiations    66
;  :rlimit-count            301456)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@124@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2686
;  :arith-add-rows          657
;  :arith-assert-diseq      90
;  :arith-assert-lower      320
;  :arith-assert-upper      798
;  :arith-conflicts         625
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         605
;  :arith-pivots            866
;  :binary-propagations     22
;  :conflicts               1064
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2173
;  :mk-clause               317
;  :num-allocs              4727468
;  :num-checks              1194
;  :propagations            324
;  :quant-instantiations    66
;  :rlimit-count            301465)
(push) ; 9
; [then-branch: 51 | 0 <= First:(Second:(Second:(Second:($t@121@01))))[i@124@01] | live]
; [else-branch: 51 | !(0 <= First:(Second:(Second:(Second:($t@121@01))))[i@124@01]) | live]
(push) ; 10
; [then-branch: 51 | 0 <= First:(Second:(Second:(Second:($t@121@01))))[i@124@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
    i@124@01)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2686
;  :arith-add-rows          658
;  :arith-assert-diseq      91
;  :arith-assert-lower      323
;  :arith-assert-upper      799
;  :arith-conflicts         626
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         606
;  :arith-pivots            869
;  :binary-propagations     22
;  :conflicts               1065
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2177
;  :mk-clause               318
;  :num-allocs              4727468
;  :num-checks              1195
;  :propagations            324
;  :quant-instantiations    66
;  :rlimit-count            301692)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@124@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2686
;  :arith-add-rows          658
;  :arith-assert-diseq      91
;  :arith-assert-lower      323
;  :arith-assert-upper      799
;  :arith-conflicts         626
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         606
;  :arith-pivots            869
;  :binary-propagations     22
;  :conflicts               1065
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2177
;  :mk-clause               318
;  :num-allocs              4727468
;  :num-checks              1196
;  :propagations            324
;  :quant-instantiations    66
;  :rlimit-count            301701)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2686
;  :arith-add-rows          659
;  :arith-assert-diseq      91
;  :arith-assert-lower      323
;  :arith-assert-upper      800
;  :arith-conflicts         627
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         607
;  :arith-pivots            871
;  :binary-propagations     22
;  :conflicts               1066
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              301
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2178
;  :mk-clause               318
;  :num-allocs              4727468
;  :num-checks              1197
;  :propagations            324
;  :quant-instantiations    66
;  :rlimit-count            301809)
(pop) ; 10
(push) ; 10
; [else-branch: 51 | !(0 <= First:(Second:(Second:(Second:($t@121@01))))[i@124@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
      i@124@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 49 | !(i@124@01 < |First:(Second:(Second:(Second:($t@121@01))))| && 0 <= i@124@01)]
(assert (not
  (and
    (<
      i@124@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
    (<= 0 i@124@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@124@01 Int)) (!
  (implies
    (and
      (<
        i@124@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
      (<= 0 i@124@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
          i@124@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
            i@124@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
            i@124@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
    i@124@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2691
;  :arith-add-rows          660
;  :arith-assert-diseq      91
;  :arith-assert-lower      323
;  :arith-assert-upper      801
;  :arith-conflicts         628
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         608
;  :arith-pivots            874
;  :binary-propagations     22
;  :conflicts               1067
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2181
;  :mk-clause               318
;  :num-allocs              4727468
;  :num-checks              1198
;  :propagations            324
;  :quant-instantiations    66
;  :rlimit-count            302499)
(declare-const $k@125@01 $Perm)
(assert ($Perm.isReadVar $k@125@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@125@01 $Perm.No) (< $Perm.No $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2691
;  :arith-add-rows          660
;  :arith-assert-diseq      92
;  :arith-assert-lower      325
;  :arith-assert-upper      802
;  :arith-conflicts         628
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         608
;  :arith-pivots            874
;  :binary-propagations     22
;  :conflicts               1068
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2185
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1199
;  :propagations            325
;  :quant-instantiations    66
;  :rlimit-count            302697)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2691
;  :arith-add-rows          660
;  :arith-assert-diseq      92
;  :arith-assert-lower      325
;  :arith-assert-upper      802
;  :arith-conflicts         628
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         608
;  :arith-pivots            874
;  :binary-propagations     22
;  :conflicts               1068
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2185
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1200
;  :propagations            325
;  :quant-instantiations    66
;  :rlimit-count            302708)
(declare-const $t@126@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@17@01 $k@115@01))
    (=
      $t@126@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
  (implies
    (< $Perm.No $k@125@01)
    (=
      $t@126@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))
(assert (<= $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01)))
(assert (<= (+ (- $k@17@01 $k@115@01) $k@125@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2701
;  :arith-add-rows          662
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      804
;  :arith-conflicts         629
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         609
;  :arith-pivots            876
;  :binary-propagations     22
;  :conflicts               1069
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2193
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1201
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            303324)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2701
;  :arith-add-rows          662
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      804
;  :arith-conflicts         629
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         609
;  :arith-pivots            876
;  :binary-propagations     22
;  :conflicts               1069
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2193
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1202
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            303335)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2701
;  :arith-add-rows          662
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      805
;  :arith-conflicts         630
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         610
;  :arith-pivots            877
;  :binary-propagations     22
;  :conflicts               1070
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2194
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1203
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            303419)
(assert (not (= $t@126@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2706
;  :arith-add-rows          663
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      806
;  :arith-conflicts         631
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         611
;  :arith-pivots            880
;  :binary-propagations     22
;  :conflicts               1071
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2196
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1204
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            303749)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2706
;  :arith-add-rows          663
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      806
;  :arith-conflicts         631
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         611
;  :arith-pivots            880
;  :binary-propagations     22
;  :conflicts               1071
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2196
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1205
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            303760)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2706
;  :arith-add-rows          663
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      807
;  :arith-conflicts         632
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         612
;  :arith-pivots            880
;  :binary-propagations     22
;  :conflicts               1072
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2197
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1206
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            303840)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2711
;  :arith-add-rows          664
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      808
;  :arith-conflicts         633
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         613
;  :arith-pivots            882
;  :binary-propagations     22
;  :conflicts               1073
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2199
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1207
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            304157)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2711
;  :arith-add-rows          664
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      808
;  :arith-conflicts         633
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         613
;  :arith-pivots            882
;  :binary-propagations     22
;  :conflicts               1073
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2199
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1208
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            304168)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2711
;  :arith-add-rows          664
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      809
;  :arith-conflicts         634
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         614
;  :arith-pivots            882
;  :binary-propagations     22
;  :conflicts               1074
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2200
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1209
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            304248)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2716
;  :arith-add-rows          665
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      810
;  :arith-conflicts         635
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         615
;  :arith-pivots            885
;  :binary-propagations     22
;  :conflicts               1075
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2202
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1210
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            304580)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2716
;  :arith-add-rows          665
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      810
;  :arith-conflicts         635
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         615
;  :arith-pivots            885
;  :binary-propagations     22
;  :conflicts               1075
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2202
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1211
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            304591)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2716
;  :arith-add-rows          665
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      811
;  :arith-conflicts         636
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         616
;  :arith-pivots            885
;  :binary-propagations     22
;  :conflicts               1076
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2203
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1212
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            304671)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2721
;  :arith-add-rows          666
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      812
;  :arith-conflicts         637
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         617
;  :arith-pivots            887
;  :binary-propagations     22
;  :conflicts               1077
;  :datatype-accessor-ax    185
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2205
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1213
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            305008)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2721
;  :arith-add-rows          666
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      812
;  :arith-conflicts         637
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         617
;  :arith-pivots            887
;  :binary-propagations     22
;  :conflicts               1077
;  :datatype-accessor-ax    185
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2205
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1214
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            305019)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2721
;  :arith-add-rows          666
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      813
;  :arith-conflicts         638
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         618
;  :arith-pivots            887
;  :binary-propagations     22
;  :conflicts               1078
;  :datatype-accessor-ax    185
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2206
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1215
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            305099)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2726
;  :arith-add-rows          667
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      814
;  :arith-conflicts         639
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         619
;  :arith-pivots            890
;  :binary-propagations     22
;  :conflicts               1079
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2208
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1216
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            305451)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2726
;  :arith-add-rows          667
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      814
;  :arith-conflicts         639
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         619
;  :arith-pivots            890
;  :binary-propagations     22
;  :conflicts               1079
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2208
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1217
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            305462)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2726
;  :arith-add-rows          667
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      815
;  :arith-conflicts         640
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         620
;  :arith-pivots            890
;  :binary-propagations     22
;  :conflicts               1080
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2209
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1218
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            305542)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2731
;  :arith-add-rows          668
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      816
;  :arith-conflicts         641
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         621
;  :arith-pivots            892
;  :binary-propagations     22
;  :conflicts               1081
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2211
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1219
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            305899)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2731
;  :arith-add-rows          668
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      816
;  :arith-conflicts         641
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         621
;  :arith-pivots            892
;  :binary-propagations     22
;  :conflicts               1081
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2211
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1220
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            305910)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2731
;  :arith-add-rows          668
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      817
;  :arith-conflicts         642
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         622
;  :arith-pivots            892
;  :binary-propagations     22
;  :conflicts               1082
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2212
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1221
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            305990)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2736
;  :arith-add-rows          669
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      818
;  :arith-conflicts         643
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         623
;  :arith-pivots            895
;  :binary-propagations     22
;  :conflicts               1083
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2214
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1222
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            306362)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2736
;  :arith-add-rows          669
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      818
;  :arith-conflicts         643
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         623
;  :arith-pivots            895
;  :binary-propagations     22
;  :conflicts               1083
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2214
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1223
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            306373)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2736
;  :arith-add-rows          669
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      819
;  :arith-conflicts         644
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         624
;  :arith-pivots            895
;  :binary-propagations     22
;  :conflicts               1084
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2215
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1224
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            306453)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2741
;  :arith-add-rows          670
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      820
;  :arith-conflicts         645
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         625
;  :arith-pivots            897
;  :binary-propagations     22
;  :conflicts               1085
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2217
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1225
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            306830)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2741
;  :arith-add-rows          670
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      820
;  :arith-conflicts         645
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         625
;  :arith-pivots            897
;  :binary-propagations     22
;  :conflicts               1085
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2217
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1226
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            306841)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2741
;  :arith-add-rows          670
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      821
;  :arith-conflicts         646
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         626
;  :arith-pivots            897
;  :binary-propagations     22
;  :conflicts               1086
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2218
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1227
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            306921)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2746
;  :arith-add-rows          671
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      822
;  :arith-conflicts         647
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         627
;  :arith-pivots            900
;  :binary-propagations     22
;  :conflicts               1087
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2220
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1228
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            307313)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2746
;  :arith-add-rows          671
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      822
;  :arith-conflicts         647
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         627
;  :arith-pivots            900
;  :binary-propagations     22
;  :conflicts               1087
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2220
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1229
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            307324)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2746
;  :arith-add-rows          671
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      823
;  :arith-conflicts         648
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         628
;  :arith-pivots            900
;  :binary-propagations     22
;  :conflicts               1088
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2221
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1230
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            307404)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2751
;  :arith-add-rows          672
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      824
;  :arith-conflicts         649
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         629
;  :arith-pivots            902
;  :binary-propagations     22
;  :conflicts               1089
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2223
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1231
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            307801)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2751
;  :arith-add-rows          672
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      824
;  :arith-conflicts         649
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         629
;  :arith-pivots            902
;  :binary-propagations     22
;  :conflicts               1089
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2223
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1232
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            307812)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2751
;  :arith-add-rows          672
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      825
;  :arith-conflicts         650
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         630
;  :arith-pivots            902
;  :binary-propagations     22
;  :conflicts               1090
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2224
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1233
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            307892)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2756
;  :arith-add-rows          673
;  :arith-assert-diseq      92
;  :arith-assert-lower      326
;  :arith-assert-upper      826
;  :arith-conflicts         651
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         631
;  :arith-pivots            905
;  :binary-propagations     22
;  :conflicts               1091
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2226
;  :mk-clause               320
;  :num-allocs              4727468
;  :num-checks              1234
;  :propagations            325
;  :quant-instantiations    67
;  :rlimit-count            308304)
(declare-const $k@127@01 $Perm)
(assert ($Perm.isReadVar $k@127@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@127@01 $Perm.No) (< $Perm.No $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2756
;  :arith-add-rows          673
;  :arith-assert-diseq      93
;  :arith-assert-lower      328
;  :arith-assert-upper      827
;  :arith-conflicts         651
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         631
;  :arith-pivots            905
;  :binary-propagations     22
;  :conflicts               1092
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2230
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1235
;  :propagations            326
;  :quant-instantiations    67
;  :rlimit-count            308502)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2756
;  :arith-add-rows          673
;  :arith-assert-diseq      93
;  :arith-assert-lower      328
;  :arith-assert-upper      827
;  :arith-conflicts         651
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         631
;  :arith-pivots            905
;  :binary-propagations     22
;  :conflicts               1092
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2230
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1236
;  :propagations            326
;  :quant-instantiations    67
;  :rlimit-count            308513)
(declare-const $t@128@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@18@01 $k@116@01))
    (=
      $t@128@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@127@01)
    (=
      $t@128@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01)))
(assert (<= (+ (- $k@18@01 $k@116@01) $k@127@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2766
;  :arith-add-rows          674
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      829
;  :arith-conflicts         652
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         632
;  :arith-pivots            907
;  :binary-propagations     22
;  :conflicts               1093
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2238
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1237
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            309490)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2766
;  :arith-add-rows          674
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      829
;  :arith-conflicts         652
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         632
;  :arith-pivots            907
;  :binary-propagations     22
;  :conflicts               1093
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2238
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1238
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            309501)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2766
;  :arith-add-rows          675
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      830
;  :arith-conflicts         653
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         633
;  :arith-pivots            910
;  :binary-propagations     22
;  :conflicts               1094
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2239
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1239
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            309615)
(assert (not (= $t@128@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2772
;  :arith-add-rows          676
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      831
;  :arith-conflicts         654
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         634
;  :arith-pivots            913
;  :binary-propagations     22
;  :conflicts               1095
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2242
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1240
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            310092)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2772
;  :arith-add-rows          676
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      831
;  :arith-conflicts         654
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         634
;  :arith-pivots            913
;  :binary-propagations     22
;  :conflicts               1095
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2242
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1241
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            310103)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2772
;  :arith-add-rows          678
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      832
;  :arith-conflicts         655
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         635
;  :arith-pivots            917
;  :binary-propagations     22
;  :conflicts               1096
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2243
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1242
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            310238)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2777
;  :arith-add-rows          679
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      833
;  :arith-conflicts         656
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         636
;  :arith-pivots            919
;  :binary-propagations     22
;  :conflicts               1097
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2245
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1243
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            310675)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2777
;  :arith-add-rows          679
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      833
;  :arith-conflicts         656
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         636
;  :arith-pivots            919
;  :binary-propagations     22
;  :conflicts               1097
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2245
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1244
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            310686)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2777
;  :arith-add-rows          679
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      834
;  :arith-conflicts         657
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         637
;  :arith-pivots            919
;  :binary-propagations     22
;  :conflicts               1098
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2246
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1245
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            310766)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2782
;  :arith-add-rows          680
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      835
;  :arith-conflicts         658
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         638
;  :arith-pivots            922
;  :binary-propagations     22
;  :conflicts               1099
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2248
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1246
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            311218)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2782
;  :arith-add-rows          680
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      835
;  :arith-conflicts         658
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         638
;  :arith-pivots            922
;  :binary-propagations     22
;  :conflicts               1099
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2248
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1247
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            311229)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2782
;  :arith-add-rows          680
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      836
;  :arith-conflicts         659
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         639
;  :arith-pivots            922
;  :binary-propagations     22
;  :conflicts               1100
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2249
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1248
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            311309)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2787
;  :arith-add-rows          681
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      837
;  :arith-conflicts         660
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         640
;  :arith-pivots            924
;  :binary-propagations     22
;  :conflicts               1101
;  :datatype-accessor-ax    197
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2251
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1249
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            311766)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2787
;  :arith-add-rows          681
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      837
;  :arith-conflicts         660
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         640
;  :arith-pivots            924
;  :binary-propagations     22
;  :conflicts               1101
;  :datatype-accessor-ax    197
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2251
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1250
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            311777)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2787
;  :arith-add-rows          681
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      838
;  :arith-conflicts         661
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         641
;  :arith-pivots            924
;  :binary-propagations     22
;  :conflicts               1102
;  :datatype-accessor-ax    197
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2252
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1251
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            311857)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2792
;  :arith-add-rows          682
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      839
;  :arith-conflicts         662
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         642
;  :arith-pivots            927
;  :binary-propagations     22
;  :conflicts               1103
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2254
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1252
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            312329)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2792
;  :arith-add-rows          682
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      839
;  :arith-conflicts         662
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         642
;  :arith-pivots            927
;  :binary-propagations     22
;  :conflicts               1103
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2254
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1253
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            312340)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2792
;  :arith-add-rows          682
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      840
;  :arith-conflicts         663
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         643
;  :arith-pivots            927
;  :binary-propagations     22
;  :conflicts               1104
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2255
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1254
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            312420)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2797
;  :arith-add-rows          683
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      841
;  :arith-conflicts         664
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         644
;  :arith-pivots            929
;  :binary-propagations     22
;  :conflicts               1105
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2257
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1255
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            312897)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2797
;  :arith-add-rows          683
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      841
;  :arith-conflicts         664
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         644
;  :arith-pivots            929
;  :binary-propagations     22
;  :conflicts               1105
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2257
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1256
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            312908)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2797
;  :arith-add-rows          683
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      842
;  :arith-conflicts         665
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         645
;  :arith-pivots            929
;  :binary-propagations     22
;  :conflicts               1106
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2258
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1257
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            312988)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2802
;  :arith-add-rows          684
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      843
;  :arith-conflicts         666
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         646
;  :arith-pivots            932
;  :binary-propagations     22
;  :conflicts               1107
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2260
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1258
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            313480)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2802
;  :arith-add-rows          684
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      843
;  :arith-conflicts         666
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         646
;  :arith-pivots            932
;  :binary-propagations     22
;  :conflicts               1107
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2260
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1259
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            313491)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2802
;  :arith-add-rows          684
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      844
;  :arith-conflicts         667
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         647
;  :arith-pivots            932
;  :binary-propagations     22
;  :conflicts               1108
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2261
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1260
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            313571)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2807
;  :arith-add-rows          685
;  :arith-assert-diseq      93
;  :arith-assert-lower      329
;  :arith-assert-upper      845
;  :arith-conflicts         668
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         648
;  :arith-pivots            934
;  :binary-propagations     22
;  :conflicts               1109
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2263
;  :mk-clause               322
;  :num-allocs              4727468
;  :num-checks              1261
;  :propagations            326
;  :quant-instantiations    68
;  :rlimit-count            314068)
(declare-const $k@129@01 $Perm)
(assert ($Perm.isReadVar $k@129@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@129@01 $Perm.No) (< $Perm.No $k@129@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2807
;  :arith-add-rows          685
;  :arith-assert-diseq      94
;  :arith-assert-lower      331
;  :arith-assert-upper      846
;  :arith-conflicts         668
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         648
;  :arith-pivots            934
;  :binary-propagations     22
;  :conflicts               1110
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2267
;  :mk-clause               324
;  :num-allocs              4727468
;  :num-checks              1262
;  :propagations            327
;  :quant-instantiations    68
;  :rlimit-count            314267)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2807
;  :arith-add-rows          685
;  :arith-assert-diseq      94
;  :arith-assert-lower      331
;  :arith-assert-upper      846
;  :arith-conflicts         668
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         648
;  :arith-pivots            934
;  :binary-propagations     22
;  :conflicts               1110
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2267
;  :mk-clause               324
;  :num-allocs              4727468
;  :num-checks              1263
;  :propagations            327
;  :quant-instantiations    68
;  :rlimit-count            314278)
(declare-const $t@130@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@19@01 $k@117@01))
    (=
      $t@130@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@129@01)
    (=
      $t@130@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@19@01 $k@117@01) $k@129@01)))
(assert (<= (+ (- $k@19@01 $k@117@01) $k@129@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@19@01 $k@117@01) $k@129@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2817
;  :arith-add-rows          686
;  :arith-assert-diseq      94
;  :arith-assert-lower      332
;  :arith-assert-upper      848
;  :arith-conflicts         669
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         649
;  :arith-pivots            937
;  :binary-propagations     22
;  :conflicts               1111
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2275
;  :mk-clause               324
;  :num-allocs              4727468
;  :num-checks              1264
;  :propagations            327
;  :quant-instantiations    69
;  :rlimit-count            315434)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2817
;  :arith-add-rows          686
;  :arith-assert-diseq      94
;  :arith-assert-lower      332
;  :arith-assert-upper      848
;  :arith-conflicts         669
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         649
;  :arith-pivots            937
;  :binary-propagations     22
;  :conflicts               1111
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2275
;  :mk-clause               324
;  :num-allocs              4727468
;  :num-checks              1265
;  :propagations            327
;  :quant-instantiations    69
;  :rlimit-count            315445)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@19@01 $k@117@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2817
;  :arith-add-rows          687
;  :arith-assert-diseq      94
;  :arith-assert-lower      332
;  :arith-assert-upper      849
;  :arith-conflicts         670
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         650
;  :arith-pivots            938
;  :binary-propagations     22
;  :conflicts               1112
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2276
;  :mk-clause               324
;  :num-allocs              4727468
;  :num-checks              1266
;  :propagations            327
;  :quant-instantiations    69
;  :rlimit-count            315545)
(assert (not (= $t@130@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2823
;  :arith-add-rows          688
;  :arith-assert-diseq      94
;  :arith-assert-lower      332
;  :arith-assert-upper      850
;  :arith-conflicts         671
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         651
;  :arith-pivots            940
;  :binary-propagations     22
;  :conflicts               1113
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2279
;  :mk-clause               324
;  :num-allocs              4727468
;  :num-checks              1267
;  :propagations            327
;  :quant-instantiations    69
;  :rlimit-count            316107)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2823
;  :arith-add-rows          688
;  :arith-assert-diseq      94
;  :arith-assert-lower      332
;  :arith-assert-upper      850
;  :arith-conflicts         671
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         651
;  :arith-pivots            940
;  :binary-propagations     22
;  :conflicts               1113
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2279
;  :mk-clause               324
;  :num-allocs              4727468
;  :num-checks              1268
;  :propagations            327
;  :quant-instantiations    69
;  :rlimit-count            316118)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@19@01 $k@117@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2823
;  :arith-add-rows          688
;  :arith-assert-diseq      94
;  :arith-assert-lower      332
;  :arith-assert-upper      851
;  :arith-conflicts         672
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         652
;  :arith-pivots            940
;  :binary-propagations     22
;  :conflicts               1114
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2280
;  :mk-clause               324
;  :num-allocs              4727468
;  :num-checks              1269
;  :propagations            327
;  :quant-instantiations    69
;  :rlimit-count            316199)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2828
;  :arith-add-rows          689
;  :arith-assert-diseq      94
;  :arith-assert-lower      332
;  :arith-assert-upper      852
;  :arith-conflicts         673
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         653
;  :arith-pivots            943
;  :binary-propagations     22
;  :conflicts               1115
;  :datatype-accessor-ax    204
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2282
;  :mk-clause               324
;  :num-allocs              4727468
;  :num-checks              1270
;  :propagations            327
;  :quant-instantiations    69
;  :rlimit-count            316731)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2828
;  :arith-add-rows          689
;  :arith-assert-diseq      94
;  :arith-assert-lower      332
;  :arith-assert-upper      852
;  :arith-conflicts         673
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         653
;  :arith-pivots            943
;  :binary-propagations     22
;  :conflicts               1115
;  :datatype-accessor-ax    204
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2282
;  :mk-clause               324
;  :num-allocs              4727468
;  :num-checks              1271
;  :propagations            327
;  :quant-instantiations    69
;  :rlimit-count            316742)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@19@01 $k@117@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2828
;  :arith-add-rows          689
;  :arith-assert-diseq      94
;  :arith-assert-lower      332
;  :arith-assert-upper      853
;  :arith-conflicts         674
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         654
;  :arith-pivots            943
;  :binary-propagations     22
;  :conflicts               1116
;  :datatype-accessor-ax    204
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2283
;  :mk-clause               324
;  :num-allocs              4727468
;  :num-checks              1272
;  :propagations            327
;  :quant-instantiations    69
;  :rlimit-count            316823)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2833
;  :arith-add-rows          690
;  :arith-assert-diseq      94
;  :arith-assert-lower      332
;  :arith-assert-upper      854
;  :arith-conflicts         675
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         655
;  :arith-pivots            945
;  :binary-propagations     22
;  :conflicts               1117
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2285
;  :mk-clause               324
;  :num-allocs              4727468
;  :num-checks              1273
;  :propagations            327
;  :quant-instantiations    69
;  :rlimit-count            317360)
(declare-const $k@131@01 $Perm)
(assert ($Perm.isReadVar $k@131@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@131@01 $Perm.No) (< $Perm.No $k@131@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2833
;  :arith-add-rows          690
;  :arith-assert-diseq      95
;  :arith-assert-lower      334
;  :arith-assert-upper      855
;  :arith-conflicts         675
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         655
;  :arith-pivots            945
;  :binary-propagations     22
;  :conflicts               1118
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2289
;  :mk-clause               326
;  :num-allocs              4727468
;  :num-checks              1274
;  :propagations            328
;  :quant-instantiations    69
;  :rlimit-count            317559)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2833
;  :arith-add-rows          690
;  :arith-assert-diseq      95
;  :arith-assert-lower      334
;  :arith-assert-upper      855
;  :arith-conflicts         675
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         655
;  :arith-pivots            945
;  :binary-propagations     22
;  :conflicts               1118
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2289
;  :mk-clause               326
;  :num-allocs              4727468
;  :num-checks              1275
;  :propagations            328
;  :quant-instantiations    69
;  :rlimit-count            317570)
(declare-const $t@132@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@20@01 $k@118@01))
    (=
      $t@132@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@131@01)
    (=
      $t@132@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@20@01 $k@118@01) $k@131@01)))
(assert (<= (+ (- $k@20@01 $k@118@01) $k@131@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@20@01 $k@118@01) $k@131@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2843
;  :arith-add-rows          691
;  :arith-assert-diseq      95
;  :arith-assert-lower      335
;  :arith-assert-upper      857
;  :arith-conflicts         676
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         656
;  :arith-pivots            948
;  :binary-propagations     22
;  :conflicts               1119
;  :datatype-accessor-ax    206
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2297
;  :mk-clause               326
;  :num-allocs              4727468
;  :num-checks              1276
;  :propagations            328
;  :quant-instantiations    70
;  :rlimit-count            318796)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2843
;  :arith-add-rows          691
;  :arith-assert-diseq      95
;  :arith-assert-lower      335
;  :arith-assert-upper      857
;  :arith-conflicts         676
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         656
;  :arith-pivots            948
;  :binary-propagations     22
;  :conflicts               1119
;  :datatype-accessor-ax    206
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2297
;  :mk-clause               326
;  :num-allocs              4727468
;  :num-checks              1277
;  :propagations            328
;  :quant-instantiations    70
;  :rlimit-count            318807)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@20@01 $k@118@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2843
;  :arith-add-rows          692
;  :arith-assert-diseq      95
;  :arith-assert-lower      335
;  :arith-assert-upper      858
;  :arith-conflicts         677
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         657
;  :arith-pivots            950
;  :binary-propagations     22
;  :conflicts               1120
;  :datatype-accessor-ax    206
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2298
;  :mk-clause               326
;  :num-allocs              4727468
;  :num-checks              1278
;  :propagations            328
;  :quant-instantiations    70
;  :rlimit-count            318914)
(assert (not (= $t@132@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2849
;  :arith-add-rows          693
;  :arith-assert-diseq      95
;  :arith-assert-lower      335
;  :arith-assert-upper      859
;  :arith-conflicts         678
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         658
;  :arith-pivots            952
;  :binary-propagations     22
;  :conflicts               1121
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2301
;  :mk-clause               326
;  :num-allocs              4727468
;  :num-checks              1279
;  :propagations            328
;  :quant-instantiations    70
;  :rlimit-count            319516)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2849
;  :arith-add-rows          693
;  :arith-assert-diseq      95
;  :arith-assert-lower      335
;  :arith-assert-upper      859
;  :arith-conflicts         678
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         658
;  :arith-pivots            952
;  :binary-propagations     22
;  :conflicts               1121
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2301
;  :mk-clause               326
;  :num-allocs              4727468
;  :num-checks              1280
;  :propagations            328
;  :quant-instantiations    70
;  :rlimit-count            319527)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@20@01 $k@118@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2849
;  :arith-add-rows          693
;  :arith-assert-diseq      95
;  :arith-assert-lower      335
;  :arith-assert-upper      860
;  :arith-conflicts         679
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         659
;  :arith-pivots            953
;  :binary-propagations     22
;  :conflicts               1122
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2302
;  :mk-clause               326
;  :num-allocs              4727468
;  :num-checks              1281
;  :propagations            328
;  :quant-instantiations    70
;  :rlimit-count            319615)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2854
;  :arith-add-rows          694
;  :arith-assert-diseq      95
;  :arith-assert-lower      335
;  :arith-assert-upper      861
;  :arith-conflicts         680
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         660
;  :arith-pivots            956
;  :binary-propagations     22
;  :conflicts               1123
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2304
;  :mk-clause               326
;  :num-allocs              4727468
;  :num-checks              1282
;  :propagations            328
;  :quant-instantiations    70
;  :rlimit-count            320187)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@123@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2854
;  :arith-add-rows          694
;  :arith-assert-diseq      95
;  :arith-assert-lower      335
;  :arith-assert-upper      861
;  :arith-conflicts         680
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         660
;  :arith-pivots            956
;  :binary-propagations     22
;  :conflicts               1123
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2304
;  :mk-clause               326
;  :num-allocs              4727468
;  :num-checks              1283
;  :propagations            328
;  :quant-instantiations    70
;  :rlimit-count            320198)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2854
;  :arith-add-rows          694
;  :arith-assert-diseq      95
;  :arith-assert-lower      335
;  :arith-assert-upper      862
;  :arith-conflicts         681
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         661
;  :arith-pivots            956
;  :binary-propagations     22
;  :conflicts               1124
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2305
;  :mk-clause               326
;  :num-allocs              4727468
;  :num-checks              1284
;  :propagations            328
;  :quant-instantiations    70
;  :rlimit-count            320278)
(declare-const $k@133@01 $Perm)
(assert ($Perm.isReadVar $k@133@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@133@01 $Perm.No) (< $Perm.No $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2854
;  :arith-add-rows          694
;  :arith-assert-diseq      96
;  :arith-assert-lower      337
;  :arith-assert-upper      863
;  :arith-conflicts         681
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         661
;  :arith-pivots            956
;  :binary-propagations     22
;  :conflicts               1125
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2309
;  :mk-clause               328
;  :num-allocs              4727468
;  :num-checks              1285
;  :propagations            329
;  :quant-instantiations    70
;  :rlimit-count            320477)
(set-option :timeout 10)
(push) ; 4
(assert (not (= diz@7@01 $t@126@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2854
;  :arith-add-rows          694
;  :arith-assert-diseq      96
;  :arith-assert-lower      337
;  :arith-assert-upper      863
;  :arith-conflicts         681
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         661
;  :arith-pivots            956
;  :binary-propagations     22
;  :conflicts               1125
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2309
;  :mk-clause               328
;  :num-allocs              4727468
;  :num-checks              1286
;  :propagations            329
;  :quant-instantiations    70
;  :rlimit-count            320488)
(declare-const $t@134@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (+ (- $k@15@01 $k@113@01) $k@122@01))
    (= $t@134@01 $t@123@01))
  (implies
    (< $Perm.No $k@133@01)
    (=
      $t@134@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01)))
(assert (<= (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2862
;  :arith-add-rows          698
;  :arith-assert-diseq      96
;  :arith-assert-lower      338
;  :arith-assert-upper      865
;  :arith-conflicts         682
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         662
;  :arith-pivots            959
;  :binary-propagations     22
;  :conflicts               1126
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2318
;  :mk-clause               329
;  :num-allocs              4727468
;  :num-checks              1287
;  :propagations            329
;  :quant-instantiations    71
;  :rlimit-count            321450)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2863
;  :arith-add-rows          700
;  :arith-assert-diseq      96
;  :arith-assert-lower      338
;  :arith-assert-upper      866
;  :arith-conflicts         683
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         663
;  :arith-pivots            961
;  :binary-propagations     22
;  :conflicts               1127
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2319
;  :mk-clause               329
;  :num-allocs              4727468
;  :num-checks              1288
;  :propagations            330
;  :quant-instantiations    71
;  :rlimit-count            321562)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2863
;  :arith-add-rows          700
;  :arith-assert-diseq      96
;  :arith-assert-lower      338
;  :arith-assert-upper      867
;  :arith-conflicts         684
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         664
;  :arith-pivots            961
;  :binary-propagations     22
;  :conflicts               1128
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2320
;  :mk-clause               329
;  :num-allocs              4727468
;  :num-checks              1289
;  :propagations            330
;  :quant-instantiations    71
;  :rlimit-count            321642)
(push) ; 4
(assert (not (= diz@7@01 $t@126@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2863
;  :arith-add-rows          700
;  :arith-assert-diseq      96
;  :arith-assert-lower      338
;  :arith-assert-upper      867
;  :arith-conflicts         684
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         664
;  :arith-pivots            961
;  :binary-propagations     22
;  :conflicts               1128
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2320
;  :mk-clause               329
;  :num-allocs              4727468
;  :num-checks              1290
;  :propagations            330
;  :quant-instantiations    71
;  :rlimit-count            321653)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2863
;  :arith-add-rows          702
;  :arith-assert-diseq      96
;  :arith-assert-lower      338
;  :arith-assert-upper      868
;  :arith-conflicts         685
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         665
;  :arith-pivots            963
;  :binary-propagations     22
;  :conflicts               1129
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2321
;  :mk-clause               329
;  :num-allocs              4727468
;  :num-checks              1291
;  :propagations            330
;  :quant-instantiations    71
;  :rlimit-count            321781)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2863
;  :arith-add-rows          702
;  :arith-assert-diseq      96
;  :arith-assert-lower      338
;  :arith-assert-upper      869
;  :arith-conflicts         686
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         666
;  :arith-pivots            964
;  :binary-propagations     22
;  :conflicts               1130
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2322
;  :mk-clause               329
;  :num-allocs              4727468
;  :num-checks              1292
;  :propagations            330
;  :quant-instantiations    71
;  :rlimit-count            321875)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2865
;  :arith-add-rows          702
;  :arith-assert-diseq      96
;  :arith-assert-lower      338
;  :arith-assert-upper      870
;  :arith-conflicts         687
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         667
;  :arith-pivots            965
;  :binary-propagations     22
;  :conflicts               1131
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2324
;  :mk-clause               329
;  :num-allocs              4727468
;  :num-checks              1293
;  :propagations            330
;  :quant-instantiations    71
;  :rlimit-count            322387)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2866
;  :arith-add-rows          704
;  :arith-assert-diseq      96
;  :arith-assert-lower      338
;  :arith-assert-upper      871
;  :arith-conflicts         688
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         668
;  :arith-pivots            967
;  :binary-propagations     22
;  :conflicts               1132
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2325
;  :mk-clause               329
;  :num-allocs              4727468
;  :num-checks              1294
;  :propagations            331
;  :quant-instantiations    71
;  :rlimit-count            322499)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2866
;  :arith-add-rows          704
;  :arith-assert-diseq      96
;  :arith-assert-lower      338
;  :arith-assert-upper      872
;  :arith-conflicts         689
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         669
;  :arith-pivots            967
;  :binary-propagations     22
;  :conflicts               1133
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 591
;  :datatype-occurs-check   40
;  :datatype-splits         279
;  :decisions               578
;  :del-clause              302
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2326
;  :mk-clause               329
;  :num-allocs              4727468
;  :num-checks              1295
;  :propagations            331
;  :quant-instantiations    71
;  :rlimit-count            322579)
(assert (= $t@126@01 diz@7@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; var__28 := B__31 * __flatten_8__34
; [eval] B__31 * __flatten_8__34
(declare-const var__28@135@01 Int)
(assert (= var__28@135@01 (* __B@12@01 sys__result@120@01)))
; [exec]
; sys__local__result__26 := var__28
; [exec]
; // assert
; assert acc(diz.Rng_m, wildcard) && diz.Rng_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.Rng_m, __globals), write) && (true && (true && acc(diz.Rng_m.Main_process_state, write) && |diz.Rng_m.Main_process_state| == 3 && acc(diz.Rng_m.Main_event_state, write) && |diz.Rng_m.Main_event_state| == 6 && (forall i__35: Int :: { diz.Rng_m.Main_process_state[i__35] } 0 <= i__35 && i__35 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__35] == -1 || 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|)) && acc(diz.Rng_m.Main_rn, wildcard) && diz.Rng_m.Main_rn != null && acc(diz.Rng_m.Main_rn.Rng_clk, write) && acc(diz.Rng_m.Main_rn.Rng_reset, write) && acc(diz.Rng_m.Main_rn.Rng_loadseed_i, write) && acc(diz.Rng_m.Main_rn.Rng_seed_i, write) && acc(diz.Rng_m.Main_rn.Rng_number_o, write) && acc(diz.Rng_m.Main_rn.Rng_LFSR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_CASR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_result, write) && acc(diz.Rng_m.Main_rn.Rng_i, write) && acc(diz.Rng_m.Main_rn.Rng_aux, write) && acc(diz.Rng_m.Main_rn_casr, wildcard) && diz.Rng_m.Main_rn_casr != null && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_var, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_out, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_i, write) && acc(diz.Rng_m.Main_rn_lfsr, wildcard) && diz.Rng_m.Main_rn_lfsr != null && acc(diz.Rng_m.Main_rn_lfsr.LFSR_LFSR_var, write) && acc(diz.Rng_m.Main_rn_lfsr.LFSR_outbit, write) && acc(diz.Rng_m.Main_rn_combinate, wildcard) && diz.Rng_m.Main_rn_combinate != null && acc(diz.Rng_m.Main_rn_combinate.Combinate_i, write) && acc(diz.Rng_m.Main_rn.Rng_m, wildcard) && diz.Rng_m.Main_rn.Rng_m == diz.Rng_m) && diz.Rng_m.Main_rn == diz
(declare-const $k@136@01 $Perm)
(assert ($Perm.isReadVar $k@136@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@136@01 $Perm.No) (< $Perm.No $k@136@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3108
;  :arith-add-rows          704
;  :arith-assert-diseq      97
;  :arith-assert-lower      342
;  :arith-assert-upper      875
;  :arith-conflicts         690
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         670
;  :arith-offset-eqs        1
;  :arith-pivots            969
;  :binary-propagations     22
;  :conflicts               1136
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              326
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2388
;  :mk-clause               335
;  :num-allocs              4727468
;  :num-checks              1297
;  :propagations            338
;  :quant-instantiations    71
;  :rlimit-count            324488)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3109
;  :arith-add-rows          706
;  :arith-assert-diseq      97
;  :arith-assert-lower      342
;  :arith-assert-upper      876
;  :arith-conflicts         691
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         670
;  :arith-offset-eqs        1
;  :arith-pivots            971
;  :binary-propagations     22
;  :conflicts               1137
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2390
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1298
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            324616)
(assert (< $k@136@01 (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01)))
(assert (<= $Perm.No (- (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01) $k@136@01)))
(assert (<= (- (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01) $k@136@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01) $k@136@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3109
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      344
;  :arith-assert-upper      878
;  :arith-conflicts         692
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         671
;  :arith-offset-eqs        1
;  :arith-pivots            972
;  :binary-propagations     22
;  :conflicts               1138
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2394
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1299
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            324902)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= $t@134@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3110
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      344
;  :arith-assert-upper      878
;  :arith-conflicts         692
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         671
;  :arith-offset-eqs        1
;  :arith-pivots            972
;  :binary-propagations     22
;  :conflicts               1139
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2395
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1300
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            324950)
(assert (not (= $t@134@01 $Ref.null)))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      344
;  :arith-assert-upper      879
;  :arith-conflicts         693
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         672
;  :arith-offset-eqs        1
;  :arith-pivots            973
;  :binary-propagations     22
;  :conflicts               1140
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2397
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1301
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            325101)
(push) ; 4
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      344
;  :arith-assert-upper      879
;  :arith-conflicts         693
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         672
;  :arith-offset-eqs        1
;  :arith-pivots            973
;  :binary-propagations     22
;  :conflicts               1141
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2398
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1302
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            325161)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      344
;  :arith-assert-upper      880
;  :arith-conflicts         694
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         673
;  :arith-offset-eqs        1
;  :arith-pivots            974
;  :binary-propagations     22
;  :conflicts               1142
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2399
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1303
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            325256)
(push) ; 4
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      344
;  :arith-assert-upper      880
;  :arith-conflicts         694
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         673
;  :arith-offset-eqs        1
;  :arith-pivots            974
;  :binary-propagations     22
;  :conflicts               1143
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2400
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1304
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            325316)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      344
;  :arith-assert-upper      881
;  :arith-conflicts         695
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         674
;  :arith-offset-eqs        1
;  :arith-pivots            975
;  :binary-propagations     22
;  :conflicts               1144
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2401
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1305
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            325411)
(push) ; 4
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      344
;  :arith-assert-upper      881
;  :arith-conflicts         695
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         674
;  :arith-offset-eqs        1
;  :arith-pivots            975
;  :binary-propagations     22
;  :conflicts               1145
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2402
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1306
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            325471)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      344
;  :arith-assert-upper      882
;  :arith-conflicts         696
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         675
;  :arith-offset-eqs        1
;  :arith-pivots            976
;  :binary-propagations     22
;  :conflicts               1146
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2403
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1307
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            325566)
(push) ; 4
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      344
;  :arith-assert-upper      882
;  :arith-conflicts         696
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         675
;  :arith-offset-eqs        1
;  :arith-pivots            976
;  :binary-propagations     22
;  :conflicts               1147
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2404
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1308
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            325626)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      344
;  :arith-assert-upper      883
;  :arith-conflicts         697
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         676
;  :arith-offset-eqs        1
;  :arith-pivots            977
;  :binary-propagations     22
;  :conflicts               1148
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2405
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1309
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            325721)
(push) ; 4
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      344
;  :arith-assert-upper      883
;  :arith-conflicts         697
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         676
;  :arith-offset-eqs        1
;  :arith-pivots            977
;  :binary-propagations     22
;  :conflicts               1149
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2406
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1310
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            325781)
; [eval] (forall i__35: Int :: { diz.Rng_m.Main_process_state[i__35] } 0 <= i__35 && i__35 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__35] == -1 || 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|)
(declare-const i__35@137@01 Int)
(push) ; 4
; [eval] 0 <= i__35 && i__35 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__35] == -1 || 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i__35 && i__35 < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i__35
(push) ; 5
; [then-branch: 52 | 0 <= i__35@137@01 | live]
; [else-branch: 52 | !(0 <= i__35@137@01) | live]
(push) ; 6
; [then-branch: 52 | 0 <= i__35@137@01]
(assert (<= 0 i__35@137@01))
; [eval] i__35 < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      345
;  :arith-assert-upper      884
;  :arith-conflicts         698
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         677
;  :arith-offset-eqs        1
;  :arith-pivots            978
;  :binary-propagations     22
;  :conflicts               1150
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2408
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1311
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            325929)
(push) ; 7
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      345
;  :arith-assert-upper      884
;  :arith-conflicts         698
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         677
;  :arith-offset-eqs        1
;  :arith-pivots            978
;  :binary-propagations     22
;  :conflicts               1151
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2409
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1312
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            325989)
(pop) ; 6
(push) ; 6
; [else-branch: 52 | !(0 <= i__35@137@01)]
(assert (not (<= 0 i__35@137@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 53 | i__35@137@01 < |First:(Second:(Second:(Second:($t@121@01))))| && 0 <= i__35@137@01 | live]
; [else-branch: 53 | !(i__35@137@01 < |First:(Second:(Second:(Second:($t@121@01))))| && 0 <= i__35@137@01) | live]
(push) ; 6
; [then-branch: 53 | i__35@137@01 < |First:(Second:(Second:(Second:($t@121@01))))| && 0 <= i__35@137@01]
(assert (and
  (<
    i__35@137@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
  (<= 0 i__35@137@01)))
; [eval] diz.Rng_m.Main_process_state[i__35] == -1 || 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__35] == -1
; [eval] diz.Rng_m.Main_process_state[i__35]
(push) ; 7
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      346
;  :arith-assert-upper      886
;  :arith-conflicts         699
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         678
;  :arith-offset-eqs        1
;  :arith-pivots            979
;  :binary-propagations     22
;  :conflicts               1152
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2412
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1313
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            326193)
(push) ; 7
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      346
;  :arith-assert-upper      886
;  :arith-conflicts         699
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         678
;  :arith-offset-eqs        1
;  :arith-pivots            979
;  :binary-propagations     22
;  :conflicts               1153
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2413
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1314
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            326253)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__35@137@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      97
;  :arith-assert-lower      346
;  :arith-assert-upper      886
;  :arith-conflicts         699
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         678
;  :arith-offset-eqs        1
;  :arith-pivots            979
;  :binary-propagations     22
;  :conflicts               1153
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2413
;  :mk-clause               337
;  :num-allocs              4727468
;  :num-checks              1315
;  :propagations            339
;  :quant-instantiations    71
;  :rlimit-count            326262)
; [eval] -1
(push) ; 7
; [then-branch: 54 | First:(Second:(Second:(Second:($t@121@01))))[i__35@137@01] == -1 | live]
; [else-branch: 54 | First:(Second:(Second:(Second:($t@121@01))))[i__35@137@01] != -1 | live]
(push) ; 8
; [then-branch: 54 | First:(Second:(Second:(Second:($t@121@01))))[i__35@137@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
    i__35@137@01)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 54 | First:(Second:(Second:(Second:($t@121@01))))[i__35@137@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
      i__35@137@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i__35] && diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i__35]
; [eval] diz.Rng_m.Main_process_state[i__35]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      98
;  :arith-assert-lower      349
;  :arith-assert-upper      888
;  :arith-conflicts         700
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         679
;  :arith-offset-eqs        1
;  :arith-pivots            980
;  :binary-propagations     22
;  :conflicts               1154
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2420
;  :mk-clause               341
;  :num-allocs              4727468
;  :num-checks              1316
;  :propagations            341
;  :quant-instantiations    72
;  :rlimit-count            326580)
(push) ; 9
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      98
;  :arith-assert-lower      349
;  :arith-assert-upper      888
;  :arith-conflicts         700
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         679
;  :arith-offset-eqs        1
;  :arith-pivots            980
;  :binary-propagations     22
;  :conflicts               1155
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2421
;  :mk-clause               341
;  :num-allocs              4727468
;  :num-checks              1317
;  :propagations            341
;  :quant-instantiations    72
;  :rlimit-count            326640)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__35@137@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      98
;  :arith-assert-lower      349
;  :arith-assert-upper      888
;  :arith-conflicts         700
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         679
;  :arith-offset-eqs        1
;  :arith-pivots            980
;  :binary-propagations     22
;  :conflicts               1155
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2421
;  :mk-clause               341
;  :num-allocs              4727468
;  :num-checks              1318
;  :propagations            341
;  :quant-instantiations    72
;  :rlimit-count            326649)
(push) ; 9
; [then-branch: 55 | 0 <= First:(Second:(Second:(Second:($t@121@01))))[i__35@137@01] | live]
; [else-branch: 55 | !(0 <= First:(Second:(Second:(Second:($t@121@01))))[i__35@137@01]) | live]
(push) ; 10
; [then-branch: 55 | 0 <= First:(Second:(Second:(Second:($t@121@01))))[i__35@137@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
    i__35@137@01)))
; [eval] diz.Rng_m.Main_process_state[i__35] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__35]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      98
;  :arith-assert-lower      349
;  :arith-assert-upper      889
;  :arith-conflicts         701
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         680
;  :arith-offset-eqs        1
;  :arith-pivots            981
;  :binary-propagations     22
;  :conflicts               1156
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2422
;  :mk-clause               341
;  :num-allocs              4727468
;  :num-checks              1319
;  :propagations            341
;  :quant-instantiations    72
;  :rlimit-count            326849)
(push) ; 11
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      98
;  :arith-assert-lower      349
;  :arith-assert-upper      889
;  :arith-conflicts         701
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         680
;  :arith-offset-eqs        1
;  :arith-pivots            981
;  :binary-propagations     22
;  :conflicts               1157
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2423
;  :mk-clause               341
;  :num-allocs              4727468
;  :num-checks              1320
;  :propagations            341
;  :quant-instantiations    72
;  :rlimit-count            326909)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__35@137@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      98
;  :arith-assert-lower      349
;  :arith-assert-upper      889
;  :arith-conflicts         701
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         680
;  :arith-offset-eqs        1
;  :arith-pivots            981
;  :binary-propagations     22
;  :conflicts               1157
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2423
;  :mk-clause               341
;  :num-allocs              4727468
;  :num-checks              1321
;  :propagations            341
;  :quant-instantiations    72
;  :rlimit-count            326918)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      98
;  :arith-assert-lower      349
;  :arith-assert-upper      890
;  :arith-conflicts         702
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         681
;  :arith-offset-eqs        1
;  :arith-pivots            982
;  :binary-propagations     22
;  :conflicts               1158
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2424
;  :mk-clause               341
;  :num-allocs              4727468
;  :num-checks              1322
;  :propagations            341
;  :quant-instantiations    72
;  :rlimit-count            327013)
(push) ; 11
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      98
;  :arith-assert-lower      349
;  :arith-assert-upper      890
;  :arith-conflicts         702
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         681
;  :arith-offset-eqs        1
;  :arith-pivots            982
;  :binary-propagations     22
;  :conflicts               1159
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              328
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2425
;  :mk-clause               341
;  :num-allocs              4727468
;  :num-checks              1323
;  :propagations            341
;  :quant-instantiations    72
;  :rlimit-count            327073)
(pop) ; 10
(push) ; 10
; [else-branch: 55 | !(0 <= First:(Second:(Second:(Second:($t@121@01))))[i__35@137@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
      i__35@137@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 53 | !(i__35@137@01 < |First:(Second:(Second:(Second:($t@121@01))))| && 0 <= i__35@137@01)]
(assert (not
  (and
    (<
      i__35@137@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
    (<= 0 i__35@137@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__35@137@01 Int)) (!
  (implies
    (and
      (<
        i__35@137@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
      (<= 0 i__35@137@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
          i__35@137@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
            i__35@137@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
            i__35@137@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
    i__35@137@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      99
;  :arith-assert-lower      350
;  :arith-assert-upper      891
;  :arith-conflicts         702
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         681
;  :arith-offset-eqs        1
;  :arith-pivots            982
;  :binary-propagations     22
;  :conflicts               1160
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              344
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2433
;  :mk-clause               353
;  :num-allocs              4727468
;  :num-checks              1324
;  :propagations            343
;  :quant-instantiations    73
;  :rlimit-count            327519)
(assert (forall ((i__35@137@01 Int)) (!
  (implies
    (and
      (<
        i__35@137@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
      (<= 0 i__35@137@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
          i__35@137@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
            i__35@137@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
            i__35@137@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
    i__35@137@01))
  :qid |prog.l<no position>|)))
(declare-const $k@138@01 $Perm)
(assert ($Perm.isReadVar $k@138@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      100
;  :arith-assert-lower      352
;  :arith-assert-upper      893
;  :arith-conflicts         703
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         682
;  :arith-offset-eqs        1
;  :arith-pivots            983
;  :binary-propagations     22
;  :conflicts               1161
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              344
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2439
;  :mk-clause               355
;  :num-allocs              4727468
;  :num-checks              1325
;  :propagations            344
;  :quant-instantiations    73
;  :rlimit-count            328125)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@138@01 $Perm.No) (< $Perm.No $k@138@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      100
;  :arith-assert-lower      352
;  :arith-assert-upper      893
;  :arith-conflicts         703
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         682
;  :arith-offset-eqs        1
;  :arith-pivots            983
;  :binary-propagations     22
;  :conflicts               1162
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              344
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2439
;  :mk-clause               355
;  :num-allocs              4727468
;  :num-checks              1326
;  :propagations            344
;  :quant-instantiations    73
;  :rlimit-count            328175)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3111
;  :arith-add-rows          707
;  :arith-assert-diseq      100
;  :arith-assert-lower      352
;  :arith-assert-upper      893
;  :arith-conflicts         703
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         682
;  :arith-offset-eqs        1
;  :arith-pivots            983
;  :binary-propagations     22
;  :conflicts               1163
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              344
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2440
;  :mk-clause               355
;  :num-allocs              4727468
;  :num-checks              1327
;  :propagations            344
;  :quant-instantiations    73
;  :rlimit-count            328235)
(push) ; 4
(assert (not (not (= (+ (- $k@17@01 $k@115@01) $k@125@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          707
;  :arith-assert-diseq      100
;  :arith-assert-lower      352
;  :arith-assert-upper      894
;  :arith-conflicts         704
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         682
;  :arith-offset-eqs        1
;  :arith-pivots            983
;  :binary-propagations     22
;  :conflicts               1164
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2442
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1328
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            328315)
(assert (< $k@138@01 (+ (- $k@17@01 $k@115@01) $k@125@01)))
(assert (<= $Perm.No (- (+ (- $k@17@01 $k@115@01) $k@125@01) $k@138@01)))
(assert (<= (- (+ (- $k@17@01 $k@115@01) $k@125@01) $k@138@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@17@01 $k@115@01) $k@125@01) $k@138@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      896
;  :arith-conflicts         705
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         683
;  :arith-offset-eqs        1
;  :arith-pivots            984
;  :binary-propagations     22
;  :conflicts               1165
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2446
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1329
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            328598)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      896
;  :arith-conflicts         705
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         683
;  :arith-offset-eqs        1
;  :arith-pivots            984
;  :binary-propagations     22
;  :conflicts               1166
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2447
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1330
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            328658)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      897
;  :arith-conflicts         706
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         684
;  :arith-offset-eqs        1
;  :arith-pivots            984
;  :binary-propagations     22
;  :conflicts               1167
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2448
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1331
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            328739)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      898
;  :arith-conflicts         707
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         685
;  :arith-offset-eqs        1
;  :arith-pivots            985
;  :binary-propagations     22
;  :conflicts               1168
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2449
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1332
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            328834)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      898
;  :arith-conflicts         707
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         685
;  :arith-offset-eqs        1
;  :arith-pivots            985
;  :binary-propagations     22
;  :conflicts               1169
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2450
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1333
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            328894)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      899
;  :arith-conflicts         708
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         686
;  :arith-offset-eqs        1
;  :arith-pivots            985
;  :binary-propagations     22
;  :conflicts               1170
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2451
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1334
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            328975)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      900
;  :arith-conflicts         709
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         687
;  :arith-offset-eqs        1
;  :arith-pivots            986
;  :binary-propagations     22
;  :conflicts               1171
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2452
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1335
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            329070)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      900
;  :arith-conflicts         709
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         687
;  :arith-offset-eqs        1
;  :arith-pivots            986
;  :binary-propagations     22
;  :conflicts               1172
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2453
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1336
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            329130)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      901
;  :arith-conflicts         710
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         688
;  :arith-offset-eqs        1
;  :arith-pivots            986
;  :binary-propagations     22
;  :conflicts               1173
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2454
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1337
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            329211)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      902
;  :arith-conflicts         711
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         689
;  :arith-offset-eqs        1
;  :arith-pivots            987
;  :binary-propagations     22
;  :conflicts               1174
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2455
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1338
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            329306)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      902
;  :arith-conflicts         711
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         689
;  :arith-offset-eqs        1
;  :arith-pivots            987
;  :binary-propagations     22
;  :conflicts               1175
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2456
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1339
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            329366)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      903
;  :arith-conflicts         712
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         690
;  :arith-offset-eqs        1
;  :arith-pivots            987
;  :binary-propagations     22
;  :conflicts               1176
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2457
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1340
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            329447)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      904
;  :arith-conflicts         713
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        1
;  :arith-pivots            988
;  :binary-propagations     22
;  :conflicts               1177
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2458
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1341
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            329542)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      904
;  :arith-conflicts         713
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         691
;  :arith-offset-eqs        1
;  :arith-pivots            988
;  :binary-propagations     22
;  :conflicts               1178
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2459
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1342
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            329602)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      905
;  :arith-conflicts         714
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         692
;  :arith-offset-eqs        1
;  :arith-pivots            988
;  :binary-propagations     22
;  :conflicts               1179
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2460
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1343
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            329683)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      906
;  :arith-conflicts         715
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         693
;  :arith-offset-eqs        1
;  :arith-pivots            989
;  :binary-propagations     22
;  :conflicts               1180
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2461
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1344
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            329778)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      906
;  :arith-conflicts         715
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         693
;  :arith-offset-eqs        1
;  :arith-pivots            989
;  :binary-propagations     22
;  :conflicts               1181
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2462
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1345
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            329838)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      907
;  :arith-conflicts         716
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         694
;  :arith-offset-eqs        1
;  :arith-pivots            989
;  :binary-propagations     22
;  :conflicts               1182
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2463
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1346
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            329919)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      908
;  :arith-conflicts         717
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         695
;  :arith-offset-eqs        1
;  :arith-pivots            990
;  :binary-propagations     22
;  :conflicts               1183
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2464
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1347
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            330014)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      908
;  :arith-conflicts         717
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         695
;  :arith-offset-eqs        1
;  :arith-pivots            990
;  :binary-propagations     22
;  :conflicts               1184
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2465
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1348
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            330074)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      909
;  :arith-conflicts         718
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         696
;  :arith-offset-eqs        1
;  :arith-pivots            990
;  :binary-propagations     22
;  :conflicts               1185
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2466
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1349
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            330155)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      910
;  :arith-conflicts         719
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         697
;  :arith-offset-eqs        1
;  :arith-pivots            991
;  :binary-propagations     22
;  :conflicts               1186
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2467
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1350
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            330250)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      910
;  :arith-conflicts         719
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         697
;  :arith-offset-eqs        1
;  :arith-pivots            991
;  :binary-propagations     22
;  :conflicts               1187
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2468
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1351
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            330310)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      911
;  :arith-conflicts         720
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         698
;  :arith-offset-eqs        1
;  :arith-pivots            991
;  :binary-propagations     22
;  :conflicts               1188
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2469
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1352
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            330391)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      912
;  :arith-conflicts         721
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         699
;  :arith-offset-eqs        1
;  :arith-pivots            992
;  :binary-propagations     22
;  :conflicts               1189
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2470
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1353
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            330486)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      912
;  :arith-conflicts         721
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         699
;  :arith-offset-eqs        1
;  :arith-pivots            992
;  :binary-propagations     22
;  :conflicts               1190
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2471
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1354
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            330546)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      913
;  :arith-conflicts         722
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         700
;  :arith-offset-eqs        1
;  :arith-pivots            992
;  :binary-propagations     22
;  :conflicts               1191
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2472
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1355
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            330627)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      914
;  :arith-conflicts         723
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         701
;  :arith-offset-eqs        1
;  :arith-pivots            993
;  :binary-propagations     22
;  :conflicts               1192
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2473
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1356
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            330722)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      914
;  :arith-conflicts         723
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         701
;  :arith-offset-eqs        1
;  :arith-pivots            993
;  :binary-propagations     22
;  :conflicts               1193
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2474
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1357
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            330782)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      915
;  :arith-conflicts         724
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         702
;  :arith-offset-eqs        1
;  :arith-pivots            993
;  :binary-propagations     22
;  :conflicts               1194
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2475
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1358
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            330863)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      916
;  :arith-conflicts         725
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         703
;  :arith-offset-eqs        1
;  :arith-pivots            994
;  :binary-propagations     22
;  :conflicts               1195
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2476
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1359
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            330958)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      916
;  :arith-conflicts         725
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         703
;  :arith-offset-eqs        1
;  :arith-pivots            994
;  :binary-propagations     22
;  :conflicts               1196
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2477
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1360
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            331018)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      100
;  :arith-assert-lower      354
;  :arith-assert-upper      917
;  :arith-conflicts         726
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         704
;  :arith-offset-eqs        1
;  :arith-pivots            994
;  :binary-propagations     22
;  :conflicts               1197
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2478
;  :mk-clause               357
;  :num-allocs              4727468
;  :num-checks              1361
;  :propagations            345
;  :quant-instantiations    73
;  :rlimit-count            331099)
(declare-const $k@139@01 $Perm)
(assert ($Perm.isReadVar $k@139@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      101
;  :arith-assert-lower      356
;  :arith-assert-upper      919
;  :arith-conflicts         727
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         705
;  :arith-offset-eqs        1
;  :arith-pivots            995
;  :binary-propagations     22
;  :conflicts               1198
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2483
;  :mk-clause               359
;  :num-allocs              4727468
;  :num-checks              1362
;  :propagations            346
;  :quant-instantiations    73
;  :rlimit-count            331343)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@139@01 $Perm.No) (< $Perm.No $k@139@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      101
;  :arith-assert-lower      356
;  :arith-assert-upper      919
;  :arith-conflicts         727
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         705
;  :arith-offset-eqs        1
;  :arith-pivots            995
;  :binary-propagations     22
;  :conflicts               1199
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2483
;  :mk-clause               359
;  :num-allocs              4727468
;  :num-checks              1363
;  :propagations            346
;  :quant-instantiations    73
;  :rlimit-count            331393)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3112
;  :arith-add-rows          709
;  :arith-assert-diseq      101
;  :arith-assert-lower      356
;  :arith-assert-upper      919
;  :arith-conflicts         727
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         705
;  :arith-offset-eqs        1
;  :arith-pivots            995
;  :binary-propagations     22
;  :conflicts               1200
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              346
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2484
;  :mk-clause               359
;  :num-allocs              4727468
;  :num-checks              1364
;  :propagations            346
;  :quant-instantiations    73
;  :rlimit-count            331453)
(push) ; 4
(assert (not (not (= (+ (- $k@18@01 $k@116@01) $k@127@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          709
;  :arith-assert-diseq      101
;  :arith-assert-lower      356
;  :arith-assert-upper      920
;  :arith-conflicts         728
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         705
;  :arith-offset-eqs        1
;  :arith-pivots            995
;  :binary-propagations     22
;  :conflicts               1201
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2486
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1365
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            331533)
(assert (< $k@139@01 (+ (- $k@18@01 $k@116@01) $k@127@01)))
(assert (<= $Perm.No (- (+ (- $k@18@01 $k@116@01) $k@127@01) $k@139@01)))
(assert (<= (- (+ (- $k@18@01 $k@116@01) $k@127@01) $k@139@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@18@01 $k@116@01) $k@127@01) $k@139@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      922
;  :arith-conflicts         729
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         706
;  :arith-offset-eqs        1
;  :arith-pivots            996
;  :binary-propagations     22
;  :conflicts               1202
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2490
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1366
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            331816)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      922
;  :arith-conflicts         729
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         706
;  :arith-offset-eqs        1
;  :arith-pivots            996
;  :binary-propagations     22
;  :conflicts               1203
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2491
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1367
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            331876)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      923
;  :arith-conflicts         730
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         707
;  :arith-offset-eqs        1
;  :arith-pivots            996
;  :binary-propagations     22
;  :conflicts               1204
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2492
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1368
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            331957)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      924
;  :arith-conflicts         731
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         708
;  :arith-offset-eqs        1
;  :arith-pivots            997
;  :binary-propagations     22
;  :conflicts               1205
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2493
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1369
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            332052)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      924
;  :arith-conflicts         731
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         708
;  :arith-offset-eqs        1
;  :arith-pivots            997
;  :binary-propagations     22
;  :conflicts               1206
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2494
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1370
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            332112)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      925
;  :arith-conflicts         732
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         709
;  :arith-offset-eqs        1
;  :arith-pivots            997
;  :binary-propagations     22
;  :conflicts               1207
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2495
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1371
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            332193)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      926
;  :arith-conflicts         733
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         710
;  :arith-offset-eqs        1
;  :arith-pivots            998
;  :binary-propagations     22
;  :conflicts               1208
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2496
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1372
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            332288)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      926
;  :arith-conflicts         733
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         710
;  :arith-offset-eqs        1
;  :arith-pivots            998
;  :binary-propagations     22
;  :conflicts               1209
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2497
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1373
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            332348)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      927
;  :arith-conflicts         734
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         711
;  :arith-offset-eqs        1
;  :arith-pivots            998
;  :binary-propagations     22
;  :conflicts               1210
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2498
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1374
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            332429)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      928
;  :arith-conflicts         735
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         712
;  :arith-offset-eqs        1
;  :arith-pivots            999
;  :binary-propagations     22
;  :conflicts               1211
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2499
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1375
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            332524)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      928
;  :arith-conflicts         735
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         712
;  :arith-offset-eqs        1
;  :arith-pivots            999
;  :binary-propagations     22
;  :conflicts               1212
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2500
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1376
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            332584)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      929
;  :arith-conflicts         736
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         713
;  :arith-offset-eqs        1
;  :arith-pivots            999
;  :binary-propagations     22
;  :conflicts               1213
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2501
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1377
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            332665)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      930
;  :arith-conflicts         737
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         714
;  :arith-offset-eqs        1
;  :arith-pivots            1000
;  :binary-propagations     22
;  :conflicts               1214
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2502
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1378
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            332760)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      930
;  :arith-conflicts         737
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         714
;  :arith-offset-eqs        1
;  :arith-pivots            1000
;  :binary-propagations     22
;  :conflicts               1215
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2503
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1379
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            332820)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      931
;  :arith-conflicts         738
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         715
;  :arith-offset-eqs        1
;  :arith-pivots            1000
;  :binary-propagations     22
;  :conflicts               1216
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2504
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1380
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            332901)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      932
;  :arith-conflicts         739
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         716
;  :arith-offset-eqs        1
;  :arith-pivots            1001
;  :binary-propagations     22
;  :conflicts               1217
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2505
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1381
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            332996)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      932
;  :arith-conflicts         739
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         716
;  :arith-offset-eqs        1
;  :arith-pivots            1001
;  :binary-propagations     22
;  :conflicts               1218
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2506
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1382
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            333056)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      933
;  :arith-conflicts         740
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         717
;  :arith-offset-eqs        1
;  :arith-pivots            1001
;  :binary-propagations     22
;  :conflicts               1219
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2507
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1383
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            333137)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      934
;  :arith-conflicts         741
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         718
;  :arith-offset-eqs        1
;  :arith-pivots            1002
;  :binary-propagations     22
;  :conflicts               1220
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2508
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1384
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            333232)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      934
;  :arith-conflicts         741
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         718
;  :arith-offset-eqs        1
;  :arith-pivots            1002
;  :binary-propagations     22
;  :conflicts               1221
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2509
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1385
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            333292)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      935
;  :arith-conflicts         742
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         719
;  :arith-offset-eqs        1
;  :arith-pivots            1002
;  :binary-propagations     22
;  :conflicts               1222
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2510
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1386
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            333373)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      936
;  :arith-conflicts         743
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         720
;  :arith-offset-eqs        1
;  :arith-pivots            1003
;  :binary-propagations     22
;  :conflicts               1223
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2511
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1387
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            333468)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      936
;  :arith-conflicts         743
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         720
;  :arith-offset-eqs        1
;  :arith-pivots            1003
;  :binary-propagations     22
;  :conflicts               1224
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2512
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1388
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            333528)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      101
;  :arith-assert-lower      358
;  :arith-assert-upper      937
;  :arith-conflicts         744
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         721
;  :arith-offset-eqs        1
;  :arith-pivots            1003
;  :binary-propagations     22
;  :conflicts               1225
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2513
;  :mk-clause               361
;  :num-allocs              4727468
;  :num-checks              1389
;  :propagations            347
;  :quant-instantiations    73
;  :rlimit-count            333609)
(declare-const $k@140@01 $Perm)
(assert ($Perm.isReadVar $k@140@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      102
;  :arith-assert-lower      360
;  :arith-assert-upper      939
;  :arith-conflicts         745
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         722
;  :arith-offset-eqs        1
;  :arith-pivots            1004
;  :binary-propagations     22
;  :conflicts               1226
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2518
;  :mk-clause               363
;  :num-allocs              4727468
;  :num-checks              1390
;  :propagations            348
;  :quant-instantiations    73
;  :rlimit-count            333853)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@140@01 $Perm.No) (< $Perm.No $k@140@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      102
;  :arith-assert-lower      360
;  :arith-assert-upper      939
;  :arith-conflicts         745
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         722
;  :arith-offset-eqs        1
;  :arith-pivots            1004
;  :binary-propagations     22
;  :conflicts               1227
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2518
;  :mk-clause               363
;  :num-allocs              4727468
;  :num-checks              1391
;  :propagations            348
;  :quant-instantiations    73
;  :rlimit-count            333903)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          711
;  :arith-assert-diseq      102
;  :arith-assert-lower      360
;  :arith-assert-upper      939
;  :arith-conflicts         745
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         722
;  :arith-offset-eqs        1
;  :arith-pivots            1004
;  :binary-propagations     22
;  :conflicts               1228
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              348
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2519
;  :mk-clause               363
;  :num-allocs              4727468
;  :num-checks              1392
;  :propagations            348
;  :quant-instantiations    73
;  :rlimit-count            333963)
(push) ; 4
(assert (not (not (= (+ (- $k@19@01 $k@117@01) $k@129@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3114
;  :arith-add-rows          711
;  :arith-assert-diseq      102
;  :arith-assert-lower      360
;  :arith-assert-upper      940
;  :arith-conflicts         746
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         722
;  :arith-offset-eqs        1
;  :arith-pivots            1004
;  :binary-propagations     22
;  :conflicts               1229
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              350
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2521
;  :mk-clause               365
;  :num-allocs              4727468
;  :num-checks              1393
;  :propagations            349
;  :quant-instantiations    73
;  :rlimit-count            334044)
(assert (< $k@140@01 (+ (- $k@19@01 $k@117@01) $k@129@01)))
(assert (<= $Perm.No (- (+ (- $k@19@01 $k@117@01) $k@129@01) $k@140@01)))
(assert (<= (- (+ (- $k@19@01 $k@117@01) $k@129@01) $k@140@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@19@01 $k@117@01) $k@129@01) $k@140@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3114
;  :arith-add-rows          712
;  :arith-assert-diseq      102
;  :arith-assert-lower      362
;  :arith-assert-upper      942
;  :arith-conflicts         747
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         723
;  :arith-offset-eqs        1
;  :arith-pivots            1005
;  :binary-propagations     22
;  :conflicts               1230
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              350
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2525
;  :mk-clause               365
;  :num-allocs              4727468
;  :num-checks              1394
;  :propagations            349
;  :quant-instantiations    73
;  :rlimit-count            334326)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3114
;  :arith-add-rows          712
;  :arith-assert-diseq      102
;  :arith-assert-lower      362
;  :arith-assert-upper      942
;  :arith-conflicts         747
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         723
;  :arith-offset-eqs        1
;  :arith-pivots            1005
;  :binary-propagations     22
;  :conflicts               1231
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              350
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2526
;  :mk-clause               365
;  :num-allocs              4727468
;  :num-checks              1395
;  :propagations            349
;  :quant-instantiations    73
;  :rlimit-count            334386)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@19@01 $k@117@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3114
;  :arith-add-rows          712
;  :arith-assert-diseq      102
;  :arith-assert-lower      362
;  :arith-assert-upper      943
;  :arith-conflicts         748
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         724
;  :arith-offset-eqs        1
;  :arith-pivots            1005
;  :binary-propagations     22
;  :conflicts               1232
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              350
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2527
;  :mk-clause               365
;  :num-allocs              4727468
;  :num-checks              1396
;  :propagations            349
;  :quant-instantiations    73
;  :rlimit-count            334468)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3114
;  :arith-add-rows          712
;  :arith-assert-diseq      102
;  :arith-assert-lower      362
;  :arith-assert-upper      944
;  :arith-conflicts         749
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         725
;  :arith-offset-eqs        1
;  :arith-pivots            1006
;  :binary-propagations     22
;  :conflicts               1233
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              350
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2528
;  :mk-clause               365
;  :num-allocs              4727468
;  :num-checks              1397
;  :propagations            349
;  :quant-instantiations    73
;  :rlimit-count            334563)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3114
;  :arith-add-rows          712
;  :arith-assert-diseq      102
;  :arith-assert-lower      362
;  :arith-assert-upper      944
;  :arith-conflicts         749
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         725
;  :arith-offset-eqs        1
;  :arith-pivots            1006
;  :binary-propagations     22
;  :conflicts               1234
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              350
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2529
;  :mk-clause               365
;  :num-allocs              4727468
;  :num-checks              1398
;  :propagations            349
;  :quant-instantiations    73
;  :rlimit-count            334623)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@19@01 $k@117@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3114
;  :arith-add-rows          712
;  :arith-assert-diseq      102
;  :arith-assert-lower      362
;  :arith-assert-upper      945
;  :arith-conflicts         750
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         726
;  :arith-offset-eqs        1
;  :arith-pivots            1006
;  :binary-propagations     22
;  :conflicts               1235
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              350
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2530
;  :mk-clause               365
;  :num-allocs              4727468
;  :num-checks              1399
;  :propagations            349
;  :quant-instantiations    73
;  :rlimit-count            334705)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3114
;  :arith-add-rows          712
;  :arith-assert-diseq      102
;  :arith-assert-lower      362
;  :arith-assert-upper      946
;  :arith-conflicts         751
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         727
;  :arith-offset-eqs        1
;  :arith-pivots            1007
;  :binary-propagations     22
;  :conflicts               1236
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              350
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2531
;  :mk-clause               365
;  :num-allocs              4727468
;  :num-checks              1400
;  :propagations            349
;  :quant-instantiations    73
;  :rlimit-count            334800)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3114
;  :arith-add-rows          712
;  :arith-assert-diseq      102
;  :arith-assert-lower      362
;  :arith-assert-upper      946
;  :arith-conflicts         751
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         727
;  :arith-offset-eqs        1
;  :arith-pivots            1007
;  :binary-propagations     22
;  :conflicts               1237
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              350
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2532
;  :mk-clause               365
;  :num-allocs              4727468
;  :num-checks              1401
;  :propagations            349
;  :quant-instantiations    73
;  :rlimit-count            334860)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@19@01 $k@117@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3114
;  :arith-add-rows          712
;  :arith-assert-diseq      102
;  :arith-assert-lower      362
;  :arith-assert-upper      947
;  :arith-conflicts         752
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         728
;  :arith-offset-eqs        1
;  :arith-pivots            1007
;  :binary-propagations     22
;  :conflicts               1238
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              350
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2533
;  :mk-clause               365
;  :num-allocs              4727468
;  :num-checks              1402
;  :propagations            349
;  :quant-instantiations    73
;  :rlimit-count            334942)
(declare-const $k@141@01 $Perm)
(assert ($Perm.isReadVar $k@141@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3114
;  :arith-add-rows          712
;  :arith-assert-diseq      103
;  :arith-assert-lower      364
;  :arith-assert-upper      949
;  :arith-conflicts         753
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         729
;  :arith-offset-eqs        1
;  :arith-pivots            1008
;  :binary-propagations     22
;  :conflicts               1239
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              350
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2538
;  :mk-clause               367
;  :num-allocs              4727468
;  :num-checks              1403
;  :propagations            350
;  :quant-instantiations    73
;  :rlimit-count            335186)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@141@01 $Perm.No) (< $Perm.No $k@141@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3114
;  :arith-add-rows          712
;  :arith-assert-diseq      103
;  :arith-assert-lower      364
;  :arith-assert-upper      949
;  :arith-conflicts         753
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         729
;  :arith-offset-eqs        1
;  :arith-pivots            1008
;  :binary-propagations     22
;  :conflicts               1240
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              350
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2538
;  :mk-clause               367
;  :num-allocs              4727468
;  :num-checks              1404
;  :propagations            350
;  :quant-instantiations    73
;  :rlimit-count            335236)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3114
;  :arith-add-rows          712
;  :arith-assert-diseq      103
;  :arith-assert-lower      364
;  :arith-assert-upper      949
;  :arith-conflicts         753
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         729
;  :arith-offset-eqs        1
;  :arith-pivots            1008
;  :binary-propagations     22
;  :conflicts               1241
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              350
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2539
;  :mk-clause               367
;  :num-allocs              4727468
;  :num-checks              1405
;  :propagations            350
;  :quant-instantiations    73
;  :rlimit-count            335296)
(push) ; 4
(assert (not (not (= (+ (- $k@20@01 $k@118@01) $k@131@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          712
;  :arith-assert-diseq      103
;  :arith-assert-lower      364
;  :arith-assert-upper      950
;  :arith-conflicts         754
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         729
;  :arith-offset-eqs        1
;  :arith-pivots            1009
;  :binary-propagations     22
;  :conflicts               1242
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2541
;  :mk-clause               369
;  :num-allocs              4727468
;  :num-checks              1406
;  :propagations            351
;  :quant-instantiations    73
;  :rlimit-count            335384)
(assert (< $k@141@01 (+ (- $k@20@01 $k@118@01) $k@131@01)))
(assert (<= $Perm.No (- (+ (- $k@20@01 $k@118@01) $k@131@01) $k@141@01)))
(assert (<= (- (+ (- $k@20@01 $k@118@01) $k@131@01) $k@141@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@20@01 $k@118@01) $k@131@01) $k@141@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          713
;  :arith-assert-diseq      103
;  :arith-assert-lower      366
;  :arith-assert-upper      952
;  :arith-conflicts         755
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         730
;  :arith-offset-eqs        1
;  :arith-pivots            1010
;  :binary-propagations     22
;  :conflicts               1243
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2545
;  :mk-clause               369
;  :num-allocs              4727468
;  :num-checks              1407
;  :propagations            351
;  :quant-instantiations    73
;  :rlimit-count            335666)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          713
;  :arith-assert-diseq      103
;  :arith-assert-lower      366
;  :arith-assert-upper      952
;  :arith-conflicts         755
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         730
;  :arith-offset-eqs        1
;  :arith-pivots            1010
;  :binary-propagations     22
;  :conflicts               1244
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2546
;  :mk-clause               369
;  :num-allocs              4727468
;  :num-checks              1408
;  :propagations            351
;  :quant-instantiations    73
;  :rlimit-count            335726)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@20@01 $k@118@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          713
;  :arith-assert-diseq      103
;  :arith-assert-lower      366
;  :arith-assert-upper      953
;  :arith-conflicts         756
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         731
;  :arith-offset-eqs        1
;  :arith-pivots            1011
;  :binary-propagations     22
;  :conflicts               1245
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2547
;  :mk-clause               369
;  :num-allocs              4727468
;  :num-checks              1409
;  :propagations            351
;  :quant-instantiations    73
;  :rlimit-count            335815)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          713
;  :arith-assert-diseq      103
;  :arith-assert-lower      366
;  :arith-assert-upper      954
;  :arith-conflicts         757
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         732
;  :arith-offset-eqs        1
;  :arith-pivots            1012
;  :binary-propagations     22
;  :conflicts               1246
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2548
;  :mk-clause               369
;  :num-allocs              4727468
;  :num-checks              1410
;  :propagations            351
;  :quant-instantiations    73
;  :rlimit-count            335910)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          713
;  :arith-assert-diseq      103
;  :arith-assert-lower      366
;  :arith-assert-upper      954
;  :arith-conflicts         757
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         732
;  :arith-offset-eqs        1
;  :arith-pivots            1012
;  :binary-propagations     22
;  :conflicts               1247
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2549
;  :mk-clause               369
;  :num-allocs              4727468
;  :num-checks              1411
;  :propagations            351
;  :quant-instantiations    73
;  :rlimit-count            335970)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@20@01 $k@118@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          713
;  :arith-assert-diseq      103
;  :arith-assert-lower      366
;  :arith-assert-upper      955
;  :arith-conflicts         758
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         733
;  :arith-offset-eqs        1
;  :arith-pivots            1013
;  :binary-propagations     22
;  :conflicts               1248
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2550
;  :mk-clause               369
;  :num-allocs              4727468
;  :num-checks              1412
;  :propagations            351
;  :quant-instantiations    73
;  :rlimit-count            336059)
(declare-const $k@142@01 $Perm)
(assert ($Perm.isReadVar $k@142@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          713
;  :arith-assert-diseq      104
;  :arith-assert-lower      368
;  :arith-assert-upper      957
;  :arith-conflicts         759
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         734
;  :arith-offset-eqs        1
;  :arith-pivots            1014
;  :binary-propagations     22
;  :conflicts               1249
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2555
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1413
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            336303)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          713
;  :arith-assert-diseq      104
;  :arith-assert-lower      368
;  :arith-assert-upper      957
;  :arith-conflicts         759
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         734
;  :arith-offset-eqs        1
;  :arith-pivots            1014
;  :binary-propagations     22
;  :conflicts               1250
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2556
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1414
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            336363)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          713
;  :arith-assert-diseq      104
;  :arith-assert-lower      368
;  :arith-assert-upper      958
;  :arith-conflicts         760
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         735
;  :arith-offset-eqs        1
;  :arith-pivots            1014
;  :binary-propagations     22
;  :conflicts               1251
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2557
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1415
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            336444)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@142@01 $Perm.No) (< $Perm.No $k@142@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          713
;  :arith-assert-diseq      104
;  :arith-assert-lower      368
;  :arith-assert-upper      958
;  :arith-conflicts         760
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         735
;  :arith-offset-eqs        1
;  :arith-pivots            1014
;  :binary-propagations     22
;  :conflicts               1252
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2557
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1416
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            336494)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
  $t@126@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          713
;  :arith-assert-diseq      104
;  :arith-assert-lower      368
;  :arith-assert-upper      958
;  :arith-conflicts         760
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         735
;  :arith-offset-eqs        1
;  :arith-pivots            1014
;  :binary-propagations     22
;  :conflicts               1252
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2557
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1417
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            336505)
(push) ; 4
(assert (not (not (= (- $k@21@01 $k@119@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          713
;  :arith-assert-diseq      104
;  :arith-assert-lower      368
;  :arith-assert-upper      958
;  :arith-conflicts         760
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         735
;  :arith-offset-eqs        1
;  :arith-pivots            1014
;  :binary-propagations     22
;  :conflicts               1253
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2558
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1418
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            336573)
(assert (< $k@142@01 (- $k@21@01 $k@119@01)))
(assert (<= $Perm.No (- (- $k@21@01 $k@119@01) $k@142@01)))
(assert (<= (- (- $k@21@01 $k@119@01) $k@142@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@21@01 $k@119@01) $k@142@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          715
;  :arith-assert-diseq      104
;  :arith-assert-lower      370
;  :arith-assert-upper      960
;  :arith-conflicts         761
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         736
;  :arith-offset-eqs        1
;  :arith-pivots            1016
;  :binary-propagations     22
;  :conflicts               1254
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2562
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1419
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            336874)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          715
;  :arith-assert-diseq      104
;  :arith-assert-lower      370
;  :arith-assert-upper      960
;  :arith-conflicts         761
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         736
;  :arith-offset-eqs        1
;  :arith-pivots            1016
;  :binary-propagations     22
;  :conflicts               1255
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2563
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1420
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            336934)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          715
;  :arith-assert-diseq      104
;  :arith-assert-lower      370
;  :arith-assert-upper      961
;  :arith-conflicts         762
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         737
;  :arith-offset-eqs        1
;  :arith-pivots            1016
;  :binary-propagations     22
;  :conflicts               1256
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2564
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1421
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            337015)
(push) ; 4
(assert (not (= diz@7@01 $t@126@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          715
;  :arith-assert-diseq      104
;  :arith-assert-lower      370
;  :arith-assert-upper      961
;  :arith-conflicts         762
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         737
;  :arith-offset-eqs        1
;  :arith-pivots            1016
;  :binary-propagations     22
;  :conflicts               1256
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2564
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1422
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            337026)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          715
;  :arith-assert-diseq      104
;  :arith-assert-lower      370
;  :arith-assert-upper      962
;  :arith-conflicts         763
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         738
;  :arith-offset-eqs        1
;  :arith-pivots            1017
;  :binary-propagations     22
;  :conflicts               1257
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2565
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1423
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            337121)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          715
;  :arith-assert-diseq      104
;  :arith-assert-lower      370
;  :arith-assert-upper      963
;  :arith-conflicts         764
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         739
;  :arith-offset-eqs        1
;  :arith-pivots            1018
;  :binary-propagations     22
;  :conflicts               1258
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2566
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1424
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            337216)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          715
;  :arith-assert-diseq      104
;  :arith-assert-lower      370
;  :arith-assert-upper      964
;  :arith-conflicts         765
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         740
;  :arith-offset-eqs        1
;  :arith-pivots            1019
;  :binary-propagations     22
;  :conflicts               1259
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2567
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1425
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            337311)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          715
;  :arith-assert-diseq      104
;  :arith-assert-lower      370
;  :arith-assert-upper      964
;  :arith-conflicts         765
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         740
;  :arith-offset-eqs        1
;  :arith-pivots            1019
;  :binary-propagations     22
;  :conflicts               1260
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2568
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1426
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            337371)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          715
;  :arith-assert-diseq      104
;  :arith-assert-lower      370
;  :arith-assert-upper      965
;  :arith-conflicts         766
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         741
;  :arith-offset-eqs        1
;  :arith-pivots            1019
;  :binary-propagations     22
;  :conflicts               1261
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2569
;  :mk-clause               371
;  :num-allocs              4727468
;  :num-checks              1427
;  :propagations            352
;  :quant-instantiations    73
;  :rlimit-count            337452)
; [exec]
; label __return_xor_
; [exec]
; sys__result := sys__local__result__26
; [exec]
; // assert
; assert acc(diz.Rng_m, wildcard) && diz.Rng_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.Rng_m, __globals), write) && acc(diz.Rng_m.Main_process_state, write) && |diz.Rng_m.Main_process_state| == 3 && acc(diz.Rng_m.Main_event_state, write) && |diz.Rng_m.Main_event_state| == 6 && (forall i__36: Int :: { diz.Rng_m.Main_process_state[i__36] } 0 <= i__36 && i__36 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__36] == -1 || 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|) && acc(diz.Rng_m.Main_rn, wildcard) && diz.Rng_m.Main_rn != null && acc(diz.Rng_m.Main_rn.Rng_clk, write) && acc(diz.Rng_m.Main_rn.Rng_reset, write) && acc(diz.Rng_m.Main_rn.Rng_loadseed_i, write) && acc(diz.Rng_m.Main_rn.Rng_seed_i, write) && acc(diz.Rng_m.Main_rn.Rng_number_o, write) && acc(diz.Rng_m.Main_rn.Rng_LFSR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_CASR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_result, write) && acc(diz.Rng_m.Main_rn.Rng_i, write) && acc(diz.Rng_m.Main_rn.Rng_aux, write) && acc(diz.Rng_m.Main_rn_casr, wildcard) && diz.Rng_m.Main_rn_casr != null && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_var, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_out, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_i, write) && acc(diz.Rng_m.Main_rn_lfsr, wildcard) && diz.Rng_m.Main_rn_lfsr != null && acc(diz.Rng_m.Main_rn_lfsr.LFSR_LFSR_var, write) && acc(diz.Rng_m.Main_rn_lfsr.LFSR_outbit, write) && acc(diz.Rng_m.Main_rn_combinate, wildcard) && diz.Rng_m.Main_rn_combinate != null && acc(diz.Rng_m.Main_rn_combinate.Combinate_i, write) && acc(diz.Rng_m.Main_rn.Rng_m, wildcard) && diz.Rng_m.Main_rn.Rng_m == diz.Rng_m && diz.Rng_m.Main_rn == diz
(declare-const $k@143@01 $Perm)
(assert ($Perm.isReadVar $k@143@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@143@01 $Perm.No) (< $Perm.No $k@143@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3115
;  :arith-add-rows          715
;  :arith-assert-diseq      105
;  :arith-assert-lower      372
;  :arith-assert-upper      966
;  :arith-conflicts         766
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         741
;  :arith-offset-eqs        1
;  :arith-pivots            1019
;  :binary-propagations     22
;  :conflicts               1262
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              352
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2573
;  :mk-clause               373
;  :num-allocs              4727468
;  :num-checks              1428
;  :propagations            353
;  :quant-instantiations    73
;  :rlimit-count            337651)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          715
;  :arith-assert-diseq      105
;  :arith-assert-lower      372
;  :arith-assert-upper      967
;  :arith-conflicts         767
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         741
;  :arith-offset-eqs        1
;  :arith-pivots            1020
;  :binary-propagations     22
;  :conflicts               1263
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2575
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1429
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            337746)
(assert (< $k@143@01 (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01)))
(assert (<= $Perm.No (- (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01) $k@143@01)))
(assert (<= (- (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01) $k@143@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01) $k@143@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      374
;  :arith-assert-upper      969
;  :arith-conflicts         768
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         742
;  :arith-offset-eqs        1
;  :arith-pivots            1021
;  :binary-propagations     22
;  :conflicts               1264
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2579
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1430
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            338033)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      374
;  :arith-assert-upper      970
;  :arith-conflicts         769
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         743
;  :arith-offset-eqs        1
;  :arith-pivots            1022
;  :binary-propagations     22
;  :conflicts               1265
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2580
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1431
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            338129)
(push) ; 4
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      374
;  :arith-assert-upper      970
;  :arith-conflicts         769
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         743
;  :arith-offset-eqs        1
;  :arith-pivots            1022
;  :binary-propagations     22
;  :conflicts               1266
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2581
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1432
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            338189)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      374
;  :arith-assert-upper      971
;  :arith-conflicts         770
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         744
;  :arith-offset-eqs        1
;  :arith-pivots            1023
;  :binary-propagations     22
;  :conflicts               1267
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2582
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1433
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            338285)
(push) ; 4
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      374
;  :arith-assert-upper      971
;  :arith-conflicts         770
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         744
;  :arith-offset-eqs        1
;  :arith-pivots            1023
;  :binary-propagations     22
;  :conflicts               1268
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2583
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1434
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            338345)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      374
;  :arith-assert-upper      972
;  :arith-conflicts         771
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         745
;  :arith-offset-eqs        1
;  :arith-pivots            1024
;  :binary-propagations     22
;  :conflicts               1269
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2584
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1435
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            338441)
(push) ; 4
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      374
;  :arith-assert-upper      972
;  :arith-conflicts         771
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         745
;  :arith-offset-eqs        1
;  :arith-pivots            1024
;  :binary-propagations     22
;  :conflicts               1270
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2585
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1436
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            338501)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      374
;  :arith-assert-upper      973
;  :arith-conflicts         772
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         746
;  :arith-offset-eqs        1
;  :arith-pivots            1025
;  :binary-propagations     22
;  :conflicts               1271
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2586
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1437
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            338597)
(push) ; 4
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      374
;  :arith-assert-upper      973
;  :arith-conflicts         772
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         746
;  :arith-offset-eqs        1
;  :arith-pivots            1025
;  :binary-propagations     22
;  :conflicts               1272
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2587
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1438
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            338657)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      374
;  :arith-assert-upper      974
;  :arith-conflicts         773
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         747
;  :arith-offset-eqs        1
;  :arith-pivots            1026
;  :binary-propagations     22
;  :conflicts               1273
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2588
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1439
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            338753)
(push) ; 4
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      374
;  :arith-assert-upper      974
;  :arith-conflicts         773
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         747
;  :arith-offset-eqs        1
;  :arith-pivots            1026
;  :binary-propagations     22
;  :conflicts               1274
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2589
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1440
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            338813)
; [eval] (forall i__36: Int :: { diz.Rng_m.Main_process_state[i__36] } 0 <= i__36 && i__36 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__36] == -1 || 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|)
(declare-const i__36@144@01 Int)
(push) ; 4
; [eval] 0 <= i__36 && i__36 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__36] == -1 || 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i__36 && i__36 < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i__36
(push) ; 5
; [then-branch: 56 | 0 <= i__36@144@01 | live]
; [else-branch: 56 | !(0 <= i__36@144@01) | live]
(push) ; 6
; [then-branch: 56 | 0 <= i__36@144@01]
(assert (<= 0 i__36@144@01))
; [eval] i__36 < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      375
;  :arith-assert-upper      975
;  :arith-conflicts         774
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         748
;  :arith-offset-eqs        1
;  :arith-pivots            1027
;  :binary-propagations     22
;  :conflicts               1275
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2591
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1441
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            338961)
(push) ; 7
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      375
;  :arith-assert-upper      975
;  :arith-conflicts         774
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         748
;  :arith-offset-eqs        1
;  :arith-pivots            1027
;  :binary-propagations     22
;  :conflicts               1276
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2592
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1442
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            339021)
(pop) ; 6
(push) ; 6
; [else-branch: 56 | !(0 <= i__36@144@01)]
(assert (not (<= 0 i__36@144@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 57 | i__36@144@01 < |First:(Second:(Second:(Second:($t@121@01))))| && 0 <= i__36@144@01 | live]
; [else-branch: 57 | !(i__36@144@01 < |First:(Second:(Second:(Second:($t@121@01))))| && 0 <= i__36@144@01) | live]
(push) ; 6
; [then-branch: 57 | i__36@144@01 < |First:(Second:(Second:(Second:($t@121@01))))| && 0 <= i__36@144@01]
(assert (and
  (<
    i__36@144@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
  (<= 0 i__36@144@01)))
; [eval] diz.Rng_m.Main_process_state[i__36] == -1 || 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__36] == -1
; [eval] diz.Rng_m.Main_process_state[i__36]
(push) ; 7
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      376
;  :arith-assert-upper      977
;  :arith-conflicts         775
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         749
;  :arith-offset-eqs        1
;  :arith-pivots            1028
;  :binary-propagations     22
;  :conflicts               1277
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2595
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1443
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            339226)
(push) ; 7
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      376
;  :arith-assert-upper      977
;  :arith-conflicts         775
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         749
;  :arith-offset-eqs        1
;  :arith-pivots            1028
;  :binary-propagations     22
;  :conflicts               1278
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2596
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1444
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            339286)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__36@144@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      105
;  :arith-assert-lower      376
;  :arith-assert-upper      977
;  :arith-conflicts         775
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         749
;  :arith-offset-eqs        1
;  :arith-pivots            1028
;  :binary-propagations     22
;  :conflicts               1278
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2596
;  :mk-clause               375
;  :num-allocs              4727468
;  :num-checks              1445
;  :propagations            354
;  :quant-instantiations    73
;  :rlimit-count            339295)
; [eval] -1
(push) ; 7
; [then-branch: 58 | First:(Second:(Second:(Second:($t@121@01))))[i__36@144@01] == -1 | live]
; [else-branch: 58 | First:(Second:(Second:(Second:($t@121@01))))[i__36@144@01] != -1 | live]
(push) ; 8
; [then-branch: 58 | First:(Second:(Second:(Second:($t@121@01))))[i__36@144@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
    i__36@144@01)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 58 | First:(Second:(Second:(Second:($t@121@01))))[i__36@144@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
      i__36@144@01)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i__36] && diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i__36]
; [eval] diz.Rng_m.Main_process_state[i__36]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      106
;  :arith-assert-lower      379
;  :arith-assert-upper      979
;  :arith-conflicts         776
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         750
;  :arith-offset-eqs        1
;  :arith-pivots            1029
;  :binary-propagations     22
;  :conflicts               1279
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2603
;  :mk-clause               379
;  :num-allocs              4727468
;  :num-checks              1446
;  :propagations            356
;  :quant-instantiations    75
;  :rlimit-count            339639)
(push) ; 9
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      106
;  :arith-assert-lower      379
;  :arith-assert-upper      979
;  :arith-conflicts         776
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         750
;  :arith-offset-eqs        1
;  :arith-pivots            1029
;  :binary-propagations     22
;  :conflicts               1280
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2604
;  :mk-clause               379
;  :num-allocs              4727468
;  :num-checks              1447
;  :propagations            356
;  :quant-instantiations    75
;  :rlimit-count            339699)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__36@144@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      106
;  :arith-assert-lower      379
;  :arith-assert-upper      979
;  :arith-conflicts         776
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         750
;  :arith-offset-eqs        1
;  :arith-pivots            1029
;  :binary-propagations     22
;  :conflicts               1280
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2604
;  :mk-clause               379
;  :num-allocs              4727468
;  :num-checks              1448
;  :propagations            356
;  :quant-instantiations    75
;  :rlimit-count            339708)
(push) ; 9
; [then-branch: 59 | 0 <= First:(Second:(Second:(Second:($t@121@01))))[i__36@144@01] | live]
; [else-branch: 59 | !(0 <= First:(Second:(Second:(Second:($t@121@01))))[i__36@144@01]) | live]
(push) ; 10
; [then-branch: 59 | 0 <= First:(Second:(Second:(Second:($t@121@01))))[i__36@144@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
    i__36@144@01)))
; [eval] diz.Rng_m.Main_process_state[i__36] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__36]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      106
;  :arith-assert-lower      379
;  :arith-assert-upper      980
;  :arith-conflicts         777
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         751
;  :arith-offset-eqs        1
;  :arith-pivots            1030
;  :binary-propagations     22
;  :conflicts               1281
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2605
;  :mk-clause               379
;  :num-allocs              4727468
;  :num-checks              1449
;  :propagations            356
;  :quant-instantiations    75
;  :rlimit-count            339909)
(push) ; 11
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      106
;  :arith-assert-lower      379
;  :arith-assert-upper      980
;  :arith-conflicts         777
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         751
;  :arith-offset-eqs        1
;  :arith-pivots            1030
;  :binary-propagations     22
;  :conflicts               1282
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2606
;  :mk-clause               379
;  :num-allocs              4727468
;  :num-checks              1450
;  :propagations            356
;  :quant-instantiations    75
;  :rlimit-count            339969)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__36@144@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      106
;  :arith-assert-lower      379
;  :arith-assert-upper      980
;  :arith-conflicts         777
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         751
;  :arith-offset-eqs        1
;  :arith-pivots            1030
;  :binary-propagations     22
;  :conflicts               1282
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2606
;  :mk-clause               379
;  :num-allocs              4727468
;  :num-checks              1451
;  :propagations            356
;  :quant-instantiations    75
;  :rlimit-count            339978)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      106
;  :arith-assert-lower      379
;  :arith-assert-upper      981
;  :arith-conflicts         778
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         752
;  :arith-offset-eqs        1
;  :arith-pivots            1031
;  :binary-propagations     22
;  :conflicts               1283
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2607
;  :mk-clause               379
;  :num-allocs              4727468
;  :num-checks              1452
;  :propagations            356
;  :quant-instantiations    75
;  :rlimit-count            340074)
(push) ; 11
(assert (not (= $t@123@01 $t@134@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      106
;  :arith-assert-lower      379
;  :arith-assert-upper      981
;  :arith-conflicts         778
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         752
;  :arith-offset-eqs        1
;  :arith-pivots            1031
;  :binary-propagations     22
;  :conflicts               1284
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              354
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2608
;  :mk-clause               379
;  :num-allocs              4727468
;  :num-checks              1453
;  :propagations            356
;  :quant-instantiations    75
;  :rlimit-count            340134)
(pop) ; 10
(push) ; 10
; [else-branch: 59 | !(0 <= First:(Second:(Second:(Second:($t@121@01))))[i__36@144@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
      i__36@144@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 57 | !(i__36@144@01 < |First:(Second:(Second:(Second:($t@121@01))))| && 0 <= i__36@144@01)]
(assert (not
  (and
    (<
      i__36@144@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
    (<= 0 i__36@144@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__36@144@01 Int)) (!
  (implies
    (and
      (<
        i__36@144@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
      (<= 0 i__36@144@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
          i__36@144@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
            i__36@144@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
            i__36@144@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
    i__36@144@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      108
;  :arith-assert-lower      380
;  :arith-assert-upper      982
;  :arith-conflicts         778
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         752
;  :arith-offset-eqs        1
;  :arith-pivots            1031
;  :binary-propagations     22
;  :conflicts               1285
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              372
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2616
;  :mk-clause               393
;  :num-allocs              4727468
;  :num-checks              1454
;  :propagations            358
;  :quant-instantiations    77
;  :rlimit-count            340605)
(assert (forall ((i__36@144@01 Int)) (!
  (implies
    (and
      (<
        i__36@144@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
      (<= 0 i__36@144@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
          i__36@144@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
            i__36@144@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
            i__36@144@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
    i__36@144@01))
  :qid |prog.l<no position>|)))
(declare-const $k@145@01 $Perm)
(assert ($Perm.isReadVar $k@145@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      109
;  :arith-assert-lower      382
;  :arith-assert-upper      984
;  :arith-conflicts         779
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         753
;  :arith-offset-eqs        1
;  :arith-pivots            1032
;  :binary-propagations     22
;  :conflicts               1286
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              372
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2622
;  :mk-clause               395
;  :num-allocs              4727468
;  :num-checks              1455
;  :propagations            359
;  :quant-instantiations    77
;  :rlimit-count            341212)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@145@01 $Perm.No) (< $Perm.No $k@145@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      109
;  :arith-assert-lower      382
;  :arith-assert-upper      984
;  :arith-conflicts         779
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         753
;  :arith-offset-eqs        1
;  :arith-pivots            1032
;  :binary-propagations     22
;  :conflicts               1287
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              372
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2622
;  :mk-clause               395
;  :num-allocs              4727468
;  :num-checks              1456
;  :propagations            359
;  :quant-instantiations    77
;  :rlimit-count            341262)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3116
;  :arith-add-rows          716
;  :arith-assert-diseq      109
;  :arith-assert-lower      382
;  :arith-assert-upper      984
;  :arith-conflicts         779
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         753
;  :arith-offset-eqs        1
;  :arith-pivots            1032
;  :binary-propagations     22
;  :conflicts               1288
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              372
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2623
;  :mk-clause               395
;  :num-allocs              4727468
;  :num-checks              1457
;  :propagations            359
;  :quant-instantiations    77
;  :rlimit-count            341322)
(push) ; 4
(assert (not (not (= (+ (- $k@17@01 $k@115@01) $k@125@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          716
;  :arith-assert-diseq      109
;  :arith-assert-lower      382
;  :arith-assert-upper      985
;  :arith-conflicts         780
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         753
;  :arith-offset-eqs        1
;  :arith-pivots            1032
;  :binary-propagations     22
;  :conflicts               1289
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2625
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1458
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            341403)
(assert (< $k@145@01 (+ (- $k@17@01 $k@115@01) $k@125@01)))
(assert (<= $Perm.No (- (+ (- $k@17@01 $k@115@01) $k@125@01) $k@145@01)))
(assert (<= (- (+ (- $k@17@01 $k@115@01) $k@125@01) $k@145@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@17@01 $k@115@01) $k@125@01) $k@145@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      987
;  :arith-conflicts         781
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         754
;  :arith-offset-eqs        1
;  :arith-pivots            1033
;  :binary-propagations     22
;  :conflicts               1290
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2629
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1459
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            341687)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      987
;  :arith-conflicts         781
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         754
;  :arith-offset-eqs        1
;  :arith-pivots            1033
;  :binary-propagations     22
;  :conflicts               1291
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2630
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1460
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            341747)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      988
;  :arith-conflicts         782
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         755
;  :arith-offset-eqs        1
;  :arith-pivots            1033
;  :binary-propagations     22
;  :conflicts               1292
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2631
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1461
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            341829)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      989
;  :arith-conflicts         783
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         756
;  :arith-offset-eqs        1
;  :arith-pivots            1034
;  :binary-propagations     22
;  :conflicts               1293
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2632
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1462
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            341925)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      989
;  :arith-conflicts         783
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         756
;  :arith-offset-eqs        1
;  :arith-pivots            1034
;  :binary-propagations     22
;  :conflicts               1294
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2633
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1463
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            341985)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      990
;  :arith-conflicts         784
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         757
;  :arith-offset-eqs        1
;  :arith-pivots            1034
;  :binary-propagations     22
;  :conflicts               1295
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2634
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1464
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            342067)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      991
;  :arith-conflicts         785
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         758
;  :arith-offset-eqs        1
;  :arith-pivots            1035
;  :binary-propagations     22
;  :conflicts               1296
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2635
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1465
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            342163)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      991
;  :arith-conflicts         785
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         758
;  :arith-offset-eqs        1
;  :arith-pivots            1035
;  :binary-propagations     22
;  :conflicts               1297
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2636
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1466
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            342223)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      992
;  :arith-conflicts         786
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         759
;  :arith-offset-eqs        1
;  :arith-pivots            1035
;  :binary-propagations     22
;  :conflicts               1298
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2637
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1467
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            342305)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      993
;  :arith-conflicts         787
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         760
;  :arith-offset-eqs        1
;  :arith-pivots            1036
;  :binary-propagations     22
;  :conflicts               1299
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2638
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1468
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            342401)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      993
;  :arith-conflicts         787
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         760
;  :arith-offset-eqs        1
;  :arith-pivots            1036
;  :binary-propagations     22
;  :conflicts               1300
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2639
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1469
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            342461)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      994
;  :arith-conflicts         788
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         761
;  :arith-offset-eqs        1
;  :arith-pivots            1036
;  :binary-propagations     22
;  :conflicts               1301
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2640
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1470
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            342543)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      995
;  :arith-conflicts         789
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         762
;  :arith-offset-eqs        1
;  :arith-pivots            1037
;  :binary-propagations     22
;  :conflicts               1302
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2641
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1471
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            342639)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      995
;  :arith-conflicts         789
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         762
;  :arith-offset-eqs        1
;  :arith-pivots            1037
;  :binary-propagations     22
;  :conflicts               1303
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2642
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1472
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            342699)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      996
;  :arith-conflicts         790
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         763
;  :arith-offset-eqs        1
;  :arith-pivots            1037
;  :binary-propagations     22
;  :conflicts               1304
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2643
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1473
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            342781)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      997
;  :arith-conflicts         791
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         764
;  :arith-offset-eqs        1
;  :arith-pivots            1038
;  :binary-propagations     22
;  :conflicts               1305
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2644
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1474
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            342877)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      997
;  :arith-conflicts         791
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         764
;  :arith-offset-eqs        1
;  :arith-pivots            1038
;  :binary-propagations     22
;  :conflicts               1306
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2645
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1475
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            342937)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      998
;  :arith-conflicts         792
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         765
;  :arith-offset-eqs        1
;  :arith-pivots            1038
;  :binary-propagations     22
;  :conflicts               1307
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2646
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1476
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            343019)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      999
;  :arith-conflicts         793
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         766
;  :arith-offset-eqs        1
;  :arith-pivots            1039
;  :binary-propagations     22
;  :conflicts               1308
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2647
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1477
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            343115)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      999
;  :arith-conflicts         793
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         766
;  :arith-offset-eqs        1
;  :arith-pivots            1039
;  :binary-propagations     22
;  :conflicts               1309
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2648
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1478
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            343175)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      1000
;  :arith-conflicts         794
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         767
;  :arith-offset-eqs        1
;  :arith-pivots            1039
;  :binary-propagations     22
;  :conflicts               1310
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2649
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1479
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            343257)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      1001
;  :arith-conflicts         795
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         768
;  :arith-offset-eqs        1
;  :arith-pivots            1040
;  :binary-propagations     22
;  :conflicts               1311
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2650
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1480
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            343353)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      1001
;  :arith-conflicts         795
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         768
;  :arith-offset-eqs        1
;  :arith-pivots            1040
;  :binary-propagations     22
;  :conflicts               1312
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2651
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1481
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            343413)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      1002
;  :arith-conflicts         796
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         769
;  :arith-offset-eqs        1
;  :arith-pivots            1040
;  :binary-propagations     22
;  :conflicts               1313
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2652
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1482
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            343495)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      1003
;  :arith-conflicts         797
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         770
;  :arith-offset-eqs        1
;  :arith-pivots            1041
;  :binary-propagations     22
;  :conflicts               1314
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2653
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1483
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            343591)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      1003
;  :arith-conflicts         797
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         770
;  :arith-offset-eqs        1
;  :arith-pivots            1041
;  :binary-propagations     22
;  :conflicts               1315
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2654
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1484
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            343651)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      1004
;  :arith-conflicts         798
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         771
;  :arith-offset-eqs        1
;  :arith-pivots            1041
;  :binary-propagations     22
;  :conflicts               1316
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2655
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1485
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            343733)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      1005
;  :arith-conflicts         799
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         772
;  :arith-offset-eqs        1
;  :arith-pivots            1042
;  :binary-propagations     22
;  :conflicts               1317
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2656
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1486
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            343829)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      1005
;  :arith-conflicts         799
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         772
;  :arith-offset-eqs        1
;  :arith-pivots            1042
;  :binary-propagations     22
;  :conflicts               1318
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2657
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1487
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            343889)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      1006
;  :arith-conflicts         800
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         773
;  :arith-offset-eqs        1
;  :arith-pivots            1042
;  :binary-propagations     22
;  :conflicts               1319
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2658
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1488
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            343971)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      1007
;  :arith-conflicts         801
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         774
;  :arith-offset-eqs        1
;  :arith-pivots            1043
;  :binary-propagations     22
;  :conflicts               1320
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2659
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1489
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            344067)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      1007
;  :arith-conflicts         801
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         774
;  :arith-offset-eqs        1
;  :arith-pivots            1043
;  :binary-propagations     22
;  :conflicts               1321
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2660
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1490
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            344127)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      1008
;  :arith-conflicts         802
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         775
;  :arith-offset-eqs        1
;  :arith-pivots            1043
;  :binary-propagations     22
;  :conflicts               1322
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2661
;  :mk-clause               397
;  :num-allocs              4727468
;  :num-checks              1491
;  :propagations            360
;  :quant-instantiations    77
;  :rlimit-count            344209)
(declare-const $k@146@01 $Perm)
(assert ($Perm.isReadVar $k@146@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      110
;  :arith-assert-lower      386
;  :arith-assert-upper      1010
;  :arith-conflicts         803
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         776
;  :arith-offset-eqs        1
;  :arith-pivots            1044
;  :binary-propagations     22
;  :conflicts               1323
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2666
;  :mk-clause               399
;  :num-allocs              4727468
;  :num-checks              1492
;  :propagations            361
;  :quant-instantiations    77
;  :rlimit-count            344454)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@146@01 $Perm.No) (< $Perm.No $k@146@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      110
;  :arith-assert-lower      386
;  :arith-assert-upper      1010
;  :arith-conflicts         803
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         776
;  :arith-offset-eqs        1
;  :arith-pivots            1044
;  :binary-propagations     22
;  :conflicts               1324
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2666
;  :mk-clause               399
;  :num-allocs              4727468
;  :num-checks              1493
;  :propagations            361
;  :quant-instantiations    77
;  :rlimit-count            344504)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3117
;  :arith-add-rows          718
;  :arith-assert-diseq      110
;  :arith-assert-lower      386
;  :arith-assert-upper      1010
;  :arith-conflicts         803
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         776
;  :arith-offset-eqs        1
;  :arith-pivots            1044
;  :binary-propagations     22
;  :conflicts               1325
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              374
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2667
;  :mk-clause               399
;  :num-allocs              4727468
;  :num-checks              1494
;  :propagations            361
;  :quant-instantiations    77
;  :rlimit-count            344564)
(push) ; 4
(assert (not (not (= (+ (- $k@18@01 $k@116@01) $k@127@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          718
;  :arith-assert-diseq      110
;  :arith-assert-lower      386
;  :arith-assert-upper      1011
;  :arith-conflicts         804
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         776
;  :arith-offset-eqs        1
;  :arith-pivots            1044
;  :binary-propagations     22
;  :conflicts               1326
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2669
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1495
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            344645)
(assert (< $k@146@01 (+ (- $k@18@01 $k@116@01) $k@127@01)))
(assert (<= $Perm.No (- (+ (- $k@18@01 $k@116@01) $k@127@01) $k@146@01)))
(assert (<= (- (+ (- $k@18@01 $k@116@01) $k@127@01) $k@146@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@18@01 $k@116@01) $k@127@01) $k@146@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1013
;  :arith-conflicts         805
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         777
;  :arith-offset-eqs        1
;  :arith-pivots            1045
;  :binary-propagations     22
;  :conflicts               1327
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2673
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1496
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            344929)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1013
;  :arith-conflicts         805
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         777
;  :arith-offset-eqs        1
;  :arith-pivots            1045
;  :binary-propagations     22
;  :conflicts               1328
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2674
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1497
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            344989)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1014
;  :arith-conflicts         806
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         778
;  :arith-offset-eqs        1
;  :arith-pivots            1045
;  :binary-propagations     22
;  :conflicts               1329
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2675
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1498
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            345071)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1015
;  :arith-conflicts         807
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         779
;  :arith-offset-eqs        1
;  :arith-pivots            1046
;  :binary-propagations     22
;  :conflicts               1330
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2676
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1499
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            345167)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1015
;  :arith-conflicts         807
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         779
;  :arith-offset-eqs        1
;  :arith-pivots            1046
;  :binary-propagations     22
;  :conflicts               1331
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2677
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1500
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            345227)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1016
;  :arith-conflicts         808
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         780
;  :arith-offset-eqs        1
;  :arith-pivots            1046
;  :binary-propagations     22
;  :conflicts               1332
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2678
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1501
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            345309)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1017
;  :arith-conflicts         809
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         781
;  :arith-offset-eqs        1
;  :arith-pivots            1047
;  :binary-propagations     22
;  :conflicts               1333
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2679
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1502
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            345405)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1017
;  :arith-conflicts         809
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         781
;  :arith-offset-eqs        1
;  :arith-pivots            1047
;  :binary-propagations     22
;  :conflicts               1334
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2680
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1503
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            345465)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1018
;  :arith-conflicts         810
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         782
;  :arith-offset-eqs        1
;  :arith-pivots            1047
;  :binary-propagations     22
;  :conflicts               1335
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2681
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1504
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            345547)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1019
;  :arith-conflicts         811
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         783
;  :arith-offset-eqs        1
;  :arith-pivots            1048
;  :binary-propagations     22
;  :conflicts               1336
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2682
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1505
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            345643)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1019
;  :arith-conflicts         811
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         783
;  :arith-offset-eqs        1
;  :arith-pivots            1048
;  :binary-propagations     22
;  :conflicts               1337
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2683
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1506
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            345703)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1020
;  :arith-conflicts         812
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         784
;  :arith-offset-eqs        1
;  :arith-pivots            1048
;  :binary-propagations     22
;  :conflicts               1338
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2684
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1507
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            345785)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1021
;  :arith-conflicts         813
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         785
;  :arith-offset-eqs        1
;  :arith-pivots            1049
;  :binary-propagations     22
;  :conflicts               1339
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2685
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1508
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            345881)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1021
;  :arith-conflicts         813
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         785
;  :arith-offset-eqs        1
;  :arith-pivots            1049
;  :binary-propagations     22
;  :conflicts               1340
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2686
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1509
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            345941)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1022
;  :arith-conflicts         814
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         786
;  :arith-offset-eqs        1
;  :arith-pivots            1049
;  :binary-propagations     22
;  :conflicts               1341
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2687
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1510
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            346023)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1023
;  :arith-conflicts         815
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         787
;  :arith-offset-eqs        1
;  :arith-pivots            1050
;  :binary-propagations     22
;  :conflicts               1342
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2688
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1511
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            346119)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1023
;  :arith-conflicts         815
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         787
;  :arith-offset-eqs        1
;  :arith-pivots            1050
;  :binary-propagations     22
;  :conflicts               1343
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2689
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1512
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            346179)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1024
;  :arith-conflicts         816
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         788
;  :arith-offset-eqs        1
;  :arith-pivots            1050
;  :binary-propagations     22
;  :conflicts               1344
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2690
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1513
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            346261)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1025
;  :arith-conflicts         817
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         789
;  :arith-offset-eqs        1
;  :arith-pivots            1051
;  :binary-propagations     22
;  :conflicts               1345
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2691
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1514
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            346357)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1025
;  :arith-conflicts         817
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         789
;  :arith-offset-eqs        1
;  :arith-pivots            1051
;  :binary-propagations     22
;  :conflicts               1346
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2692
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1515
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            346417)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1026
;  :arith-conflicts         818
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         790
;  :arith-offset-eqs        1
;  :arith-pivots            1051
;  :binary-propagations     22
;  :conflicts               1347
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2693
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1516
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            346499)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1027
;  :arith-conflicts         819
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         791
;  :arith-offset-eqs        1
;  :arith-pivots            1052
;  :binary-propagations     22
;  :conflicts               1348
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2694
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1517
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            346595)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1027
;  :arith-conflicts         819
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         791
;  :arith-offset-eqs        1
;  :arith-pivots            1052
;  :binary-propagations     22
;  :conflicts               1349
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2695
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1518
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            346655)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@18@01 $k@116@01) $k@127@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      1028
;  :arith-conflicts         820
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         792
;  :arith-offset-eqs        1
;  :arith-pivots            1052
;  :binary-propagations     22
;  :conflicts               1350
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2696
;  :mk-clause               401
;  :num-allocs              4727468
;  :num-checks              1519
;  :propagations            362
;  :quant-instantiations    77
;  :rlimit-count            346737)
(declare-const $k@147@01 $Perm)
(assert ($Perm.isReadVar $k@147@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      111
;  :arith-assert-lower      390
;  :arith-assert-upper      1030
;  :arith-conflicts         821
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         793
;  :arith-offset-eqs        1
;  :arith-pivots            1053
;  :binary-propagations     22
;  :conflicts               1351
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2701
;  :mk-clause               403
;  :num-allocs              4727468
;  :num-checks              1520
;  :propagations            363
;  :quant-instantiations    77
;  :rlimit-count            346981)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@147@01 $Perm.No) (< $Perm.No $k@147@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      111
;  :arith-assert-lower      390
;  :arith-assert-upper      1030
;  :arith-conflicts         821
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         793
;  :arith-offset-eqs        1
;  :arith-pivots            1053
;  :binary-propagations     22
;  :conflicts               1352
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2701
;  :mk-clause               403
;  :num-allocs              4727468
;  :num-checks              1521
;  :propagations            363
;  :quant-instantiations    77
;  :rlimit-count            347031)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3118
;  :arith-add-rows          720
;  :arith-assert-diseq      111
;  :arith-assert-lower      390
;  :arith-assert-upper      1030
;  :arith-conflicts         821
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         793
;  :arith-offset-eqs        1
;  :arith-pivots            1053
;  :binary-propagations     22
;  :conflicts               1353
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              376
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2702
;  :mk-clause               403
;  :num-allocs              4727468
;  :num-checks              1522
;  :propagations            363
;  :quant-instantiations    77
;  :rlimit-count            347091)
(push) ; 4
(assert (not (not (= (+ (- $k@19@01 $k@117@01) $k@129@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3119
;  :arith-add-rows          720
;  :arith-assert-diseq      111
;  :arith-assert-lower      390
;  :arith-assert-upper      1031
;  :arith-conflicts         822
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         793
;  :arith-offset-eqs        1
;  :arith-pivots            1053
;  :binary-propagations     22
;  :conflicts               1354
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              378
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2704
;  :mk-clause               405
;  :num-allocs              4727468
;  :num-checks              1523
;  :propagations            364
;  :quant-instantiations    77
;  :rlimit-count            347173)
(assert (< $k@147@01 (+ (- $k@19@01 $k@117@01) $k@129@01)))
(assert (<= $Perm.No (- (+ (- $k@19@01 $k@117@01) $k@129@01) $k@147@01)))
(assert (<= (- (+ (- $k@19@01 $k@117@01) $k@129@01) $k@147@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@19@01 $k@117@01) $k@129@01) $k@147@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3119
;  :arith-add-rows          721
;  :arith-assert-diseq      111
;  :arith-assert-lower      392
;  :arith-assert-upper      1033
;  :arith-conflicts         823
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         794
;  :arith-offset-eqs        1
;  :arith-pivots            1055
;  :binary-propagations     22
;  :conflicts               1355
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              378
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2708
;  :mk-clause               405
;  :num-allocs              4727468
;  :num-checks              1524
;  :propagations            364
;  :quant-instantiations    77
;  :rlimit-count            347462)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3119
;  :arith-add-rows          721
;  :arith-assert-diseq      111
;  :arith-assert-lower      392
;  :arith-assert-upper      1033
;  :arith-conflicts         823
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         794
;  :arith-offset-eqs        1
;  :arith-pivots            1055
;  :binary-propagations     22
;  :conflicts               1356
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              378
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2709
;  :mk-clause               405
;  :num-allocs              4727468
;  :num-checks              1525
;  :propagations            364
;  :quant-instantiations    77
;  :rlimit-count            347522)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@19@01 $k@117@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3119
;  :arith-add-rows          721
;  :arith-assert-diseq      111
;  :arith-assert-lower      392
;  :arith-assert-upper      1034
;  :arith-conflicts         824
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         795
;  :arith-offset-eqs        1
;  :arith-pivots            1055
;  :binary-propagations     22
;  :conflicts               1357
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              378
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2710
;  :mk-clause               405
;  :num-allocs              4727468
;  :num-checks              1526
;  :propagations            364
;  :quant-instantiations    77
;  :rlimit-count            347605)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3119
;  :arith-add-rows          721
;  :arith-assert-diseq      111
;  :arith-assert-lower      392
;  :arith-assert-upper      1035
;  :arith-conflicts         825
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         796
;  :arith-offset-eqs        1
;  :arith-pivots            1056
;  :binary-propagations     22
;  :conflicts               1358
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              378
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2711
;  :mk-clause               405
;  :num-allocs              4727468
;  :num-checks              1527
;  :propagations            364
;  :quant-instantiations    77
;  :rlimit-count            347701)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3119
;  :arith-add-rows          721
;  :arith-assert-diseq      111
;  :arith-assert-lower      392
;  :arith-assert-upper      1035
;  :arith-conflicts         825
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         796
;  :arith-offset-eqs        1
;  :arith-pivots            1056
;  :binary-propagations     22
;  :conflicts               1359
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              378
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2712
;  :mk-clause               405
;  :num-allocs              4727468
;  :num-checks              1528
;  :propagations            364
;  :quant-instantiations    77
;  :rlimit-count            347761)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@19@01 $k@117@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3119
;  :arith-add-rows          721
;  :arith-assert-diseq      111
;  :arith-assert-lower      392
;  :arith-assert-upper      1036
;  :arith-conflicts         826
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         797
;  :arith-offset-eqs        1
;  :arith-pivots            1056
;  :binary-propagations     22
;  :conflicts               1360
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              378
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2713
;  :mk-clause               405
;  :num-allocs              4727468
;  :num-checks              1529
;  :propagations            364
;  :quant-instantiations    77
;  :rlimit-count            347844)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3119
;  :arith-add-rows          721
;  :arith-assert-diseq      111
;  :arith-assert-lower      392
;  :arith-assert-upper      1037
;  :arith-conflicts         827
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         798
;  :arith-offset-eqs        1
;  :arith-pivots            1057
;  :binary-propagations     22
;  :conflicts               1361
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              378
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2714
;  :mk-clause               405
;  :num-allocs              4727468
;  :num-checks              1530
;  :propagations            364
;  :quant-instantiations    77
;  :rlimit-count            347940)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3119
;  :arith-add-rows          721
;  :arith-assert-diseq      111
;  :arith-assert-lower      392
;  :arith-assert-upper      1037
;  :arith-conflicts         827
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         798
;  :arith-offset-eqs        1
;  :arith-pivots            1057
;  :binary-propagations     22
;  :conflicts               1362
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              378
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2715
;  :mk-clause               405
;  :num-allocs              4727468
;  :num-checks              1531
;  :propagations            364
;  :quant-instantiations    77
;  :rlimit-count            348000)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@19@01 $k@117@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3119
;  :arith-add-rows          721
;  :arith-assert-diseq      111
;  :arith-assert-lower      392
;  :arith-assert-upper      1038
;  :arith-conflicts         828
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         799
;  :arith-offset-eqs        1
;  :arith-pivots            1057
;  :binary-propagations     22
;  :conflicts               1363
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              378
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2716
;  :mk-clause               405
;  :num-allocs              4727468
;  :num-checks              1532
;  :propagations            364
;  :quant-instantiations    77
;  :rlimit-count            348083)
(declare-const $k@148@01 $Perm)
(assert ($Perm.isReadVar $k@148@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3119
;  :arith-add-rows          721
;  :arith-assert-diseq      112
;  :arith-assert-lower      394
;  :arith-assert-upper      1040
;  :arith-conflicts         829
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         800
;  :arith-offset-eqs        1
;  :arith-pivots            1058
;  :binary-propagations     22
;  :conflicts               1364
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              378
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2721
;  :mk-clause               407
;  :num-allocs              4727468
;  :num-checks              1533
;  :propagations            365
;  :quant-instantiations    77
;  :rlimit-count            348327)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@148@01 $Perm.No) (< $Perm.No $k@148@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3119
;  :arith-add-rows          721
;  :arith-assert-diseq      112
;  :arith-assert-lower      394
;  :arith-assert-upper      1040
;  :arith-conflicts         829
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         800
;  :arith-offset-eqs        1
;  :arith-pivots            1058
;  :binary-propagations     22
;  :conflicts               1365
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              378
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2721
;  :mk-clause               407
;  :num-allocs              4727468
;  :num-checks              1534
;  :propagations            365
;  :quant-instantiations    77
;  :rlimit-count            348377)
(set-option :timeout 10)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3119
;  :arith-add-rows          721
;  :arith-assert-diseq      112
;  :arith-assert-lower      394
;  :arith-assert-upper      1040
;  :arith-conflicts         829
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         800
;  :arith-offset-eqs        1
;  :arith-pivots            1058
;  :binary-propagations     22
;  :conflicts               1366
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              378
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2722
;  :mk-clause               407
;  :num-allocs              4727468
;  :num-checks              1535
;  :propagations            365
;  :quant-instantiations    77
;  :rlimit-count            348437)
(push) ; 4
(assert (not (not (= (+ (- $k@20@01 $k@118@01) $k@131@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          721
;  :arith-assert-diseq      112
;  :arith-assert-lower      394
;  :arith-assert-upper      1041
;  :arith-conflicts         830
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         800
;  :arith-offset-eqs        1
;  :arith-pivots            1059
;  :binary-propagations     22
;  :conflicts               1367
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2724
;  :mk-clause               409
;  :num-allocs              4727468
;  :num-checks              1536
;  :propagations            366
;  :quant-instantiations    77
;  :rlimit-count            348526)
(assert (< $k@148@01 (+ (- $k@20@01 $k@118@01) $k@131@01)))
(assert (<= $Perm.No (- (+ (- $k@20@01 $k@118@01) $k@131@01) $k@148@01)))
(assert (<= (- (+ (- $k@20@01 $k@118@01) $k@131@01) $k@148@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@20@01 $k@118@01) $k@131@01) $k@148@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          722
;  :arith-assert-diseq      112
;  :arith-assert-lower      396
;  :arith-assert-upper      1043
;  :arith-conflicts         831
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         801
;  :arith-offset-eqs        1
;  :arith-pivots            1061
;  :binary-propagations     22
;  :conflicts               1368
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2728
;  :mk-clause               409
;  :num-allocs              4727468
;  :num-checks              1537
;  :propagations            366
;  :quant-instantiations    77
;  :rlimit-count            348815)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          722
;  :arith-assert-diseq      112
;  :arith-assert-lower      396
;  :arith-assert-upper      1043
;  :arith-conflicts         831
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         801
;  :arith-offset-eqs        1
;  :arith-pivots            1061
;  :binary-propagations     22
;  :conflicts               1369
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2729
;  :mk-clause               409
;  :num-allocs              4727468
;  :num-checks              1538
;  :propagations            366
;  :quant-instantiations    77
;  :rlimit-count            348875)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@20@01 $k@118@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          722
;  :arith-assert-diseq      112
;  :arith-assert-lower      396
;  :arith-assert-upper      1044
;  :arith-conflicts         832
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         802
;  :arith-offset-eqs        1
;  :arith-pivots            1062
;  :binary-propagations     22
;  :conflicts               1370
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2730
;  :mk-clause               409
;  :num-allocs              4727468
;  :num-checks              1539
;  :propagations            366
;  :quant-instantiations    77
;  :rlimit-count            348965)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          722
;  :arith-assert-diseq      112
;  :arith-assert-lower      396
;  :arith-assert-upper      1045
;  :arith-conflicts         833
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         803
;  :arith-offset-eqs        1
;  :arith-pivots            1063
;  :binary-propagations     22
;  :conflicts               1371
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2731
;  :mk-clause               409
;  :num-allocs              4727468
;  :num-checks              1540
;  :propagations            366
;  :quant-instantiations    77
;  :rlimit-count            349061)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          722
;  :arith-assert-diseq      112
;  :arith-assert-lower      396
;  :arith-assert-upper      1045
;  :arith-conflicts         833
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         803
;  :arith-offset-eqs        1
;  :arith-pivots            1063
;  :binary-propagations     22
;  :conflicts               1372
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2732
;  :mk-clause               409
;  :num-allocs              4727468
;  :num-checks              1541
;  :propagations            366
;  :quant-instantiations    77
;  :rlimit-count            349121)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@20@01 $k@118@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          722
;  :arith-assert-diseq      112
;  :arith-assert-lower      396
;  :arith-assert-upper      1046
;  :arith-conflicts         834
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         804
;  :arith-offset-eqs        1
;  :arith-pivots            1064
;  :binary-propagations     22
;  :conflicts               1373
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2733
;  :mk-clause               409
;  :num-allocs              4727468
;  :num-checks              1542
;  :propagations            366
;  :quant-instantiations    77
;  :rlimit-count            349211)
(declare-const $k@149@01 $Perm)
(assert ($Perm.isReadVar $k@149@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          722
;  :arith-assert-diseq      113
;  :arith-assert-lower      398
;  :arith-assert-upper      1048
;  :arith-conflicts         835
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         805
;  :arith-offset-eqs        1
;  :arith-pivots            1065
;  :binary-propagations     22
;  :conflicts               1374
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2738
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1543
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            349455)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          722
;  :arith-assert-diseq      113
;  :arith-assert-lower      398
;  :arith-assert-upper      1048
;  :arith-conflicts         835
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         805
;  :arith-offset-eqs        1
;  :arith-pivots            1065
;  :binary-propagations     22
;  :conflicts               1375
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2739
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1544
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            349515)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          722
;  :arith-assert-diseq      113
;  :arith-assert-lower      398
;  :arith-assert-upper      1049
;  :arith-conflicts         836
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         806
;  :arith-offset-eqs        1
;  :arith-pivots            1065
;  :binary-propagations     22
;  :conflicts               1376
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2740
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1545
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            349597)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@149@01 $Perm.No) (< $Perm.No $k@149@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          722
;  :arith-assert-diseq      113
;  :arith-assert-lower      398
;  :arith-assert-upper      1049
;  :arith-conflicts         836
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         806
;  :arith-offset-eqs        1
;  :arith-pivots            1065
;  :binary-propagations     22
;  :conflicts               1377
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2740
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1546
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            349647)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
  $t@126@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          722
;  :arith-assert-diseq      113
;  :arith-assert-lower      398
;  :arith-assert-upper      1049
;  :arith-conflicts         836
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         806
;  :arith-offset-eqs        1
;  :arith-pivots            1065
;  :binary-propagations     22
;  :conflicts               1377
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2740
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1547
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            349658)
(push) ; 4
(assert (not (not (= (- $k@21@01 $k@119@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          722
;  :arith-assert-diseq      113
;  :arith-assert-lower      398
;  :arith-assert-upper      1049
;  :arith-conflicts         836
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         806
;  :arith-offset-eqs        1
;  :arith-pivots            1065
;  :binary-propagations     22
;  :conflicts               1378
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2741
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1548
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            349726)
(assert (< $k@149@01 (- $k@21@01 $k@119@01)))
(assert (<= $Perm.No (- (- $k@21@01 $k@119@01) $k@149@01)))
(assert (<= (- (- $k@21@01 $k@119@01) $k@149@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@21@01 $k@119@01) $k@149@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          723
;  :arith-assert-diseq      113
;  :arith-assert-lower      400
;  :arith-assert-upper      1051
;  :arith-conflicts         837
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         807
;  :arith-offset-eqs        1
;  :arith-pivots            1067
;  :binary-propagations     22
;  :conflicts               1379
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2745
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1549
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            350010)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          723
;  :arith-assert-diseq      113
;  :arith-assert-lower      400
;  :arith-assert-upper      1051
;  :arith-conflicts         837
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         807
;  :arith-offset-eqs        1
;  :arith-pivots            1067
;  :binary-propagations     22
;  :conflicts               1380
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2746
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1550
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            350070)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          723
;  :arith-assert-diseq      113
;  :arith-assert-lower      400
;  :arith-assert-upper      1052
;  :arith-conflicts         838
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         808
;  :arith-offset-eqs        1
;  :arith-pivots            1067
;  :binary-propagations     22
;  :conflicts               1381
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2747
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1551
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            350152)
(push) ; 4
(assert (not (= diz@7@01 $t@126@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          723
;  :arith-assert-diseq      113
;  :arith-assert-lower      400
;  :arith-assert-upper      1052
;  :arith-conflicts         838
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         808
;  :arith-offset-eqs        1
;  :arith-pivots            1067
;  :binary-propagations     22
;  :conflicts               1381
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2747
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1552
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            350163)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          723
;  :arith-assert-diseq      113
;  :arith-assert-lower      400
;  :arith-assert-upper      1053
;  :arith-conflicts         839
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         809
;  :arith-offset-eqs        1
;  :arith-pivots            1068
;  :binary-propagations     22
;  :conflicts               1382
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2748
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1553
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            350259)
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          723
;  :arith-assert-diseq      113
;  :arith-assert-lower      400
;  :arith-assert-upper      1054
;  :arith-conflicts         840
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         810
;  :arith-offset-eqs        1
;  :arith-pivots            1069
;  :binary-propagations     22
;  :conflicts               1383
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2749
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1554
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            350355)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 4
(assert (not (< $Perm.No (+ (+ (- $k@15@01 $k@113@01) $k@122@01) $k@133@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          723
;  :arith-assert-diseq      113
;  :arith-assert-lower      400
;  :arith-assert-upper      1055
;  :arith-conflicts         841
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         811
;  :arith-offset-eqs        1
;  :arith-pivots            1070
;  :binary-propagations     22
;  :conflicts               1384
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2750
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1555
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            350451)
(push) ; 4
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@14@01))) $t@134@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          723
;  :arith-assert-diseq      113
;  :arith-assert-lower      400
;  :arith-assert-upper      1055
;  :arith-conflicts         841
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         811
;  :arith-offset-eqs        1
;  :arith-pivots            1070
;  :binary-propagations     22
;  :conflicts               1385
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2751
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1556
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            350511)
(push) ; 4
(assert (not (< $Perm.No (+ (- $k@17@01 $k@115@01) $k@125@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          723
;  :arith-assert-diseq      113
;  :arith-assert-lower      400
;  :arith-assert-upper      1056
;  :arith-conflicts         842
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         812
;  :arith-offset-eqs        1
;  :arith-pivots            1070
;  :binary-propagations     22
;  :conflicts               1386
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   45
;  :datatype-splits         330
;  :decisions               660
;  :del-clause              380
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             2752
;  :mk-clause               411
;  :num-allocs              4727468
;  :num-checks              1557
;  :propagations            367
;  :quant-instantiations    77
;  :rlimit-count            350593)
; [exec]
; inhale false
(pop) ; 3
(push) ; 3
; [else-branch: 43 | __A@11@01 == 1]
(assert (= __A@11@01 1))
(pop) ; 3
(pop) ; 2
(pop) ; 1
