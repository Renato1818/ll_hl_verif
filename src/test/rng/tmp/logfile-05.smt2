(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-16 14:26:43
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
(declare-const class_Rng<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_CASR<TYPE> TYPE)
(declare-const class_LFSR<TYPE> TYPE)
(declare-const class_Combinate<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Rng_m: Ref]
(declare-fun $FVF.domain_Rng_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Rng_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Rng_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Rng_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Rng_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Rng_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [CASR_m: Ref]
(declare-fun $FVF.domain_CASR_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_CASR_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_CASR_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_CASR_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_CASR_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_CASR_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [LFSR_m: Ref]
(declare-fun $FVF.domain_LFSR_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_LFSR_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_LFSR_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_LFSR_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_LFSR_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_LFSR_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Combinate_m: Ref]
(declare-fun $FVF.domain_Combinate_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Combinate_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Combinate_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Combinate_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Combinate_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Combinate_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun CASR_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun CASR_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun LFSR_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun LFSR_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Combinate_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Combinate_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Rng<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_CASR<TYPE> class_LFSR<TYPE> class_Combinate<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Rng<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_CASR<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_LFSR<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Combinate<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Rng_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Rng_m vs) ($FVF.domain_Rng_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Rng_m vs))
            (= ($FVF.lookup_Rng_m vs x) ($FVF.lookup_Rng_m ws x)))
          :pattern (($FVF.lookup_Rng_m vs x) ($FVF.lookup_Rng_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Rng_m pm r))
    :pattern ($FVF.perm_Rng_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Rng_m f r) true)
    :pattern ($FVF.loc_Rng_m f r))))
; /field_value_functions_axioms.smt2 [CASR_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_CASR_m vs) ($FVF.domain_CASR_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_CASR_m vs))
            (= ($FVF.lookup_CASR_m vs x) ($FVF.lookup_CASR_m ws x)))
          :pattern (($FVF.lookup_CASR_m vs x) ($FVF.lookup_CASR_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_CASR_m pm r))
    :pattern ($FVF.perm_CASR_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_CASR_m f r) true)
    :pattern ($FVF.loc_CASR_m f r))))
; /field_value_functions_axioms.smt2 [LFSR_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_LFSR_m vs) ($FVF.domain_LFSR_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_LFSR_m vs))
            (= ($FVF.lookup_LFSR_m vs x) ($FVF.lookup_LFSR_m ws x)))
          :pattern (($FVF.lookup_LFSR_m vs x) ($FVF.lookup_LFSR_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_LFSR_m pm r))
    :pattern ($FVF.perm_LFSR_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_LFSR_m f r) true)
    :pattern ($FVF.loc_LFSR_m f r))))
; /field_value_functions_axioms.smt2 [Combinate_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Combinate_m vs) ($FVF.domain_Combinate_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Combinate_m vs))
            (= ($FVF.lookup_Combinate_m vs x) ($FVF.lookup_Combinate_m ws x)))
          :pattern (($FVF.lookup_Combinate_m vs x) ($FVF.lookup_Combinate_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Combinate_m pm r))
    :pattern ($FVF.perm_Combinate_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Combinate_m f r) true)
    :pattern ($FVF.loc_Combinate_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 6))
    (and
      (and
        (and
          (and
            (and
              (and
                (or
                  (< (Seq_index vals@8@00 0) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 0)))
                (or
                  (< (Seq_index vals@8@00 1) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 1))))
              (or
                (< (Seq_index vals@8@00 2) (- 0 1))
                (<= result@9@00 (Seq_index vals@8@00 2))))
            (or
              (< (Seq_index vals@8@00 3) (- 0 1))
              (<= result@9@00 (Seq_index vals@8@00 3))))
          (or
            (< (Seq_index vals@8@00 4) (- 0 1))
            (<= result@9@00 (Seq_index vals@8@00 4))))
        (or
          (< (Seq_index vals@8@00 5) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 5))))
      (and
        (implies
          (and
            (and
              (and
                (and
                  (and
                    (< (Seq_index vals@8@00 0) (- 0 1))
                    (< (Seq_index vals@8@00 1) (- 0 1)))
                  (< (Seq_index vals@8@00 2) (- 0 1)))
                (< (Seq_index vals@8@00 3) (- 0 1)))
              (< (Seq_index vals@8@00 4) (- 0 1)))
            (< (Seq_index vals@8@00 5) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (or
              (or
                (or
                  (or
                    (<= (- 0 1) (Seq_index vals@8@00 0))
                    (<= (- 0 1) (Seq_index vals@8@00 1)))
                  (<= (- 0 1) (Seq_index vals@8@00 2)))
                (<= (- 0 1) (Seq_index vals@8@00 3)))
              (<= (- 0 1) (Seq_index vals@8@00 4)))
            (<= (- 0 1) (Seq_index vals@8@00 5)))
          (or
            (or
              (or
                (or
                  (or
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 0))
                      (= result@9@00 (Seq_index vals@8@00 0)))
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 1))
                      (= result@9@00 (Seq_index vals@8@00 1))))
                  (and
                    (<= (- 0 1) (Seq_index vals@8@00 2))
                    (= result@9@00 (Seq_index vals@8@00 2))))
                (and
                  (<= (- 0 1) (Seq_index vals@8@00 3))
                  (= result@9@00 (Seq_index vals@8@00 3))))
              (and
                (<= (- 0 1) (Seq_index vals@8@00 4))
                (= result@9@00 (Seq_index vals@8@00 4))))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 5))
              (= result@9@00 (Seq_index vals@8@00 5)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Rng_exp2__EncodedGlobalVariables_Integer ----------
(declare-const diz@0@05 $Ref)
(declare-const __globals@1@05 $Ref)
(declare-const __exponent@2@05 Int)
(declare-const sys__result@3@05 Int)
(declare-const diz@4@05 $Ref)
(declare-const __globals@5@05 $Ref)
(declare-const __exponent@6@05 Int)
(declare-const sys__result@7@05 Int)
(push) ; 1
(declare-const $t@8@05 $Snap)
(assert (= $t@8@05 ($Snap.combine ($Snap.first $t@8@05) ($Snap.second $t@8@05))))
(assert (= ($Snap.first $t@8@05) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@4@05 $Ref.null)))
(assert (=
  ($Snap.second $t@8@05)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@8@05))
    ($Snap.second ($Snap.second $t@8@05)))))
(declare-const $k@9@05 $Perm)
(assert ($Perm.isReadVar $k@9@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@9@05 $Perm.No) (< $Perm.No $k@9@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            18
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   2
;  :arith-eq-adapter     2
;  :binary-propagations  22
;  :conflicts            1
;  :datatype-accessor-ax 3
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          274
;  :mk-clause            3
;  :num-allocs           3525731
;  :num-checks           1
;  :propagations         23
;  :quant-instantiations 1
;  :rlimit-count         114172)
(assert (<= $Perm.No $k@9@05))
(assert (<= $k@9@05 $Perm.Write))
(assert (implies (< $Perm.No $k@9@05) (not (= diz@4@05 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@8@05))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@8@05)))
    ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@8@05))) $Snap.unit))
; [eval] diz.Rng_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            24
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  22
;  :conflicts            2
;  :datatype-accessor-ax 4
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          277
;  :mk-clause            3
;  :num-allocs           3525731
;  :num-checks           2
;  :propagations         23
;  :quant-instantiations 1
;  :rlimit-count         114425)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@8@05)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@8@05))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            30
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  22
;  :conflicts            3
;  :datatype-accessor-ax 5
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          280
;  :mk-clause            3
;  :num-allocs           3525731
;  :num-checks           3
;  :propagations         23
;  :quant-instantiations 2
;  :rlimit-count         114709)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            35
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  22
;  :conflicts            4
;  :datatype-accessor-ax 6
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          281
;  :mk-clause            3
;  :num-allocs           3525731
;  :num-checks           4
;  :propagations         23
;  :quant-instantiations 2
;  :rlimit-count         114896
;  :time                 0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            41
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  22
;  :conflicts            5
;  :datatype-accessor-ax 7
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          283
;  :mk-clause            3
;  :num-allocs           3525731
;  :num-checks           5
;  :propagations         23
;  :quant-instantiations 2
;  :rlimit-count         115125
;  :time                 0.00)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            48
;  :arith-assert-diseq   2
;  :arith-assert-lower   6
;  :arith-assert-upper   4
;  :arith-eq-adapter     4
;  :binary-propagations  22
;  :conflicts            6
;  :datatype-accessor-ax 8
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          292
;  :mk-clause            6
;  :num-allocs           3525731
;  :num-checks           6
;  :propagations         24
;  :quant-instantiations 5
;  :rlimit-count         115486
;  :time                 0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            54
;  :arith-assert-diseq   2
;  :arith-assert-lower   6
;  :arith-assert-upper   4
;  :arith-eq-adapter     4
;  :binary-propagations  22
;  :conflicts            7
;  :datatype-accessor-ax 9
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.78
;  :mk-bool-var          294
;  :mk-clause            6
;  :num-allocs           3525731
;  :num-checks           7
;  :propagations         24
;  :quant-instantiations 5
;  :rlimit-count         115735)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@10@05 Int)
(push) ; 2
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 0 | 0 <= i@10@05 | live]
; [else-branch: 0 | !(0 <= i@10@05) | live]
(push) ; 4
; [then-branch: 0 | 0 <= i@10@05]
(assert (<= 0 i@10@05))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 5
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   10
;  :arith-assert-upper   5
;  :arith-eq-adapter     6
;  :binary-propagations  22
;  :conflicts            8
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          305
;  :mk-clause            9
;  :num-allocs           3645514
;  :num-checks           8
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116207)
(pop) ; 4
(push) ; 4
; [else-branch: 0 | !(0 <= i@10@05)]
(assert (not (<= 0 i@10@05)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 1 | i@10@05 < |First:(Second:(Second:(Second:(Second:($t@8@05)))))| && 0 <= i@10@05 | live]
; [else-branch: 1 | !(i@10@05 < |First:(Second:(Second:(Second:(Second:($t@8@05)))))| && 0 <= i@10@05) | live]
(push) ; 4
; [then-branch: 1 | i@10@05 < |First:(Second:(Second:(Second:(Second:($t@8@05)))))| && 0 <= i@10@05]
(assert (and
  (<
    i@10@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))
  (<= 0 i@10@05)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 5
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :binary-propagations  22
;  :conflicts            9
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          307
;  :mk-clause            9
;  :num-allocs           3645514
;  :num-checks           9
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116364)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= i@10@05 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :binary-propagations  22
;  :conflicts            9
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          307
;  :mk-clause            9
;  :num-allocs           3645514
;  :num-checks           10
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116373)
; [eval] -1
(push) ; 5
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:($t@8@05)))))[i@10@05] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:($t@8@05)))))[i@10@05] != -1 | live]
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:($t@8@05)))))[i@10@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
    i@10@05)
  (- 0 1)))
(pop) ; 6
(push) ; 6
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:($t@8@05)))))[i@10@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
      i@10@05)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :binary-propagations  22
;  :conflicts            10
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          308
;  :mk-clause            9
;  :num-allocs           3645514
;  :num-checks           11
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116599)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i@10@05 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   3
;  :arith-assert-lower   11
;  :arith-assert-upper   6
;  :arith-eq-adapter     6
;  :binary-propagations  22
;  :conflicts            10
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          308
;  :mk-clause            9
;  :num-allocs           3645514
;  :num-checks           12
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116608)
(push) ; 7
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:($t@8@05)))))[i@10@05] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:($t@8@05)))))[i@10@05]) | live]
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:($t@8@05)))))[i@10@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
    i@10@05)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :binary-propagations  22
;  :conflicts            11
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          311
;  :mk-clause            10
;  :num-allocs           3645514
;  :num-checks           13
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116781)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@10@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :binary-propagations  22
;  :conflicts            11
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          311
;  :mk-clause            10
;  :num-allocs           3645514
;  :num-checks           14
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116790)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            62
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :binary-propagations  22
;  :conflicts            12
;  :datatype-accessor-ax 10
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          311
;  :mk-clause            10
;  :num-allocs           3645514
;  :num-checks           15
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         116838)
(pop) ; 8
(push) ; 8
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:($t@8@05)))))[i@10@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
      i@10@05))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(i@10@05 < |First:(Second:(Second:(Second:(Second:($t@8@05)))))| && 0 <= i@10@05)]
(assert (not
  (and
    (<
      i@10@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))
    (<= 0 i@10@05))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@10@05 Int)) (!
  (implies
    (and
      (<
        i@10@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))
      (<= 0 i@10@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
          i@10@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
            i@10@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
            i@10@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
    i@10@05))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            67
;  :arith-assert-diseq   4
;  :arith-assert-lower   14
;  :arith-assert-upper   6
;  :arith-eq-adapter     7
;  :binary-propagations  22
;  :conflicts            13
;  :datatype-accessor-ax 11
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          313
;  :mk-clause            10
;  :num-allocs           3645514
;  :num-checks           16
;  :propagations         25
;  :quant-instantiations 8
;  :rlimit-count         117493)
(declare-const $k@11@05 $Perm)
(assert ($Perm.isReadVar $k@11@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@11@05 $Perm.No) (< $Perm.No $k@11@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            67
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   7
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            14
;  :datatype-accessor-ax 11
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          317
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           17
;  :propagations         26
;  :quant-instantiations 8
;  :rlimit-count         117691)
(assert (<= $Perm.No $k@11@05))
(assert (<= $k@11@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@11@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            73
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            15
;  :datatype-accessor-ax 12
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          320
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           18
;  :propagations         26
;  :quant-instantiations 8
;  :rlimit-count         118024)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            73
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            16
;  :datatype-accessor-ax 12
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          320
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           19
;  :propagations         26
;  :quant-instantiations 8
;  :rlimit-count         118072)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            79
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            17
;  :datatype-accessor-ax 13
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          323
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           20
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         118438)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            79
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            18
;  :datatype-accessor-ax 13
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          323
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           21
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         118486)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            84
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            19
;  :datatype-accessor-ax 14
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          324
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           22
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         118753)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            84
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            20
;  :datatype-accessor-ax 14
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          324
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           23
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         118801)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            89
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            21
;  :datatype-accessor-ax 15
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          325
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           24
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         119078)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            89
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            22
;  :datatype-accessor-ax 15
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          325
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           25
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         119126)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            94
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            23
;  :datatype-accessor-ax 16
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          326
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           26
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         119413)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            94
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            24
;  :datatype-accessor-ax 16
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          326
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           27
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         119461)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            99
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            25
;  :datatype-accessor-ax 17
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          327
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           28
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         119758)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            99
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            26
;  :datatype-accessor-ax 17
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          327
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           29
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         119806)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            104
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            27
;  :datatype-accessor-ax 18
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          328
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           30
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         120113)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            104
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            28
;  :datatype-accessor-ax 18
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          328
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           31
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         120161)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            109
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            29
;  :datatype-accessor-ax 19
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          329
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           32
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         120478)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            109
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            30
;  :datatype-accessor-ax 19
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          329
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           33
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         120526)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            114
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            31
;  :datatype-accessor-ax 20
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          330
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           34
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         120853)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            114
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            32
;  :datatype-accessor-ax 20
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          330
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           35
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         120901)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            119
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            33
;  :datatype-accessor-ax 21
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          331
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           36
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         121238)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            119
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            34
;  :datatype-accessor-ax 21
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          331
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           37
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         121286)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            124
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            35
;  :datatype-accessor-ax 22
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          332
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           38
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         121633)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            124
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            36
;  :datatype-accessor-ax 22
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          332
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           39
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         121681)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            129
;  :arith-assert-diseq   5
;  :arith-assert-lower   16
;  :arith-assert-upper   8
;  :arith-eq-adapter     8
;  :binary-propagations  22
;  :conflicts            37
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          333
;  :mk-clause            12
;  :num-allocs           3645514
;  :num-checks           40
;  :propagations         26
;  :quant-instantiations 9
;  :rlimit-count         122038)
(declare-const $k@12@05 $Perm)
(assert ($Perm.isReadVar $k@12@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@12@05 $Perm.No) (< $Perm.No $k@12@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            129
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   9
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            38
;  :datatype-accessor-ax 23
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          337
;  :mk-clause            14
;  :num-allocs           3645514
;  :num-checks           41
;  :propagations         27
;  :quant-instantiations 9
;  :rlimit-count         122237)
(assert (<= $Perm.No $k@12@05))
(assert (<= $k@12@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@12@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            135
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            39
;  :datatype-accessor-ax 24
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          340
;  :mk-clause            14
;  :num-allocs           3645514
;  :num-checks           42
;  :propagations         27
;  :quant-instantiations 9
;  :rlimit-count         122690)
(push) ; 2
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            135
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            40
;  :datatype-accessor-ax 24
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          340
;  :mk-clause            14
;  :num-allocs           3645514
;  :num-checks           43
;  :propagations         27
;  :quant-instantiations 9
;  :rlimit-count         122738)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            141
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            41
;  :datatype-accessor-ax 25
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          343
;  :mk-clause            14
;  :num-allocs           3645514
;  :num-checks           44
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         123242)
(push) ; 2
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            141
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            42
;  :datatype-accessor-ax 25
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          343
;  :mk-clause            14
;  :num-allocs           3645514
;  :num-checks           45
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         123290)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            146
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            43
;  :datatype-accessor-ax 26
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          344
;  :mk-clause            14
;  :num-allocs           3645514
;  :num-checks           46
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         123677)
(push) ; 2
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            146
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            44
;  :datatype-accessor-ax 26
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.88
;  :mk-bool-var          344
;  :mk-clause            14
;  :num-allocs           3645514
;  :num-checks           47
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         123725)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            151
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            45
;  :datatype-accessor-ax 27
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          345
;  :mk-clause            14
;  :num-allocs           3771207
;  :num-checks           48
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         124122)
(push) ; 2
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            151
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            46
;  :datatype-accessor-ax 27
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          345
;  :mk-clause            14
;  :num-allocs           3771207
;  :num-checks           49
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         124170)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            156
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            47
;  :datatype-accessor-ax 28
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          346
;  :mk-clause            14
;  :num-allocs           3771207
;  :num-checks           50
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         124577)
(push) ; 2
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            156
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            48
;  :datatype-accessor-ax 28
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          346
;  :mk-clause            14
;  :num-allocs           3771207
;  :num-checks           51
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         124625)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            161
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            49
;  :datatype-accessor-ax 29
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          347
;  :mk-clause            14
;  :num-allocs           3771207
;  :num-checks           52
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         125042)
(push) ; 2
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            161
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            50
;  :datatype-accessor-ax 29
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          347
;  :mk-clause            14
;  :num-allocs           3771207
;  :num-checks           53
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         125090)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            166
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            51
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          348
;  :mk-clause            14
;  :num-allocs           3771207
;  :num-checks           54
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         125517)
(push) ; 2
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            166
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            52
;  :datatype-accessor-ax 30
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          348
;  :mk-clause            14
;  :num-allocs           3771207
;  :num-checks           55
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         125565)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            53
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          349
;  :mk-clause            14
;  :num-allocs           3771207
;  :num-checks           56
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         126002)
(push) ; 2
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            171
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            54
;  :datatype-accessor-ax 31
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          349
;  :mk-clause            14
;  :num-allocs           3771207
;  :num-checks           57
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         126050)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   6
;  :arith-assert-lower   18
;  :arith-assert-upper   10
;  :arith-eq-adapter     9
;  :binary-propagations  22
;  :conflicts            55
;  :datatype-accessor-ax 32
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          350
;  :mk-clause            14
;  :num-allocs           3771207
;  :num-checks           58
;  :propagations         27
;  :quant-instantiations 10
;  :rlimit-count         126497)
(declare-const $k@13@05 $Perm)
(assert ($Perm.isReadVar $k@13@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@13@05 $Perm.No) (< $Perm.No $k@13@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            176
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   11
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            56
;  :datatype-accessor-ax 32
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          354
;  :mk-clause            16
;  :num-allocs           3771207
;  :num-checks           59
;  :propagations         28
;  :quant-instantiations 10
;  :rlimit-count         126696)
(assert (<= $Perm.No $k@13@05))
(assert (<= $k@13@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@13@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            182
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            57
;  :datatype-accessor-ax 33
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          357
;  :mk-clause            16
;  :num-allocs           3771207
;  :num-checks           60
;  :propagations         28
;  :quant-instantiations 10
;  :rlimit-count         127239)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            182
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            58
;  :datatype-accessor-ax 33
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          357
;  :mk-clause            16
;  :num-allocs           3771207
;  :num-checks           61
;  :propagations         28
;  :quant-instantiations 10
;  :rlimit-count         127287)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            188
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            59
;  :datatype-accessor-ax 34
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          360
;  :mk-clause            16
;  :num-allocs           3771207
;  :num-checks           62
;  :propagations         28
;  :quant-instantiations 11
;  :rlimit-count         127875)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            188
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            60
;  :datatype-accessor-ax 34
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          360
;  :mk-clause            16
;  :num-allocs           3771207
;  :num-checks           63
;  :propagations         28
;  :quant-instantiations 11
;  :rlimit-count         127923)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            193
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            61
;  :datatype-accessor-ax 35
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          361
;  :mk-clause            16
;  :num-allocs           3771207
;  :num-checks           64
;  :propagations         28
;  :quant-instantiations 11
;  :rlimit-count         128400)
(push) ; 2
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            193
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            62
;  :datatype-accessor-ax 35
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          361
;  :mk-clause            16
;  :num-allocs           3771207
;  :num-checks           65
;  :propagations         28
;  :quant-instantiations 11
;  :rlimit-count         128448)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            198
;  :arith-assert-diseq   7
;  :arith-assert-lower   20
;  :arith-assert-upper   12
;  :arith-eq-adapter     10
;  :binary-propagations  22
;  :conflicts            63
;  :datatype-accessor-ax 36
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          362
;  :mk-clause            16
;  :num-allocs           3771207
;  :num-checks           66
;  :propagations         28
;  :quant-instantiations 11
;  :rlimit-count         128935)
(declare-const $k@14@05 $Perm)
(assert ($Perm.isReadVar $k@14@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@14@05 $Perm.No) (< $Perm.No $k@14@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            198
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   13
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            64
;  :datatype-accessor-ax 36
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          366
;  :mk-clause            18
;  :num-allocs           3771207
;  :num-checks           67
;  :propagations         29
;  :quant-instantiations 11
;  :rlimit-count         129133)
(assert (<= $Perm.No $k@14@05))
(assert (<= $k@14@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@14@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            204
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            65
;  :datatype-accessor-ax 37
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          369
;  :mk-clause            18
;  :num-allocs           3771207
;  :num-checks           68
;  :propagations         29
;  :quant-instantiations 11
;  :rlimit-count         129716)
(push) ; 2
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            204
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            66
;  :datatype-accessor-ax 37
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          369
;  :mk-clause            18
;  :num-allocs           3771207
;  :num-checks           69
;  :propagations         29
;  :quant-instantiations 11
;  :rlimit-count         129764)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            210
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            67
;  :datatype-accessor-ax 38
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          372
;  :mk-clause            18
;  :num-allocs           3771207
;  :num-checks           70
;  :propagations         29
;  :quant-instantiations 12
;  :rlimit-count         130382)
(push) ; 2
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            210
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            68
;  :datatype-accessor-ax 38
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          372
;  :mk-clause            18
;  :num-allocs           3771207
;  :num-checks           71
;  :propagations         29
;  :quant-instantiations 12
;  :rlimit-count         130430)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            215
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            69
;  :datatype-accessor-ax 39
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          373
;  :mk-clause            18
;  :num-allocs           3771207
;  :num-checks           72
;  :propagations         29
;  :quant-instantiations 12
;  :rlimit-count         130947)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            215
;  :arith-assert-diseq   8
;  :arith-assert-lower   22
;  :arith-assert-upper   14
;  :arith-eq-adapter     11
;  :binary-propagations  22
;  :conflicts            70
;  :datatype-accessor-ax 39
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          373
;  :mk-clause            18
;  :num-allocs           3771207
;  :num-checks           73
;  :propagations         29
;  :quant-instantiations 12
;  :rlimit-count         130995)
(declare-const $k@15@05 $Perm)
(assert ($Perm.isReadVar $k@15@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@15@05 $Perm.No) (< $Perm.No $k@15@05))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            215
;  :arith-assert-diseq   9
;  :arith-assert-lower   24
;  :arith-assert-upper   15
;  :arith-eq-adapter     12
;  :binary-propagations  22
;  :conflicts            71
;  :datatype-accessor-ax 39
;  :del-clause           1
;  :max-generation       1
;  :max-memory           4.11
;  :memory               3.97
;  :mk-bool-var          377
;  :mk-clause            20
;  :num-allocs           3771207
;  :num-checks           74
;  :propagations         30
;  :quant-instantiations 12
;  :rlimit-count         131194)
(set-option :timeout 10)
(push) ; 2
(assert (not (=
  diz@4@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               295
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      15
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               72
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             411
;  :mk-clause               21
;  :num-allocs              3901565
;  :num-checks              75
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            132142
;  :time                    0.00)
(assert (<= $Perm.No $k@15@05))
(assert (<= $k@15@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@15@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               301
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             414
;  :mk-clause               21
;  :num-allocs              3901565
;  :num-checks              76
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            132755)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               301
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             414
;  :mk-clause               21
;  :num-allocs              3901565
;  :num-checks              77
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            132803)
(push) ; 2
(assert (not (< $Perm.No $k@15@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               301
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             414
;  :mk-clause               21
;  :num-allocs              3901565
;  :num-checks              78
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            132851)
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               301
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             414
;  :mk-clause               21
;  :num-allocs              3901565
;  :num-checks              79
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            132899)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 2
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               305
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             417
;  :mk-clause               21
;  :num-allocs              3901565
;  :num-checks              80
;  :propagations            30
;  :quant-instantiations    13
;  :rlimit-count            133492)
(push) ; 2
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               305
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               78
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   3
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            3
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             417
;  :mk-clause               21
;  :num-allocs              3901565
;  :num-checks              81
;  :propagations            30
;  :quant-instantiations    13
;  :rlimit-count            133540)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))
  diz@4@05))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@16@05 $Snap)
(assert (= $t@16@05 ($Snap.combine ($Snap.first $t@16@05) ($Snap.second $t@16@05))))
(declare-const $k@17@05 $Perm)
(assert ($Perm.isReadVar $k@17@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@17@05 $Perm.No) (< $Perm.No $k@17@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               388
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      17
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             454
;  :mk-clause               24
;  :num-allocs              3901565
;  :num-checks              83
;  :propagations            31
;  :quant-instantiations    13
;  :rlimit-count            134735)
(assert (<= $Perm.No $k@17@05))
(assert (<= $k@17@05 $Perm.Write))
(assert (implies (< $Perm.No $k@17@05) (not (= diz@4@05 $Ref.null))))
(assert (=
  ($Snap.second $t@16@05)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@16@05))
    ($Snap.second ($Snap.second $t@16@05)))))
(assert (= ($Snap.first ($Snap.second $t@16@05)) $Snap.unit))
; [eval] diz.Rng_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               394
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               81
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             457
;  :mk-clause               24
;  :num-allocs              3901565
;  :num-checks              84
;  :propagations            31
;  :quant-instantiations    13
;  :rlimit-count            134978)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@16@05)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@16@05))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@16@05)))
    ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               400
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             460
;  :mk-clause               24
;  :num-allocs              3901565
;  :num-checks              85
;  :propagations            31
;  :quant-instantiations    14
;  :rlimit-count            135250)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@16@05)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@05))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               405
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             461
;  :mk-clause               24
;  :num-allocs              3901565
;  :num-checks              86
;  :propagations            31
;  :quant-instantiations    14
;  :rlimit-count            135427)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               411
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             463
;  :mk-clause               24
;  :num-allocs              3901565
;  :num-checks              87
;  :propagations            31
;  :quant-instantiations    14
;  :rlimit-count            135646)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               418
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             469
;  :mk-clause               24
;  :num-allocs              3901565
;  :num-checks              88
;  :propagations            31
;  :quant-instantiations    16
;  :rlimit-count            135976)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               424
;  :arith-assert-diseq      10
;  :arith-assert-lower      28
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             471
;  :mk-clause               24
;  :num-allocs              3901565
;  :num-checks              89
;  :propagations            31
;  :quant-instantiations    16
;  :rlimit-count            136215)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@18@05 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 4 | 0 <= i@18@05 | live]
; [else-branch: 4 | !(0 <= i@18@05) | live]
(push) ; 5
; [then-branch: 4 | 0 <= i@18@05]
(assert (<= 0 i@18@05))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      10
;  :arith-assert-lower      31
;  :arith-assert-upper      20
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             479
;  :mk-clause               24
;  :num-allocs              3901565
;  :num-checks              90
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            136655)
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(0 <= i@18@05)]
(assert (not (<= 0 i@18@05)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 5 | i@18@05 < |First:(Second:(Second:(Second:($t@16@05))))| && 0 <= i@18@05 | live]
; [else-branch: 5 | !(i@18@05 < |First:(Second:(Second:(Second:($t@16@05))))| && 0 <= i@18@05) | live]
(push) ; 5
; [then-branch: 5 | i@18@05 < |First:(Second:(Second:(Second:($t@16@05))))| && 0 <= i@18@05]
(assert (and
  (<
    i@18@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))
  (<= 0 i@18@05)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 6
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      10
;  :arith-assert-lower      32
;  :arith-assert-upper      21
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             481
;  :mk-clause               24
;  :num-allocs              3901565
;  :num-checks              91
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            136812)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@18@05 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      10
;  :arith-assert-lower      32
;  :arith-assert-upper      21
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             481
;  :mk-clause               24
;  :num-allocs              3901565
;  :num-checks              92
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            136821)
; [eval] -1
(push) ; 6
; [then-branch: 6 | First:(Second:(Second:(Second:($t@16@05))))[i@18@05] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@16@05))))[i@18@05] != -1 | live]
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@16@05))))[i@18@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))
    i@18@05)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 6 | First:(Second:(Second:(Second:($t@16@05))))[i@18@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))
      i@18@05)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      10
;  :arith-assert-lower      32
;  :arith-assert-upper      21
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             482
;  :mk-clause               24
;  :num-allocs              3901565
;  :num-checks              93
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            137035)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i@18@05 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      10
;  :arith-assert-lower      32
;  :arith-assert-upper      21
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             482
;  :mk-clause               24
;  :num-allocs              3901565
;  :num-checks              94
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            137044)
(push) ; 8
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@16@05))))[i@18@05] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@16@05))))[i@18@05]) | live]
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@16@05))))[i@18@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))
    i@18@05)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             485
;  :mk-clause               25
;  :num-allocs              3901565
;  :num-checks              95
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            137206)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@18@05 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             485
;  :mk-clause               25
;  :num-allocs              3901565
;  :num-checks              96
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            137215)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              20
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             485
;  :mk-clause               25
;  :num-allocs              3901565
;  :num-checks              97
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            137263)
(pop) ; 9
(push) ; 9
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@16@05))))[i@18@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))
      i@18@05))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(i@18@05 < |First:(Second:(Second:(Second:($t@16@05))))| && 0 <= i@18@05)]
(assert (not
  (and
    (<
      i@18@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))
    (<= 0 i@18@05))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@18@05 Int)) (!
  (implies
    (and
      (<
        i@18@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))
      (<= 0 i@18@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))
          i@18@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))
            i@18@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))
            i@18@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))
    i@18@05))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               437
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      21
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             487
;  :mk-clause               25
;  :num-allocs              3901565
;  :num-checks              98
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            137888)
(declare-const $k@19@05 $Perm)
(assert ($Perm.isReadVar $k@19@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@19@05 $Perm.No) (< $Perm.No $k@19@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               437
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      22
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               93
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             491
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              99
;  :propagations            32
;  :quant-instantiations    18
;  :rlimit-count            138087)
(assert (<= $Perm.No $k@19@05))
(assert (<= $k@19@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@19@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@16@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               443
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             494
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              100
;  :propagations            32
;  :quant-instantiations    18
;  :rlimit-count            138410)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               443
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               95
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             494
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              101
;  :propagations            32
;  :quant-instantiations    18
;  :rlimit-count            138458)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               449
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             497
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              102
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            138814)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               449
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               97
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             497
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              103
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            138862)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               454
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               98
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             498
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              104
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            139119)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               454
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             498
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              105
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            139167)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               459
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             499
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              106
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            139434)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               459
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               101
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             499
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              107
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            139482)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               464
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             500
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              108
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            139759)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               464
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               103
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             500
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              109
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            139807)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               469
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             501
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              110
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            140094)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               469
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               105
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             501
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              111
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            140142)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               474
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             502
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              112
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            140439)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               474
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               107
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             502
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              113
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            140487)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               479
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             503
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              114
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            140794)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               479
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             503
;  :mk-clause               27
;  :num-allocs              3901565
;  :num-checks              115
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            140842)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               484
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               110
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             504
;  :mk-clause               27
;  :num-allocs              4039411
;  :num-checks              116
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            141159)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               484
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             504
;  :mk-clause               27
;  :num-allocs              4039411
;  :num-checks              117
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            141207)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               489
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             505
;  :mk-clause               27
;  :num-allocs              4039411
;  :num-checks              118
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            141534)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               489
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             505
;  :mk-clause               27
;  :num-allocs              4039411
;  :num-checks              119
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            141582)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               494
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             506
;  :mk-clause               27
;  :num-allocs              4039411
;  :num-checks              120
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            141919)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               494
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             506
;  :mk-clause               27
;  :num-allocs              4039411
;  :num-checks              121
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            141967)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               499
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      23
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             507
;  :mk-clause               27
;  :num-allocs              4039411
;  :num-checks              122
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            142314)
(declare-const $k@20@05 $Perm)
(assert ($Perm.isReadVar $k@20@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@20@05 $Perm.No) (< $Perm.No $k@20@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               499
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      24
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             511
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              123
;  :propagations            33
;  :quant-instantiations    19
;  :rlimit-count            142512)
(assert (<= $Perm.No $k@20@05))
(assert (<= $k@20@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@20@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@16@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               505
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             514
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              124
;  :propagations            33
;  :quant-instantiations    19
;  :rlimit-count            142955)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               505
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             514
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              125
;  :propagations            33
;  :quant-instantiations    19
;  :rlimit-count            143003)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               511
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               120
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             517
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              126
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            143497)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               511
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             517
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              127
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            143545)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               516
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               122
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             518
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              128
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            143922)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               516
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               123
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             518
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              129
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            143970)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               521
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               124
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             519
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              130
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            144357)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               521
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               125
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             519
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              131
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            144405)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               526
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               126
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             520
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              132
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            144802)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               526
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             520
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              133
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            144850)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               531
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               128
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             521
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              134
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            145257)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               531
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               129
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             521
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              135
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            145305)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               536
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             522
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              136
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            145722)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               536
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               131
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             522
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              137
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            145770)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               541
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             523
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              138
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            146197)
(push) ; 3
(assert (not (< $Perm.No $k@20@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               541
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             523
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              139
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            146245)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               546
;  :arith-assert-diseq      13
;  :arith-assert-lower      39
;  :arith-assert-upper      25
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             524
;  :mk-clause               29
;  :num-allocs              4039411
;  :num-checks              140
;  :propagations            33
;  :quant-instantiations    20
;  :rlimit-count            146682)
(declare-const $k@21@05 $Perm)
(assert ($Perm.isReadVar $k@21@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@21@05 $Perm.No) (< $Perm.No $k@21@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               546
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      26
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             528
;  :mk-clause               31
;  :num-allocs              4039411
;  :num-checks              141
;  :propagations            34
;  :quant-instantiations    20
;  :rlimit-count            146881)
(assert (<= $Perm.No $k@21@05))
(assert (<= $k@21@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@21@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@16@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               552
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               136
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             531
;  :mk-clause               31
;  :num-allocs              4039411
;  :num-checks              142
;  :propagations            34
;  :quant-instantiations    20
;  :rlimit-count            147414)
(push) ; 3
(assert (not (< $Perm.No $k@21@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               552
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             531
;  :mk-clause               31
;  :num-allocs              4039411
;  :num-checks              143
;  :propagations            34
;  :quant-instantiations    20
;  :rlimit-count            147462)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               558
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             534
;  :mk-clause               31
;  :num-allocs              4181523
;  :num-checks              144
;  :propagations            34
;  :quant-instantiations    21
;  :rlimit-count            148040)
(push) ; 3
(assert (not (< $Perm.No $k@21@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               558
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             534
;  :mk-clause               31
;  :num-allocs              4181523
;  :num-checks              145
;  :propagations            34
;  :quant-instantiations    21
;  :rlimit-count            148088)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               563
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             535
;  :mk-clause               31
;  :num-allocs              4181523
;  :num-checks              146
;  :propagations            34
;  :quant-instantiations    21
;  :rlimit-count            148555)
(push) ; 3
(assert (not (< $Perm.No $k@21@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               563
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               141
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             535
;  :mk-clause               31
;  :num-allocs              4181523
;  :num-checks              147
;  :propagations            34
;  :quant-instantiations    21
;  :rlimit-count            148603)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               568
;  :arith-assert-diseq      14
;  :arith-assert-lower      41
;  :arith-assert-upper      27
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             536
;  :mk-clause               31
;  :num-allocs              4181523
;  :num-checks              148
;  :propagations            34
;  :quant-instantiations    21
;  :rlimit-count            149080)
(declare-const $k@22@05 $Perm)
(assert ($Perm.isReadVar $k@22@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@22@05 $Perm.No) (< $Perm.No $k@22@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               568
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      28
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             540
;  :mk-clause               33
;  :num-allocs              4181523
;  :num-checks              149
;  :propagations            35
;  :quant-instantiations    21
;  :rlimit-count            149279)
(assert (<= $Perm.No $k@22@05))
(assert (<= $k@22@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@22@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@16@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               574
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             543
;  :mk-clause               33
;  :num-allocs              4181523
;  :num-checks              150
;  :propagations            35
;  :quant-instantiations    21
;  :rlimit-count            149852)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               574
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             543
;  :mk-clause               33
;  :num-allocs              4181523
;  :num-checks              151
;  :propagations            35
;  :quant-instantiations    21
;  :rlimit-count            149900)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               580
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             546
;  :mk-clause               33
;  :num-allocs              4181523
;  :num-checks              152
;  :propagations            35
;  :quant-instantiations    22
;  :rlimit-count            150508)
(push) ; 3
(assert (not (< $Perm.No $k@22@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               580
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               147
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             546
;  :mk-clause               33
;  :num-allocs              4181523
;  :num-checks              153
;  :propagations            35
;  :quant-instantiations    22
;  :rlimit-count            150556)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               585
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               148
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             547
;  :mk-clause               33
;  :num-allocs              4181523
;  :num-checks              154
;  :propagations            35
;  :quant-instantiations    22
;  :rlimit-count            151063)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               585
;  :arith-assert-diseq      15
;  :arith-assert-lower      43
;  :arith-assert-upper      29
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               149
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             547
;  :mk-clause               33
;  :num-allocs              4181523
;  :num-checks              155
;  :propagations            35
;  :quant-instantiations    22
;  :rlimit-count            151111)
(declare-const $k@23@05 $Perm)
(assert ($Perm.isReadVar $k@23@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@23@05 $Perm.No) (< $Perm.No $k@23@05))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               585
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      30
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   6
;  :datatype-splits         62
;  :decisions               62
;  :del-clause              21
;  :final-checks            6
;  :max-generation          1
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             551
;  :mk-clause               35
;  :num-allocs              4181523
;  :num-checks              156
;  :propagations            36
;  :quant-instantiations    22
;  :rlimit-count            151309)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@4@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               910
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      30
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             658
;  :mk-clause               37
;  :num-allocs              4326491
;  :num-checks              157
;  :propagations            37
;  :quant-instantiations    22
;  :rlimit-count            153478
;  :time                    0.00)
(assert (<= $Perm.No $k@23@05))
(assert (<= $k@23@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@23@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               916
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               153
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             661
;  :mk-clause               37
;  :num-allocs              4326491
;  :num-checks              158
;  :propagations            37
;  :quant-instantiations    22
;  :rlimit-count            154081)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               916
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               154
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             661
;  :mk-clause               37
;  :num-allocs              4326491
;  :num-checks              159
;  :propagations            37
;  :quant-instantiations    22
;  :rlimit-count            154129)
(push) ; 3
(assert (not (< $Perm.No $k@23@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               916
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               155
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             661
;  :mk-clause               37
;  :num-allocs              4326491
;  :num-checks              160
;  :propagations            37
;  :quant-instantiations    22
;  :rlimit-count            154177)
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               916
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               156
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             661
;  :mk-clause               37
;  :num-allocs              4326491
;  :num-checks              161
;  :propagations            37
;  :quant-instantiations    22
;  :rlimit-count            154225)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@16@05))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 3
(assert (not (< $Perm.No $k@17@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               921
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               157
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             664
;  :mk-clause               37
;  :num-allocs              4326491
;  :num-checks              162
;  :propagations            37
;  :quant-instantiations    23
;  :rlimit-count            154809)
(push) ; 3
(assert (not (< $Perm.No $k@19@05)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               921
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      31
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              23
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             664
;  :mk-clause               37
;  :num-allocs              4326491
;  :num-checks              163
;  :propagations            37
;  :quant-instantiations    23
;  :rlimit-count            154857)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@05))))))))))
  diz@4@05))
(pop) ; 2
(push) ; 2
; [exec]
; var sys__local__result__5: Int
(declare-const sys__local__result__5@24@05 Int)
; [exec]
; var globals__6: Ref
(declare-const globals__6@25@05 $Ref)
; [exec]
; var exponent__7: Int
(declare-const exponent__7@26@05 Int)
; [exec]
; var __flatten_1__8: Int
(declare-const __flatten_1__8@27@05 Int)
; [exec]
; var __flatten_2__9: Int
(declare-const __flatten_2__9@28@05 Int)
; [exec]
; globals__6 := __globals
; [exec]
; exponent__7 := __exponent
; [exec]
; diz.Rng_result := 1
; [exec]
; diz.Rng_i := 0
(declare-const __flatten_1__8@29@05 Int)
(declare-const __flatten_2__9@30@05 Int)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@31@05 $Snap)
(assert (= $t@31@05 ($Snap.combine ($Snap.first $t@31@05) ($Snap.second $t@31@05))))
(declare-const $k@32@05 $Perm)
(assert ($Perm.isReadVar $k@32@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@32@05 $Perm.No) (< $Perm.No $k@32@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               926
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             669
;  :mk-clause               39
;  :num-allocs              4326491
;  :num-checks              164
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            155177)
(assert (<= $Perm.No $k@32@05))
(assert (<= $k@32@05 $Perm.Write))
(assert (implies (< $Perm.No $k@32@05) (not (= diz@4@05 $Ref.null))))
(assert (=
  ($Snap.second $t@31@05)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@31@05))
    ($Snap.second ($Snap.second $t@31@05)))))
(assert (= ($Snap.first ($Snap.second $t@31@05)) $Snap.unit))
; [eval] diz.Rng_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               932
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             672
;  :mk-clause               39
;  :num-allocs              4326491
;  :num-checks              165
;  :propagations            38
;  :quant-instantiations    23
;  :rlimit-count            155420)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@31@05))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@31@05)))
    ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               938
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             675
;  :mk-clause               39
;  :num-allocs              4326491
;  :num-checks              166
;  :propagations            38
;  :quant-instantiations    24
;  :rlimit-count            155692)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@31@05)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               943
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             676
;  :mk-clause               39
;  :num-allocs              4326491
;  :num-checks              167
;  :propagations            38
;  :quant-instantiations    24
;  :rlimit-count            155869)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               949
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      33
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             678
;  :mk-clause               39
;  :num-allocs              4326491
;  :num-checks              168
;  :propagations            38
;  :quant-instantiations    24
;  :rlimit-count            156088)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               956
;  :arith-assert-diseq      17
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-eq-adapter        23
;  :binary-propagations     22
;  :conflicts               164
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             684
;  :mk-clause               39
;  :num-allocs              4326491
;  :num-checks              169
;  :propagations            38
;  :quant-instantiations    26
;  :rlimit-count            156418)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               962
;  :arith-assert-diseq      17
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-eq-adapter        23
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             686
;  :mk-clause               39
;  :num-allocs              4326491
;  :num-checks              170
;  :propagations            38
;  :quant-instantiations    26
;  :rlimit-count            156657)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))
  $Snap.unit))
; [eval] (forall i__10: Int :: { diz.Rng_m.Main_process_state[i__10] } 0 <= i__10 && i__10 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__10] == -1 || 0 <= diz.Rng_m.Main_process_state[i__10] && diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|)
(declare-const i__10@33@05 Int)
(push) ; 4
; [eval] 0 <= i__10 && i__10 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__10] == -1 || 0 <= diz.Rng_m.Main_process_state[i__10] && diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i__10 && i__10 < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i__10
(push) ; 5
; [then-branch: 8 | 0 <= i__10@33@05 | live]
; [else-branch: 8 | !(0 <= i__10@33@05) | live]
(push) ; 6
; [then-branch: 8 | 0 <= i__10@33@05]
(assert (<= 0 i__10@33@05))
; [eval] i__10 < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               970
;  :arith-assert-diseq      17
;  :arith-assert-lower      52
;  :arith-assert-upper      35
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             694
;  :mk-clause               39
;  :num-allocs              4326491
;  :num-checks              171
;  :propagations            38
;  :quant-instantiations    28
;  :rlimit-count            157097)
(pop) ; 6
(push) ; 6
; [else-branch: 8 | !(0 <= i__10@33@05)]
(assert (not (<= 0 i__10@33@05)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 9 | i__10@33@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__10@33@05 | live]
; [else-branch: 9 | !(i__10@33@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__10@33@05) | live]
(push) ; 6
; [then-branch: 9 | i__10@33@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__10@33@05]
(assert (and
  (<
    i__10@33@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
  (<= 0 i__10@33@05)))
; [eval] diz.Rng_m.Main_process_state[i__10] == -1 || 0 <= diz.Rng_m.Main_process_state[i__10] && diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__10] == -1
; [eval] diz.Rng_m.Main_process_state[i__10]
(push) ; 7
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               970
;  :arith-assert-diseq      17
;  :arith-assert-lower      53
;  :arith-assert-upper      36
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             696
;  :mk-clause               39
;  :num-allocs              4326491
;  :num-checks              172
;  :propagations            38
;  :quant-instantiations    28
;  :rlimit-count            157254)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__10@33@05 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               970
;  :arith-assert-diseq      17
;  :arith-assert-lower      53
;  :arith-assert-upper      36
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             696
;  :mk-clause               39
;  :num-allocs              4326491
;  :num-checks              173
;  :propagations            38
;  :quant-instantiations    28
;  :rlimit-count            157263)
; [eval] -1
(push) ; 7
; [then-branch: 10 | First:(Second:(Second:(Second:($t@31@05))))[i__10@33@05] == -1 | live]
; [else-branch: 10 | First:(Second:(Second:(Second:($t@31@05))))[i__10@33@05] != -1 | live]
(push) ; 8
; [then-branch: 10 | First:(Second:(Second:(Second:($t@31@05))))[i__10@33@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__10@33@05)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 10 | First:(Second:(Second:(Second:($t@31@05))))[i__10@33@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
      i__10@33@05)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i__10] && diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i__10]
; [eval] diz.Rng_m.Main_process_state[i__10]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               970
;  :arith-assert-diseq      17
;  :arith-assert-lower      53
;  :arith-assert-upper      36
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             697
;  :mk-clause               39
;  :num-allocs              4326491
;  :num-checks              174
;  :propagations            38
;  :quant-instantiations    28
;  :rlimit-count            157477)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__10@33@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               970
;  :arith-assert-diseq      17
;  :arith-assert-lower      53
;  :arith-assert-upper      36
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             697
;  :mk-clause               39
;  :num-allocs              4326491
;  :num-checks              175
;  :propagations            38
;  :quant-instantiations    28
;  :rlimit-count            157486)
(push) ; 9
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:($t@31@05))))[i__10@33@05] | live]
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:($t@31@05))))[i__10@33@05]) | live]
(push) ; 10
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:($t@31@05))))[i__10@33@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__10@33@05)))
; [eval] diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__10]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               970
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             700
;  :mk-clause               40
;  :num-allocs              4326491
;  :num-checks              176
;  :propagations            38
;  :quant-instantiations    28
;  :rlimit-count            157648)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__10@33@05 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               970
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             700
;  :mk-clause               40
;  :num-allocs              4326491
;  :num-checks              177
;  :propagations            38
;  :quant-instantiations    28
;  :rlimit-count            157657)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               970
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               170
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              35
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             700
;  :mk-clause               40
;  :num-allocs              4326491
;  :num-checks              178
;  :propagations            38
;  :quant-instantiations    28
;  :rlimit-count            157705)
(pop) ; 10
(push) ; 10
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:($t@31@05))))[i__10@33@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
      i__10@33@05))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 9 | !(i__10@33@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__10@33@05)]
(assert (not
  (and
    (<
      i__10@33@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
    (<= 0 i__10@33@05))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__10@33@05 Int)) (!
  (implies
    (and
      (<
        i__10@33@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
      (<= 0 i__10@33@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
          i__10@33@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__10@33@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__10@33@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__10@33@05))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               975
;  :arith-assert-diseq      18
;  :arith-assert-lower      56
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             702
;  :mk-clause               40
;  :num-allocs              4326491
;  :num-checks              179
;  :propagations            38
;  :quant-instantiations    28
;  :rlimit-count            158330)
(declare-const $k@34@05 $Perm)
(assert ($Perm.isReadVar $k@34@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@34@05 $Perm.No) (< $Perm.No $k@34@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               975
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      37
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             706
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              180
;  :propagations            39
;  :quant-instantiations    28
;  :rlimit-count            158528)
(assert (<= $Perm.No $k@34@05))
(assert (<= $k@34@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@34@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               981
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             709
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              181
;  :propagations            39
;  :quant-instantiations    28
;  :rlimit-count            158851)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               981
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             709
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              182
;  :propagations            39
;  :quant-instantiations    28
;  :rlimit-count            158899)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               987
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             712
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              183
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            159255)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               987
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             712
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              184
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            159303)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               992
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             713
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              185
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            159560)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               992
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             713
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              186
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            159608)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               997
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               179
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             714
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              187
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            159875)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               997
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             714
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              188
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            159923)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1002
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               181
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             715
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              189
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            160200)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1002
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             715
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              190
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            160248)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1007
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             716
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              191
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            160535)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1007
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               184
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             716
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              192
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            160583)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1012
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             717
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              193
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            160880)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1012
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               186
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             717
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              194
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            160928)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1017
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               187
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             718
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              195
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            161235)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1017
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             718
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              196
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            161283)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1022
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               189
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             719
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              197
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            161600)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1022
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               190
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             719
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              198
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            161648)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1027
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             720
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              199
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            161975)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1027
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               192
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             720
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              200
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            162023)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1032
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             721
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              201
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            162360)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1032
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               194
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             721
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              202
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            162408)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1037
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             722
;  :mk-clause               42
;  :num-allocs              4326491
;  :num-checks              203
;  :propagations            39
;  :quant-instantiations    29
;  :rlimit-count            162755)
(declare-const $k@35@05 $Perm)
(assert ($Perm.isReadVar $k@35@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@35@05 $Perm.No) (< $Perm.No $k@35@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1037
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      39
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               196
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             726
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              204
;  :propagations            40
;  :quant-instantiations    29
;  :rlimit-count            162954)
(assert (<= $Perm.No $k@35@05))
(assert (<= $k@35@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@35@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1043
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               197
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             729
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              205
;  :propagations            40
;  :quant-instantiations    29
;  :rlimit-count            163397)
(push) ; 4
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1043
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               198
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             729
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              206
;  :propagations            40
;  :quant-instantiations    29
;  :rlimit-count            163445)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1049
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             732
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              207
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            163939)
(push) ; 4
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1049
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               200
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             732
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              208
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            163987)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1054
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               201
;  :datatype-accessor-ax    107
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             733
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              209
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            164364)
(push) ; 4
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1054
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    107
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             733
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              210
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            164412)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1059
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             734
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              211
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            164799
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1059
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             734
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              212
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            164847)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1064
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             735
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              213
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            165244)
(push) ; 4
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1064
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               206
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             735
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              214
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            165292)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1069
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             736
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              215
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            165699)
(push) ; 4
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1069
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               208
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             736
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              216
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            165747)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1074
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             737
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              217
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            166164)
(push) ; 4
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1074
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             737
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              218
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            166212)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1079
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               211
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             738
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              219
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            166639)
(push) ; 4
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1079
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             738
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              220
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            166687)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1084
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      40
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               213
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             739
;  :mk-clause               44
;  :num-allocs              4326491
;  :num-checks              221
;  :propagations            40
;  :quant-instantiations    30
;  :rlimit-count            167124)
(declare-const $k@36@05 $Perm)
(assert ($Perm.isReadVar $k@36@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@36@05 $Perm.No) (< $Perm.No $k@36@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1084
;  :arith-assert-diseq      21
;  :arith-assert-lower      62
;  :arith-assert-upper      41
;  :arith-eq-adapter        28
;  :binary-propagations     22
;  :conflicts               214
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             743
;  :mk-clause               46
;  :num-allocs              4326491
;  :num-checks              222
;  :propagations            41
;  :quant-instantiations    30
;  :rlimit-count            167323)
(assert (<= $Perm.No $k@36@05))
(assert (<= $k@36@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@36@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1090
;  :arith-assert-diseq      21
;  :arith-assert-lower      62
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             746
;  :mk-clause               46
;  :num-allocs              4326491
;  :num-checks              223
;  :propagations            41
;  :quant-instantiations    30
;  :rlimit-count            167856)
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1090
;  :arith-assert-diseq      21
;  :arith-assert-lower      62
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :binary-propagations     22
;  :conflicts               216
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             746
;  :mk-clause               46
;  :num-allocs              4326491
;  :num-checks              224
;  :propagations            41
;  :quant-instantiations    30
;  :rlimit-count            167904)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1096
;  :arith-assert-diseq      21
;  :arith-assert-lower      62
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :binary-propagations     22
;  :conflicts               217
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             749
;  :mk-clause               46
;  :num-allocs              4326491
;  :num-checks              225
;  :propagations            41
;  :quant-instantiations    31
;  :rlimit-count            168482)
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1096
;  :arith-assert-diseq      21
;  :arith-assert-lower      62
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             749
;  :mk-clause               46
;  :num-allocs              4326491
;  :num-checks              226
;  :propagations            41
;  :quant-instantiations    31
;  :rlimit-count            168530)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1101
;  :arith-assert-diseq      21
;  :arith-assert-lower      62
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             750
;  :mk-clause               46
;  :num-allocs              4326491
;  :num-checks              227
;  :propagations            41
;  :quant-instantiations    31
;  :rlimit-count            168997)
(push) ; 4
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1101
;  :arith-assert-diseq      21
;  :arith-assert-lower      62
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :binary-propagations     22
;  :conflicts               220
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             750
;  :mk-clause               46
;  :num-allocs              4326491
;  :num-checks              228
;  :propagations            41
;  :quant-instantiations    31
;  :rlimit-count            169045)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1106
;  :arith-assert-diseq      21
;  :arith-assert-lower      62
;  :arith-assert-upper      42
;  :arith-eq-adapter        28
;  :binary-propagations     22
;  :conflicts               221
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             751
;  :mk-clause               46
;  :num-allocs              4326491
;  :num-checks              229
;  :propagations            41
;  :quant-instantiations    31
;  :rlimit-count            169522)
(declare-const $k@37@05 $Perm)
(assert ($Perm.isReadVar $k@37@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@37@05 $Perm.No) (< $Perm.No $k@37@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1106
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      43
;  :arith-eq-adapter        29
;  :binary-propagations     22
;  :conflicts               222
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             755
;  :mk-clause               48
;  :num-allocs              4326491
;  :num-checks              230
;  :propagations            42
;  :quant-instantiations    31
;  :rlimit-count            169721)
(assert (<= $Perm.No $k@37@05))
(assert (<= $k@37@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@37@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1112
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      44
;  :arith-eq-adapter        29
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             758
;  :mk-clause               48
;  :num-allocs              4326491
;  :num-checks              231
;  :propagations            42
;  :quant-instantiations    31
;  :rlimit-count            170294)
(push) ; 4
(assert (not (< $Perm.No $k@37@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1112
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      44
;  :arith-eq-adapter        29
;  :binary-propagations     22
;  :conflicts               224
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             758
;  :mk-clause               48
;  :num-allocs              4326491
;  :num-checks              232
;  :propagations            42
;  :quant-instantiations    31
;  :rlimit-count            170342)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1118
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      44
;  :arith-eq-adapter        29
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             761
;  :mk-clause               48
;  :num-allocs              4326491
;  :num-checks              233
;  :propagations            42
;  :quant-instantiations    32
;  :rlimit-count            170950)
(push) ; 4
(assert (not (< $Perm.No $k@37@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1118
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      44
;  :arith-eq-adapter        29
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             761
;  :mk-clause               48
;  :num-allocs              4326491
;  :num-checks              234
;  :propagations            42
;  :quant-instantiations    32
;  :rlimit-count            170998)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1123
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      44
;  :arith-eq-adapter        29
;  :binary-propagations     22
;  :conflicts               227
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             762
;  :mk-clause               48
;  :num-allocs              4326491
;  :num-checks              235
;  :propagations            42
;  :quant-instantiations    32
;  :rlimit-count            171505)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1123
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      44
;  :arith-eq-adapter        29
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             762
;  :mk-clause               48
;  :num-allocs              4326491
;  :num-checks              236
;  :propagations            42
;  :quant-instantiations    32
;  :rlimit-count            171553)
(declare-const $k@38@05 $Perm)
(assert ($Perm.isReadVar $k@38@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@38@05 $Perm.No) (< $Perm.No $k@38@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1123
;  :arith-assert-diseq      23
;  :arith-assert-lower      66
;  :arith-assert-upper      45
;  :arith-eq-adapter        30
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   14
;  :datatype-splits         161
;  :decisions               180
;  :del-clause              36
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             766
;  :mk-clause               50
;  :num-allocs              4326491
;  :num-checks              237
;  :propagations            43
;  :quant-instantiations    32
;  :rlimit-count            171751)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  diz@4@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1448
;  :arith-assert-diseq      23
;  :arith-assert-lower      66
;  :arith-assert-upper      45
;  :arith-eq-adapter        30
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              38
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             873
;  :mk-clause               52
;  :num-allocs              4326491
;  :num-checks              238
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            173914
;  :time                    0.00)
(assert (<= $Perm.No $k@38@05))
(assert (<= $k@38@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@38@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1454
;  :arith-assert-diseq      23
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-eq-adapter        30
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              38
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             876
;  :mk-clause               52
;  :num-allocs              4326491
;  :num-checks              239
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            174517)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1454
;  :arith-assert-diseq      23
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-eq-adapter        30
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              38
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             876
;  :mk-clause               52
;  :num-allocs              4326491
;  :num-checks              240
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            174565)
(push) ; 4
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1454
;  :arith-assert-diseq      23
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-eq-adapter        30
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              38
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             876
;  :mk-clause               52
;  :num-allocs              4326491
;  :num-checks              241
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            174613)
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1454
;  :arith-assert-diseq      23
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-eq-adapter        30
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              38
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             876
;  :mk-clause               52
;  :num-allocs              4326491
;  :num-checks              242
;  :propagations            44
;  :quant-instantiations    32
;  :rlimit-count            174661)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 4
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1459
;  :arith-assert-diseq      23
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-eq-adapter        30
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              38
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             879
;  :mk-clause               52
;  :num-allocs              4326491
;  :num-checks              243
;  :propagations            44
;  :quant-instantiations    33
;  :rlimit-count            175245)
(push) ; 4
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1459
;  :arith-assert-diseq      23
;  :arith-assert-lower      66
;  :arith-assert-upper      46
;  :arith-eq-adapter        30
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              38
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             879
;  :mk-clause               52
;  :num-allocs              4326491
;  :num-checks              244
;  :propagations            44
;  :quant-instantiations    33
;  :rlimit-count            175293)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  diz@4@05))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] diz.Rng_i < exponent__7
(pop) ; 4
(push) ; 4
; [eval] !(diz.Rng_i < exponent__7)
; [eval] diz.Rng_i < exponent__7
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(declare-const $k@39@05 $Perm)
(assert ($Perm.isReadVar $k@39@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@39@05 $Perm.No) (< $Perm.No $k@39@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      24
;  :arith-assert-lower      68
;  :arith-assert-upper      47
;  :arith-eq-adapter        31
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             884
;  :mk-clause               54
;  :num-allocs              4326491
;  :num-checks              245
;  :propagations            45
;  :quant-instantiations    33
;  :rlimit-count            175646)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@9@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      24
;  :arith-assert-lower      68
;  :arith-assert-upper      47
;  :arith-eq-adapter        31
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             884
;  :mk-clause               54
;  :num-allocs              4326491
;  :num-checks              246
;  :propagations            45
;  :quant-instantiations    33
;  :rlimit-count            175657)
(assert (< $k@39@05 $k@9@05))
(assert (<= $Perm.No (- $k@9@05 $k@39@05)))
(assert (<= (- $k@9@05 $k@39@05) $Perm.Write))
(assert (implies (< $Perm.No (- $k@9@05 $k@39@05)) (not (= diz@4@05 $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      24
;  :arith-assert-lower      70
;  :arith-assert-upper      48
;  :arith-eq-adapter        31
;  :binary-propagations     22
;  :conflicts               239
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             887
;  :mk-clause               54
;  :num-allocs              4326491
;  :num-checks              247
;  :propagations            45
;  :quant-instantiations    33
;  :rlimit-count            175865)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      24
;  :arith-assert-lower      70
;  :arith-assert-upper      48
;  :arith-eq-adapter        31
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             887
;  :mk-clause               54
;  :num-allocs              4326491
;  :num-checks              248
;  :propagations            45
;  :quant-instantiations    33
;  :rlimit-count            175913)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      24
;  :arith-assert-lower      70
;  :arith-assert-upper      48
;  :arith-eq-adapter        31
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             887
;  :mk-clause               54
;  :num-allocs              4326491
;  :num-checks              249
;  :propagations            45
;  :quant-instantiations    33
;  :rlimit-count            175961)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      24
;  :arith-assert-lower      70
;  :arith-assert-upper      48
;  :arith-eq-adapter        31
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             887
;  :mk-clause               54
;  :num-allocs              4326491
;  :num-checks              250
;  :propagations            45
;  :quant-instantiations    33
;  :rlimit-count            176009)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      24
;  :arith-assert-lower      70
;  :arith-assert-upper      48
;  :arith-eq-adapter        31
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             887
;  :mk-clause               54
;  :num-allocs              4326491
;  :num-checks              251
;  :propagations            45
;  :quant-instantiations    33
;  :rlimit-count            176057)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      24
;  :arith-assert-lower      70
;  :arith-assert-upper      48
;  :arith-eq-adapter        31
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             887
;  :mk-clause               54
;  :num-allocs              4326491
;  :num-checks              252
;  :propagations            45
;  :quant-instantiations    33
;  :rlimit-count            176105)
; [eval] (forall i__10: Int :: { diz.Rng_m.Main_process_state[i__10] } 0 <= i__10 && i__10 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__10] == -1 || 0 <= diz.Rng_m.Main_process_state[i__10] && diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|)
(declare-const i__10@40@05 Int)
(push) ; 4
; [eval] 0 <= i__10 && i__10 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__10] == -1 || 0 <= diz.Rng_m.Main_process_state[i__10] && diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i__10 && i__10 < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i__10
(push) ; 5
; [then-branch: 12 | 0 <= i__10@40@05 | live]
; [else-branch: 12 | !(0 <= i__10@40@05) | live]
(push) ; 6
; [then-branch: 12 | 0 <= i__10@40@05]
(assert (<= 0 i__10@40@05))
; [eval] i__10 < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      24
;  :arith-assert-lower      71
;  :arith-assert-upper      48
;  :arith-eq-adapter        31
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             888
;  :mk-clause               54
;  :num-allocs              4326491
;  :num-checks              253
;  :propagations            45
;  :quant-instantiations    33
;  :rlimit-count            176205)
(pop) ; 6
(push) ; 6
; [else-branch: 12 | !(0 <= i__10@40@05)]
(assert (not (<= 0 i__10@40@05)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 13 | i__10@40@05 < |First:(Second:(Second:(Second:(Second:($t@8@05)))))| && 0 <= i__10@40@05 | live]
; [else-branch: 13 | !(i__10@40@05 < |First:(Second:(Second:(Second:(Second:($t@8@05)))))| && 0 <= i__10@40@05) | live]
(push) ; 6
; [then-branch: 13 | i__10@40@05 < |First:(Second:(Second:(Second:(Second:($t@8@05)))))| && 0 <= i__10@40@05]
(assert (and
  (<
    i__10@40@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))
  (<= 0 i__10@40@05)))
; [eval] diz.Rng_m.Main_process_state[i__10] == -1 || 0 <= diz.Rng_m.Main_process_state[i__10] && diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__10] == -1
; [eval] diz.Rng_m.Main_process_state[i__10]
(push) ; 7
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      24
;  :arith-assert-lower      72
;  :arith-assert-upper      49
;  :arith-eq-adapter        31
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             890
;  :mk-clause               54
;  :num-allocs              4326491
;  :num-checks              254
;  :propagations            45
;  :quant-instantiations    33
;  :rlimit-count            176362)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__10@40@05 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      24
;  :arith-assert-lower      72
;  :arith-assert-upper      49
;  :arith-eq-adapter        31
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             890
;  :mk-clause               54
;  :num-allocs              4326491
;  :num-checks              255
;  :propagations            45
;  :quant-instantiations    33
;  :rlimit-count            176371)
; [eval] -1
(push) ; 7
; [then-branch: 14 | First:(Second:(Second:(Second:(Second:($t@8@05)))))[i__10@40@05] == -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:(Second:($t@8@05)))))[i__10@40@05] != -1 | live]
(push) ; 8
; [then-branch: 14 | First:(Second:(Second:(Second:(Second:($t@8@05)))))[i__10@40@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
    i__10@40@05)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 14 | First:(Second:(Second:(Second:(Second:($t@8@05)))))[i__10@40@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
      i__10@40@05)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i__10] && diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i__10]
; [eval] diz.Rng_m.Main_process_state[i__10]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      25
;  :arith-assert-lower      75
;  :arith-assert-upper      50
;  :arith-eq-adapter        32
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             896
;  :mk-clause               58
;  :num-allocs              4326491
;  :num-checks              256
;  :propagations            47
;  :quant-instantiations    34
;  :rlimit-count            176654)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__10@40@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      25
;  :arith-assert-lower      75
;  :arith-assert-upper      50
;  :arith-eq-adapter        32
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             896
;  :mk-clause               58
;  :num-allocs              4326491
;  :num-checks              257
;  :propagations            47
;  :quant-instantiations    34
;  :rlimit-count            176663)
(push) ; 9
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:(Second:($t@8@05)))))[i__10@40@05] | live]
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:(Second:($t@8@05)))))[i__10@40@05]) | live]
(push) ; 10
; [then-branch: 15 | 0 <= First:(Second:(Second:(Second:(Second:($t@8@05)))))[i__10@40@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
    i__10@40@05)))
; [eval] diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__10]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      25
;  :arith-assert-lower      75
;  :arith-assert-upper      50
;  :arith-eq-adapter        32
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             896
;  :mk-clause               58
;  :num-allocs              4326491
;  :num-checks              258
;  :propagations            47
;  :quant-instantiations    34
;  :rlimit-count            176826)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__10@40@05 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      25
;  :arith-assert-lower      75
;  :arith-assert-upper      50
;  :arith-eq-adapter        32
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             896
;  :mk-clause               58
;  :num-allocs              4326491
;  :num-checks              259
;  :propagations            47
;  :quant-instantiations    34
;  :rlimit-count            176835)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      25
;  :arith-assert-lower      75
;  :arith-assert-upper      50
;  :arith-eq-adapter        32
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              50
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             896
;  :mk-clause               58
;  :num-allocs              4326491
;  :num-checks              260
;  :propagations            47
;  :quant-instantiations    34
;  :rlimit-count            176883)
(pop) ; 10
(push) ; 10
; [else-branch: 15 | !(0 <= First:(Second:(Second:(Second:(Second:($t@8@05)))))[i__10@40@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
      i__10@40@05))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 13 | !(i__10@40@05 < |First:(Second:(Second:(Second:(Second:($t@8@05)))))| && 0 <= i__10@40@05)]
(assert (not
  (and
    (<
      i__10@40@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))
    (<= 0 i__10@40@05))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__10@40@05 Int)) (!
  (implies
    (and
      (<
        i__10@40@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))
      (<= 0 i__10@40@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
          i__10@40@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
            i__10@40@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
            i__10@40@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
    i__10@40@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      26
;  :arith-assert-lower      76
;  :arith-assert-upper      51
;  :arith-eq-adapter        33
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             904
;  :mk-clause               70
;  :num-allocs              4326491
;  :num-checks              261
;  :propagations            49
;  :quant-instantiations    35
;  :rlimit-count            177341)
(assert (forall ((i__10@40@05 Int)) (!
  (implies
    (and
      (<
        i__10@40@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))
      (<= 0 i__10@40@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
          i__10@40@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
            i__10@40@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
            i__10@40@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))
    i__10@40@05))
  :qid |prog.l<no position>|)))
(declare-const $k@41@05 $Perm)
(assert ($Perm.isReadVar $k@41@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      52
;  :arith-eq-adapter        34
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             909
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              262
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            177917)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@41@05 $Perm.No) (< $Perm.No $k@41@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      52
;  :arith-eq-adapter        34
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             909
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              263
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            177967)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@11@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      52
;  :arith-eq-adapter        34
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             909
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              264
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            177978)
(assert (< $k@41@05 $k@11@05))
(assert (<= $Perm.No (- $k@11@05 $k@41@05)))
(assert (<= (- $k@11@05 $k@41@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@11@05 $k@41@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              265
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178192)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              266
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178240)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              267
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178288)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              268
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178336)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               257
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              269
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178384)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              270
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178432)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               259
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              271
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178480)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               260
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              272
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178528)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               261
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              273
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178576)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              274
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178624)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               263
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              275
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178672)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              276
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178720)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               265
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              277
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178768)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               266
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              278
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178816)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              279
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178864)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               268
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              280
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178912)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               269
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              281
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            178960)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              282
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            179008)
(push) ; 4
(assert (not (=
  diz@4@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              283
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            179019)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               271
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              284
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            179067)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               272
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              285
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            179115)
(push) ; 4
(assert (not (=
  diz@4@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               272
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              286
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            179126)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               273
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              287
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            179174)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      27
;  :arith-assert-lower      80
;  :arith-assert-upper      53
;  :arith-eq-adapter        34
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             912
;  :mk-clause               72
;  :num-allocs              4326491
;  :num-checks              288
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            179222)
(declare-const $k@42@05 $Perm)
(assert ($Perm.isReadVar $k@42@05 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      82
;  :arith-assert-upper      54
;  :arith-eq-adapter        35
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               275
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             916
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              289
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            179418)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@42@05 $Perm.No) (< $Perm.No $k@42@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      82
;  :arith-assert-upper      54
;  :arith-eq-adapter        35
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             916
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              290
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            179468)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@12@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      82
;  :arith-assert-upper      54
;  :arith-eq-adapter        35
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             916
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              291
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            179479)
(assert (< $k@42@05 $k@12@05))
(assert (<= $Perm.No (- $k@12@05 $k@42@05)))
(assert (<= (- $k@12@05 $k@42@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@12@05 $k@42@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               277
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              292
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            179699)
(push) ; 4
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               278
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              293
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            179747)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               279
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              294
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            179795)
(push) ; 4
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               280
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              295
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            179843)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              296
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            179891)
(push) ; 4
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              297
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            179939)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              298
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            179987)
(push) ; 4
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               284
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              299
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            180035)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               285
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              300
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            180083)
(push) ; 4
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              301
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            180131)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              302
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            180179)
(push) ; 4
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               288
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              303
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            180227)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              304
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            180275)
(push) ; 4
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              305
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            180323)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              306
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            180371)
(push) ; 4
(assert (not (< $Perm.No $k@12@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      55
;  :arith-eq-adapter        35
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             919
;  :mk-clause               74
;  :num-allocs              4326491
;  :num-checks              307
;  :propagations            51
;  :quant-instantiations    35
;  :rlimit-count            180419)
(declare-const $k@43@05 $Perm)
(assert ($Perm.isReadVar $k@43@05 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      29
;  :arith-assert-lower      86
;  :arith-assert-upper      56
;  :arith-eq-adapter        36
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             923
;  :mk-clause               76
;  :num-allocs              4326491
;  :num-checks              308
;  :propagations            52
;  :quant-instantiations    35
;  :rlimit-count            180616)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@43@05 $Perm.No) (< $Perm.No $k@43@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      29
;  :arith-assert-lower      86
;  :arith-assert-upper      56
;  :arith-eq-adapter        36
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             923
;  :mk-clause               76
;  :num-allocs              4326491
;  :num-checks              309
;  :propagations            52
;  :quant-instantiations    35
;  :rlimit-count            180666)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@13@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      29
;  :arith-assert-lower      86
;  :arith-assert-upper      56
;  :arith-eq-adapter        36
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             923
;  :mk-clause               76
;  :num-allocs              4326491
;  :num-checks              310
;  :propagations            52
;  :quant-instantiations    35
;  :rlimit-count            180677)
(assert (< $k@43@05 $k@13@05))
(assert (<= $Perm.No (- $k@13@05 $k@43@05)))
(assert (<= (- $k@13@05 $k@43@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@13@05 $k@43@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      29
;  :arith-assert-lower      88
;  :arith-assert-upper      57
;  :arith-eq-adapter        36
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             926
;  :mk-clause               76
;  :num-allocs              4326491
;  :num-checks              311
;  :propagations            52
;  :quant-instantiations    35
;  :rlimit-count            180891)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      29
;  :arith-assert-lower      88
;  :arith-assert-upper      57
;  :arith-eq-adapter        36
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             926
;  :mk-clause               76
;  :num-allocs              4326491
;  :num-checks              312
;  :propagations            52
;  :quant-instantiations    35
;  :rlimit-count            180939)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      29
;  :arith-assert-lower      88
;  :arith-assert-upper      57
;  :arith-eq-adapter        36
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             926
;  :mk-clause               76
;  :num-allocs              4326491
;  :num-checks              313
;  :propagations            52
;  :quant-instantiations    35
;  :rlimit-count            180987)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      29
;  :arith-assert-lower      88
;  :arith-assert-upper      57
;  :arith-eq-adapter        36
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             926
;  :mk-clause               76
;  :num-allocs              4326491
;  :num-checks              314
;  :propagations            52
;  :quant-instantiations    35
;  :rlimit-count            181035)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      29
;  :arith-assert-lower      88
;  :arith-assert-upper      57
;  :arith-eq-adapter        36
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             926
;  :mk-clause               76
;  :num-allocs              4326491
;  :num-checks              315
;  :propagations            52
;  :quant-instantiations    35
;  :rlimit-count            181083)
(push) ; 4
(assert (not (< $Perm.No $k@13@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      29
;  :arith-assert-lower      88
;  :arith-assert-upper      57
;  :arith-eq-adapter        36
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               300
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             926
;  :mk-clause               76
;  :num-allocs              4326491
;  :num-checks              316
;  :propagations            52
;  :quant-instantiations    35
;  :rlimit-count            181131)
(declare-const $k@44@05 $Perm)
(assert ($Perm.isReadVar $k@44@05 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      30
;  :arith-assert-lower      90
;  :arith-assert-upper      58
;  :arith-eq-adapter        37
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             930
;  :mk-clause               78
;  :num-allocs              4326491
;  :num-checks              317
;  :propagations            53
;  :quant-instantiations    35
;  :rlimit-count            181328)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@44@05 $Perm.No) (< $Perm.No $k@44@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      30
;  :arith-assert-lower      90
;  :arith-assert-upper      58
;  :arith-eq-adapter        37
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             930
;  :mk-clause               78
;  :num-allocs              4326491
;  :num-checks              318
;  :propagations            53
;  :quant-instantiations    35
;  :rlimit-count            181378)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@14@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      30
;  :arith-assert-lower      90
;  :arith-assert-upper      58
;  :arith-eq-adapter        37
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             930
;  :mk-clause               78
;  :num-allocs              4326491
;  :num-checks              319
;  :propagations            53
;  :quant-instantiations    35
;  :rlimit-count            181389)
(assert (< $k@44@05 $k@14@05))
(assert (<= $Perm.No (- $k@14@05 $k@44@05)))
(assert (<= (- $k@14@05 $k@44@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@14@05 $k@44@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      30
;  :arith-assert-lower      92
;  :arith-assert-upper      59
;  :arith-eq-adapter        37
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             933
;  :mk-clause               78
;  :num-allocs              4326491
;  :num-checks              320
;  :propagations            53
;  :quant-instantiations    35
;  :rlimit-count            181597)
(push) ; 4
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      30
;  :arith-assert-lower      92
;  :arith-assert-upper      59
;  :arith-eq-adapter        37
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               304
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             933
;  :mk-clause               78
;  :num-allocs              4326491
;  :num-checks              321
;  :propagations            53
;  :quant-instantiations    35
;  :rlimit-count            181645)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      30
;  :arith-assert-lower      92
;  :arith-assert-upper      59
;  :arith-eq-adapter        37
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             933
;  :mk-clause               78
;  :num-allocs              4326491
;  :num-checks              322
;  :propagations            53
;  :quant-instantiations    35
;  :rlimit-count            181693)
(push) ; 4
(assert (not (< $Perm.No $k@14@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      30
;  :arith-assert-lower      92
;  :arith-assert-upper      59
;  :arith-eq-adapter        37
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               306
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             933
;  :mk-clause               78
;  :num-allocs              4326491
;  :num-checks              323
;  :propagations            53
;  :quant-instantiations    35
;  :rlimit-count            181741)
(declare-const $k@45@05 $Perm)
(assert ($Perm.isReadVar $k@45@05 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      31
;  :arith-assert-lower      94
;  :arith-assert-upper      60
;  :arith-eq-adapter        38
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             937
;  :mk-clause               80
;  :num-allocs              4326491
;  :num-checks              324
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            181938)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      31
;  :arith-assert-lower      94
;  :arith-assert-upper      60
;  :arith-eq-adapter        38
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             937
;  :mk-clause               80
;  :num-allocs              4326491
;  :num-checks              325
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            181986)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@45@05 $Perm.No) (< $Perm.No $k@45@05))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      31
;  :arith-assert-lower      94
;  :arith-assert-upper      60
;  :arith-eq-adapter        38
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               309
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             937
;  :mk-clause               80
;  :num-allocs              4326491
;  :num-checks              326
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            182036)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@15@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      31
;  :arith-assert-lower      94
;  :arith-assert-upper      60
;  :arith-eq-adapter        38
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               309
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             937
;  :mk-clause               80
;  :num-allocs              4326491
;  :num-checks              327
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            182047)
(assert (< $k@45@05 $k@15@05))
(assert (<= $Perm.No (- $k@15@05 $k@45@05)))
(assert (<= (- $k@15@05 $k@45@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@15@05 $k@45@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      31
;  :arith-assert-lower      96
;  :arith-assert-upper      61
;  :arith-eq-adapter        38
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             940
;  :mk-clause               80
;  :num-allocs              4326491
;  :num-checks              328
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            182261)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      31
;  :arith-assert-lower      96
;  :arith-assert-upper      61
;  :arith-eq-adapter        38
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               311
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             940
;  :mk-clause               80
;  :num-allocs              4326491
;  :num-checks              329
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            182309)
(push) ; 4
(assert (not (< $Perm.No $k@15@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      31
;  :arith-assert-lower      96
;  :arith-assert-upper      61
;  :arith-eq-adapter        38
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             940
;  :mk-clause               80
;  :num-allocs              4326491
;  :num-checks              330
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            182357)
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      31
;  :arith-assert-lower      96
;  :arith-assert-upper      61
;  :arith-eq-adapter        38
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             940
;  :mk-clause               80
;  :num-allocs              4326491
;  :num-checks              331
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            182405)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 4
(assert (not (< $Perm.No $k@9@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      31
;  :arith-assert-lower      96
;  :arith-assert-upper      61
;  :arith-eq-adapter        38
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               314
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             940
;  :mk-clause               80
;  :num-allocs              4326491
;  :num-checks              332
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            182453)
(push) ; 4
(assert (not (< $Perm.No $k@11@05)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1462
;  :arith-assert-diseq      31
;  :arith-assert-lower      96
;  :arith-assert-upper      61
;  :arith-eq-adapter        38
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 306
;  :datatype-occurs-check   22
;  :datatype-splits         260
;  :decisions               298
;  :del-clause              66
;  :final-checks            14
;  :max-generation          1
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             940
;  :mk-clause               80
;  :num-allocs              4326491
;  :num-checks              333
;  :propagations            54
;  :quant-instantiations    35
;  :rlimit-count            182501)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@32@05 $Perm.Write))
(assert ($Perm.isReadVar $k@34@05 $Perm.Write))
(assert ($Perm.isReadVar $k@35@05 $Perm.Write))
(assert ($Perm.isReadVar $k@36@05 $Perm.Write))
(assert ($Perm.isReadVar $k@37@05 $Perm.Write))
(assert ($Perm.isReadVar $k@38@05 $Perm.Write))
(assert (= $t@31@05 ($Snap.combine ($Snap.first $t@31@05) ($Snap.second $t@31@05))))
(assert (<= $Perm.No $k@32@05))
(assert (<= $k@32@05 $Perm.Write))
(assert (implies (< $Perm.No $k@32@05) (not (= diz@4@05 $Ref.null))))
(assert (=
  ($Snap.second $t@31@05)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@31@05))
    ($Snap.second ($Snap.second $t@31@05)))))
(assert (= ($Snap.first ($Snap.second $t@31@05)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@31@05))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@31@05)))
    ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@31@05)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))
  $Snap.unit))
(assert (forall ((i__10@33@05 Int)) (!
  (implies
    (and
      (<
        i__10@33@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
      (<= 0 i__10@33@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
          i__10@33@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__10@33@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__10@33@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__10@33@05))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))
(assert (<= $Perm.No $k@34@05))
(assert (<= $k@34@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@34@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))
(assert (<= $Perm.No $k@35@05))
(assert (<= $k@35@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@35@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@36@05))
(assert (<= $k@36@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@36@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@37@05))
(assert (<= $k@37@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@37@05)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@38@05))
(assert (<= $k@38@05 $Perm.Write))
(assert (implies
  (< $Perm.No $k@38@05)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  diz@4@05))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Rng_i < exponent__7
(push) ; 5
(assert (not (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
    __exponent@6@05))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2290
;  :arith-assert-diseq      37
;  :arith-assert-lower      112
;  :arith-assert-upper      76
;  :arith-eq-adapter        46
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    168
;  :datatype-constructor-ax 511
;  :datatype-occurs-check   37
;  :datatype-splits         381
;  :decisions               497
;  :del-clause              80
;  :final-checks            23
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1170
;  :mk-clause               95
;  :num-allocs              4497247
;  :num-checks              336
;  :propagations            65
;  :quant-instantiations    46
;  :rlimit-count            192780
;  :time                    0.00)
(push) ; 5
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
  __exponent@6@05)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2472
;  :arith-assert-diseq      37
;  :arith-assert-lower      113
;  :arith-assert-upper      76
;  :arith-eq-adapter        46
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1204
;  :mk-clause               95
;  :num-allocs              4497247
;  :num-checks              337
;  :propagations            67
;  :quant-instantiations    47
;  :rlimit-count            194341)
; [then-branch: 16 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@31@05))))))))))))))))))) < __exponent@6@05 | live]
; [else-branch: 16 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@31@05))))))))))))))))))) < __exponent@6@05) | live]
(push) ; 5
; [then-branch: 16 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@31@05))))))))))))))))))) < __exponent@6@05]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
  __exponent@6@05))
; [exec]
; __flatten_1__8 := diz.Rng_result * 2
; [eval] diz.Rng_result * 2
(declare-const __flatten_1__8@46@05 Int)
(assert (=
  __flatten_1__8@46@05
  (*
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))
    2)))
; [exec]
; diz.Rng_result := __flatten_1__8
; [exec]
; __flatten_2__9 := 1 + diz.Rng_i
; [eval] 1 + diz.Rng_i
(declare-const __flatten_2__9@47@05 Int)
(assert (=
  __flatten_2__9@47@05
  (+
    1
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))
; [exec]
; diz.Rng_i := __flatten_2__9
; Loop head block: Re-establish invariant
(declare-const $k@48@05 $Perm)
(assert ($Perm.isReadVar $k@48@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@48@05 $Perm.No) (< $Perm.No $k@48@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      38
;  :arith-assert-lower      117
;  :arith-assert-upper      80
;  :arith-eq-adapter        49
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1217
;  :mk-clause               103
;  :num-allocs              4497247
;  :num-checks              338
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            195056)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@32@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      38
;  :arith-assert-lower      117
;  :arith-assert-upper      80
;  :arith-eq-adapter        49
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1217
;  :mk-clause               103
;  :num-allocs              4497247
;  :num-checks              339
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            195067)
(assert (< $k@48@05 $k@32@05))
(assert (<= $Perm.No (- $k@32@05 $k@48@05)))
(assert (<= (- $k@32@05 $k@48@05) $Perm.Write))
(assert (implies (< $Perm.No (- $k@32@05 $k@48@05)) (not (= diz@4@05 $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      38
;  :arith-assert-lower      119
;  :arith-assert-upper      81
;  :arith-eq-adapter        49
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1220
;  :mk-clause               103
;  :num-allocs              4497247
;  :num-checks              340
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            195281)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      38
;  :arith-assert-lower      119
;  :arith-assert-upper      81
;  :arith-eq-adapter        49
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1220
;  :mk-clause               103
;  :num-allocs              4497247
;  :num-checks              341
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            195329)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      38
;  :arith-assert-lower      119
;  :arith-assert-upper      81
;  :arith-eq-adapter        49
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               320
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1220
;  :mk-clause               103
;  :num-allocs              4497247
;  :num-checks              342
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            195377)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      38
;  :arith-assert-lower      119
;  :arith-assert-upper      81
;  :arith-eq-adapter        49
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               321
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1220
;  :mk-clause               103
;  :num-allocs              4497247
;  :num-checks              343
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            195425)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      38
;  :arith-assert-lower      119
;  :arith-assert-upper      81
;  :arith-eq-adapter        49
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               322
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1220
;  :mk-clause               103
;  :num-allocs              4497247
;  :num-checks              344
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            195473)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      38
;  :arith-assert-lower      119
;  :arith-assert-upper      81
;  :arith-eq-adapter        49
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               323
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1220
;  :mk-clause               103
;  :num-allocs              4497247
;  :num-checks              345
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            195521)
; [eval] (forall i__10: Int :: { diz.Rng_m.Main_process_state[i__10] } 0 <= i__10 && i__10 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__10] == -1 || 0 <= diz.Rng_m.Main_process_state[i__10] && diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|)
(declare-const i__10@49@05 Int)
(push) ; 6
; [eval] 0 <= i__10 && i__10 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__10] == -1 || 0 <= diz.Rng_m.Main_process_state[i__10] && diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i__10 && i__10 < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i__10
(push) ; 7
; [then-branch: 17 | 0 <= i__10@49@05 | live]
; [else-branch: 17 | !(0 <= i__10@49@05) | live]
(push) ; 8
; [then-branch: 17 | 0 <= i__10@49@05]
(assert (<= 0 i__10@49@05))
; [eval] i__10 < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      38
;  :arith-assert-lower      120
;  :arith-assert-upper      81
;  :arith-eq-adapter        49
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1221
;  :mk-clause               103
;  :num-allocs              4497247
;  :num-checks              346
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            195622)
(pop) ; 8
(push) ; 8
; [else-branch: 17 | !(0 <= i__10@49@05)]
(assert (not (<= 0 i__10@49@05)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 18 | i__10@49@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__10@49@05 | live]
; [else-branch: 18 | !(i__10@49@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__10@49@05) | live]
(push) ; 8
; [then-branch: 18 | i__10@49@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__10@49@05]
(assert (and
  (<
    i__10@49@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
  (<= 0 i__10@49@05)))
; [eval] diz.Rng_m.Main_process_state[i__10] == -1 || 0 <= diz.Rng_m.Main_process_state[i__10] && diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__10] == -1
; [eval] diz.Rng_m.Main_process_state[i__10]
(push) ; 9
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      38
;  :arith-assert-lower      121
;  :arith-assert-upper      82
;  :arith-eq-adapter        49
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1223
;  :mk-clause               103
;  :num-allocs              4497247
;  :num-checks              347
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            195779)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__10@49@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      38
;  :arith-assert-lower      121
;  :arith-assert-upper      82
;  :arith-eq-adapter        49
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1223
;  :mk-clause               103
;  :num-allocs              4497247
;  :num-checks              348
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            195788)
; [eval] -1
(push) ; 9
; [then-branch: 19 | First:(Second:(Second:(Second:($t@31@05))))[i__10@49@05] == -1 | live]
; [else-branch: 19 | First:(Second:(Second:(Second:($t@31@05))))[i__10@49@05] != -1 | live]
(push) ; 10
; [then-branch: 19 | First:(Second:(Second:(Second:($t@31@05))))[i__10@49@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__10@49@05)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 19 | First:(Second:(Second:(Second:($t@31@05))))[i__10@49@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
      i__10@49@05)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i__10] && diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i__10]
; [eval] diz.Rng_m.Main_process_state[i__10]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      39
;  :arith-assert-lower      124
;  :arith-assert-upper      83
;  :arith-eq-adapter        50
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1229
;  :mk-clause               107
;  :num-allocs              4497247
;  :num-checks              349
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            196059)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__10@49@05 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      39
;  :arith-assert-lower      124
;  :arith-assert-upper      83
;  :arith-eq-adapter        50
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1229
;  :mk-clause               107
;  :num-allocs              4497247
;  :num-checks              350
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            196068)
(push) ; 11
; [then-branch: 20 | 0 <= First:(Second:(Second:(Second:($t@31@05))))[i__10@49@05] | live]
; [else-branch: 20 | !(0 <= First:(Second:(Second:(Second:($t@31@05))))[i__10@49@05]) | live]
(push) ; 12
; [then-branch: 20 | 0 <= First:(Second:(Second:(Second:($t@31@05))))[i__10@49@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__10@49@05)))
; [eval] diz.Rng_m.Main_process_state[i__10] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__10]
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      39
;  :arith-assert-lower      124
;  :arith-assert-upper      83
;  :arith-eq-adapter        50
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1229
;  :mk-clause               107
;  :num-allocs              4497247
;  :num-checks              351
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            196221)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__10@49@05 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      39
;  :arith-assert-lower      124
;  :arith-assert-upper      83
;  :arith-eq-adapter        50
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1229
;  :mk-clause               107
;  :num-allocs              4497247
;  :num-checks              352
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            196230)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      39
;  :arith-assert-lower      124
;  :arith-assert-upper      83
;  :arith-eq-adapter        50
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               328
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              80
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1229
;  :mk-clause               107
;  :num-allocs              4497247
;  :num-checks              353
;  :propagations            74
;  :quant-instantiations    50
;  :rlimit-count            196278)
(pop) ; 12
(push) ; 12
; [else-branch: 20 | !(0 <= First:(Second:(Second:(Second:($t@31@05))))[i__10@49@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
      i__10@49@05))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 18 | !(i__10@49@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__10@49@05)]
(assert (not
  (and
    (<
      i__10@49@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
    (<= 0 i__10@49@05))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((i__10@49@05 Int)) (!
  (implies
    (and
      (<
        i__10@49@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
      (<= 0 i__10@49@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
          i__10@49@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__10@49@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__10@49@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__10@49@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      41
;  :arith-assert-lower      125
;  :arith-assert-upper      84
;  :arith-eq-adapter        51
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               329
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1237
;  :mk-clause               121
;  :num-allocs              4497247
;  :num-checks              354
;  :propagations            76
;  :quant-instantiations    51
;  :rlimit-count            196724)
(assert (forall ((i__10@49@05 Int)) (!
  (implies
    (and
      (<
        i__10@49@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
      (<= 0 i__10@49@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
          i__10@49@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__10@49@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__10@49@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__10@49@05))
  :qid |prog.l<no position>|)))
(declare-const $k@50@05 $Perm)
(assert ($Perm.isReadVar $k@50@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      127
;  :arith-assert-upper      85
;  :arith-eq-adapter        52
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               330
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1242
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              355
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            197282)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@50@05 $Perm.No) (< $Perm.No $k@50@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      127
;  :arith-assert-upper      85
;  :arith-eq-adapter        52
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1242
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              356
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            197332)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@34@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      127
;  :arith-assert-upper      85
;  :arith-eq-adapter        52
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1242
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              357
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            197343)
(assert (< $k@50@05 $k@34@05))
(assert (<= $Perm.No (- $k@34@05 $k@50@05)))
(assert (<= (- $k@34@05 $k@50@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@34@05 $k@50@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               332
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              358
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            197557)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              359
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            197605)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               334
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              360
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            197653)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              361
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            197701)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               336
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              362
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            197749)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              363
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            197797)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               338
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              364
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            197845)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              365
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            197893)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               340
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              366
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            197941)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              367
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            197989)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               342
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              368
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198037)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              369
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198085)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               344
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              370
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198133)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               345
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              371
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198181)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              372
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198229)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               347
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              373
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198277)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               348
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              374
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198325)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               349
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              375
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198373)
(push) ; 6
(assert (not (=
  diz@4@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               349
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              376
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198384)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               350
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              377
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198432)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              378
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198480)
(push) ; 6
(assert (not (=
  diz@4@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              379
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198491)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               352
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              380
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198539)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      42
;  :arith-assert-lower      129
;  :arith-assert-upper      86
;  :arith-eq-adapter        52
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               353
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1245
;  :mk-clause               123
;  :num-allocs              4497247
;  :num-checks              381
;  :propagations            77
;  :quant-instantiations    51
;  :rlimit-count            198587)
(declare-const $k@51@05 $Perm)
(assert ($Perm.isReadVar $k@51@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      131
;  :arith-assert-upper      87
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               354
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1249
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              382
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            198784)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@51@05 $Perm.No) (< $Perm.No $k@51@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      131
;  :arith-assert-upper      87
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               355
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1249
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              383
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            198834)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@35@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      131
;  :arith-assert-upper      87
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               355
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1249
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              384
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            198845)
(assert (< $k@51@05 $k@35@05))
(assert (<= $Perm.No (- $k@35@05 $k@51@05)))
(assert (<= (- $k@35@05 $k@51@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@35@05 $k@51@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               356
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              385
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199053)
(push) ; 6
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               357
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              386
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199101)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               358
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              387
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199149)
(push) ; 6
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              388
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199197)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               360
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              389
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199245)
(push) ; 6
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               361
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              390
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199293)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              391
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199341)
(push) ; 6
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               363
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              392
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199389)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               364
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              393
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199437)
(push) ; 6
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              394
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199485)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               366
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              395
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199533)
(push) ; 6
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               367
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              396
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199581)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               368
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              397
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199629)
(push) ; 6
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               369
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              398
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199677)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               370
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              399
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199725)
(push) ; 6
(assert (not (< $Perm.No $k@35@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      43
;  :arith-assert-lower      133
;  :arith-assert-upper      88
;  :arith-eq-adapter        53
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               371
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1252
;  :mk-clause               125
;  :num-allocs              4497247
;  :num-checks              400
;  :propagations            78
;  :quant-instantiations    51
;  :rlimit-count            199773)
(declare-const $k@52@05 $Perm)
(assert ($Perm.isReadVar $k@52@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      44
;  :arith-assert-lower      135
;  :arith-assert-upper      89
;  :arith-eq-adapter        54
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               372
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1256
;  :mk-clause               127
;  :num-allocs              4497247
;  :num-checks              401
;  :propagations            79
;  :quant-instantiations    51
;  :rlimit-count            199970)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@52@05 $Perm.No) (< $Perm.No $k@52@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      44
;  :arith-assert-lower      135
;  :arith-assert-upper      89
;  :arith-eq-adapter        54
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1256
;  :mk-clause               127
;  :num-allocs              4497247
;  :num-checks              402
;  :propagations            79
;  :quant-instantiations    51
;  :rlimit-count            200020)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@36@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      44
;  :arith-assert-lower      135
;  :arith-assert-upper      89
;  :arith-eq-adapter        54
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1256
;  :mk-clause               127
;  :num-allocs              4497247
;  :num-checks              403
;  :propagations            79
;  :quant-instantiations    51
;  :rlimit-count            200031)
(assert (< $k@52@05 $k@36@05))
(assert (<= $Perm.No (- $k@36@05 $k@52@05)))
(assert (<= (- $k@36@05 $k@52@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@36@05 $k@52@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      44
;  :arith-assert-lower      137
;  :arith-assert-upper      90
;  :arith-eq-adapter        54
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1259
;  :mk-clause               127
;  :num-allocs              4497247
;  :num-checks              404
;  :propagations            79
;  :quant-instantiations    51
;  :rlimit-count            200245)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      44
;  :arith-assert-lower      137
;  :arith-assert-upper      90
;  :arith-eq-adapter        54
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1259
;  :mk-clause               127
;  :num-allocs              4497247
;  :num-checks              405
;  :propagations            79
;  :quant-instantiations    51
;  :rlimit-count            200293)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      44
;  :arith-assert-lower      137
;  :arith-assert-upper      90
;  :arith-eq-adapter        54
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1259
;  :mk-clause               127
;  :num-allocs              4497247
;  :num-checks              406
;  :propagations            79
;  :quant-instantiations    51
;  :rlimit-count            200341)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      44
;  :arith-assert-lower      137
;  :arith-assert-upper      90
;  :arith-eq-adapter        54
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1259
;  :mk-clause               127
;  :num-allocs              4497247
;  :num-checks              407
;  :propagations            79
;  :quant-instantiations    51
;  :rlimit-count            200389)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      44
;  :arith-assert-lower      137
;  :arith-assert-upper      90
;  :arith-eq-adapter        54
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               378
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1259
;  :mk-clause               127
;  :num-allocs              4497247
;  :num-checks              408
;  :propagations            79
;  :quant-instantiations    51
;  :rlimit-count            200437)
(push) ; 6
(assert (not (< $Perm.No $k@36@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      44
;  :arith-assert-lower      137
;  :arith-assert-upper      90
;  :arith-eq-adapter        54
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               379
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1259
;  :mk-clause               127
;  :num-allocs              4497247
;  :num-checks              409
;  :propagations            79
;  :quant-instantiations    51
;  :rlimit-count            200485)
(declare-const $k@53@05 $Perm)
(assert ($Perm.isReadVar $k@53@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      45
;  :arith-assert-lower      139
;  :arith-assert-upper      91
;  :arith-eq-adapter        55
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1263
;  :mk-clause               129
;  :num-allocs              4497247
;  :num-checks              410
;  :propagations            80
;  :quant-instantiations    51
;  :rlimit-count            200681)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@53@05 $Perm.No) (< $Perm.No $k@53@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      45
;  :arith-assert-lower      139
;  :arith-assert-upper      91
;  :arith-eq-adapter        55
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1263
;  :mk-clause               129
;  :num-allocs              4497247
;  :num-checks              411
;  :propagations            80
;  :quant-instantiations    51
;  :rlimit-count            200731)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@37@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      45
;  :arith-assert-lower      139
;  :arith-assert-upper      91
;  :arith-eq-adapter        55
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1263
;  :mk-clause               129
;  :num-allocs              4497247
;  :num-checks              412
;  :propagations            80
;  :quant-instantiations    51
;  :rlimit-count            200742)
(assert (< $k@53@05 $k@37@05))
(assert (<= $Perm.No (- $k@37@05 $k@53@05)))
(assert (<= (- $k@37@05 $k@53@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@37@05 $k@53@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      45
;  :arith-assert-lower      141
;  :arith-assert-upper      92
;  :arith-eq-adapter        55
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               382
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1266
;  :mk-clause               129
;  :num-allocs              4497247
;  :num-checks              413
;  :propagations            80
;  :quant-instantiations    51
;  :rlimit-count            200962)
(push) ; 6
(assert (not (< $Perm.No $k@37@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      45
;  :arith-assert-lower      141
;  :arith-assert-upper      92
;  :arith-eq-adapter        55
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1266
;  :mk-clause               129
;  :num-allocs              4497247
;  :num-checks              414
;  :propagations            80
;  :quant-instantiations    51
;  :rlimit-count            201010)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      45
;  :arith-assert-lower      141
;  :arith-assert-upper      92
;  :arith-eq-adapter        55
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1266
;  :mk-clause               129
;  :num-allocs              4497247
;  :num-checks              415
;  :propagations            80
;  :quant-instantiations    51
;  :rlimit-count            201058)
(push) ; 6
(assert (not (< $Perm.No $k@37@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      45
;  :arith-assert-lower      141
;  :arith-assert-upper      92
;  :arith-eq-adapter        55
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               385
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1266
;  :mk-clause               129
;  :num-allocs              4497247
;  :num-checks              416
;  :propagations            80
;  :quant-instantiations    51
;  :rlimit-count            201106)
(declare-const $k@54@05 $Perm)
(assert ($Perm.isReadVar $k@54@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      46
;  :arith-assert-lower      143
;  :arith-assert-upper      93
;  :arith-eq-adapter        56
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1270
;  :mk-clause               131
;  :num-allocs              4497247
;  :num-checks              417
;  :propagations            81
;  :quant-instantiations    51
;  :rlimit-count            201303)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      46
;  :arith-assert-lower      143
;  :arith-assert-upper      93
;  :arith-eq-adapter        56
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               387
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1270
;  :mk-clause               131
;  :num-allocs              4497247
;  :num-checks              418
;  :propagations            81
;  :quant-instantiations    51
;  :rlimit-count            201351)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@54@05 $Perm.No) (< $Perm.No $k@54@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      46
;  :arith-assert-lower      143
;  :arith-assert-upper      93
;  :arith-eq-adapter        56
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1270
;  :mk-clause               131
;  :num-allocs              4497247
;  :num-checks              419
;  :propagations            81
;  :quant-instantiations    51
;  :rlimit-count            201401)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@38@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      46
;  :arith-assert-lower      143
;  :arith-assert-upper      93
;  :arith-eq-adapter        56
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1270
;  :mk-clause               131
;  :num-allocs              4497247
;  :num-checks              420
;  :propagations            81
;  :quant-instantiations    51
;  :rlimit-count            201412)
(assert (< $k@54@05 $k@38@05))
(assert (<= $Perm.No (- $k@38@05 $k@54@05)))
(assert (<= (- $k@38@05 $k@54@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@38@05 $k@54@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      46
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-eq-adapter        56
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               389
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1273
;  :mk-clause               131
;  :num-allocs              4497247
;  :num-checks              421
;  :propagations            81
;  :quant-instantiations    51
;  :rlimit-count            201643)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      46
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-eq-adapter        56
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1273
;  :mk-clause               131
;  :num-allocs              4497247
;  :num-checks              422
;  :propagations            81
;  :quant-instantiations    51
;  :rlimit-count            201691)
(push) ; 6
(assert (not (< $Perm.No $k@38@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      46
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-eq-adapter        56
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1273
;  :mk-clause               131
;  :num-allocs              4497247
;  :num-checks              423
;  :propagations            81
;  :quant-instantiations    51
;  :rlimit-count            201739)
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      46
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-eq-adapter        56
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               392
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1273
;  :mk-clause               131
;  :num-allocs              4497247
;  :num-checks              424
;  :propagations            81
;  :quant-instantiations    51
;  :rlimit-count            201787)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 6
(assert (not (< $Perm.No $k@32@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      46
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-eq-adapter        56
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1273
;  :mk-clause               131
;  :num-allocs              4497247
;  :num-checks              425
;  :propagations            81
;  :quant-instantiations    51
;  :rlimit-count            201835)
(push) ; 6
(assert (not (< $Perm.No $k@34@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      46
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-eq-adapter        56
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               394
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              98
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1273
;  :mk-clause               131
;  :num-allocs              4497247
;  :num-checks              426
;  :propagations            81
;  :quant-instantiations    51
;  :rlimit-count            201883)
(pop) ; 5
(push) ; 5
; [else-branch: 16 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@31@05))))))))))))))))))) < __exponent@6@05)]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
    __exponent@6@05)))
(pop) ; 5
(push) ; 5
(assert (not (=
  diz@4@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2476
;  :arith-assert-diseq      46
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-eq-adapter        56
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               394
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 570
;  :datatype-occurs-check   42
;  :datatype-splits         412
;  :decisions               554
;  :del-clause              116
;  :final-checks            26
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1273
;  :mk-clause               131
;  :num-allocs              4497247
;  :num-checks              427
;  :propagations            81
;  :quant-instantiations    51
;  :rlimit-count            201966)
(declare-const $t@55@05 $Ref)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2686
;  :arith-assert-diseq      46
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-eq-adapter        56
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 657
;  :datatype-occurs-check   48
;  :datatype-splits         445
;  :decisions               638
;  :del-clause              117
;  :final-checks            29
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1310
;  :mk-clause               132
;  :num-allocs              4497247
;  :num-checks              428
;  :propagations            83
;  :quant-instantiations    51
;  :rlimit-count            203637)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2896
;  :arith-assert-diseq      46
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-eq-adapter        56
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               396
;  :datatype-accessor-ax    176
;  :datatype-constructor-ax 744
;  :datatype-occurs-check   54
;  :datatype-splits         478
;  :decisions               722
;  :del-clause              118
;  :final-checks            32
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1347
;  :mk-clause               133
;  :num-allocs              4497247
;  :num-checks              429
;  :propagations            85
;  :quant-instantiations    51
;  :rlimit-count            205308)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3106
;  :arith-assert-diseq      46
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-eq-adapter        56
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 831
;  :datatype-occurs-check   60
;  :datatype-splits         511
;  :decisions               806
;  :del-clause              119
;  :final-checks            35
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1384
;  :mk-clause               134
;  :num-allocs              4497247
;  :num-checks              430
;  :propagations            87
;  :quant-instantiations    51
;  :rlimit-count            206979
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3316
;  :arith-assert-diseq      46
;  :arith-assert-lower      145
;  :arith-assert-upper      94
;  :arith-eq-adapter        56
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               398
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 918
;  :datatype-occurs-check   66
;  :datatype-splits         544
;  :decisions               890
;  :del-clause              120
;  :final-checks            38
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1421
;  :mk-clause               135
;  :num-allocs              4497247
;  :num-checks              431
;  :propagations            89
;  :quant-instantiations    51
;  :rlimit-count            208650
;  :time                    0.00)
(declare-const $t@56@05 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@32@05)
    (= $t@55@05 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05))))
  (implies
    (< $Perm.No (- $k@15@05 $k@45@05))
    (=
      $t@55@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))))))))))
(assert (and
  (implies (< $Perm.No (+ $k@32@05 (- $k@15@05 $k@45@05))) (= $t@56@05 $t@55@05))
  (implies
    (< $Perm.No (- $k@9@05 $k@39@05))
    (= $t@56@05 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))))))
(assert (<= $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05))))
(assert (<= (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))
  (not (= diz@4@05 $Ref.null))))
(assert (<= $Perm.No (+ $k@32@05 (- $k@15@05 $k@45@05))))
(assert (<= (+ $k@32@05 (- $k@15@05 $k@45@05)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@32@05 (- $k@15@05 $k@45@05)))
  (not (= diz@4@05 $Ref.null))))
; [eval] !(diz.Rng_i < exponent__7)
; [eval] diz.Rng_i < exponent__7
(push) ; 5
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
  __exponent@6@05)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3499
;  :arith-add-rows          3
;  :arith-assert-diseq      46
;  :arith-assert-lower      148
;  :arith-assert-upper      96
;  :arith-eq-adapter        56
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               398
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 976
;  :datatype-occurs-check   71
;  :datatype-splits         574
;  :decisions               946
;  :del-clause              120
;  :final-checks            41
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1461
;  :mk-clause               135
;  :num-allocs              4497247
;  :num-checks              432
;  :propagations            91
;  :quant-instantiations    52
;  :rlimit-count            210682)
(push) ; 5
(assert (not (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
    __exponent@6@05))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3676
;  :arith-add-rows          3
;  :arith-assert-diseq      46
;  :arith-assert-lower      148
;  :arith-assert-upper      97
;  :arith-eq-adapter        56
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               398
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              120
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1494
;  :mk-clause               135
;  :num-allocs              4497247
;  :num-checks              433
;  :propagations            93
;  :quant-instantiations    53
;  :rlimit-count            212244
;  :time                    0.00)
; [then-branch: 21 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@31@05))))))))))))))))))) < __exponent@6@05) | live]
; [else-branch: 21 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@31@05))))))))))))))))))) < __exponent@6@05 | live]
(push) ; 5
; [then-branch: 21 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@31@05))))))))))))))))))) < __exponent@6@05)]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
    __exponent@6@05)))
; [exec]
; sys__local__result__5 := diz.Rng_result
(declare-const sys__local__result__5@57@05 Int)
(assert (=
  sys__local__result__5@57@05
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))
; [exec]
; // assert
; assert acc(diz.Rng_m, wildcard) && diz.Rng_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.Rng_m, __globals), write) && (true && (true && acc(diz.Rng_m.Main_process_state, write) && |diz.Rng_m.Main_process_state| == 3 && acc(diz.Rng_m.Main_event_state, write) && |diz.Rng_m.Main_event_state| == 6 && (forall i__11: Int :: { diz.Rng_m.Main_process_state[i__11] } 0 <= i__11 && i__11 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__11] == -1 || 0 <= diz.Rng_m.Main_process_state[i__11] && diz.Rng_m.Main_process_state[i__11] < |diz.Rng_m.Main_event_state|)) && acc(diz.Rng_m.Main_rn, wildcard) && diz.Rng_m.Main_rn != null && acc(diz.Rng_m.Main_rn.Rng_clk, write) && acc(diz.Rng_m.Main_rn.Rng_reset, write) && acc(diz.Rng_m.Main_rn.Rng_loadseed_i, write) && acc(diz.Rng_m.Main_rn.Rng_seed_i, write) && acc(diz.Rng_m.Main_rn.Rng_number_o, write) && acc(diz.Rng_m.Main_rn.Rng_LFSR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_CASR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_result, write) && acc(diz.Rng_m.Main_rn.Rng_i, write) && acc(diz.Rng_m.Main_rn.Rng_aux, write) && acc(diz.Rng_m.Main_rn_casr, wildcard) && diz.Rng_m.Main_rn_casr != null && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_var, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_out, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_i, write) && acc(diz.Rng_m.Main_rn_lfsr, wildcard) && diz.Rng_m.Main_rn_lfsr != null && acc(diz.Rng_m.Main_rn_lfsr.LFSR_LFSR_var, write) && acc(diz.Rng_m.Main_rn_lfsr.LFSR_outbit, write) && acc(diz.Rng_m.Main_rn_combinate, wildcard) && diz.Rng_m.Main_rn_combinate != null && acc(diz.Rng_m.Main_rn_combinate.Combinate_i, write) && acc(diz.Rng_m.Main_rn.Rng_m, wildcard) && diz.Rng_m.Main_rn.Rng_m == diz.Rng_m) && diz.Rng_m.Main_rn == diz
(declare-const $k@58@05 $Perm)
(assert ($Perm.isReadVar $k@58@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@58@05 $Perm.No) (< $Perm.No $k@58@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3679
;  :arith-add-rows          3
;  :arith-assert-diseq      47
;  :arith-assert-lower      151
;  :arith-assert-upper      98
;  :arith-eq-adapter        57
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               399
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              120
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1502
;  :mk-clause               137
;  :num-allocs              4497247
;  :num-checks              434
;  :propagations            94
;  :quant-instantiations    55
;  :rlimit-count            212801)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3680
;  :arith-add-rows          5
;  :arith-assert-diseq      47
;  :arith-assert-lower      151
;  :arith-assert-upper      99
;  :arith-conflicts         1
;  :arith-eq-adapter        58
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               400
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1504
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              435
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            212953)
(assert (< $k@58@05 (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05))))
(assert (<=
  $Perm.No
  (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@58@05)))
(assert (<=
  (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@58@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@58@05))
  (not (= diz@4@05 $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3680
;  :arith-add-rows          10
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      101
;  :arith-conflicts         2
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         1
;  :arith-pivots            27
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1508
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              436
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            213313)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= $t@56@05 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3681
;  :arith-add-rows          10
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      101
;  :arith-conflicts         2
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         1
;  :arith-pivots            27
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1509
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              437
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            213361)
(assert (not (= $t@56@05 $Ref.null)))
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          12
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      102
;  :arith-conflicts         3
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         2
;  :arith-pivots            30
;  :binary-propagations     22
;  :conflicts               403
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1511
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              438
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            213570)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          12
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      102
;  :arith-conflicts         3
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         2
;  :arith-pivots            30
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1512
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              439
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            213650)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          14
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      103
;  :arith-conflicts         4
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         3
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1513
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              440
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            213801)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          14
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      103
;  :arith-conflicts         4
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         3
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1514
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              441
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            213881)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          16
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      104
;  :arith-conflicts         5
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         4
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1515
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              442
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            214034)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          16
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      104
;  :arith-conflicts         5
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         4
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1516
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              443
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            214114)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          18
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      105
;  :arith-conflicts         6
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         5
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               409
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1517
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              444
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            214265)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          18
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      105
;  :arith-conflicts         6
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         5
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               410
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1518
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              445
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            214345)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          20
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      106
;  :arith-conflicts         7
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         6
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               411
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1519
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              446
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            214498)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          20
;  :arith-assert-diseq      47
;  :arith-assert-lower      153
;  :arith-assert-upper      106
;  :arith-conflicts         7
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         6
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               412
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1520
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              447
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            214578)
; [eval] (forall i__11: Int :: { diz.Rng_m.Main_process_state[i__11] } 0 <= i__11 && i__11 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__11] == -1 || 0 <= diz.Rng_m.Main_process_state[i__11] && diz.Rng_m.Main_process_state[i__11] < |diz.Rng_m.Main_event_state|)
(declare-const i__11@59@05 Int)
(push) ; 6
; [eval] 0 <= i__11 && i__11 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__11] == -1 || 0 <= diz.Rng_m.Main_process_state[i__11] && diz.Rng_m.Main_process_state[i__11] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i__11 && i__11 < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i__11
(push) ; 7
; [then-branch: 22 | 0 <= i__11@59@05 | live]
; [else-branch: 22 | !(0 <= i__11@59@05) | live]
(push) ; 8
; [then-branch: 22 | 0 <= i__11@59@05]
(assert (<= 0 i__11@59@05))
; [eval] i__11 < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          22
;  :arith-assert-diseq      47
;  :arith-assert-lower      154
;  :arith-assert-upper      107
;  :arith-conflicts         8
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         7
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               413
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1522
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              448
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            214782)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          22
;  :arith-assert-diseq      47
;  :arith-assert-lower      154
;  :arith-assert-upper      107
;  :arith-conflicts         8
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         7
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               414
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1523
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              449
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            214862)
(pop) ; 8
(push) ; 8
; [else-branch: 22 | !(0 <= i__11@59@05)]
(assert (not (<= 0 i__11@59@05)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 23 | i__11@59@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__11@59@05 | live]
; [else-branch: 23 | !(i__11@59@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__11@59@05) | live]
(push) ; 8
; [then-branch: 23 | i__11@59@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__11@59@05]
(assert (and
  (<
    i__11@59@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
  (<= 0 i__11@59@05)))
; [eval] diz.Rng_m.Main_process_state[i__11] == -1 || 0 <= diz.Rng_m.Main_process_state[i__11] && diz.Rng_m.Main_process_state[i__11] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__11] == -1
; [eval] diz.Rng_m.Main_process_state[i__11]
(push) ; 9
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          24
;  :arith-assert-diseq      47
;  :arith-assert-lower      155
;  :arith-assert-upper      109
;  :arith-conflicts         9
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         8
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               415
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1526
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              450
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            215124)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          24
;  :arith-assert-diseq      47
;  :arith-assert-lower      155
;  :arith-assert-upper      109
;  :arith-conflicts         9
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         8
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               416
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1527
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              451
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            215204)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__11@59@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          24
;  :arith-assert-diseq      47
;  :arith-assert-lower      155
;  :arith-assert-upper      109
;  :arith-conflicts         9
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         8
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               416
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1527
;  :mk-clause               139
;  :num-allocs              4497247
;  :num-checks              452
;  :propagations            95
;  :quant-instantiations    55
;  :rlimit-count            215213)
; [eval] -1
(push) ; 9
; [then-branch: 24 | First:(Second:(Second:(Second:($t@31@05))))[i__11@59@05] == -1 | live]
; [else-branch: 24 | First:(Second:(Second:(Second:($t@31@05))))[i__11@59@05] != -1 | live]
(push) ; 10
; [then-branch: 24 | First:(Second:(Second:(Second:($t@31@05))))[i__11@59@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__11@59@05)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 24 | First:(Second:(Second:(Second:($t@31@05))))[i__11@59@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
      i__11@59@05)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i__11] && diz.Rng_m.Main_process_state[i__11] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i__11]
; [eval] diz.Rng_m.Main_process_state[i__11]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          26
;  :arith-assert-diseq      48
;  :arith-assert-lower      158
;  :arith-assert-upper      111
;  :arith-conflicts         10
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         9
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               417
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1534
;  :mk-clause               143
;  :num-allocs              4497247
;  :num-checks              453
;  :propagations            97
;  :quant-instantiations    56
;  :rlimit-count            215587)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          26
;  :arith-assert-diseq      48
;  :arith-assert-lower      158
;  :arith-assert-upper      111
;  :arith-conflicts         10
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         9
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               418
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1535
;  :mk-clause               143
;  :num-allocs              4497247
;  :num-checks              454
;  :propagations            97
;  :quant-instantiations    56
;  :rlimit-count            215667)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__11@59@05 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          26
;  :arith-assert-diseq      48
;  :arith-assert-lower      158
;  :arith-assert-upper      111
;  :arith-conflicts         10
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         9
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               418
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1535
;  :mk-clause               143
;  :num-allocs              4497247
;  :num-checks              455
;  :propagations            97
;  :quant-instantiations    56
;  :rlimit-count            215676)
(push) ; 11
; [then-branch: 25 | 0 <= First:(Second:(Second:(Second:($t@31@05))))[i__11@59@05] | live]
; [else-branch: 25 | !(0 <= First:(Second:(Second:(Second:($t@31@05))))[i__11@59@05]) | live]
(push) ; 12
; [then-branch: 25 | 0 <= First:(Second:(Second:(Second:($t@31@05))))[i__11@59@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__11@59@05)))
; [eval] diz.Rng_m.Main_process_state[i__11] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__11]
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          28
;  :arith-assert-diseq      48
;  :arith-assert-lower      158
;  :arith-assert-upper      112
;  :arith-conflicts         11
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         10
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               419
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1536
;  :mk-clause               143
;  :num-allocs              4497247
;  :num-checks              456
;  :propagations            97
;  :quant-instantiations    56
;  :rlimit-count            215934)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          28
;  :arith-assert-diseq      48
;  :arith-assert-lower      158
;  :arith-assert-upper      112
;  :arith-conflicts         11
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         10
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1537
;  :mk-clause               143
;  :num-allocs              4497247
;  :num-checks              457
;  :propagations            97
;  :quant-instantiations    56
;  :rlimit-count            216014)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__11@59@05 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          28
;  :arith-assert-diseq      48
;  :arith-assert-lower      158
;  :arith-assert-upper      112
;  :arith-conflicts         11
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         10
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1537
;  :mk-clause               143
;  :num-allocs              4497247
;  :num-checks              458
;  :propagations            97
;  :quant-instantiations    56
;  :rlimit-count            216023)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          30
;  :arith-assert-diseq      48
;  :arith-assert-lower      158
;  :arith-assert-upper      113
;  :arith-conflicts         12
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         11
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1538
;  :mk-clause               143
;  :num-allocs              4497247
;  :num-checks              459
;  :propagations            97
;  :quant-instantiations    56
;  :rlimit-count            216174)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          30
;  :arith-assert-diseq      48
;  :arith-assert-lower      158
;  :arith-assert-upper      113
;  :arith-conflicts         12
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         11
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              122
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1539
;  :mk-clause               143
;  :num-allocs              4497247
;  :num-checks              460
;  :propagations            97
;  :quant-instantiations    56
;  :rlimit-count            216254)
(pop) ; 12
(push) ; 12
; [else-branch: 25 | !(0 <= First:(Second:(Second:(Second:($t@31@05))))[i__11@59@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
      i__11@59@05))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 23 | !(i__11@59@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__11@59@05)]
(assert (not
  (and
    (<
      i__11@59@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
    (<= 0 i__11@59@05))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((i__11@59@05 Int)) (!
  (implies
    (and
      (<
        i__11@59@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
      (<= 0 i__11@59@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
          i__11@59@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__11@59@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__11@59@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__11@59@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          30
;  :arith-assert-diseq      50
;  :arith-assert-lower      159
;  :arith-assert-upper      114
;  :arith-conflicts         12
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         11
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1547
;  :mk-clause               157
;  :num-allocs              4497247
;  :num-checks              461
;  :propagations            99
;  :quant-instantiations    57
;  :rlimit-count            216700)
(assert (forall ((i__11@59@05 Int)) (!
  (implies
    (and
      (<
        i__11@59@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
      (<= 0 i__11@59@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
          i__11@59@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__11@59@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__11@59@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__11@59@05))
  :qid |prog.l<no position>|)))
(declare-const $k@60@05 $Perm)
(assert ($Perm.isReadVar $k@60@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          32
;  :arith-assert-diseq      51
;  :arith-assert-lower      161
;  :arith-assert-upper      116
;  :arith-conflicts         13
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               424
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1553
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              462
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            217364)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@60@05 $Perm.No) (< $Perm.No $k@60@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          32
;  :arith-assert-diseq      51
;  :arith-assert-lower      161
;  :arith-assert-upper      116
;  :arith-conflicts         13
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1553
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              463
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            217414)
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          32
;  :arith-assert-diseq      51
;  :arith-assert-lower      161
;  :arith-assert-upper      116
;  :arith-conflicts         13
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1553
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              464
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            217425)
(push) ; 6
(assert (not (not (= (- $k@11@05 $k@41@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          32
;  :arith-assert-diseq      51
;  :arith-assert-lower      161
;  :arith-assert-upper      116
;  :arith-conflicts         13
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               426
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1554
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              465
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            217493)
(assert (< $k@60@05 (- $k@11@05 $k@41@05)))
(assert (<= $Perm.No (- (- $k@11@05 $k@41@05) $k@60@05)))
(assert (<= (- (- $k@11@05 $k@41@05) $k@60@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@11@05 $k@41@05) $k@60@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          36
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      118
;  :arith-conflicts         14
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         13
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1558
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              466
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            217850)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          36
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      118
;  :arith-conflicts         14
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         13
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1558
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              467
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            217861)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          36
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      118
;  :arith-conflicts         14
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         13
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1558
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              468
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            217880)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          38
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      119
;  :arith-conflicts         15
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         14
;  :arith-pivots            61
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1559
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              469
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218033)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          38
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      119
;  :arith-conflicts         15
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         14
;  :arith-pivots            61
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1559
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              470
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218044)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          38
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      119
;  :arith-conflicts         15
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         14
;  :arith-pivots            61
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1559
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              471
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218063)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          38
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      119
;  :arith-conflicts         15
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         14
;  :arith-pivots            61
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1559
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              472
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218074)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          40
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      120
;  :arith-conflicts         16
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         15
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1560
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              473
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218225)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          40
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      120
;  :arith-conflicts         16
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         15
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1560
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              474
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218236)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          40
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      120
;  :arith-conflicts         16
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         15
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1560
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              475
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218255)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          40
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      120
;  :arith-conflicts         16
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         15
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1560
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              476
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218266)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          42
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      121
;  :arith-conflicts         17
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         16
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1561
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              477
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218419)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          42
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      121
;  :arith-conflicts         17
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         16
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1561
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              478
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218430)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          42
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      121
;  :arith-conflicts         17
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         16
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1561
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              479
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218449)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          42
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      121
;  :arith-conflicts         17
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         16
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1561
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              480
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218460)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          44
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      122
;  :arith-conflicts         18
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         17
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1562
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              481
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218611)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          44
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      122
;  :arith-conflicts         18
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         17
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1562
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              482
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218622)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          44
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      122
;  :arith-conflicts         18
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         17
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1562
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              483
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218641)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          44
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      122
;  :arith-conflicts         18
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         17
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1562
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              484
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218652)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          46
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      123
;  :arith-conflicts         19
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         18
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1563
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              485
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218805)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          46
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      123
;  :arith-conflicts         19
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         18
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1563
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              486
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218816)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          46
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      123
;  :arith-conflicts         19
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         18
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1563
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              487
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218835)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          46
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      123
;  :arith-conflicts         19
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         18
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1563
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              488
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218846)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          48
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      124
;  :arith-conflicts         20
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         19
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1564
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              489
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            218997)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          48
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      124
;  :arith-conflicts         20
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         19
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1564
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              490
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219008)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          48
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      124
;  :arith-conflicts         20
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         19
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1564
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              491
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219027)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          48
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      124
;  :arith-conflicts         20
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         19
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1564
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              492
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219038)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          50
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      125
;  :arith-conflicts         21
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         20
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1565
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              493
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219191)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          50
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      125
;  :arith-conflicts         21
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         20
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1565
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              494
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219202)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          50
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      125
;  :arith-conflicts         21
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         20
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1565
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              495
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219221)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          50
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      125
;  :arith-conflicts         21
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         20
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1565
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              496
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219232)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          52
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      126
;  :arith-conflicts         22
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         21
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1566
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              497
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219383)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          52
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      126
;  :arith-conflicts         22
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         21
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1566
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              498
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219394)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          52
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      126
;  :arith-conflicts         22
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         21
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1566
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              499
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219413)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          52
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      126
;  :arith-conflicts         22
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         21
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1566
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              500
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219424)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          54
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      127
;  :arith-conflicts         23
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         22
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1567
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              501
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219577)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          54
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      127
;  :arith-conflicts         23
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         22
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1567
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              502
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219588)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          54
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      127
;  :arith-conflicts         23
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         22
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1567
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              503
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219607)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          54
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      127
;  :arith-conflicts         23
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         22
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1567
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              504
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219618)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          56
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      128
;  :arith-conflicts         24
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         23
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1568
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              505
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219769)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          56
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      128
;  :arith-conflicts         24
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         23
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1568
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              506
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219780)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          56
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      128
;  :arith-conflicts         24
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         23
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1568
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              507
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219799)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          56
;  :arith-assert-diseq      51
;  :arith-assert-lower      163
;  :arith-assert-upper      128
;  :arith-conflicts         24
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         23
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1568
;  :mk-clause               159
;  :num-allocs              4497247
;  :num-checks              508
;  :propagations            100
;  :quant-instantiations    57
;  :rlimit-count            219810)
(declare-const $k@61@05 $Perm)
(assert ($Perm.isReadVar $k@61@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          58
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      130
;  :arith-conflicts         25
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         24
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               438
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1573
;  :mk-clause               161
;  :num-allocs              4497247
;  :num-checks              509
;  :propagations            101
;  :quant-instantiations    57
;  :rlimit-count            220112)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@61@05 $Perm.No) (< $Perm.No $k@61@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          58
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      130
;  :arith-conflicts         25
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         24
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               439
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1573
;  :mk-clause               161
;  :num-allocs              4497247
;  :num-checks              510
;  :propagations            101
;  :quant-instantiations    57
;  :rlimit-count            220162)
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          58
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      130
;  :arith-conflicts         25
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         24
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               439
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1573
;  :mk-clause               161
;  :num-allocs              4497247
;  :num-checks              511
;  :propagations            101
;  :quant-instantiations    57
;  :rlimit-count            220173)
(push) ; 6
(assert (not (not (= (- $k@12@05 $k@42@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          58
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      130
;  :arith-conflicts         25
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         24
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               440
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1574
;  :mk-clause               161
;  :num-allocs              4497247
;  :num-checks              512
;  :propagations            101
;  :quant-instantiations    57
;  :rlimit-count            220241)
(assert (< $k@61@05 (- $k@12@05 $k@42@05)))
(assert (<= $Perm.No (- (- $k@12@05 $k@42@05) $k@61@05)))
(assert (<= (- (- $k@12@05 $k@42@05) $k@61@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@12@05 $k@42@05) $k@61@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          62
;  :arith-assert-diseq      52
;  :arith-assert-lower      167
;  :arith-assert-upper      132
;  :arith-conflicts         26
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         25
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1578
;  :mk-clause               161
;  :num-allocs              4497247
;  :num-checks              513
;  :propagations            101
;  :quant-instantiations    57
;  :rlimit-count            220598)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          62
;  :arith-assert-diseq      52
;  :arith-assert-lower      167
;  :arith-assert-upper      132
;  :arith-conflicts         26
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         25
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1578
;  :mk-clause               161
;  :num-allocs              4497247
;  :num-checks              514
;  :propagations            101
;  :quant-instantiations    57
;  :rlimit-count            220609)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          62
;  :arith-assert-diseq      52
;  :arith-assert-lower      167
;  :arith-assert-upper      132
;  :arith-conflicts         26
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         25
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1578
;  :mk-clause               161
;  :num-allocs              4497247
;  :num-checks              515
;  :propagations            101
;  :quant-instantiations    57
;  :rlimit-count            220628)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          64
;  :arith-assert-diseq      52
;  :arith-assert-lower      167
;  :arith-assert-upper      133
;  :arith-conflicts         27
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         26
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1579
;  :mk-clause               161
;  :num-allocs              4497247
;  :num-checks              516
;  :propagations            101
;  :quant-instantiations    57
;  :rlimit-count            220781)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          64
;  :arith-assert-diseq      52
;  :arith-assert-lower      167
;  :arith-assert-upper      133
;  :arith-conflicts         27
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         26
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1579
;  :mk-clause               161
;  :num-allocs              4497247
;  :num-checks              517
;  :propagations            101
;  :quant-instantiations    57
;  :rlimit-count            220792)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3682
;  :arith-add-rows          64
;  :arith-assert-diseq      52
;  :arith-assert-lower      167
;  :arith-assert-upper      133
;  :arith-conflicts         27
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         26
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 1034
;  :datatype-occurs-check   76
;  :datatype-splits         604
;  :decisions               1002
;  :del-clause              140
;  :final-checks            44
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1579
;  :mk-clause               161
;  :num-allocs              4497247
;  :num-checks              518
;  :propagations            101
;  :quant-instantiations    57
;  :rlimit-count            220811)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3910
;  :arith-add-rows          64
;  :arith-assert-diseq      52
;  :arith-assert-lower      167
;  :arith-assert-upper      133
;  :arith-conflicts         27
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         26
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 1121
;  :datatype-occurs-check   84
;  :datatype-splits         663
;  :decisions               1085
;  :del-clause              141
;  :final-checks            48
;  :max-generation          1
;  :max-memory              4.46
;  :memory                  4.46
;  :mk-bool-var             1643
;  :mk-clause               162
;  :num-allocs              4497247
;  :num-checks              519
;  :propagations            103
;  :quant-instantiations    57
;  :rlimit-count            222937
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 6
(assert (not (=
  diz@4@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          64
;  :arith-assert-diseq      52
;  :arith-assert-lower      167
;  :arith-assert-upper      133
;  :arith-conflicts         27
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         26
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1705
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              522
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            225476)
(declare-const $t@62@05 $Ref)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          64
;  :arith-assert-diseq      52
;  :arith-assert-lower      167
;  :arith-assert-upper      133
;  :arith-conflicts         27
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         26
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               444
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1705
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              523
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            225548)
(declare-const $t@63@05 $Ref)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          64
;  :arith-assert-diseq      52
;  :arith-assert-lower      167
;  :arith-assert-upper      133
;  :arith-conflicts         27
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         26
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               445
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1705
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              524
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            225620)
(declare-const $t@64@05 $Ref)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          64
;  :arith-assert-diseq      52
;  :arith-assert-lower      167
;  :arith-assert-upper      133
;  :arith-conflicts         27
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         26
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               446
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1706
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              525
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            225700)
(declare-const $t@65@05 $Ref)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          64
;  :arith-assert-diseq      52
;  :arith-assert-lower      167
;  :arith-assert-upper      133
;  :arith-conflicts         27
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         26
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               447
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1707
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              526
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            225780)
(declare-const $t@66@05 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@58@05))
    (= $t@62@05 $t@56@05))
  (implies
    (< $Perm.No $k@38@05)
    (=
      $t@62@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- $k@11@05 $k@41@05) $k@60@05))
    (=
      $t@63@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))
  (implies
    (< $Perm.No $k@34@05)
    (=
      $t@63@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))
(assert (and
  (implies
    (< $Perm.No (- (- $k@12@05 $k@42@05) $k@61@05))
    (=
      $t@64@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@35@05)
    (=
      $t@64@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@37@05)
    (=
      $t@65@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@14@05 $k@44@05))
    (=
      $t@65@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@36@05)
    (=
      $t@66@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@13@05 $k@43@05))
    (=
      $t@66@05
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (+
    (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@58@05)
    $k@38@05)))
(assert (<=
  (+
    (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@58@05)
    $k@38@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@58@05)
      $k@38@05))
  (not (= diz@4@05 $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@11@05 $k@41@05) $k@60@05) $k@34@05)))
(assert (<= (+ (- (- $k@11@05 $k@41@05) $k@60@05) $k@34@05) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@11@05 $k@41@05) $k@60@05) $k@34@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@12@05 $k@42@05) $k@61@05) $k@35@05)))
(assert (<= (+ (- (- $k@12@05 $k@42@05) $k@61@05) $k@35@05) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@12@05 $k@42@05) $k@61@05) $k@35@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
(assert (<= $Perm.No (+ $k@37@05 (- $k@14@05 $k@44@05))))
(assert (<= (+ $k@37@05 (- $k@14@05 $k@44@05)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@37@05 (- $k@14@05 $k@44@05)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
(assert (<= $Perm.No (+ $k@36@05 (- $k@13@05 $k@43@05))))
(assert (<= (+ $k@36@05 (- $k@13@05 $k@43@05)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@36@05 (- $k@13@05 $k@43@05)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          70
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      138
;  :arith-conflicts         27
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         26
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               448
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1727
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              527
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            228042)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          72
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      139
;  :arith-conflicts         28
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         27
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1728
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              528
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            228194)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          72
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      139
;  :arith-conflicts         28
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         27
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1728
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              529
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            228205)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          72
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      139
;  :arith-conflicts         28
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         27
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1728
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              530
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            228224)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          72
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      139
;  :arith-conflicts         28
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         27
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1729
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              531
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            228504)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      140
;  :arith-conflicts         29
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         28
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               451
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1730
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              532
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            228658)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      140
;  :arith-conflicts         29
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         28
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               451
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1730
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              533
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            228669)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      140
;  :arith-conflicts         29
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         28
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               451
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1730
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              534
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            228688)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          74
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      140
;  :arith-conflicts         29
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         28
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1731
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              535
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            228968)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          76
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      141
;  :arith-conflicts         30
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         29
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               453
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1732
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              536
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            229120)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          76
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      141
;  :arith-conflicts         30
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         29
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               453
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1732
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              537
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            229131)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          76
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      141
;  :arith-conflicts         30
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         29
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               453
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1732
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              538
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            229150)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          76
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      141
;  :arith-conflicts         30
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         29
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1733
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              539
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            229430)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          78
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      142
;  :arith-conflicts         31
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         30
;  :arith-pivots            104
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1734
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              540
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            229584)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          78
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      142
;  :arith-conflicts         31
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         30
;  :arith-pivots            104
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1734
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              541
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            229595)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          78
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      142
;  :arith-conflicts         31
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         30
;  :arith-pivots            104
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1734
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              542
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            229614)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          78
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      142
;  :arith-conflicts         31
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         30
;  :arith-pivots            104
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1735
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              543
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            229894)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          80
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      143
;  :arith-conflicts         32
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         31
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               457
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1736
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              544
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            230046)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          80
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      143
;  :arith-conflicts         32
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         31
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               457
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1736
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              545
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            230057)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          80
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      143
;  :arith-conflicts         32
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         31
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               457
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1736
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              546
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            230076)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          80
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      143
;  :arith-conflicts         32
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         31
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               458
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1737
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              547
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            230356)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          82
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      144
;  :arith-conflicts         33
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         32
;  :arith-pivots            109
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1738
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              548
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            230510)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          82
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      144
;  :arith-conflicts         33
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         32
;  :arith-pivots            109
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1738
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              549
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            230521)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          82
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      144
;  :arith-conflicts         33
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         32
;  :arith-pivots            109
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1738
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              550
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            230540)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          82
;  :arith-assert-diseq      52
;  :arith-assert-lower      172
;  :arith-assert-upper      144
;  :arith-conflicts         33
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         32
;  :arith-pivots            109
;  :binary-propagations     22
;  :conflicts               460
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1739
;  :mk-clause               162
;  :num-allocs              4695436
;  :num-checks              551
;  :propagations            107
;  :quant-instantiations    57
;  :rlimit-count            230820)
(declare-const $k@67@05 $Perm)
(assert ($Perm.isReadVar $k@67@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          84
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      146
;  :arith-conflicts         34
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         33
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               461
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1744
;  :mk-clause               164
;  :num-allocs              4695436
;  :num-checks              552
;  :propagations            108
;  :quant-instantiations    57
;  :rlimit-count            231121)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@67@05 $Perm.No) (< $Perm.No $k@67@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          84
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      146
;  :arith-conflicts         34
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         33
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               462
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1744
;  :mk-clause               164
;  :num-allocs              4695436
;  :num-checks              553
;  :propagations            108
;  :quant-instantiations    57
;  :rlimit-count            231171)
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4280
;  :arith-add-rows          84
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      146
;  :arith-conflicts         34
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         33
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               463
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              147
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1745
;  :mk-clause               164
;  :num-allocs              4695436
;  :num-checks              554
;  :propagations            108
;  :quant-instantiations    57
;  :rlimit-count            231256)
(push) ; 6
(assert (not (not (= (+ $k@36@05 (- $k@13@05 $k@43@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          84
;  :arith-assert-diseq      53
;  :arith-assert-lower      174
;  :arith-assert-upper      147
;  :arith-conflicts         35
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         33
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1747
;  :mk-clause               166
;  :num-allocs              4695436
;  :num-checks              555
;  :propagations            109
;  :quant-instantiations    57
;  :rlimit-count            231340)
(assert (< $k@67@05 (+ $k@36@05 (- $k@13@05 $k@43@05))))
(assert (<= $Perm.No (- (+ $k@36@05 (- $k@13@05 $k@43@05)) $k@67@05)))
(assert (<= (- (+ $k@36@05 (- $k@13@05 $k@43@05)) $k@67@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@36@05 (- $k@13@05 $k@43@05)) $k@67@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          88
;  :arith-assert-diseq      53
;  :arith-assert-lower      176
;  :arith-assert-upper      149
;  :arith-conflicts         36
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         34
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1751
;  :mk-clause               166
;  :num-allocs              4695436
;  :num-checks              556
;  :propagations            109
;  :quant-instantiations    57
;  :rlimit-count            231682)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          88
;  :arith-assert-diseq      53
;  :arith-assert-lower      176
;  :arith-assert-upper      149
;  :arith-conflicts         36
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         34
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1751
;  :mk-clause               166
;  :num-allocs              4695436
;  :num-checks              557
;  :propagations            109
;  :quant-instantiations    57
;  :rlimit-count            231693)
(push) ; 6
(assert (not (< $Perm.No (- $k@13@05 $k@43@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          88
;  :arith-assert-diseq      53
;  :arith-assert-lower      176
;  :arith-assert-upper      149
;  :arith-conflicts         36
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         34
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1751
;  :mk-clause               166
;  :num-allocs              4695436
;  :num-checks              558
;  :propagations            109
;  :quant-instantiations    57
;  :rlimit-count            231712)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          90
;  :arith-assert-diseq      53
;  :arith-assert-lower      176
;  :arith-assert-upper      150
;  :arith-conflicts         37
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         35
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1752
;  :mk-clause               166
;  :num-allocs              4695436
;  :num-checks              559
;  :propagations            109
;  :quant-instantiations    57
;  :rlimit-count            231864)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          90
;  :arith-assert-diseq      53
;  :arith-assert-lower      176
;  :arith-assert-upper      150
;  :arith-conflicts         37
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         35
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1752
;  :mk-clause               166
;  :num-allocs              4695436
;  :num-checks              560
;  :propagations            109
;  :quant-instantiations    57
;  :rlimit-count            231875)
(push) ; 6
(assert (not (< $Perm.No (- $k@13@05 $k@43@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          90
;  :arith-assert-diseq      53
;  :arith-assert-lower      176
;  :arith-assert-upper      150
;  :arith-conflicts         37
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         35
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1752
;  :mk-clause               166
;  :num-allocs              4695436
;  :num-checks              561
;  :propagations            109
;  :quant-instantiations    57
;  :rlimit-count            231894)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          90
;  :arith-assert-diseq      53
;  :arith-assert-lower      176
;  :arith-assert-upper      150
;  :arith-conflicts         37
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         35
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               467
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1753
;  :mk-clause               166
;  :num-allocs              4695436
;  :num-checks              562
;  :propagations            109
;  :quant-instantiations    57
;  :rlimit-count            232264)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          92
;  :arith-assert-diseq      53
;  :arith-assert-lower      176
;  :arith-assert-upper      151
;  :arith-conflicts         38
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         36
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1754
;  :mk-clause               166
;  :num-allocs              4695436
;  :num-checks              563
;  :propagations            109
;  :quant-instantiations    57
;  :rlimit-count            232418)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          92
;  :arith-assert-diseq      53
;  :arith-assert-lower      176
;  :arith-assert-upper      151
;  :arith-conflicts         38
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         36
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1754
;  :mk-clause               166
;  :num-allocs              4695436
;  :num-checks              564
;  :propagations            109
;  :quant-instantiations    57
;  :rlimit-count            232429)
(push) ; 6
(assert (not (< $Perm.No (- $k@13@05 $k@43@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          92
;  :arith-assert-diseq      53
;  :arith-assert-lower      176
;  :arith-assert-upper      151
;  :arith-conflicts         38
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         36
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1754
;  :mk-clause               166
;  :num-allocs              4695436
;  :num-checks              565
;  :propagations            109
;  :quant-instantiations    57
;  :rlimit-count            232448)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          92
;  :arith-assert-diseq      53
;  :arith-assert-lower      176
;  :arith-assert-upper      151
;  :arith-conflicts         38
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         36
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               469
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1755
;  :mk-clause               166
;  :num-allocs              4695436
;  :num-checks              566
;  :propagations            109
;  :quant-instantiations    57
;  :rlimit-count            232818)
(declare-const $k@68@05 $Perm)
(assert ($Perm.isReadVar $k@68@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          94
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      153
;  :arith-conflicts         39
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         37
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               470
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1760
;  :mk-clause               168
;  :num-allocs              4695436
;  :num-checks              567
;  :propagations            110
;  :quant-instantiations    57
;  :rlimit-count            233119)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@68@05 $Perm.No) (< $Perm.No $k@68@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          94
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      153
;  :arith-conflicts         39
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         37
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               471
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1760
;  :mk-clause               168
;  :num-allocs              4695436
;  :num-checks              568
;  :propagations            110
;  :quant-instantiations    57
;  :rlimit-count            233169)
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          94
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      153
;  :arith-conflicts         39
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         37
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              149
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1761
;  :mk-clause               168
;  :num-allocs              4695436
;  :num-checks              569
;  :propagations            110
;  :quant-instantiations    57
;  :rlimit-count            233254)
(push) ; 6
(assert (not (not (= (+ $k@37@05 (- $k@14@05 $k@44@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4282
;  :arith-add-rows          95
;  :arith-assert-diseq      54
;  :arith-assert-lower      178
;  :arith-assert-upper      154
;  :arith-conflicts         40
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         37
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               473
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              151
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1763
;  :mk-clause               170
;  :num-allocs              4695436
;  :num-checks              570
;  :propagations            111
;  :quant-instantiations    57
;  :rlimit-count            233363)
(assert (< $k@68@05 (+ $k@37@05 (- $k@14@05 $k@44@05))))
(assert (<= $Perm.No (- (+ $k@37@05 (- $k@14@05 $k@44@05)) $k@68@05)))
(assert (<= (- (+ $k@37@05 (- $k@14@05 $k@44@05)) $k@68@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@37@05 (- $k@14@05 $k@44@05)) $k@68@05))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4282
;  :arith-add-rows          98
;  :arith-assert-diseq      54
;  :arith-assert-lower      180
;  :arith-assert-upper      156
;  :arith-conflicts         41
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         38
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               474
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              151
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1767
;  :mk-clause               170
;  :num-allocs              4695436
;  :num-checks              571
;  :propagations            111
;  :quant-instantiations    57
;  :rlimit-count            233704)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4282
;  :arith-add-rows          98
;  :arith-assert-diseq      54
;  :arith-assert-lower      180
;  :arith-assert-upper      156
;  :arith-conflicts         41
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         38
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               474
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              151
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1767
;  :mk-clause               170
;  :num-allocs              4695436
;  :num-checks              572
;  :propagations            111
;  :quant-instantiations    57
;  :rlimit-count            233715)
(push) ; 6
(assert (not (< $Perm.No (- $k@14@05 $k@44@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4282
;  :arith-add-rows          98
;  :arith-assert-diseq      54
;  :arith-assert-lower      180
;  :arith-assert-upper      156
;  :arith-conflicts         41
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         38
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               474
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              151
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1767
;  :mk-clause               170
;  :num-allocs              4695436
;  :num-checks              573
;  :propagations            111
;  :quant-instantiations    57
;  :rlimit-count            233734)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4282
;  :arith-add-rows          100
;  :arith-assert-diseq      54
;  :arith-assert-lower      180
;  :arith-assert-upper      157
;  :arith-conflicts         42
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         39
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               475
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              151
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1768
;  :mk-clause               170
;  :num-allocs              4695436
;  :num-checks              574
;  :propagations            111
;  :quant-instantiations    57
;  :rlimit-count            233886)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4282
;  :arith-add-rows          100
;  :arith-assert-diseq      54
;  :arith-assert-lower      180
;  :arith-assert-upper      157
;  :arith-conflicts         42
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         39
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               475
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              151
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1768
;  :mk-clause               170
;  :num-allocs              4695436
;  :num-checks              575
;  :propagations            111
;  :quant-instantiations    57
;  :rlimit-count            233897)
(push) ; 6
(assert (not (< $Perm.No (- $k@14@05 $k@44@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4282
;  :arith-add-rows          100
;  :arith-assert-diseq      54
;  :arith-assert-lower      180
;  :arith-assert-upper      157
;  :arith-conflicts         42
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         39
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               475
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              151
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1768
;  :mk-clause               170
;  :num-allocs              4695436
;  :num-checks              576
;  :propagations            111
;  :quant-instantiations    57
;  :rlimit-count            233916)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4282
;  :arith-add-rows          100
;  :arith-assert-diseq      54
;  :arith-assert-lower      180
;  :arith-assert-upper      157
;  :arith-conflicts         42
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         39
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               476
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              151
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1769
;  :mk-clause               170
;  :num-allocs              4695436
;  :num-checks              577
;  :propagations            111
;  :quant-instantiations    57
;  :rlimit-count            234326)
(declare-const $k@69@05 $Perm)
(assert ($Perm.isReadVar $k@69@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4282
;  :arith-add-rows          102
;  :arith-assert-diseq      55
;  :arith-assert-lower      182
;  :arith-assert-upper      159
;  :arith-conflicts         43
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         40
;  :arith-pivots            132
;  :binary-propagations     22
;  :conflicts               477
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              151
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1774
;  :mk-clause               172
;  :num-allocs              4695436
;  :num-checks              578
;  :propagations            112
;  :quant-instantiations    57
;  :rlimit-count            234628)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4282
;  :arith-add-rows          102
;  :arith-assert-diseq      55
;  :arith-assert-lower      182
;  :arith-assert-upper      159
;  :arith-conflicts         43
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         40
;  :arith-pivots            132
;  :binary-propagations     22
;  :conflicts               477
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              151
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1774
;  :mk-clause               172
;  :num-allocs              4695436
;  :num-checks              579
;  :propagations            112
;  :quant-instantiations    57
;  :rlimit-count            234639)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4282
;  :arith-add-rows          102
;  :arith-assert-diseq      55
;  :arith-assert-lower      182
;  :arith-assert-upper      159
;  :arith-conflicts         43
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         40
;  :arith-pivots            132
;  :binary-propagations     22
;  :conflicts               477
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              151
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1774
;  :mk-clause               172
;  :num-allocs              4695436
;  :num-checks              580
;  :propagations            112
;  :quant-instantiations    57
;  :rlimit-count            234658)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@69@05 $Perm.No) (< $Perm.No $k@69@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4282
;  :arith-add-rows          102
;  :arith-assert-diseq      55
;  :arith-assert-lower      182
;  :arith-assert-upper      159
;  :arith-conflicts         43
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         40
;  :arith-pivots            132
;  :binary-propagations     22
;  :conflicts               478
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              151
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1774
;  :mk-clause               172
;  :num-allocs              4695436
;  :num-checks              581
;  :propagations            112
;  :quant-instantiations    57
;  :rlimit-count            234708)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  diz@4@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4282
;  :arith-add-rows          102
;  :arith-assert-diseq      55
;  :arith-assert-lower      182
;  :arith-assert-upper      159
;  :arith-conflicts         43
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         40
;  :arith-pivots            132
;  :binary-propagations     22
;  :conflicts               478
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              151
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1774
;  :mk-clause               172
;  :num-allocs              4695436
;  :num-checks              582
;  :propagations            112
;  :quant-instantiations    57
;  :rlimit-count            234719)
(push) ; 6
(assert (not (not
  (=
    (+
      (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@58@05)
      $k@38@05)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4283
;  :arith-add-rows          107
;  :arith-assert-diseq      55
;  :arith-assert-lower      182
;  :arith-assert-upper      160
;  :arith-conflicts         44
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         40
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               479
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              153
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1776
;  :mk-clause               174
;  :num-allocs              4695436
;  :num-checks              583
;  :propagations            113
;  :quant-instantiations    57
;  :rlimit-count            234965)
(assert (<
  $k@69@05
  (+
    (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@58@05)
    $k@38@05)))
(assert (<=
  $Perm.No
  (-
    (+
      (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@58@05)
      $k@38@05)
    $k@69@05)))
(assert (<=
  (-
    (+
      (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@58@05)
      $k@38@05)
    $k@69@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@58@05)
        $k@38@05)
      $k@69@05))
  (not (= diz@4@05 $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4283
;  :arith-add-rows          114
;  :arith-assert-diseq      55
;  :arith-assert-lower      184
;  :arith-assert-upper      162
;  :arith-conflicts         45
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         41
;  :arith-pivots            139
;  :binary-propagations     22
;  :conflicts               480
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              153
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1780
;  :mk-clause               174
;  :num-allocs              4695436
;  :num-checks              584
;  :propagations            113
;  :quant-instantiations    57
;  :rlimit-count            235402)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4283
;  :arith-add-rows          114
;  :arith-assert-diseq      55
;  :arith-assert-lower      184
;  :arith-assert-upper      162
;  :arith-conflicts         45
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         41
;  :arith-pivots            139
;  :binary-propagations     22
;  :conflicts               480
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              153
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1780
;  :mk-clause               174
;  :num-allocs              4695436
;  :num-checks              585
;  :propagations            113
;  :quant-instantiations    57
;  :rlimit-count            235413)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4283
;  :arith-add-rows          114
;  :arith-assert-diseq      55
;  :arith-assert-lower      184
;  :arith-assert-upper      162
;  :arith-conflicts         45
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         41
;  :arith-pivots            139
;  :binary-propagations     22
;  :conflicts               480
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              153
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1780
;  :mk-clause               174
;  :num-allocs              4695436
;  :num-checks              586
;  :propagations            113
;  :quant-instantiations    57
;  :rlimit-count            235432)
(push) ; 6
(assert (not (=
  diz@4@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4283
;  :arith-add-rows          114
;  :arith-assert-diseq      55
;  :arith-assert-lower      184
;  :arith-assert-upper      162
;  :arith-conflicts         45
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         41
;  :arith-pivots            139
;  :binary-propagations     22
;  :conflicts               480
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              153
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1780
;  :mk-clause               174
;  :num-allocs              4695436
;  :num-checks              587
;  :propagations            113
;  :quant-instantiations    57
;  :rlimit-count            235443)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4283
;  :arith-add-rows          116
;  :arith-assert-diseq      55
;  :arith-assert-lower      184
;  :arith-assert-upper      163
;  :arith-conflicts         46
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         42
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               481
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              153
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1781
;  :mk-clause               174
;  :num-allocs              4695436
;  :num-checks              588
;  :propagations            113
;  :quant-instantiations    57
;  :rlimit-count            235595)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4283
;  :arith-add-rows          118
;  :arith-assert-diseq      55
;  :arith-assert-lower      184
;  :arith-assert-upper      164
;  :arith-conflicts         47
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         43
;  :arith-pivots            144
;  :binary-propagations     22
;  :conflicts               482
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              153
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1782
;  :mk-clause               174
;  :num-allocs              4695436
;  :num-checks              589
;  :propagations            113
;  :quant-instantiations    57
;  :rlimit-count            235749)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4283
;  :arith-add-rows          120
;  :arith-assert-diseq      55
;  :arith-assert-lower      184
;  :arith-assert-upper      165
;  :arith-conflicts         48
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         44
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              153
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1783
;  :mk-clause               174
;  :num-allocs              4695436
;  :num-checks              590
;  :propagations            113
;  :quant-instantiations    57
;  :rlimit-count            235901)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4283
;  :arith-add-rows          120
;  :arith-assert-diseq      55
;  :arith-assert-lower      184
;  :arith-assert-upper      165
;  :arith-conflicts         48
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         44
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              153
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1783
;  :mk-clause               174
;  :num-allocs              4695436
;  :num-checks              591
;  :propagations            113
;  :quant-instantiations    57
;  :rlimit-count            235912)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4283
;  :arith-add-rows          120
;  :arith-assert-diseq      55
;  :arith-assert-lower      184
;  :arith-assert-upper      165
;  :arith-conflicts         48
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         44
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              153
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1783
;  :mk-clause               174
;  :num-allocs              4695436
;  :num-checks              592
;  :propagations            113
;  :quant-instantiations    57
;  :rlimit-count            235931)
; [exec]
; label __return_exp2_
; [exec]
; sys__result := sys__local__result__5
; [exec]
; // assert
; assert acc(diz.Rng_m, wildcard) && diz.Rng_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.Rng_m, __globals), write) && acc(diz.Rng_m.Main_process_state, write) && |diz.Rng_m.Main_process_state| == 3 && acc(diz.Rng_m.Main_event_state, write) && |diz.Rng_m.Main_event_state| == 6 && (forall i__12: Int :: { diz.Rng_m.Main_process_state[i__12] } 0 <= i__12 && i__12 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__12] == -1 || 0 <= diz.Rng_m.Main_process_state[i__12] && diz.Rng_m.Main_process_state[i__12] < |diz.Rng_m.Main_event_state|) && acc(diz.Rng_m.Main_rn, wildcard) && diz.Rng_m.Main_rn != null && acc(diz.Rng_m.Main_rn.Rng_clk, write) && acc(diz.Rng_m.Main_rn.Rng_reset, write) && acc(diz.Rng_m.Main_rn.Rng_loadseed_i, write) && acc(diz.Rng_m.Main_rn.Rng_seed_i, write) && acc(diz.Rng_m.Main_rn.Rng_number_o, write) && acc(diz.Rng_m.Main_rn.Rng_LFSR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_CASR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_result, write) && acc(diz.Rng_m.Main_rn.Rng_i, write) && acc(diz.Rng_m.Main_rn.Rng_aux, write) && acc(diz.Rng_m.Main_rn_casr, wildcard) && diz.Rng_m.Main_rn_casr != null && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_var, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_out, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_i, write) && acc(diz.Rng_m.Main_rn_lfsr, wildcard) && diz.Rng_m.Main_rn_lfsr != null && acc(diz.Rng_m.Main_rn_lfsr.LFSR_LFSR_var, write) && acc(diz.Rng_m.Main_rn_lfsr.LFSR_outbit, write) && acc(diz.Rng_m.Main_rn_combinate, wildcard) && diz.Rng_m.Main_rn_combinate != null && acc(diz.Rng_m.Main_rn_combinate.Combinate_i, write) && acc(diz.Rng_m.Main_rn.Rng_m, wildcard) && diz.Rng_m.Main_rn.Rng_m == diz.Rng_m && diz.Rng_m.Main_rn == diz
(declare-const $k@70@05 $Perm)
(assert ($Perm.isReadVar $k@70@05 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@70@05 $Perm.No) (< $Perm.No $k@70@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4283
;  :arith-add-rows          120
;  :arith-assert-diseq      56
;  :arith-assert-lower      186
;  :arith-assert-upper      166
;  :arith-conflicts         48
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         44
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               484
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              153
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1787
;  :mk-clause               176
;  :num-allocs              4695436
;  :num-checks              593
;  :propagations            114
;  :quant-instantiations    57
;  :rlimit-count            236129)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          122
;  :arith-assert-diseq      56
;  :arith-assert-lower      186
;  :arith-assert-upper      167
;  :arith-conflicts         49
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         44
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               485
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1789
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              594
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            236283)
(assert (< $k@70@05 (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05))))
(assert (<=
  $Perm.No
  (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@70@05)))
(assert (<=
  (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@70@05)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)) $k@70@05))
  (not (= diz@4@05 $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          127
;  :arith-assert-diseq      56
;  :arith-assert-lower      188
;  :arith-assert-upper      169
;  :arith-conflicts         50
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         45
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               486
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1793
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              595
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            236645)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          129
;  :arith-assert-diseq      56
;  :arith-assert-lower      188
;  :arith-assert-upper      170
;  :arith-conflicts         51
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         46
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               487
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1794
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              596
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            236800)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          129
;  :arith-assert-diseq      56
;  :arith-assert-lower      188
;  :arith-assert-upper      170
;  :arith-conflicts         51
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         46
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               488
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1795
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              597
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            236885)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          131
;  :arith-assert-diseq      56
;  :arith-assert-lower      188
;  :arith-assert-upper      171
;  :arith-conflicts         52
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         47
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               489
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1796
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              598
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            237038)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          131
;  :arith-assert-diseq      56
;  :arith-assert-lower      188
;  :arith-assert-upper      171
;  :arith-conflicts         52
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         47
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               490
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1797
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              599
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            237123)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          133
;  :arith-assert-diseq      56
;  :arith-assert-lower      188
;  :arith-assert-upper      172
;  :arith-conflicts         53
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         48
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               491
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1798
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              600
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            237278)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          133
;  :arith-assert-diseq      56
;  :arith-assert-lower      188
;  :arith-assert-upper      172
;  :arith-conflicts         53
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         48
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               492
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1799
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              601
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            237363)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          135
;  :arith-assert-diseq      56
;  :arith-assert-lower      188
;  :arith-assert-upper      173
;  :arith-conflicts         54
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         49
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               493
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1800
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              602
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            237516)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          135
;  :arith-assert-diseq      56
;  :arith-assert-lower      188
;  :arith-assert-upper      173
;  :arith-conflicts         54
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         49
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               494
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1801
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              603
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            237601)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          137
;  :arith-assert-diseq      56
;  :arith-assert-lower      188
;  :arith-assert-upper      174
;  :arith-conflicts         55
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         50
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               495
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1802
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              604
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            237756)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          137
;  :arith-assert-diseq      56
;  :arith-assert-lower      188
;  :arith-assert-upper      174
;  :arith-conflicts         55
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         50
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               496
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1803
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              605
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            237841)
; [eval] (forall i__12: Int :: { diz.Rng_m.Main_process_state[i__12] } 0 <= i__12 && i__12 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__12] == -1 || 0 <= diz.Rng_m.Main_process_state[i__12] && diz.Rng_m.Main_process_state[i__12] < |diz.Rng_m.Main_event_state|)
(declare-const i__12@71@05 Int)
(push) ; 6
; [eval] 0 <= i__12 && i__12 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__12] == -1 || 0 <= diz.Rng_m.Main_process_state[i__12] && diz.Rng_m.Main_process_state[i__12] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i__12 && i__12 < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i__12
(push) ; 7
; [then-branch: 26 | 0 <= i__12@71@05 | live]
; [else-branch: 26 | !(0 <= i__12@71@05) | live]
(push) ; 8
; [then-branch: 26 | 0 <= i__12@71@05]
(assert (<= 0 i__12@71@05))
; [eval] i__12 < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          139
;  :arith-assert-diseq      56
;  :arith-assert-lower      189
;  :arith-assert-upper      175
;  :arith-conflicts         56
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         51
;  :arith-pivots            166
;  :binary-propagations     22
;  :conflicts               497
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1805
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              606
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            238046)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          139
;  :arith-assert-diseq      56
;  :arith-assert-lower      189
;  :arith-assert-upper      175
;  :arith-conflicts         56
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         51
;  :arith-pivots            166
;  :binary-propagations     22
;  :conflicts               498
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1806
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              607
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            238131)
(pop) ; 8
(push) ; 8
; [else-branch: 26 | !(0 <= i__12@71@05)]
(assert (not (<= 0 i__12@71@05)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 27 | i__12@71@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__12@71@05 | live]
; [else-branch: 27 | !(i__12@71@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__12@71@05) | live]
(push) ; 8
; [then-branch: 27 | i__12@71@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__12@71@05]
(assert (and
  (<
    i__12@71@05
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
  (<= 0 i__12@71@05)))
; [eval] diz.Rng_m.Main_process_state[i__12] == -1 || 0 <= diz.Rng_m.Main_process_state[i__12] && diz.Rng_m.Main_process_state[i__12] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__12] == -1
; [eval] diz.Rng_m.Main_process_state[i__12]
(push) ; 9
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          141
;  :arith-assert-diseq      56
;  :arith-assert-lower      190
;  :arith-assert-upper      177
;  :arith-conflicts         57
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         52
;  :arith-pivots            169
;  :binary-propagations     22
;  :conflicts               499
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1809
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              608
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            238395)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          141
;  :arith-assert-diseq      56
;  :arith-assert-lower      190
;  :arith-assert-upper      177
;  :arith-conflicts         57
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         52
;  :arith-pivots            169
;  :binary-propagations     22
;  :conflicts               500
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1810
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              609
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            238480)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__12@71@05 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          141
;  :arith-assert-diseq      56
;  :arith-assert-lower      190
;  :arith-assert-upper      177
;  :arith-conflicts         57
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         52
;  :arith-pivots            169
;  :binary-propagations     22
;  :conflicts               500
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1810
;  :mk-clause               178
;  :num-allocs              4695436
;  :num-checks              610
;  :propagations            115
;  :quant-instantiations    57
;  :rlimit-count            238489)
; [eval] -1
(push) ; 9
; [then-branch: 28 | First:(Second:(Second:(Second:($t@31@05))))[i__12@71@05] == -1 | live]
; [else-branch: 28 | First:(Second:(Second:(Second:($t@31@05))))[i__12@71@05] != -1 | live]
(push) ; 10
; [then-branch: 28 | First:(Second:(Second:(Second:($t@31@05))))[i__12@71@05] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__12@71@05)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 28 | First:(Second:(Second:(Second:($t@31@05))))[i__12@71@05] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
      i__12@71@05)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i__12] && diz.Rng_m.Main_process_state[i__12] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i__12]
; [eval] diz.Rng_m.Main_process_state[i__12]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          143
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      179
;  :arith-conflicts         58
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         53
;  :arith-pivots            171
;  :binary-propagations     22
;  :conflicts               501
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1817
;  :mk-clause               182
;  :num-allocs              4695436
;  :num-checks              611
;  :propagations            117
;  :quant-instantiations    59
;  :rlimit-count            238890)
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          143
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      179
;  :arith-conflicts         58
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         53
;  :arith-pivots            171
;  :binary-propagations     22
;  :conflicts               502
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1818
;  :mk-clause               182
;  :num-allocs              4695436
;  :num-checks              612
;  :propagations            117
;  :quant-instantiations    59
;  :rlimit-count            238975)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__12@71@05 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          143
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      179
;  :arith-conflicts         58
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         53
;  :arith-pivots            171
;  :binary-propagations     22
;  :conflicts               502
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1818
;  :mk-clause               182
;  :num-allocs              4695436
;  :num-checks              613
;  :propagations            117
;  :quant-instantiations    59
;  :rlimit-count            238984)
(push) ; 11
; [then-branch: 29 | 0 <= First:(Second:(Second:(Second:($t@31@05))))[i__12@71@05] | live]
; [else-branch: 29 | !(0 <= First:(Second:(Second:(Second:($t@31@05))))[i__12@71@05]) | live]
(push) ; 12
; [then-branch: 29 | 0 <= First:(Second:(Second:(Second:($t@31@05))))[i__12@71@05]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__12@71@05)))
; [eval] diz.Rng_m.Main_process_state[i__12] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__12]
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          145
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      180
;  :arith-conflicts         59
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         54
;  :arith-pivots            174
;  :binary-propagations     22
;  :conflicts               503
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1819
;  :mk-clause               182
;  :num-allocs              4695436
;  :num-checks              614
;  :propagations            117
;  :quant-instantiations    59
;  :rlimit-count            239244)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          145
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      180
;  :arith-conflicts         59
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         54
;  :arith-pivots            174
;  :binary-propagations     22
;  :conflicts               504
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1820
;  :mk-clause               182
;  :num-allocs              4695436
;  :num-checks              615
;  :propagations            117
;  :quant-instantiations    59
;  :rlimit-count            239329)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__12@71@05 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          145
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      180
;  :arith-conflicts         59
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         54
;  :arith-pivots            174
;  :binary-propagations     22
;  :conflicts               504
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1820
;  :mk-clause               182
;  :num-allocs              4695436
;  :num-checks              616
;  :propagations            117
;  :quant-instantiations    59
;  :rlimit-count            239338)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          147
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      181
;  :arith-conflicts         60
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         55
;  :arith-pivots            176
;  :binary-propagations     22
;  :conflicts               505
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1821
;  :mk-clause               182
;  :num-allocs              4695436
;  :num-checks              617
;  :propagations            117
;  :quant-instantiations    59
;  :rlimit-count            239491)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@31@05)) $t@56@05)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          147
;  :arith-assert-diseq      57
;  :arith-assert-lower      193
;  :arith-assert-upper      181
;  :arith-conflicts         60
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         55
;  :arith-pivots            176
;  :binary-propagations     22
;  :conflicts               506
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              155
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1822
;  :mk-clause               182
;  :num-allocs              4695436
;  :num-checks              618
;  :propagations            117
;  :quant-instantiations    59
;  :rlimit-count            239576)
(pop) ; 12
(push) ; 12
; [else-branch: 29 | !(0 <= First:(Second:(Second:(Second:($t@31@05))))[i__12@71@05])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
      i__12@71@05))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 27 | !(i__12@71@05 < |First:(Second:(Second:(Second:($t@31@05))))| && 0 <= i__12@71@05)]
(assert (not
  (and
    (<
      i__12@71@05
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
    (<= 0 i__12@71@05))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((i__12@71@05 Int)) (!
  (implies
    (and
      (<
        i__12@71@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
      (<= 0 i__12@71@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
          i__12@71@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__12@71@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__12@71@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__12@71@05))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          147
;  :arith-assert-diseq      59
;  :arith-assert-lower      194
;  :arith-assert-upper      182
;  :arith-conflicts         60
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         55
;  :arith-pivots            176
;  :binary-propagations     22
;  :conflicts               507
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1830
;  :mk-clause               196
;  :num-allocs              4695436
;  :num-checks              619
;  :propagations            119
;  :quant-instantiations    61
;  :rlimit-count            240047)
(assert (forall ((i__12@71@05 Int)) (!
  (implies
    (and
      (<
        i__12@71@05
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))
      (<= 0 i__12@71@05))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
          i__12@71@05)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__12@71@05)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
            i__12@71@05)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))
    i__12@71@05))
  :qid |prog.l<no position>|)))
(declare-const $k@72@05 $Perm)
(assert ($Perm.isReadVar $k@72@05 $Perm.Write))
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          149
;  :arith-assert-diseq      60
;  :arith-assert-lower      196
;  :arith-assert-upper      184
;  :arith-conflicts         61
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         56
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               508
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1836
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              620
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            240713)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@72@05 $Perm.No) (< $Perm.No $k@72@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          149
;  :arith-assert-diseq      60
;  :arith-assert-lower      196
;  :arith-assert-upper      184
;  :arith-conflicts         61
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         56
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               509
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1836
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              621
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            240763)
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          149
;  :arith-assert-diseq      60
;  :arith-assert-lower      196
;  :arith-assert-upper      184
;  :arith-conflicts         61
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         56
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               509
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1836
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              622
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            240774)
(push) ; 6
(assert (not (not (= (- $k@11@05 $k@41@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          149
;  :arith-assert-diseq      60
;  :arith-assert-lower      196
;  :arith-assert-upper      184
;  :arith-conflicts         61
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         56
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               510
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1837
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              623
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            240842)
(assert (< $k@72@05 (- $k@11@05 $k@41@05)))
(assert (<= $Perm.No (- (- $k@11@05 $k@41@05) $k@72@05)))
(assert (<= (- (- $k@11@05 $k@41@05) $k@72@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@11@05 $k@41@05) $k@72@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          152
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      186
;  :arith-conflicts         62
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         57
;  :arith-pivots            181
;  :binary-propagations     22
;  :conflicts               511
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1841
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              624
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241176)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          152
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      186
;  :arith-conflicts         62
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         57
;  :arith-pivots            181
;  :binary-propagations     22
;  :conflicts               511
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1841
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              625
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241187)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          152
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      186
;  :arith-conflicts         62
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         57
;  :arith-pivots            181
;  :binary-propagations     22
;  :conflicts               511
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1841
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              626
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241206)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          154
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      187
;  :arith-conflicts         63
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         58
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               512
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1842
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              627
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241361)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          154
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      187
;  :arith-conflicts         63
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         58
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               512
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1842
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              628
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241372)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          154
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      187
;  :arith-conflicts         63
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         58
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               512
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1842
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              629
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241391)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          154
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      187
;  :arith-conflicts         63
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         58
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               512
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1842
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              630
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241402)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          156
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      188
;  :arith-conflicts         64
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         59
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1843
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              631
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241555)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          156
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      188
;  :arith-conflicts         64
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         59
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1843
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              632
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241566)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          156
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      188
;  :arith-conflicts         64
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         59
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1843
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              633
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241585)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          156
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      188
;  :arith-conflicts         64
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         59
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1843
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              634
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241596)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          158
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      189
;  :arith-conflicts         65
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         60
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               514
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1844
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              635
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241751)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          158
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      189
;  :arith-conflicts         65
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         60
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               514
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1844
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              636
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241762)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          158
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      189
;  :arith-conflicts         65
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         60
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               514
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1844
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              637
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241781)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          158
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      189
;  :arith-conflicts         65
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         60
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               514
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1844
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              638
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241792)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          160
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      190
;  :arith-conflicts         66
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         61
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               515
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1845
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              639
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241945)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          160
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      190
;  :arith-conflicts         66
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         61
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               515
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1845
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              640
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241956)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          160
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      190
;  :arith-conflicts         66
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         61
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               515
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1845
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              641
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241975)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          160
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      190
;  :arith-conflicts         66
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         61
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               515
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1845
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              642
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            241986)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          162
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      191
;  :arith-conflicts         67
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         62
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               516
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1846
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              643
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242141)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          162
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      191
;  :arith-conflicts         67
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         62
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               516
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1846
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              644
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242152)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          162
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      191
;  :arith-conflicts         67
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         62
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               516
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1846
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              645
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242171)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          162
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      191
;  :arith-conflicts         67
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         62
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               516
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1846
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              646
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242182)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          164
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      192
;  :arith-conflicts         68
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         63
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               517
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1847
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              647
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242335)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          164
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      192
;  :arith-conflicts         68
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         63
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               517
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1847
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              648
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242346)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          164
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      192
;  :arith-conflicts         68
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         63
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               517
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1847
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              649
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242365)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          164
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      192
;  :arith-conflicts         68
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         63
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               517
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1847
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              650
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242376)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          166
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      193
;  :arith-conflicts         69
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         64
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               518
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1848
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              651
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242531)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          166
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      193
;  :arith-conflicts         69
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         64
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               518
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1848
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              652
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242542)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          166
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      193
;  :arith-conflicts         69
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         64
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               518
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1848
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              653
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242561)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          166
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      193
;  :arith-conflicts         69
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         64
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               518
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1848
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              654
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242572)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          168
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      194
;  :arith-conflicts         70
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         65
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               519
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1849
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              655
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242725)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          168
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      194
;  :arith-conflicts         70
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         65
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               519
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1849
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              656
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242736)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          168
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      194
;  :arith-conflicts         70
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         65
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               519
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1849
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              657
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242755)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          168
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      194
;  :arith-conflicts         70
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         65
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               519
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1849
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              658
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242766)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          170
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      195
;  :arith-conflicts         71
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         66
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1850
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              659
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242921)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          170
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      195
;  :arith-conflicts         71
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         66
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1850
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              660
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242932)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          170
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      195
;  :arith-conflicts         71
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         66
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1850
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              661
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242951)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          170
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      195
;  :arith-conflicts         71
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         66
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1850
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              662
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            242962)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          172
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      196
;  :arith-conflicts         72
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         67
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1851
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              663
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            243115)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          172
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      196
;  :arith-conflicts         72
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         67
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1851
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              664
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            243126)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          172
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      196
;  :arith-conflicts         72
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         67
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1851
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              665
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            243145)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          172
;  :arith-assert-diseq      60
;  :arith-assert-lower      198
;  :arith-assert-upper      196
;  :arith-conflicts         72
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         67
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1851
;  :mk-clause               198
;  :num-allocs              4695436
;  :num-checks              666
;  :propagations            120
;  :quant-instantiations    61
;  :rlimit-count            243156)
(declare-const $k@73@05 $Perm)
(assert ($Perm.isReadVar $k@73@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          174
;  :arith-assert-diseq      61
;  :arith-assert-lower      200
;  :arith-assert-upper      198
;  :arith-conflicts         73
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         68
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               522
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1856
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              667
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            243459)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@73@05 $Perm.No) (< $Perm.No $k@73@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          174
;  :arith-assert-diseq      61
;  :arith-assert-lower      200
;  :arith-assert-upper      198
;  :arith-conflicts         73
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         68
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               523
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1856
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              668
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            243509)
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          174
;  :arith-assert-diseq      61
;  :arith-assert-lower      200
;  :arith-assert-upper      198
;  :arith-conflicts         73
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         68
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               523
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1856
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              669
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            243520)
(push) ; 6
(assert (not (not (= (- $k@12@05 $k@42@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          174
;  :arith-assert-diseq      61
;  :arith-assert-lower      200
;  :arith-assert-upper      198
;  :arith-conflicts         73
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         68
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               524
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1857
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              670
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            243588)
(assert (< $k@73@05 (- $k@12@05 $k@42@05)))
(assert (<= $Perm.No (- (- $k@12@05 $k@42@05) $k@73@05)))
(assert (<= (- (- $k@12@05 $k@42@05) $k@73@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@12@05 $k@42@05) $k@73@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          177
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      200
;  :arith-conflicts         74
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         69
;  :arith-pivots            212
;  :binary-propagations     22
;  :conflicts               525
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1861
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              671
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            243929)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          177
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      200
;  :arith-conflicts         74
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         69
;  :arith-pivots            212
;  :binary-propagations     22
;  :conflicts               525
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1861
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              672
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            243940)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          177
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      200
;  :arith-conflicts         74
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         69
;  :arith-pivots            212
;  :binary-propagations     22
;  :conflicts               525
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1861
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              673
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            243959)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          179
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      201
;  :arith-conflicts         75
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         70
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               526
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1862
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              674
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            244114)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          179
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      201
;  :arith-conflicts         75
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         70
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               526
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1862
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              675
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            244125)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          179
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      201
;  :arith-conflicts         75
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         70
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               526
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1862
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              676
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            244144)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          179
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      201
;  :arith-conflicts         75
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         70
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               527
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1863
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              677
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            244424)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          181
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      202
;  :arith-conflicts         76
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         71
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               528
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1864
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              678
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            244577)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          181
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      202
;  :arith-conflicts         76
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         71
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               528
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1864
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              679
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            244588)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          181
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      202
;  :arith-conflicts         76
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         71
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               528
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1864
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              680
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            244607)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          181
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      202
;  :arith-conflicts         76
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         71
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               529
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1865
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              681
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            244887)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          183
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      203
;  :arith-conflicts         77
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         72
;  :arith-pivots            220
;  :binary-propagations     22
;  :conflicts               530
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1866
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              682
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            245042)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          183
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      203
;  :arith-conflicts         77
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         72
;  :arith-pivots            220
;  :binary-propagations     22
;  :conflicts               530
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1866
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              683
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            245053)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          183
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      203
;  :arith-conflicts         77
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         72
;  :arith-pivots            220
;  :binary-propagations     22
;  :conflicts               530
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1866
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              684
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            245072)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          183
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      203
;  :arith-conflicts         77
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         72
;  :arith-pivots            220
;  :binary-propagations     22
;  :conflicts               531
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1867
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              685
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            245352)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          185
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      204
;  :arith-conflicts         78
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         73
;  :arith-pivots            222
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1868
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              686
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            245505)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          185
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      204
;  :arith-conflicts         78
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         73
;  :arith-pivots            222
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1868
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              687
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            245516)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          185
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      204
;  :arith-conflicts         78
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         73
;  :arith-pivots            222
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1868
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              688
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            245535)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          185
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      204
;  :arith-conflicts         78
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         73
;  :arith-pivots            222
;  :binary-propagations     22
;  :conflicts               533
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1869
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              689
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            245815)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          187
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      205
;  :arith-conflicts         79
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         74
;  :arith-pivots            225
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1870
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              690
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            245970)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          187
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      205
;  :arith-conflicts         79
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         74
;  :arith-pivots            225
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1870
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              691
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            245981)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          187
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      205
;  :arith-conflicts         79
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         74
;  :arith-pivots            225
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1870
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              692
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            246000)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          187
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      205
;  :arith-conflicts         79
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         74
;  :arith-pivots            225
;  :binary-propagations     22
;  :conflicts               535
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1871
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              693
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            246280)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          189
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      206
;  :arith-conflicts         80
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         75
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1872
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              694
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            246433)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          189
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      206
;  :arith-conflicts         80
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         75
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1872
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              695
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            246444)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          189
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      206
;  :arith-conflicts         80
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         75
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1872
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              696
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            246463)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          189
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      206
;  :arith-conflicts         80
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         75
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               537
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1873
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              697
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            246743)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          191
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      207
;  :arith-conflicts         81
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         76
;  :arith-pivots            230
;  :binary-propagations     22
;  :conflicts               538
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1874
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              698
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            246898)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          191
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      207
;  :arith-conflicts         81
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         76
;  :arith-pivots            230
;  :binary-propagations     22
;  :conflicts               538
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1874
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              699
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            246909)
(push) ; 6
(assert (not (< $Perm.No (- $k@12@05 $k@42@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          191
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      207
;  :arith-conflicts         81
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         76
;  :arith-pivots            230
;  :binary-propagations     22
;  :conflicts               538
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1874
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              700
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            246928)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          191
;  :arith-assert-diseq      61
;  :arith-assert-lower      202
;  :arith-assert-upper      207
;  :arith-conflicts         81
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         76
;  :arith-pivots            230
;  :binary-propagations     22
;  :conflicts               539
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1875
;  :mk-clause               200
;  :num-allocs              4695436
;  :num-checks              701
;  :propagations            121
;  :quant-instantiations    61
;  :rlimit-count            247208)
(declare-const $k@74@05 $Perm)
(assert ($Perm.isReadVar $k@74@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          193
;  :arith-assert-diseq      62
;  :arith-assert-lower      204
;  :arith-assert-upper      209
;  :arith-conflicts         82
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         77
;  :arith-pivots            232
;  :binary-propagations     22
;  :conflicts               540
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1880
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              702
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            247510)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@74@05 $Perm.No) (< $Perm.No $k@74@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          193
;  :arith-assert-diseq      62
;  :arith-assert-lower      204
;  :arith-assert-upper      209
;  :arith-conflicts         82
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         77
;  :arith-pivots            232
;  :binary-propagations     22
;  :conflicts               541
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1880
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              703
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            247560)
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          193
;  :arith-assert-diseq      62
;  :arith-assert-lower      204
;  :arith-assert-upper      209
;  :arith-conflicts         82
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         77
;  :arith-pivots            232
;  :binary-propagations     22
;  :conflicts               541
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1880
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              704
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            247571)
(push) ; 6
(assert (not (not (= (- $k@13@05 $k@43@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          193
;  :arith-assert-diseq      62
;  :arith-assert-lower      204
;  :arith-assert-upper      209
;  :arith-conflicts         82
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         77
;  :arith-pivots            232
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1881
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              705
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            247639)
(assert (< $k@74@05 (- $k@13@05 $k@43@05)))
(assert (<= $Perm.No (- (- $k@13@05 $k@43@05) $k@74@05)))
(assert (<= (- (- $k@13@05 $k@43@05) $k@74@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@13@05 $k@43@05) $k@74@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          198
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      211
;  :arith-conflicts         83
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         78
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1885
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              706
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            248011)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          198
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      211
;  :arith-conflicts         83
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         78
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1885
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              707
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            248022)
(push) ; 6
(assert (not (< $Perm.No (- $k@13@05 $k@43@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          198
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      211
;  :arith-conflicts         83
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         78
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1885
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              708
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            248041)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          200
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      212
;  :arith-conflicts         84
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         79
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1886
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              709
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            248194)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          200
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      212
;  :arith-conflicts         84
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         79
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1886
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              710
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            248205)
(push) ; 6
(assert (not (< $Perm.No (- $k@13@05 $k@43@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          200
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      212
;  :arith-conflicts         84
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         79
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1886
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              711
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            248224)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          200
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      212
;  :arith-conflicts         84
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         79
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               545
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1887
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              712
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            248594)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          202
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      213
;  :arith-conflicts         85
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         80
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               546
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1888
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              713
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            248749)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          202
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      213
;  :arith-conflicts         85
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         80
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               546
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1888
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              714
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            248760)
(push) ; 6
(assert (not (< $Perm.No (- $k@13@05 $k@43@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          202
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      213
;  :arith-conflicts         85
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         80
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               546
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1888
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              715
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            248779)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          202
;  :arith-assert-diseq      62
;  :arith-assert-lower      206
;  :arith-assert-upper      213
;  :arith-conflicts         85
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         80
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               547
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1889
;  :mk-clause               202
;  :num-allocs              4695436
;  :num-checks              716
;  :propagations            122
;  :quant-instantiations    61
;  :rlimit-count            249149)
(declare-const $k@75@05 $Perm)
(assert ($Perm.isReadVar $k@75@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          204
;  :arith-assert-diseq      63
;  :arith-assert-lower      208
;  :arith-assert-upper      215
;  :arith-conflicts         86
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         81
;  :arith-pivots            243
;  :binary-propagations     22
;  :conflicts               548
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1894
;  :mk-clause               204
;  :num-allocs              4695436
;  :num-checks              717
;  :propagations            123
;  :quant-instantiations    61
;  :rlimit-count            249451)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@75@05 $Perm.No) (< $Perm.No $k@75@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          204
;  :arith-assert-diseq      63
;  :arith-assert-lower      208
;  :arith-assert-upper      215
;  :arith-conflicts         86
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         81
;  :arith-pivots            243
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1894
;  :mk-clause               204
;  :num-allocs              4695436
;  :num-checks              718
;  :propagations            123
;  :quant-instantiations    61
;  :rlimit-count            249501)
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          204
;  :arith-assert-diseq      63
;  :arith-assert-lower      208
;  :arith-assert-upper      215
;  :arith-conflicts         86
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         81
;  :arith-pivots            243
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1894
;  :mk-clause               204
;  :num-allocs              4695436
;  :num-checks              719
;  :propagations            123
;  :quant-instantiations    61
;  :rlimit-count            249512)
(push) ; 6
(assert (not (not (= (- $k@14@05 $k@44@05) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          204
;  :arith-assert-diseq      63
;  :arith-assert-lower      208
;  :arith-assert-upper      215
;  :arith-conflicts         86
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         81
;  :arith-pivots            243
;  :binary-propagations     22
;  :conflicts               550
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1895
;  :mk-clause               204
;  :num-allocs              4695436
;  :num-checks              720
;  :propagations            123
;  :quant-instantiations    61
;  :rlimit-count            249580)
(assert (< $k@75@05 (- $k@14@05 $k@44@05)))
(assert (<= $Perm.No (- (- $k@14@05 $k@44@05) $k@75@05)))
(assert (<= (- (- $k@14@05 $k@44@05) $k@75@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@14@05 $k@44@05) $k@75@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05)))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          207
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      217
;  :arith-conflicts         87
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         82
;  :arith-pivots            246
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1899
;  :mk-clause               204
;  :num-allocs              4695436
;  :num-checks              721
;  :propagations            123
;  :quant-instantiations    61
;  :rlimit-count            249916)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          207
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      217
;  :arith-conflicts         87
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         82
;  :arith-pivots            246
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1899
;  :mk-clause               204
;  :num-allocs              4695436
;  :num-checks              722
;  :propagations            123
;  :quant-instantiations    61
;  :rlimit-count            249927)
(push) ; 6
(assert (not (< $Perm.No (- $k@14@05 $k@44@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          207
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      217
;  :arith-conflicts         87
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         82
;  :arith-pivots            246
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1899
;  :mk-clause               204
;  :num-allocs              4695436
;  :num-checks              723
;  :propagations            123
;  :quant-instantiations    61
;  :rlimit-count            249946)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          209
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      218
;  :arith-conflicts         88
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         83
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               552
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1900
;  :mk-clause               204
;  :num-allocs              4695436
;  :num-checks              724
;  :propagations            123
;  :quant-instantiations    61
;  :rlimit-count            250099)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          209
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      218
;  :arith-conflicts         88
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         83
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               552
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1900
;  :mk-clause               204
;  :num-allocs              4695436
;  :num-checks              725
;  :propagations            123
;  :quant-instantiations    61
;  :rlimit-count            250110)
(push) ; 6
(assert (not (< $Perm.No (- $k@14@05 $k@44@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          209
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      218
;  :arith-conflicts         88
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         83
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               552
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1900
;  :mk-clause               204
;  :num-allocs              4695436
;  :num-checks              726
;  :propagations            123
;  :quant-instantiations    61
;  :rlimit-count            250129)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05)))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05)))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          209
;  :arith-assert-diseq      63
;  :arith-assert-lower      210
;  :arith-assert-upper      218
;  :arith-conflicts         88
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         83
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               553
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1901
;  :mk-clause               204
;  :num-allocs              4695436
;  :num-checks              727
;  :propagations            123
;  :quant-instantiations    61
;  :rlimit-count            250539)
(declare-const $k@76@05 $Perm)
(assert ($Perm.isReadVar $k@76@05 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          211
;  :arith-assert-diseq      64
;  :arith-assert-lower      212
;  :arith-assert-upper      220
;  :arith-conflicts         89
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         84
;  :arith-pivots            251
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1906
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              728
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            250842)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          211
;  :arith-assert-diseq      64
;  :arith-assert-lower      212
;  :arith-assert-upper      220
;  :arith-conflicts         89
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         84
;  :arith-pivots            251
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1906
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              729
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            250853)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          211
;  :arith-assert-diseq      64
;  :arith-assert-lower      212
;  :arith-assert-upper      220
;  :arith-conflicts         89
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         84
;  :arith-pivots            251
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1906
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              730
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            250872)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@76@05 $Perm.No) (< $Perm.No $k@76@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          211
;  :arith-assert-diseq      64
;  :arith-assert-lower      212
;  :arith-assert-upper      220
;  :arith-conflicts         89
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         84
;  :arith-pivots            251
;  :binary-propagations     22
;  :conflicts               555
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1906
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              731
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            250922)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          211
;  :arith-assert-diseq      64
;  :arith-assert-lower      212
;  :arith-assert-upper      220
;  :arith-conflicts         89
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         84
;  :arith-pivots            251
;  :binary-propagations     22
;  :conflicts               555
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1906
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              732
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            250933)
(push) ; 6
(assert (not (not (= $k@38@05 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          211
;  :arith-assert-diseq      64
;  :arith-assert-lower      212
;  :arith-assert-upper      220
;  :arith-conflicts         89
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         84
;  :arith-pivots            251
;  :binary-propagations     22
;  :conflicts               555
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1906
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              733
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            250944)
(assert (< $k@76@05 $k@38@05))
(assert (<= $Perm.No (- $k@38@05 $k@76@05)))
(assert (<= (- $k@38@05 $k@76@05) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@38@05 $k@76@05))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          216
;  :arith-assert-diseq      64
;  :arith-assert-lower      214
;  :arith-assert-upper      222
;  :arith-conflicts         90
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         85
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               556
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1910
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              734
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            251332)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          216
;  :arith-assert-diseq      64
;  :arith-assert-lower      214
;  :arith-assert-upper      222
;  :arith-conflicts         90
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         85
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               556
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1910
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              735
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            251343)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          216
;  :arith-assert-diseq      64
;  :arith-assert-lower      214
;  :arith-assert-upper      222
;  :arith-conflicts         90
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         85
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               556
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1910
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              736
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            251362)
(push) ; 6
(assert (not (=
  diz@4@05
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@8@05))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          216
;  :arith-assert-diseq      64
;  :arith-assert-lower      214
;  :arith-assert-upper      222
;  :arith-conflicts         90
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         85
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               556
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1910
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              737
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            251373)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          218
;  :arith-assert-diseq      64
;  :arith-assert-lower      214
;  :arith-assert-upper      223
;  :arith-conflicts         91
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         86
;  :arith-pivots            258
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1911
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              738
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            251527
;  :time                    0.00)
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          220
;  :arith-assert-diseq      64
;  :arith-assert-lower      214
;  :arith-assert-upper      224
;  :arith-conflicts         92
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         87
;  :arith-pivots            260
;  :binary-propagations     22
;  :conflicts               558
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1912
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              739
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            251679)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 6
(assert (not (< $Perm.No (+ (+ $k@32@05 (- $k@15@05 $k@45@05)) (- $k@9@05 $k@39@05)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          222
;  :arith-assert-diseq      64
;  :arith-assert-lower      214
;  :arith-assert-upper      225
;  :arith-conflicts         93
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         88
;  :arith-pivots            263
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1913
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              740
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            251833)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@8@05))) $t@56@05)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          222
;  :arith-assert-diseq      64
;  :arith-assert-lower      214
;  :arith-assert-upper      225
;  :arith-conflicts         93
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         88
;  :arith-pivots            263
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1913
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              741
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            251844)
(push) ; 6
(assert (not (< $Perm.No (- $k@11@05 $k@41@05))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          222
;  :arith-assert-diseq      64
;  :arith-assert-lower      214
;  :arith-assert-upper      225
;  :arith-conflicts         93
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         88
;  :arith-pivots            263
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 1237
;  :datatype-occurs-check   94
;  :datatype-splits         723
;  :decisions               1197
;  :del-clause              173
;  :final-checks            54
;  :max-generation          1
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1913
;  :mk-clause               206
;  :num-allocs              4695436
;  :num-checks              742
;  :propagations            124
;  :quant-instantiations    61
;  :rlimit-count            251863)
; [exec]
; inhale false
(pop) ; 5
(push) ; 5
; [else-branch: 21 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@31@05))))))))))))))))))) < __exponent@6@05]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@05))))))))))))))))))))
  __exponent@6@05))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
