(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-16 14:26:43
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
(declare-const class_Rng<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_CASR<TYPE> TYPE)
(declare-const class_LFSR<TYPE> TYPE)
(declare-const class_Combinate<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Rng_m: Ref]
(declare-fun $FVF.domain_Rng_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Rng_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Rng_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Rng_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Rng_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Rng_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [CASR_m: Ref]
(declare-fun $FVF.domain_CASR_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_CASR_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_CASR_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_CASR_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_CASR_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_CASR_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [LFSR_m: Ref]
(declare-fun $FVF.domain_LFSR_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_LFSR_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_LFSR_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_LFSR_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_LFSR_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_LFSR_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Combinate_m: Ref]
(declare-fun $FVF.domain_Combinate_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Combinate_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Combinate_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Combinate_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Combinate_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Combinate_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun CASR_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun CASR_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun LFSR_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun LFSR_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Combinate_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Combinate_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Rng<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_CASR<TYPE> class_LFSR<TYPE> class_Combinate<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Rng<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_CASR<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_LFSR<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Combinate<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Rng_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Rng_m vs) ($FVF.domain_Rng_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Rng_m vs))
            (= ($FVF.lookup_Rng_m vs x) ($FVF.lookup_Rng_m ws x)))
          :pattern (($FVF.lookup_Rng_m vs x) ($FVF.lookup_Rng_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Rng_m pm r))
    :pattern ($FVF.perm_Rng_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Rng_m f r) true)
    :pattern ($FVF.loc_Rng_m f r))))
; /field_value_functions_axioms.smt2 [CASR_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_CASR_m vs) ($FVF.domain_CASR_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_CASR_m vs))
            (= ($FVF.lookup_CASR_m vs x) ($FVF.lookup_CASR_m ws x)))
          :pattern (($FVF.lookup_CASR_m vs x) ($FVF.lookup_CASR_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_CASR_m pm r))
    :pattern ($FVF.perm_CASR_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_CASR_m f r) true)
    :pattern ($FVF.loc_CASR_m f r))))
; /field_value_functions_axioms.smt2 [LFSR_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_LFSR_m vs) ($FVF.domain_LFSR_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_LFSR_m vs))
            (= ($FVF.lookup_LFSR_m vs x) ($FVF.lookup_LFSR_m ws x)))
          :pattern (($FVF.lookup_LFSR_m vs x) ($FVF.lookup_LFSR_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_LFSR_m pm r))
    :pattern ($FVF.perm_LFSR_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_LFSR_m f r) true)
    :pattern ($FVF.loc_LFSR_m f r))))
; /field_value_functions_axioms.smt2 [Combinate_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Combinate_m vs) ($FVF.domain_Combinate_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Combinate_m vs))
            (= ($FVF.lookup_Combinate_m vs x) ($FVF.lookup_Combinate_m ws x)))
          :pattern (($FVF.lookup_Combinate_m vs x) ($FVF.lookup_Combinate_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Combinate_m pm r))
    :pattern ($FVF.perm_Combinate_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Combinate_m f r) true)
    :pattern ($FVF.loc_Combinate_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 6))
    (and
      (and
        (and
          (and
            (and
              (and
                (or
                  (< (Seq_index vals@8@00 0) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 0)))
                (or
                  (< (Seq_index vals@8@00 1) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 1))))
              (or
                (< (Seq_index vals@8@00 2) (- 0 1))
                (<= result@9@00 (Seq_index vals@8@00 2))))
            (or
              (< (Seq_index vals@8@00 3) (- 0 1))
              (<= result@9@00 (Seq_index vals@8@00 3))))
          (or
            (< (Seq_index vals@8@00 4) (- 0 1))
            (<= result@9@00 (Seq_index vals@8@00 4))))
        (or
          (< (Seq_index vals@8@00 5) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 5))))
      (and
        (implies
          (and
            (and
              (and
                (and
                  (and
                    (< (Seq_index vals@8@00 0) (- 0 1))
                    (< (Seq_index vals@8@00 1) (- 0 1)))
                  (< (Seq_index vals@8@00 2) (- 0 1)))
                (< (Seq_index vals@8@00 3) (- 0 1)))
              (< (Seq_index vals@8@00 4) (- 0 1)))
            (< (Seq_index vals@8@00 5) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (or
              (or
                (or
                  (or
                    (<= (- 0 1) (Seq_index vals@8@00 0))
                    (<= (- 0 1) (Seq_index vals@8@00 1)))
                  (<= (- 0 1) (Seq_index vals@8@00 2)))
                (<= (- 0 1) (Seq_index vals@8@00 3)))
              (<= (- 0 1) (Seq_index vals@8@00 4)))
            (<= (- 0 1) (Seq_index vals@8@00 5)))
          (or
            (or
              (or
                (or
                  (or
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 0))
                      (= result@9@00 (Seq_index vals@8@00 0)))
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 1))
                      (= result@9@00 (Seq_index vals@8@00 1))))
                  (and
                    (<= (- 0 1) (Seq_index vals@8@00 2))
                    (= result@9@00 (Seq_index vals@8@00 2))))
                (and
                  (<= (- 0 1) (Seq_index vals@8@00 3))
                  (= result@9@00 (Seq_index vals@8@00 3))))
              (and
                (<= (- 0 1) (Seq_index vals@8@00 4))
                (= result@9@00 (Seq_index vals@8@00 4))))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 5))
              (= result@9@00 (Seq_index vals@8@00 5)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Rng___contract_unsatisfiable__Rng_EncodedGlobalVariables_Main ----------
(declare-const diz@0@08 $Ref)
(declare-const __globals@1@08 $Ref)
(declare-const __m_param@2@08 $Ref)
(declare-const diz@3@08 $Ref)
(declare-const __globals@4@08 $Ref)
(declare-const __m_param@5@08 $Ref)
(push) ; 1
(declare-const $t@6@08 $Snap)
(assert (= $t@6@08 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@3@08 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@7@08 $Snap)
(assert (= $t@7@08 ($Snap.combine ($Snap.first $t@7@08) ($Snap.second $t@7@08))))
(assert (= ($Snap.first $t@7@08) $Snap.unit))
(assert (= ($Snap.second $t@7@08) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- CASR___contract_unsatisfiable__CASR_EncodedGlobalVariables_Main ----------
(declare-const diz@8@08 $Ref)
(declare-const __globals@9@08 $Ref)
(declare-const __m_param@10@08 $Ref)
(declare-const diz@11@08 $Ref)
(declare-const __globals@12@08 $Ref)
(declare-const __m_param@13@08 $Ref)
(push) ; 1
(declare-const $t@14@08 $Snap)
(assert (= $t@14@08 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@11@08 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@15@08 $Snap)
(assert (= $t@15@08 ($Snap.combine ($Snap.first $t@15@08) ($Snap.second $t@15@08))))
(assert (= ($Snap.first $t@15@08) $Snap.unit))
(assert (= ($Snap.second $t@15@08) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- CASR_CASR_EncodedGlobalVariables_Main ----------
(declare-const __globals@16@08 $Ref)
(declare-const __m_param@17@08 $Ref)
(declare-const sys__result@18@08 $Ref)
(declare-const __globals@19@08 $Ref)
(declare-const __m_param@20@08 $Ref)
(declare-const sys__result@21@08 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@22@08 $Snap)
(assert (= $t@22@08 ($Snap.combine ($Snap.first $t@22@08) ($Snap.second $t@22@08))))
(assert (= ($Snap.first $t@22@08) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@21@08 $Ref.null)))
(assert (=
  ($Snap.second $t@22@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@22@08))
    ($Snap.second ($Snap.second $t@22@08)))))
(assert (= ($Snap.first ($Snap.second $t@22@08)) $Snap.unit))
; [eval] type_of(sys__result) == class_CASR()
; [eval] type_of(sys__result)
; [eval] class_CASR()
(assert (= (type_of<TYPE> sys__result@21@08) (as class_CASR<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@22@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@22@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@22@08))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@22@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@08)))))))))))
  $Snap.unit))
; [eval] sys__result.CASR_m == __m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@08)))))
  __m_param@20@08))
(pop) ; 2
(push) ; 2
; [exec]
; var m_param__39: Ref
(declare-const m_param__39@23@08 $Ref)
; [exec]
; var globals__38: Ref
(declare-const globals__38@24@08 $Ref)
; [exec]
; var diz__37: Ref
(declare-const diz__37@25@08 $Ref)
; [exec]
; diz__37 := new(CASR_m, CASR_CASR_var, CASR_CASR_out, CASR_CASR_plus, CASR_CASR_minus, CASR_bit_plus, CASR_bit_minus, CASR_i)
(declare-const diz__37@26@08 $Ref)
(assert (not (= diz__37@26@08 $Ref.null)))
(declare-const CASR_m@27@08 $Ref)
(declare-const CASR_CASR_var@28@08 Int)
(declare-const CASR_CASR_out@29@08 Int)
(declare-const CASR_CASR_plus@30@08 Int)
(declare-const CASR_CASR_minus@31@08 Int)
(declare-const CASR_bit_plus@32@08 Int)
(declare-const CASR_bit_minus@33@08 Int)
(declare-const CASR_i@34@08 Int)
(assert (not (= diz__37@26@08 globals__38@24@08)))
(assert (not (= diz__37@26@08 m_param__39@23@08)))
(assert (not (= diz__37@26@08 __m_param@20@08)))
(assert (not (= diz__37@26@08 __globals@19@08)))
(assert (not (= diz__37@26@08 sys__result@21@08)))
(assert (not (= diz__37@26@08 diz__37@25@08)))
; [exec]
; inhale type_of(diz__37) == class_CASR()
(declare-const $t@35@08 $Snap)
(assert (= $t@35@08 $Snap.unit))
; [eval] type_of(diz__37) == class_CASR()
; [eval] type_of(diz__37)
; [eval] class_CASR()
(assert (= (type_of<TYPE> diz__37@26@08) (as class_CASR<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; globals__38 := __globals
; [exec]
; m_param__39 := __m_param
; [exec]
; diz__37.CASR_m := m_param__39
; [exec]
; inhale acc(CASR_idleToken_EncodedGlobalVariables(diz__37, globals__38), write)
(declare-const $t@36@08 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; sys__result := diz__37
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_CASR() && acc(CASR_idleToken_EncodedGlobalVariables(sys__result, __globals), write) && acc(sys__result.CASR_m, write) && acc(sys__result.CASR_CASR_var, write) && acc(sys__result.CASR_CASR_out, write) && acc(sys__result.CASR_CASR_plus, write) && acc(sys__result.CASR_CASR_minus, write) && acc(sys__result.CASR_bit_plus, write) && acc(sys__result.CASR_bit_minus, write) && acc(sys__result.CASR_i, write) && sys__result.CASR_m == __m_param
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_CASR()
; [eval] type_of(sys__result)
; [eval] class_CASR()
; [eval] sys__result.CASR_m == __m_param
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- CASR_joinOperator_EncodedGlobalVariables ----------
(declare-const diz@37@08 $Ref)
(declare-const globals@38@08 $Ref)
(declare-const diz@39@08 $Ref)
(declare-const globals@40@08 $Ref)
(push) ; 1
(declare-const $t@41@08 $Snap)
(assert (= $t@41@08 ($Snap.combine ($Snap.first $t@41@08) ($Snap.second $t@41@08))))
(assert (= ($Snap.first $t@41@08) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@39@08 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@42@08 $Snap)
(assert (= $t@42@08 ($Snap.combine ($Snap.first $t@42@08) ($Snap.second $t@42@08))))
(assert (=
  ($Snap.second $t@42@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@42@08))
    ($Snap.second ($Snap.second $t@42@08)))))
(declare-const $k@43@08 $Perm)
(assert ($Perm.isReadVar $k@43@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@43@08 $Perm.No) (< $Perm.No $k@43@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      2
;  :arith-eq-adapter        2
;  :binary-propagations     22
;  :conflicts               1
;  :datatype-accessor-ax    9
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   22
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.78
;  :mk-bool-var             295
;  :mk-clause               3
;  :num-allocs              3525731
;  :num-checks              15
;  :propagations            23
;  :quant-instantiations    1
;  :rlimit-count            119045)
(assert (<= $Perm.No $k@43@08))
(assert (<= $k@43@08 $Perm.Write))
(assert (implies (< $Perm.No $k@43@08) (not (= diz@39@08 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@42@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@42@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@42@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@42@08))) $Snap.unit))
; [eval] diz.CASR_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@43@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               49
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      3
;  :arith-eq-adapter        2
;  :binary-propagations     22
;  :conflicts               2
;  :datatype-accessor-ax    10
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   22
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.78
;  :mk-bool-var             298
;  :mk-clause               3
;  :num-allocs              3525731
;  :num-checks              16
;  :propagations            23
;  :quant-instantiations    1
;  :rlimit-count            119298)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@42@08))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@42@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@08)))))))
(push) ; 3
(assert (not (< $Perm.No $k@43@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               55
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      3
;  :arith-eq-adapter        2
;  :binary-propagations     22
;  :conflicts               3
;  :datatype-accessor-ax    11
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   22
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             301
;  :mk-clause               3
;  :num-allocs              3650605
;  :num-checks              17
;  :propagations            23
;  :quant-instantiations    2
;  :rlimit-count            119582)
(declare-const $k@44@08 $Perm)
(assert ($Perm.isReadVar $k@44@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@44@08 $Perm.No) (< $Perm.No $k@44@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               55
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      4
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    11
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   22
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             305
;  :mk-clause               5
;  :num-allocs              3650605
;  :num-checks              18
;  :propagations            24
;  :quant-instantiations    2
;  :rlimit-count            119781)
(assert (<= $Perm.No $k@44@08))
(assert (<= $k@44@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@44@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@42@08)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@08))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_casr == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@43@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               56
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               5
;  :datatype-accessor-ax    11
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   22
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             307
;  :mk-clause               5
;  :num-allocs              3650605
;  :num-checks              19
;  :propagations            24
;  :quant-instantiations    2
;  :rlimit-count            119967)
(push) ; 3
(assert (not (< $Perm.No $k@44@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               56
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               6
;  :datatype-accessor-ax    11
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   22
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             307
;  :mk-clause               5
;  :num-allocs              3650605
;  :num-checks              20
;  :propagations            24
;  :quant-instantiations    2
;  :rlimit-count            120015)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@08)))))
  diz@39@08))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- CASR_run_EncodedGlobalVariables ----------
(declare-const diz@45@08 $Ref)
(declare-const __globals@46@08 $Ref)
(declare-const diz@47@08 $Ref)
(declare-const __globals@48@08 $Ref)
(push) ; 1
(declare-const $t@49@08 $Snap)
(assert (= $t@49@08 ($Snap.combine ($Snap.first $t@49@08) ($Snap.second $t@49@08))))
(assert (= ($Snap.first $t@49@08) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@47@08 $Ref.null)))
(assert (=
  ($Snap.second $t@49@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@49@08))
    ($Snap.second ($Snap.second $t@49@08)))))
(declare-const $k@50@08 $Perm)
(assert ($Perm.isReadVar $k@50@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@50@08 $Perm.No) (< $Perm.No $k@50@08))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               67
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      6
;  :arith-eq-adapter        4
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    14
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   22
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              4
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             315
;  :mk-clause               7
;  :num-allocs              3650605
;  :num-checks              21
;  :propagations            25
;  :quant-instantiations    2
;  :rlimit-count            120521)
(assert (<= $Perm.No $k@50@08))
(assert (<= $k@50@08 $Perm.Write))
(assert (implies (< $Perm.No $k@50@08) (not (= diz@47@08 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@49@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@49@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@49@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@49@08))) $Snap.unit))
; [eval] diz.CASR_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               73
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     22
;  :conflicts               8
;  :datatype-accessor-ax    15
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   22
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              4
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             318
;  :mk-clause               7
;  :num-allocs              3650605
;  :num-checks              22
;  :propagations            25
;  :quant-instantiations    2
;  :rlimit-count            120774)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@49@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@08)))))))
(push) ; 2
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               79
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     22
;  :conflicts               9
;  :datatype-accessor-ax    16
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   22
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              4
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             321
;  :mk-clause               7
;  :num-allocs              3650605
;  :num-checks              23
;  :propagations            25
;  :quant-instantiations    3
;  :rlimit-count            121058)
(declare-const $k@51@08 $Perm)
(assert ($Perm.isReadVar $k@51@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@51@08 $Perm.No) (< $Perm.No $k@51@08))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               79
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      8
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               10
;  :datatype-accessor-ax    16
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   22
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              4
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             325
;  :mk-clause               9
;  :num-allocs              3650605
;  :num-checks              24
;  :propagations            26
;  :quant-instantiations    3
;  :rlimit-count            121257)
(assert (<= $Perm.No $k@51@08))
(assert (<= $k@51@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@51@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@49@08))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_casr == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               80
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               11
;  :datatype-accessor-ax    16
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   22
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              4
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             327
;  :mk-clause               9
;  :num-allocs              3650605
;  :num-checks              25
;  :propagations            26
;  :quant-instantiations    3
;  :rlimit-count            121443)
(push) ; 2
(assert (not (< $Perm.No $k@51@08)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               80
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               12
;  :datatype-accessor-ax    16
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   22
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              4
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             327
;  :mk-clause               9
;  :num-allocs              3650605
;  :num-checks              26
;  :propagations            26
;  :quant-instantiations    3
;  :rlimit-count            121491)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@08)))))
  diz@47@08))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@52@08 $Snap)
(assert (= $t@52@08 ($Snap.combine ($Snap.first $t@52@08) ($Snap.second $t@52@08))))
(declare-const $k@53@08 $Perm)
(assert ($Perm.isReadVar $k@53@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@53@08 $Perm.No) (< $Perm.No $k@53@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               93
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      10
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               13
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   24
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              8
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             336
;  :mk-clause               11
;  :num-allocs              3650605
;  :num-checks              28
;  :propagations            27
;  :quant-instantiations    4
;  :rlimit-count            122230)
(assert (<= $Perm.No $k@53@08))
(assert (<= $k@53@08 $Perm.Write))
(assert (implies (< $Perm.No $k@53@08) (not (= diz@47@08 $Ref.null))))
(assert (=
  ($Snap.second $t@52@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@52@08))
    ($Snap.second ($Snap.second $t@52@08)))))
(assert (= ($Snap.first ($Snap.second $t@52@08)) $Snap.unit))
; [eval] diz.CASR_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@53@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               99
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               14
;  :datatype-accessor-ax    18
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   24
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              8
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             339
;  :mk-clause               11
;  :num-allocs              3650605
;  :num-checks              29
;  :propagations            27
;  :quant-instantiations    4
;  :rlimit-count            122473)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@52@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@52@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@52@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@52@08))))))
(push) ; 3
(assert (not (< $Perm.No $k@53@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               105
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               15
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   24
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              8
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             342
;  :mk-clause               11
;  :num-allocs              3650605
;  :num-checks              30
;  :propagations            27
;  :quant-instantiations    5
;  :rlimit-count            122745)
(declare-const $k@54@08 $Perm)
(assert ($Perm.isReadVar $k@54@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@54@08 $Perm.No) (< $Perm.No $k@54@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               105
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      12
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               16
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   24
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              8
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             346
;  :mk-clause               13
;  :num-allocs              3650605
;  :num-checks              31
;  :propagations            28
;  :quant-instantiations    5
;  :rlimit-count            122944)
(assert (<= $Perm.No $k@54@08))
(assert (<= $k@54@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@54@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@52@08)) $Ref.null))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@52@08))) $Snap.unit))
; [eval] diz.CASR_m.Main_rn_casr == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@53@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               106
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               17
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   24
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              8
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             348
;  :mk-clause               13
;  :num-allocs              3650605
;  :num-checks              32
;  :propagations            28
;  :quant-instantiations    5
;  :rlimit-count            123120)
(push) ; 3
(assert (not (< $Perm.No $k@54@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               106
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               18
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   24
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              8
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             348
;  :mk-clause               13
;  :num-allocs              3650605
;  :num-checks              33
;  :propagations            28
;  :quant-instantiations    5
;  :rlimit-count            123168)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@52@08))))
  diz@47@08))
(pop) ; 2
(push) ; 2
; [exec]
; var globals__40: Ref
(declare-const globals__40@55@08 $Ref)
; [exec]
; var __flatten_9__41: Ref
(declare-const __flatten_9__41@56@08 $Ref)
; [exec]
; var __flatten_10__42: Seq[Int]
(declare-const __flatten_10__42@57@08 Seq<Int>)
; [exec]
; var __flatten_11__43: Ref
(declare-const __flatten_11__43@58@08 $Ref)
; [exec]
; var __flatten_12__44: Ref
(declare-const __flatten_12__44@59@08 $Ref)
; [exec]
; var __flatten_13__45: Seq[Int]
(declare-const __flatten_13__45@60@08 Seq<Int>)
; [exec]
; var __flatten_14__46: Ref
(declare-const __flatten_14__46@61@08 $Ref)
; [exec]
; var __flatten_15__48: Ref
(declare-const __flatten_15__48@62@08 $Ref)
; [exec]
; var __flatten_16__49: Ref
(declare-const __flatten_16__49@63@08 $Ref)
; [exec]
; var __flatten_17__50: Ref
(declare-const __flatten_17__50@64@08 $Ref)
; [exec]
; var __flatten_18__51: Ref
(declare-const __flatten_18__51@65@08 $Ref)
; [exec]
; var __flatten_19__52: Ref
(declare-const __flatten_19__52@66@08 $Ref)
; [exec]
; var __flatten_20__53: Ref
(declare-const __flatten_20__53@67@08 $Ref)
; [exec]
; var __flatten_21__54: Ref
(declare-const __flatten_21__54@68@08 $Ref)
; [exec]
; var __flatten_22__55: Ref
(declare-const __flatten_22__55@69@08 $Ref)
; [exec]
; var __flatten_23__56: Ref
(declare-const __flatten_23__56@70@08 $Ref)
; [exec]
; var __flatten_24__57: Ref
(declare-const __flatten_24__57@71@08 $Ref)
; [exec]
; var __flatten_25__58: Int
(declare-const __flatten_25__58@72@08 Int)
; [exec]
; var __flatten_26__59: Ref
(declare-const __flatten_26__59@73@08 $Ref)
; [exec]
; var __flatten_27__60: Ref
(declare-const __flatten_27__60@74@08 $Ref)
; [exec]
; var __flatten_28__61: Ref
(declare-const __flatten_28__61@75@08 $Ref)
; [exec]
; var __flatten_29__62: Int
(declare-const __flatten_29__62@76@08 Int)
; [exec]
; var __flatten_30__63: Ref
(declare-const __flatten_30__63@77@08 $Ref)
; [exec]
; var __flatten_31__64: Ref
(declare-const __flatten_31__64@78@08 $Ref)
; [exec]
; var __flatten_32__65: Int
(declare-const __flatten_32__65@79@08 Int)
; [exec]
; var __flatten_33__66: Ref
(declare-const __flatten_33__66@80@08 $Ref)
; [exec]
; var __flatten_34__67: Ref
(declare-const __flatten_34__67@81@08 $Ref)
; [exec]
; var __flatten_35__68: Ref
(declare-const __flatten_35__68@82@08 $Ref)
; [exec]
; var __flatten_36__69: Int
(declare-const __flatten_36__69@83@08 Int)
; [exec]
; var __flatten_37__70: Int
(declare-const __flatten_37__70@84@08 Int)
; [exec]
; var __flatten_38__71: Ref
(declare-const __flatten_38__71@85@08 $Ref)
; [exec]
; var __flatten_39__72: Int
(declare-const __flatten_39__72@86@08 Int)
; [exec]
; var __flatten_40__73: Int
(declare-const __flatten_40__73@87@08 Int)
; [exec]
; var __flatten_41__74: Ref
(declare-const __flatten_41__74@88@08 $Ref)
; [exec]
; var __flatten_42__75: Int
(declare-const __flatten_42__75@89@08 Int)
; [exec]
; var __flatten_43__76: Int
(declare-const __flatten_43__76@90@08 Int)
; [exec]
; var __flatten_44__77: Int
(declare-const __flatten_44__77@91@08 Int)
; [exec]
; var __flatten_45__78: Ref
(declare-const __flatten_45__78@92@08 $Ref)
; [exec]
; var __flatten_46__79: Int
(declare-const __flatten_46__79@93@08 Int)
; [exec]
; var __flatten_47__80: Ref
(declare-const __flatten_47__80@94@08 $Ref)
; [exec]
; var __flatten_48__81: Int
(declare-const __flatten_48__81@95@08 Int)
; [exec]
; var __flatten_49__82: Int
(declare-const __flatten_49__82@96@08 Int)
; [exec]
; var __flatten_50__83: Ref
(declare-const __flatten_50__83@97@08 $Ref)
; [exec]
; var __flatten_51__84: Ref
(declare-const __flatten_51__84@98@08 $Ref)
; [exec]
; var __flatten_52__85: Int
(declare-const __flatten_52__85@99@08 Int)
; [exec]
; var __flatten_53__86: Ref
(declare-const __flatten_53__86@100@08 $Ref)
; [exec]
; var __flatten_54__87: Int
(declare-const __flatten_54__87@101@08 Int)
; [exec]
; var __flatten_56__88: Int
(declare-const __flatten_56__88@102@08 Int)
; [exec]
; var __flatten_57__89: Ref
(declare-const __flatten_57__89@103@08 $Ref)
; [exec]
; var __flatten_58__90: Ref
(declare-const __flatten_58__90@104@08 $Ref)
; [exec]
; var __flatten_59__91: Ref
(declare-const __flatten_59__91@105@08 $Ref)
; [exec]
; var __flatten_60__92: Ref
(declare-const __flatten_60__92@106@08 $Ref)
; [exec]
; var __flatten_61__93: Int
(declare-const __flatten_61__93@107@08 Int)
; [exec]
; var __flatten_62__94: Ref
(declare-const __flatten_62__94@108@08 $Ref)
; [exec]
; var __flatten_63__95: Int
(declare-const __flatten_63__95@109@08 Int)
; [exec]
; var __flatten_64__96: Ref
(declare-const __flatten_64__96@110@08 $Ref)
; [exec]
; var __flatten_65__97: Seq[Int]
(declare-const __flatten_65__97@111@08 Seq<Int>)
; [exec]
; var __flatten_66__98: Ref
(declare-const __flatten_66__98@112@08 $Ref)
; [exec]
; var __flatten_67__99: Ref
(declare-const __flatten_67__99@113@08 $Ref)
; [exec]
; var __flatten_68__100: Seq[Int]
(declare-const __flatten_68__100@114@08 Seq<Int>)
; [exec]
; var __flatten_69__101: Ref
(declare-const __flatten_69__101@115@08 $Ref)
; [exec]
; globals__40 := __globals
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(push) ; 3
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               106
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   24
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              12
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             348
;  :mk-clause               13
;  :num-allocs              3650605
;  :num-checks              34
;  :propagations            28
;  :quant-instantiations    5
;  :rlimit-count            123232)
(declare-const $t@116@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               112
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              12
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             348
;  :mk-clause               13
;  :num-allocs              3650605
;  :num-checks              36
;  :propagations            28
;  :quant-instantiations    5
;  :rlimit-count            123581)
(assert (= $t@116@08 ($Snap.combine ($Snap.first $t@116@08) ($Snap.second $t@116@08))))
(assert (= ($Snap.first $t@116@08) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@116@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@116@08))
    ($Snap.second ($Snap.second $t@116@08)))))
(assert (= ($Snap.first ($Snap.second $t@116@08)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@116@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@116@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@116@08))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@116@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@117@08 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@117@08 | live]
; [else-branch: 0 | !(0 <= i@117@08) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@117@08]
(assert (<= 0 i@117@08))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@117@08)]
(assert (not (<= 0 i@117@08)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i@117@08 < |First:(Second:(Second:(Second:($t@116@08))))| && 0 <= i@117@08 | live]
; [else-branch: 1 | !(i@117@08 < |First:(Second:(Second:(Second:($t@116@08))))| && 0 <= i@117@08) | live]
(push) ; 5
; [then-branch: 1 | i@117@08 < |First:(Second:(Second:(Second:($t@116@08))))| && 0 <= i@117@08]
(assert (and
  (<
    i@117@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))
  (<= 0 i@117@08)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@117@08 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               162
;  :arith-assert-diseq      8
;  :arith-assert-lower      20
;  :arith-assert-upper      16
;  :arith-eq-adapter        11
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              12
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             380
;  :mk-clause               19
;  :num-allocs              3650605
;  :num-checks              37
;  :propagations            30
;  :quant-instantiations    11
;  :rlimit-count            124929)
; [eval] -1
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:($t@116@08))))[i@117@08] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:($t@116@08))))[i@117@08] != -1 | live]
(push) ; 7
; [then-branch: 2 | First:(Second:(Second:(Second:($t@116@08))))[i@117@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))
    i@117@08)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | First:(Second:(Second:(Second:($t@116@08))))[i@117@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))
      i@117@08)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@117@08 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               162
;  :arith-assert-diseq      8
;  :arith-assert-lower      20
;  :arith-assert-upper      16
;  :arith-eq-adapter        11
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              12
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             381
;  :mk-clause               19
;  :num-allocs              3650605
;  :num-checks              38
;  :propagations            30
;  :quant-instantiations    11
;  :rlimit-count            125104)
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@116@08))))[i@117@08] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@116@08))))[i@117@08]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@116@08))))[i@117@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))
    i@117@08)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@117@08 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               162
;  :arith-assert-diseq      9
;  :arith-assert-lower      23
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              12
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             384
;  :mk-clause               20
;  :num-allocs              3650605
;  :num-checks              39
;  :propagations            30
;  :quant-instantiations    11
;  :rlimit-count            125228)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@116@08))))[i@117@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))
      i@117@08))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i@117@08 < |First:(Second:(Second:(Second:($t@116@08))))| && 0 <= i@117@08)]
(assert (not
  (and
    (<
      i@117@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))
    (<= 0 i@117@08))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@117@08 Int)) (!
  (implies
    (and
      (<
        i@117@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))
      (<= 0 i@117@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))
          i@117@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))
            i@117@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))
            i@117@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))
    i@117@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))
(declare-const $k@118@08 $Perm)
(assert ($Perm.isReadVar $k@118@08 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@118@08 $Perm.No) (< $Perm.No $k@118@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               167
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      17
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               21
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             390
;  :mk-clause               22
;  :num-allocs              3650605
;  :num-checks              40
;  :propagations            31
;  :quant-instantiations    11
;  :rlimit-count            125997)
(assert (<= $Perm.No $k@118@08))
(assert (<= $k@118@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@118@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))
  $Snap.unit))
; [eval] diz.Main_rn != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               173
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               22
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             393
;  :mk-clause               22
;  :num-allocs              3650605
;  :num-checks              41
;  :propagations            31
;  :quant-instantiations    11
;  :rlimit-count            126320)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               179
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               23
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             396
;  :mk-clause               22
;  :num-allocs              3781383
;  :num-checks              42
;  :propagations            31
;  :quant-instantiations    12
;  :rlimit-count            126676)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               184
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             397
;  :mk-clause               22
;  :num-allocs              3781383
;  :num-checks              43
;  :propagations            31
;  :quant-instantiations    12
;  :rlimit-count            126933)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               189
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             398
;  :mk-clause               22
;  :num-allocs              3781383
;  :num-checks              44
;  :propagations            31
;  :quant-instantiations    12
;  :rlimit-count            127200)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               194
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             399
;  :mk-clause               22
;  :num-allocs              3781383
;  :num-checks              45
;  :propagations            31
;  :quant-instantiations    12
;  :rlimit-count            127477)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               199
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               27
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             400
;  :mk-clause               22
;  :num-allocs              3781383
;  :num-checks              46
;  :propagations            31
;  :quant-instantiations    12
;  :rlimit-count            127764)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               204
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               28
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             401
;  :mk-clause               22
;  :num-allocs              3781383
;  :num-checks              47
;  :propagations            31
;  :quant-instantiations    12
;  :rlimit-count            128061)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               209
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             402
;  :mk-clause               22
;  :num-allocs              3781383
;  :num-checks              48
;  :propagations            31
;  :quant-instantiations    12
;  :rlimit-count            128368)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               214
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             403
;  :mk-clause               22
;  :num-allocs              3781383
;  :num-checks              49
;  :propagations            31
;  :quant-instantiations    12
;  :rlimit-count            128685)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               219
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               31
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             404
;  :mk-clause               22
;  :num-allocs              3781383
;  :num-checks              50
;  :propagations            31
;  :quant-instantiations    12
;  :rlimit-count            129012)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               224
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             405
;  :mk-clause               22
;  :num-allocs              3781383
;  :num-checks              51
;  :propagations            31
;  :quant-instantiations    12
;  :rlimit-count            129349)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))
(declare-const $k@119@08 $Perm)
(assert ($Perm.isReadVar $k@119@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@119@08 $Perm.No) (< $Perm.No $k@119@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               229
;  :arith-assert-diseq      11
;  :arith-assert-lower      27
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               33
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             410
;  :mk-clause               24
;  :num-allocs              3781383
;  :num-checks              52
;  :propagations            32
;  :quant-instantiations    12
;  :rlimit-count            129840)
(declare-const $t@120@08 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@51@08)
    (=
      $t@120@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@49@08)))))))
  (implies
    (< $Perm.No $k@119@08)
    (=
      $t@120@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@51@08 $k@119@08)))
(assert (<= (+ $k@51@08 $k@119@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@51@08 $k@119@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               239
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         1
;  :binary-propagations     22
;  :conflicts               34
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             418
;  :mk-clause               24
;  :num-allocs              3781383
;  :num-checks              53
;  :propagations            32
;  :quant-instantiations    13
;  :rlimit-count            130549)
(assert (not (= $t@120@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               245
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      22
;  :arith-conflicts         2
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     22
;  :conflicts               35
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             421
;  :mk-clause               24
;  :num-allocs              3781383
;  :num-checks              54
;  :propagations            32
;  :quant-instantiations    13
;  :rlimit-count            130973)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               250
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      23
;  :arith-conflicts         3
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               36
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             423
;  :mk-clause               24
;  :num-allocs              3781383
;  :num-checks              55
;  :propagations            32
;  :quant-instantiations    13
;  :rlimit-count            131362)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               255
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      24
;  :arith-conflicts         4
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         4
;  :binary-propagations     22
;  :conflicts               37
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             425
;  :mk-clause               24
;  :num-allocs              3781383
;  :num-checks              56
;  :propagations            32
;  :quant-instantiations    13
;  :rlimit-count            131761)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               260
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      25
;  :arith-conflicts         5
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         5
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             427
;  :mk-clause               24
;  :num-allocs              3781383
;  :num-checks              57
;  :propagations            32
;  :quant-instantiations    13
;  :rlimit-count            132170)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               265
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      26
;  :arith-conflicts         6
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         6
;  :binary-propagations     22
;  :conflicts               39
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             429
;  :mk-clause               24
;  :num-allocs              3781383
;  :num-checks              58
;  :propagations            32
;  :quant-instantiations    13
;  :rlimit-count            132589)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               270
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      27
;  :arith-conflicts         7
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         7
;  :binary-propagations     22
;  :conflicts               40
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             431
;  :mk-clause               24
;  :num-allocs              3781383
;  :num-checks              59
;  :propagations            32
;  :quant-instantiations    13
;  :rlimit-count            133018)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               275
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      28
;  :arith-conflicts         8
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               41
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             433
;  :mk-clause               24
;  :num-allocs              3781383
;  :num-checks              60
;  :propagations            32
;  :quant-instantiations    13
;  :rlimit-count            133457)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))
(declare-const $k@121@08 $Perm)
(assert ($Perm.isReadVar $k@121@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@121@08 $Perm.No) (< $Perm.No $k@121@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               280
;  :arith-assert-diseq      12
;  :arith-assert-lower      30
;  :arith-assert-upper      29
;  :arith-conflicts         8
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               42
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             438
;  :mk-clause               26
;  :num-allocs              3781383
;  :num-checks              61
;  :propagations            33
;  :quant-instantiations    13
;  :rlimit-count            134038)
(assert (<= $Perm.No $k@121@08))
(assert (<= $k@121@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@121@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@121@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               286
;  :arith-assert-diseq      12
;  :arith-assert-lower      30
;  :arith-assert-upper      30
;  :arith-conflicts         8
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               43
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             441
;  :mk-clause               26
;  :num-allocs              3781383
;  :num-checks              62
;  :propagations            33
;  :quant-instantiations    13
;  :rlimit-count            134571)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@121@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               292
;  :arith-assert-diseq      12
;  :arith-assert-lower      30
;  :arith-assert-upper      30
;  :arith-conflicts         8
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             444
;  :mk-clause               26
;  :num-allocs              3916793
;  :num-checks              63
;  :propagations            33
;  :quant-instantiations    14
;  :rlimit-count            135149)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@121@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               297
;  :arith-assert-diseq      12
;  :arith-assert-lower      30
;  :arith-assert-upper      30
;  :arith-conflicts         8
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             445
;  :mk-clause               26
;  :num-allocs              3916793
;  :num-checks              64
;  :propagations            33
;  :quant-instantiations    14
;  :rlimit-count            135616)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))))))
(declare-const $k@122@08 $Perm)
(assert ($Perm.isReadVar $k@122@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@122@08 $Perm.No) (< $Perm.No $k@122@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               302
;  :arith-assert-diseq      13
;  :arith-assert-lower      32
;  :arith-assert-upper      31
;  :arith-conflicts         8
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               46
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             450
;  :mk-clause               28
;  :num-allocs              3916793
;  :num-checks              65
;  :propagations            34
;  :quant-instantiations    14
;  :rlimit-count            136236)
(assert (<= $Perm.No $k@122@08))
(assert (<= $k@122@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@122@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@122@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               308
;  :arith-assert-diseq      13
;  :arith-assert-lower      32
;  :arith-assert-upper      32
;  :arith-conflicts         8
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               47
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             453
;  :mk-clause               28
;  :num-allocs              3916793
;  :num-checks              66
;  :propagations            34
;  :quant-instantiations    14
;  :rlimit-count            136809)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@122@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               314
;  :arith-assert-diseq      13
;  :arith-assert-lower      32
;  :arith-assert-upper      32
;  :arith-conflicts         8
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             456
;  :mk-clause               28
;  :num-allocs              3916793
;  :num-checks              67
;  :propagations            34
;  :quant-instantiations    15
;  :rlimit-count            137417)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               319
;  :arith-assert-diseq      13
;  :arith-assert-lower      32
;  :arith-assert-upper      32
;  :arith-conflicts         8
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             457
;  :mk-clause               28
;  :num-allocs              3916793
;  :num-checks              68
;  :propagations            34
;  :quant-instantiations    15
;  :rlimit-count            137924)
(declare-const $k@123@08 $Perm)
(assert ($Perm.isReadVar $k@123@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@123@08 $Perm.No) (< $Perm.No $k@123@08))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               319
;  :arith-assert-diseq      14
;  :arith-assert-lower      34
;  :arith-assert-upper      33
;  :arith-conflicts         8
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               50
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             461
;  :mk-clause               30
;  :num-allocs              3916793
;  :num-checks              69
;  :propagations            35
;  :quant-instantiations    15
;  :rlimit-count            138122)
(assert (<= $Perm.No $k@123@08))
(assert (<= $k@123@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@123@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn.Rng_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               320
;  :arith-assert-diseq      14
;  :arith-assert-lower      34
;  :arith-assert-upper      34
;  :arith-conflicts         8
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             463
;  :mk-clause               30
;  :num-allocs              3916793
;  :num-checks              70
;  :propagations            35
;  :quant-instantiations    15
;  :rlimit-count            138638)
(push) ; 3
(assert (not (< $Perm.No $k@123@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               320
;  :arith-assert-diseq      14
;  :arith-assert-lower      34
;  :arith-assert-upper      34
;  :arith-conflicts         8
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               52
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 5
;  :datatype-occurs-check   25
;  :datatype-splits         3
;  :decisions               5
;  :del-clause              13
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             463
;  :mk-clause               30
;  :num-allocs              3916793
;  :num-checks              71
;  :propagations            35
;  :quant-instantiations    15
;  :rlimit-count            138686)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@116@08 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) __globals@48@08))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               401
;  :arith-assert-diseq      14
;  :arith-assert-lower      34
;  :arith-assert-upper      34
;  :arith-conflicts         8
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               54
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 35
;  :datatype-occurs-check   33
;  :datatype-splits         30
;  :decisions               34
;  :del-clause              29
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             496
;  :mk-clause               31
;  :num-allocs              3916793
;  :num-checks              73
;  :propagations            35
;  :quant-instantiations    16
;  :rlimit-count            140057)
(declare-const $t@124@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __flatten_9__41 := diz.CASR_m
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               475
;  :arith-assert-diseq      14
;  :arith-assert-lower      34
;  :arith-assert-upper      34
;  :arith-conflicts         8
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             522
;  :mk-clause               31
;  :num-allocs              3916793
;  :num-checks              75
;  :propagations            36
;  :quant-instantiations    16
;  :rlimit-count            140846)
(declare-const __flatten_9__41@125@08 $Ref)
(assert (=
  __flatten_9__41@125@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))))
; [exec]
; __flatten_11__43 := diz.CASR_m
(push) ; 3
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               476
;  :arith-assert-diseq      14
;  :arith-assert-lower      34
;  :arith-assert-upper      34
;  :arith-conflicts         8
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             523
;  :mk-clause               31
;  :num-allocs              3916793
;  :num-checks              76
;  :propagations            36
;  :quant-instantiations    16
;  :rlimit-count            140961
;  :time                    0.00)
(declare-const __flatten_11__43@126@08 $Ref)
(assert (=
  __flatten_11__43@126@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))))
; [exec]
; __flatten_10__42 := __flatten_11__43.Main_process_state[0 := 0]
; [eval] __flatten_11__43.Main_process_state[0 := 0]
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
  __flatten_11__43@126@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               477
;  :arith-assert-diseq      14
;  :arith-assert-lower      34
;  :arith-assert-upper      34
;  :arith-conflicts         8
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             524
;  :mk-clause               31
;  :num-allocs              3916793
;  :num-checks              77
;  :propagations            36
;  :quant-instantiations    16
;  :rlimit-count            141009)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               477
;  :arith-assert-diseq      14
;  :arith-assert-lower      34
;  :arith-assert-upper      34
;  :arith-conflicts         8
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             524
;  :mk-clause               31
;  :num-allocs              3916793
;  :num-checks              78
;  :propagations            36
;  :quant-instantiations    16
;  :rlimit-count            141024)
(declare-const __flatten_10__42@127@08 Seq<Int>)
(assert (Seq_equal
  __flatten_10__42@127@08
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))
    0
    0)))
; [exec]
; __flatten_9__41.Main_process_state := __flatten_10__42
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
  __flatten_9__41@125@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               487
;  :arith-add-rows          2
;  :arith-assert-diseq      15
;  :arith-assert-lower      38
;  :arith-assert-upper      36
;  :arith-conflicts         8
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         10
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             546
;  :mk-clause               49
;  :num-allocs              3916793
;  :num-checks              79
;  :propagations            44
;  :quant-instantiations    21
;  :rlimit-count            141492)
(assert (not (= __flatten_9__41@125@08 $Ref.null)))
; [exec]
; __flatten_12__44 := diz.CASR_m
(push) ; 3
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               488
;  :arith-add-rows          2
;  :arith-assert-diseq      15
;  :arith-assert-lower      38
;  :arith-assert-upper      36
;  :arith-conflicts         8
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         10
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             547
;  :mk-clause               49
;  :num-allocs              4056662
;  :num-checks              80
;  :propagations            44
;  :quant-instantiations    21
;  :rlimit-count            141596)
(declare-const __flatten_12__44@128@08 $Ref)
(assert (=
  __flatten_12__44@128@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))))
; [exec]
; __flatten_14__46 := diz.CASR_m
(push) ; 3
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               489
;  :arith-add-rows          2
;  :arith-assert-diseq      15
;  :arith-assert-lower      38
;  :arith-assert-upper      36
;  :arith-conflicts         8
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         10
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               58
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             548
;  :mk-clause               49
;  :num-allocs              4056662
;  :num-checks              81
;  :propagations            44
;  :quant-instantiations    21
;  :rlimit-count            141681)
(declare-const __flatten_14__46@129@08 $Ref)
(assert (=
  __flatten_14__46@129@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))))
; [exec]
; __flatten_13__45 := __flatten_14__46.Main_event_state[0 := 2]
; [eval] __flatten_14__46.Main_event_state[0 := 2]
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
  __flatten_14__46@129@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               490
;  :arith-add-rows          2
;  :arith-assert-diseq      15
;  :arith-assert-lower      38
;  :arith-assert-upper      36
;  :arith-conflicts         8
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         10
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               58
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             549
;  :mk-clause               49
;  :num-allocs              4056662
;  :num-checks              82
;  :propagations            44
;  :quant-instantiations    21
;  :rlimit-count            141729)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               490
;  :arith-add-rows          2
;  :arith-assert-diseq      15
;  :arith-assert-lower      38
;  :arith-assert-upper      36
;  :arith-conflicts         8
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         10
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               58
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             549
;  :mk-clause               49
;  :num-allocs              4056662
;  :num-checks              83
;  :propagations            44
;  :quant-instantiations    21
;  :rlimit-count            141744)
(declare-const __flatten_13__45@130@08 Seq<Int>)
(assert (Seq_equal
  __flatten_13__45@130@08
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))
    0
    2)))
; [exec]
; __flatten_12__44.Main_event_state := __flatten_13__45
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
  __flatten_12__44@128@08)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               500
;  :arith-add-rows          4
;  :arith-assert-diseq      16
;  :arith-assert-lower      42
;  :arith-assert-upper      38
;  :arith-conflicts         8
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               58
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             571
;  :mk-clause               67
;  :num-allocs              4056662
;  :num-checks              84
;  :propagations            52
;  :quant-instantiations    26
;  :rlimit-count            142236)
(assert (not (= __flatten_12__44@128@08 $Ref.null)))
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@131@08 $Snap)
(assert (= $t@131@08 ($Snap.combine ($Snap.first $t@131@08) ($Snap.second $t@131@08))))
(declare-const $k@132@08 $Perm)
(assert ($Perm.isReadVar $k@132@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@132@08 $Perm.No) (< $Perm.No $k@132@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               505
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      44
;  :arith-assert-upper      39
;  :arith-conflicts         8
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               59
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             576
;  :mk-clause               69
;  :num-allocs              4056662
;  :num-checks              85
;  :propagations            53
;  :quant-instantiations    26
;  :rlimit-count            142548)
(assert (<= $Perm.No $k@132@08))
(assert (<= $k@132@08 $Perm.Write))
(assert (implies (< $Perm.No $k@132@08) (not (= diz@47@08 $Ref.null))))
(assert (=
  ($Snap.second $t@131@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@131@08))
    ($Snap.second ($Snap.second $t@131@08)))))
(assert (= ($Snap.first ($Snap.second $t@131@08)) $Snap.unit))
; [eval] diz.CASR_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               511
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      44
;  :arith-assert-upper      40
;  :arith-conflicts         8
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               60
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             579
;  :mk-clause               69
;  :num-allocs              4056662
;  :num-checks              86
;  :propagations            53
;  :quant-instantiations    26
;  :rlimit-count            142791)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@131@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@131@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               517
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      44
;  :arith-assert-upper      40
;  :arith-conflicts         8
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               61
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             582
;  :mk-clause               69
;  :num-allocs              4056662
;  :num-checks              87
;  :propagations            53
;  :quant-instantiations    27
;  :rlimit-count            143063)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@131@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               522
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      44
;  :arith-assert-upper      40
;  :arith-conflicts         8
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               62
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             583
;  :mk-clause               69
;  :num-allocs              4056662
;  :num-checks              88
;  :propagations            53
;  :quant-instantiations    27
;  :rlimit-count            143240)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
  $Snap.unit))
; [eval] |diz.CASR_m.Main_process_state| == 3
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               528
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      44
;  :arith-assert-upper      40
;  :arith-conflicts         8
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               63
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             585
;  :mk-clause               69
;  :num-allocs              4056662
;  :num-checks              89
;  :propagations            53
;  :quant-instantiations    27
;  :rlimit-count            143459)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               535
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      46
;  :arith-assert-upper      41
;  :arith-conflicts         8
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               64
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             591
;  :mk-clause               69
;  :num-allocs              4056662
;  :num-checks              90
;  :propagations            53
;  :quant-instantiations    29
;  :rlimit-count            143789)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
  $Snap.unit))
; [eval] |diz.CASR_m.Main_event_state| == 6
; [eval] |diz.CASR_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               541
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      46
;  :arith-assert-upper      41
;  :arith-conflicts         8
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               65
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             593
;  :mk-clause               69
;  :num-allocs              4056662
;  :num-checks              91
;  :propagations            53
;  :quant-instantiations    29
;  :rlimit-count            144028)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))
  $Snap.unit))
; [eval] (forall i__47: Int :: { diz.CASR_m.Main_process_state[i__47] } 0 <= i__47 && i__47 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__47] == -1 || 0 <= diz.CASR_m.Main_process_state[i__47] && diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|)
(declare-const i__47@133@08 Int)
(push) ; 4
; [eval] 0 <= i__47 && i__47 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__47] == -1 || 0 <= diz.CASR_m.Main_process_state[i__47] && diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= i__47 && i__47 < |diz.CASR_m.Main_process_state|
; [eval] 0 <= i__47
(push) ; 5
; [then-branch: 4 | 0 <= i__47@133@08 | live]
; [else-branch: 4 | !(0 <= i__47@133@08) | live]
(push) ; 6
; [then-branch: 4 | 0 <= i__47@133@08]
(assert (<= 0 i__47@133@08))
; [eval] i__47 < |diz.CASR_m.Main_process_state|
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      49
;  :arith-assert-upper      42
;  :arith-conflicts         8
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               66
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             601
;  :mk-clause               69
;  :num-allocs              4198767
;  :num-checks              92
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            144467)
(pop) ; 6
(push) ; 6
; [else-branch: 4 | !(0 <= i__47@133@08)]
(assert (not (<= 0 i__47@133@08)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 5 | i__47@133@08 < |First:(Second:(Second:(Second:($t@131@08))))| && 0 <= i__47@133@08 | live]
; [else-branch: 5 | !(i__47@133@08 < |First:(Second:(Second:(Second:($t@131@08))))| && 0 <= i__47@133@08) | live]
(push) ; 6
; [then-branch: 5 | i__47@133@08 < |First:(Second:(Second:(Second:($t@131@08))))| && 0 <= i__47@133@08]
(assert (and
  (<
    i__47@133@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
  (<= 0 i__47@133@08)))
; [eval] diz.CASR_m.Main_process_state[i__47] == -1 || 0 <= diz.CASR_m.Main_process_state[i__47] && diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__47] == -1
; [eval] diz.CASR_m.Main_process_state[i__47]
(push) ; 7
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      43
;  :arith-conflicts         8
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             603
;  :mk-clause               69
;  :num-allocs              4198767
;  :num-checks              93
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            144624)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__47@133@08 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      43
;  :arith-conflicts         8
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             603
;  :mk-clause               69
;  :num-allocs              4198767
;  :num-checks              94
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            144633)
; [eval] -1
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@131@08))))[i__47@133@08] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@131@08))))[i__47@133@08] != -1 | live]
(push) ; 8
; [then-branch: 6 | First:(Second:(Second:(Second:($t@131@08))))[i__47@133@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    i__47@133@08)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 6 | First:(Second:(Second:(Second:($t@131@08))))[i__47@133@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
      i__47@133@08)
    (- 0 1))))
; [eval] 0 <= diz.CASR_m.Main_process_state[i__47] && diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= diz.CASR_m.Main_process_state[i__47]
; [eval] diz.CASR_m.Main_process_state[i__47]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      43
;  :arith-conflicts         8
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             604
;  :mk-clause               69
;  :num-allocs              4198767
;  :num-checks              95
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            144847)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__47@133@08 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      43
;  :arith-conflicts         8
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             604
;  :mk-clause               69
;  :num-allocs              4198767
;  :num-checks              96
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            144856)
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@131@08))))[i__47@133@08] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@131@08))))[i__47@133@08]) | live]
(push) ; 10
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@131@08))))[i__47@133@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    i__47@133@08)))
; [eval] diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__47]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      53
;  :arith-assert-upper      43
;  :arith-conflicts         8
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             607
;  :mk-clause               70
;  :num-allocs              4198767
;  :num-checks              97
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            145019)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__47@133@08 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      53
;  :arith-assert-upper      43
;  :arith-conflicts         8
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             607
;  :mk-clause               70
;  :num-allocs              4198767
;  :num-checks              98
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            145028)
; [eval] |diz.CASR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      53
;  :arith-assert-upper      43
;  :arith-conflicts         8
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              29
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             607
;  :mk-clause               70
;  :num-allocs              4198767
;  :num-checks              99
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            145076)
(pop) ; 10
(push) ; 10
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@131@08))))[i__47@133@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
      i__47@133@08))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 5 | !(i__47@133@08 < |First:(Second:(Second:(Second:($t@131@08))))| && 0 <= i__47@133@08)]
(assert (not
  (and
    (<
      i__47@133@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
    (<= 0 i__47@133@08))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__47@133@08 Int)) (!
  (implies
    (and
      (<
        i__47@133@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
      (<= 0 i__47@133@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
          i__47@133@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
            i__47@133@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
            i__47@133@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    i__47@133@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               554
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      53
;  :arith-assert-upper      43
;  :arith-conflicts         8
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               71
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             609
;  :mk-clause               70
;  :num-allocs              4198767
;  :num-checks              100
;  :propagations            53
;  :quant-instantiations    31
;  :rlimit-count            145701)
(declare-const $k@134@08 $Perm)
(assert ($Perm.isReadVar $k@134@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@134@08 $Perm.No) (< $Perm.No $k@134@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               554
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      44
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               72
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             613
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              101
;  :propagations            54
;  :quant-instantiations    31
;  :rlimit-count            145899)
(assert (<= $Perm.No $k@134@08))
(assert (<= $k@134@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@134@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               560
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             616
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              102
;  :propagations            54
;  :quant-instantiations    31
;  :rlimit-count            146222)
(push) ; 4
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               560
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             616
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              103
;  :propagations            54
;  :quant-instantiations    31
;  :rlimit-count            146270)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               566
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             619
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              104
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            146626)
(push) ; 4
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               566
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             619
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              105
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            146674)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               571
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             620
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              106
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            146931)
(push) ; 4
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               571
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               78
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             620
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              107
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            146979)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               576
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               79
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             621
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              108
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            147246)
(push) ; 4
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               576
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             621
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              109
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            147294)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               581
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               81
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             622
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              110
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            147571)
(push) ; 4
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               581
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             622
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              111
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            147619)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               586
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             623
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              112
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            147906)
(push) ; 4
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               586
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             623
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              113
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            147954)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               591
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             624
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              114
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            148251)
(push) ; 4
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               591
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             624
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              115
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            148299)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               596
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             625
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              116
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            148606)
(push) ; 4
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               596
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             625
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              117
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            148654)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               601
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             626
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              118
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            148971)
(push) ; 4
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               601
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             626
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              119
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            149019)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               606
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             627
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              120
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            149346)
(push) ; 4
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               606
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             627
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              121
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            149394)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               611
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               93
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             628
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              122
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            149731)
(push) ; 4
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               611
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             628
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              123
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            149779)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               616
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      45
;  :arith-conflicts         8
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               95
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             629
;  :mk-clause               72
;  :num-allocs              4198767
;  :num-checks              124
;  :propagations            54
;  :quant-instantiations    32
;  :rlimit-count            150126)
(declare-const $k@135@08 $Perm)
(assert ($Perm.isReadVar $k@135@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@135@08 $Perm.No) (< $Perm.No $k@135@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               616
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      46
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             633
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              125
;  :propagations            55
;  :quant-instantiations    32
;  :rlimit-count            150324)
(assert (<= $Perm.No $k@135@08))
(assert (<= $k@135@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@135@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               622
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               97
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             636
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              126
;  :propagations            55
;  :quant-instantiations    32
;  :rlimit-count            150767)
(push) ; 4
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               622
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               98
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             636
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              127
;  :propagations            55
;  :quant-instantiations    32
;  :rlimit-count            150815)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               628
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             639
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              128
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            151309)
(push) ; 4
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               628
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             639
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              129
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            151357)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               633
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               101
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             640
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              130
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            151734)
(push) ; 4
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               633
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             640
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              131
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            151782)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               638
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               103
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             641
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              132
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            152169)
(push) ; 4
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               638
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             641
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              133
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            152217)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               105
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             642
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              134
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            152614)
(push) ; 4
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             642
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              135
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            152662)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               648
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               107
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             643
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              136
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            153069)
(push) ; 4
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               648
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             643
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              137
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            153117)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               653
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             644
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              138
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            153534)
(push) ; 4
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               653
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               110
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             644
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              139
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            153582)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               658
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             645
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              140
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            154009)
(push) ; 4
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               658
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             645
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              141
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            154057)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               663
;  :arith-add-rows          4
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             646
;  :mk-clause               74
;  :num-allocs              4198767
;  :num-checks              142
;  :propagations            55
;  :quant-instantiations    33
;  :rlimit-count            154494)
(declare-const $k@136@08 $Perm)
(assert ($Perm.isReadVar $k@136@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@136@08 $Perm.No) (< $Perm.No $k@136@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               663
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      59
;  :arith-assert-upper      48
;  :arith-conflicts         8
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             650
;  :mk-clause               76
;  :num-allocs              4198767
;  :num-checks              143
;  :propagations            56
;  :quant-instantiations    33
;  :rlimit-count            154693)
(assert (<= $Perm.No $k@136@08))
(assert (<= $k@136@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@136@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               669
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      59
;  :arith-assert-upper      49
;  :arith-conflicts         8
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               76
;  :num-allocs              4198767
;  :num-checks              144
;  :propagations            56
;  :quant-instantiations    33
;  :rlimit-count            155226)
(push) ; 4
(assert (not (< $Perm.No $k@136@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               669
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      59
;  :arith-assert-upper      49
;  :arith-conflicts         8
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               76
;  :num-allocs              4198767
;  :num-checks              145
;  :propagations            56
;  :quant-instantiations    33
;  :rlimit-count            155274)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               675
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      59
;  :arith-assert-upper      49
;  :arith-conflicts         8
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             656
;  :mk-clause               76
;  :num-allocs              4198767
;  :num-checks              146
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            155852)
(push) ; 4
(assert (not (< $Perm.No $k@136@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               675
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      59
;  :arith-assert-upper      49
;  :arith-conflicts         8
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             656
;  :mk-clause               76
;  :num-allocs              4198767
;  :num-checks              147
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            155900)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               680
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      59
;  :arith-assert-upper      49
;  :arith-conflicts         8
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             657
;  :mk-clause               76
;  :num-allocs              4198767
;  :num-checks              148
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            156367)
(push) ; 4
(assert (not (< $Perm.No $k@136@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               680
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      59
;  :arith-assert-upper      49
;  :arith-conflicts         8
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               120
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             657
;  :mk-clause               76
;  :num-allocs              4198767
;  :num-checks              149
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            156415)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               685
;  :arith-add-rows          4
;  :arith-assert-diseq      21
;  :arith-assert-lower      59
;  :arith-assert-upper      49
;  :arith-conflicts         8
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             658
;  :mk-clause               76
;  :num-allocs              4198767
;  :num-checks              150
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            156892)
(declare-const $k@137@08 $Perm)
(assert ($Perm.isReadVar $k@137@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@137@08 $Perm.No) (< $Perm.No $k@137@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               685
;  :arith-add-rows          4
;  :arith-assert-diseq      22
;  :arith-assert-lower      61
;  :arith-assert-upper      50
;  :arith-conflicts         8
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               122
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             662
;  :mk-clause               78
;  :num-allocs              4198767
;  :num-checks              151
;  :propagations            57
;  :quant-instantiations    34
;  :rlimit-count            157091)
(assert (<= $Perm.No $k@137@08))
(assert (<= $k@137@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@137@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               691
;  :arith-add-rows          4
;  :arith-assert-diseq      22
;  :arith-assert-lower      61
;  :arith-assert-upper      51
;  :arith-conflicts         8
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               123
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             665
;  :mk-clause               78
;  :num-allocs              4198767
;  :num-checks              152
;  :propagations            57
;  :quant-instantiations    34
;  :rlimit-count            157664)
(push) ; 4
(assert (not (< $Perm.No $k@137@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               691
;  :arith-add-rows          4
;  :arith-assert-diseq      22
;  :arith-assert-lower      61
;  :arith-assert-upper      51
;  :arith-conflicts         8
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               124
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             665
;  :mk-clause               78
;  :num-allocs              4198767
;  :num-checks              153
;  :propagations            57
;  :quant-instantiations    34
;  :rlimit-count            157712)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               697
;  :arith-add-rows          4
;  :arith-assert-diseq      22
;  :arith-assert-lower      61
;  :arith-assert-upper      51
;  :arith-conflicts         8
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               125
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             668
;  :mk-clause               78
;  :num-allocs              4198767
;  :num-checks              154
;  :propagations            57
;  :quant-instantiations    35
;  :rlimit-count            158320)
(push) ; 4
(assert (not (< $Perm.No $k@137@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               697
;  :arith-add-rows          4
;  :arith-assert-diseq      22
;  :arith-assert-lower      61
;  :arith-assert-upper      51
;  :arith-conflicts         8
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               126
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             668
;  :mk-clause               78
;  :num-allocs              4198767
;  :num-checks              155
;  :propagations            57
;  :quant-instantiations    35
;  :rlimit-count            158368)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               702
;  :arith-add-rows          4
;  :arith-assert-diseq      22
;  :arith-assert-lower      61
;  :arith-assert-upper      51
;  :arith-conflicts         8
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             669
;  :mk-clause               78
;  :num-allocs              4350390
;  :num-checks              156
;  :propagations            57
;  :quant-instantiations    35
;  :rlimit-count            158875)
(push) ; 4
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               702
;  :arith-add-rows          4
;  :arith-assert-diseq      22
;  :arith-assert-lower      61
;  :arith-assert-upper      51
;  :arith-conflicts         8
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               128
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             669
;  :mk-clause               78
;  :num-allocs              4350390
;  :num-checks              157
;  :propagations            57
;  :quant-instantiations    35
;  :rlimit-count            158923)
(declare-const $k@138@08 $Perm)
(assert ($Perm.isReadVar $k@138@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@138@08 $Perm.No) (< $Perm.No $k@138@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               702
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      52
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               129
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             673
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              158
;  :propagations            58
;  :quant-instantiations    35
;  :rlimit-count            159121)
(assert (<= $Perm.No $k@138@08))
(assert (<= $k@138@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@138@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn.Rng_m == diz.CASR_m
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               708
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             676
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              159
;  :propagations            58
;  :quant-instantiations    35
;  :rlimit-count            159724)
(push) ; 4
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               708
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               131
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             676
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              160
;  :propagations            58
;  :quant-instantiations    35
;  :rlimit-count            159772)
(push) ; 4
(assert (not (< $Perm.No $k@138@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               708
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             676
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              161
;  :propagations            58
;  :quant-instantiations    35
;  :rlimit-count            159820)
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               708
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             676
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              162
;  :propagations            58
;  :quant-instantiations    35
;  :rlimit-count            159868)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_casr == diz
(push) ; 4
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             679
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              163
;  :propagations            58
;  :quant-instantiations    36
;  :rlimit-count            160451)
(push) ; 4
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             679
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              164
;  :propagations            58
;  :quant-instantiations    36
;  :rlimit-count            160499)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
  diz@47@08))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[0] != -2
; [eval] diz.CASR_m.Main_process_state[0] != -1
; [eval] diz.CASR_m.Main_process_state[0]
(push) ; 5
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               715
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               136
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             680
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              165
;  :propagations            58
;  :quant-instantiations    36
;  :rlimit-count            160815)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               715
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               136
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             680
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              166
;  :propagations            58
;  :quant-instantiations    36
;  :rlimit-count            160830)
; [eval] -1
(push) ; 5
; [then-branch: 8 | First:(Second:(Second:(Second:($t@131@08))))[0] != -1 | live]
; [else-branch: 8 | First:(Second:(Second:(Second:($t@131@08))))[0] == -1 | live]
(push) ; 6
; [then-branch: 8 | First:(Second:(Second:(Second:($t@131@08))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
      0)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 8 | First:(Second:(Second:(Second:($t@131@08))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    0)
  (- 0 1)))
; [eval] diz.CASR_m.Main_event_state[0] != -2
; [eval] diz.CASR_m.Main_event_state[0]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               716
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             681
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              167
;  :propagations            58
;  :quant-instantiations    36
;  :rlimit-count            161025)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               716
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             681
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              168
;  :propagations            58
;  :quant-instantiations    36
;  :rlimit-count            161040)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [eval] !(diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[0] != -2)
; [eval] diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[0] != -2
; [eval] diz.CASR_m.Main_process_state[0] != -1
; [eval] diz.CASR_m.Main_process_state[0]
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               716
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             681
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              169
;  :propagations            58
;  :quant-instantiations    36
;  :rlimit-count            161093)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               716
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             681
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              170
;  :propagations            58
;  :quant-instantiations    36
;  :rlimit-count            161108)
; [eval] -1
(push) ; 5
; [then-branch: 9 | First:(Second:(Second:(Second:($t@131@08))))[0] != -1 | live]
; [else-branch: 9 | First:(Second:(Second:(Second:($t@131@08))))[0] == -1 | live]
(push) ; 6
; [then-branch: 9 | First:(Second:(Second:(Second:($t@131@08))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
      0)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 9 | First:(Second:(Second:(Second:($t@131@08))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    0)
  (- 0 1)))
; [eval] diz.CASR_m.Main_event_state[0] != -2
; [eval] diz.CASR_m.Main_event_state[0]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               717
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             682
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              171
;  :propagations            58
;  :quant-instantiations    36
;  :rlimit-count            161299)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               717
;  :arith-add-rows          4
;  :arith-assert-diseq      23
;  :arith-assert-lower      63
;  :arith-assert-upper      53
;  :arith-conflicts         8
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              30
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             682
;  :mk-clause               80
;  :num-allocs              4350390
;  :num-checks              172
;  :propagations            58
;  :quant-instantiations    36
;  :rlimit-count            161314)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(declare-const $k@139@08 $Perm)
(assert ($Perm.isReadVar $k@139@08 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@139@08 $Perm.No) (< $Perm.No $k@139@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               717
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      65
;  :arith-assert-upper      54
;  :arith-conflicts         8
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             686
;  :mk-clause               82
;  :num-allocs              4350390
;  :num-checks              173
;  :propagations            59
;  :quant-instantiations    36
;  :rlimit-count            161517)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@50@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               717
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      65
;  :arith-assert-upper      54
;  :arith-conflicts         8
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         12
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             686
;  :mk-clause               82
;  :num-allocs              4350390
;  :num-checks              174
;  :propagations            59
;  :quant-instantiations    36
;  :rlimit-count            161528)
(assert (< $k@139@08 $k@50@08))
(assert (<= $Perm.No (- $k@50@08 $k@139@08)))
(assert (<= (- $k@50@08 $k@139@08) $Perm.Write))
(assert (implies (< $Perm.No (- $k@50@08 $k@139@08)) (not (= diz@47@08 $Ref.null))))
; [eval] diz.CASR_m != null
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               717
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      67
;  :arith-assert-upper      55
;  :arith-conflicts         8
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               141
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             689
;  :mk-clause               82
;  :num-allocs              4350390
;  :num-checks              175
;  :propagations            59
;  :quant-instantiations    36
;  :rlimit-count            161742)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               717
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      67
;  :arith-assert-upper      55
;  :arith-conflicts         8
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             689
;  :mk-clause               82
;  :num-allocs              4350390
;  :num-checks              176
;  :propagations            59
;  :quant-instantiations    36
;  :rlimit-count            161790)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               717
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      67
;  :arith-assert-upper      55
;  :arith-conflicts         8
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             689
;  :mk-clause               82
;  :num-allocs              4350390
;  :num-checks              177
;  :propagations            59
;  :quant-instantiations    36
;  :rlimit-count            161838)
; [eval] |diz.CASR_m.Main_process_state| == 3
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               717
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      67
;  :arith-assert-upper      55
;  :arith-conflicts         8
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             689
;  :mk-clause               82
;  :num-allocs              4350390
;  :num-checks              178
;  :propagations            59
;  :quant-instantiations    36
;  :rlimit-count            161886)
(set-option :timeout 0)
(push) ; 4
(assert (not (= (Seq_length __flatten_10__42@127@08) 3)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               717
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      67
;  :arith-assert-upper      55
;  :arith-conflicts         8
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             692
;  :mk-clause               82
;  :num-allocs              4350390
;  :num-checks              179
;  :propagations            59
;  :quant-instantiations    36
;  :rlimit-count            161960)
(assert (= (Seq_length __flatten_10__42@127@08) 3))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               718
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      68
;  :arith-assert-upper      56
;  :arith-conflicts         8
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             695
;  :mk-clause               82
;  :num-allocs              4350390
;  :num-checks              180
;  :propagations            59
;  :quant-instantiations    36
;  :rlimit-count            162059)
; [eval] |diz.CASR_m.Main_event_state| == 6
; [eval] |diz.CASR_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               718
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      68
;  :arith-assert-upper      56
;  :arith-conflicts         8
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               147
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             695
;  :mk-clause               82
;  :num-allocs              4350390
;  :num-checks              181
;  :propagations            59
;  :quant-instantiations    36
;  :rlimit-count            162107)
(set-option :timeout 0)
(push) ; 4
(assert (not (= (Seq_length __flatten_13__45@130@08) 6)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               718
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      68
;  :arith-assert-upper      56
;  :arith-conflicts         8
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               148
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             698
;  :mk-clause               82
;  :num-allocs              4350390
;  :num-checks              182
;  :propagations            59
;  :quant-instantiations    36
;  :rlimit-count            162181)
(assert (= (Seq_length __flatten_13__45@130@08) 6))
; [eval] (forall i__47: Int :: { diz.CASR_m.Main_process_state[i__47] } 0 <= i__47 && i__47 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__47] == -1 || 0 <= diz.CASR_m.Main_process_state[i__47] && diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|)
(declare-const i__47@140@08 Int)
(push) ; 4
; [eval] 0 <= i__47 && i__47 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__47] == -1 || 0 <= diz.CASR_m.Main_process_state[i__47] && diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= i__47 && i__47 < |diz.CASR_m.Main_process_state|
; [eval] 0 <= i__47
(push) ; 5
; [then-branch: 10 | 0 <= i__47@140@08 | live]
; [else-branch: 10 | !(0 <= i__47@140@08) | live]
(push) ; 6
; [then-branch: 10 | 0 <= i__47@140@08]
(assert (<= 0 i__47@140@08))
; [eval] i__47 < |diz.CASR_m.Main_process_state|
; [eval] |diz.CASR_m.Main_process_state|
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      70
;  :arith-assert-upper      57
;  :arith-conflicts         8
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               149
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             702
;  :mk-clause               82
;  :num-allocs              4350390
;  :num-checks              183
;  :propagations            59
;  :quant-instantiations    36
;  :rlimit-count            162332)
(pop) ; 6
(push) ; 6
; [else-branch: 10 | !(0 <= i__47@140@08)]
(assert (not (<= 0 i__47@140@08)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 11 | i__47@140@08 < |__flatten_10__42@127@08| && 0 <= i__47@140@08 | live]
; [else-branch: 11 | !(i__47@140@08 < |__flatten_10__42@127@08| && 0 <= i__47@140@08) | live]
(push) ; 6
; [then-branch: 11 | i__47@140@08 < |__flatten_10__42@127@08| && 0 <= i__47@140@08]
(assert (and (< i__47@140@08 (Seq_length __flatten_10__42@127@08)) (<= 0 i__47@140@08)))
; [eval] diz.CASR_m.Main_process_state[i__47] == -1 || 0 <= diz.CASR_m.Main_process_state[i__47] && diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__47] == -1
; [eval] diz.CASR_m.Main_process_state[i__47]
(push) ; 7
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      71
;  :arith-assert-upper      58
;  :arith-conflicts         8
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             704
;  :mk-clause               82
;  :num-allocs              4350390
;  :num-checks              184
;  :propagations            59
;  :quant-instantiations    36
;  :rlimit-count            162489)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__47@140@08 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      71
;  :arith-assert-upper      58
;  :arith-conflicts         8
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             704
;  :mk-clause               82
;  :num-allocs              4350390
;  :num-checks              185
;  :propagations            59
;  :quant-instantiations    36
;  :rlimit-count            162498)
; [eval] -1
(push) ; 7
; [then-branch: 12 | __flatten_10__42@127@08[i__47@140@08] == -1 | live]
; [else-branch: 12 | __flatten_10__42@127@08[i__47@140@08] != -1 | live]
(push) ; 8
; [then-branch: 12 | __flatten_10__42@127@08[i__47@140@08] == -1]
(assert (= (Seq_index __flatten_10__42@127@08 i__47@140@08) (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 12 | __flatten_10__42@127@08[i__47@140@08] != -1]
(assert (not (= (Seq_index __flatten_10__42@127@08 i__47@140@08) (- 0 1))))
; [eval] 0 <= diz.CASR_m.Main_process_state[i__47] && diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= diz.CASR_m.Main_process_state[i__47]
; [eval] diz.CASR_m.Main_process_state[i__47]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               720
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      71
;  :arith-assert-upper      58
;  :arith-conflicts         8
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               151
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             711
;  :mk-clause               90
;  :num-allocs              4350390
;  :num-checks              186
;  :propagations            59
;  :quant-instantiations    37
;  :rlimit-count            162700)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__47@140@08 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               720
;  :arith-add-rows          4
;  :arith-assert-diseq      24
;  :arith-assert-lower      71
;  :arith-assert-upper      58
;  :arith-conflicts         8
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               151
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             711
;  :mk-clause               90
;  :num-allocs              4350390
;  :num-checks              187
;  :propagations            59
;  :quant-instantiations    37
;  :rlimit-count            162709)
(push) ; 9
; [then-branch: 13 | 0 <= __flatten_10__42@127@08[i__47@140@08] | live]
; [else-branch: 13 | !(0 <= __flatten_10__42@127@08[i__47@140@08]) | live]
(push) ; 10
; [then-branch: 13 | 0 <= __flatten_10__42@127@08[i__47@140@08]]
(assert (<= 0 (Seq_index __flatten_10__42@127@08 i__47@140@08)))
; [eval] diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__47]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               720
;  :arith-add-rows          4
;  :arith-assert-diseq      25
;  :arith-assert-lower      74
;  :arith-assert-upper      58
;  :arith-conflicts         8
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             714
;  :mk-clause               91
;  :num-allocs              4350390
;  :num-checks              188
;  :propagations            59
;  :quant-instantiations    37
;  :rlimit-count            162821)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__47@140@08 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               720
;  :arith-add-rows          4
;  :arith-assert-diseq      25
;  :arith-assert-lower      74
;  :arith-assert-upper      58
;  :arith-conflicts         8
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             714
;  :mk-clause               91
;  :num-allocs              4350390
;  :num-checks              189
;  :propagations            59
;  :quant-instantiations    37
;  :rlimit-count            162830)
; [eval] |diz.CASR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               720
;  :arith-add-rows          4
;  :arith-assert-diseq      25
;  :arith-assert-lower      74
;  :arith-assert-upper      58
;  :arith-conflicts         8
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               153
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               62
;  :del-clause              42
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             714
;  :mk-clause               91
;  :num-allocs              4350390
;  :num-checks              190
;  :propagations            59
;  :quant-instantiations    37
;  :rlimit-count            162878)
(pop) ; 10
(push) ; 10
; [else-branch: 13 | !(0 <= __flatten_10__42@127@08[i__47@140@08])]
(assert (not (<= 0 (Seq_index __flatten_10__42@127@08 i__47@140@08))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 11 | !(i__47@140@08 < |__flatten_10__42@127@08| && 0 <= i__47@140@08)]
(assert (not
  (and (< i__47@140@08 (Seq_length __flatten_10__42@127@08)) (<= 0 i__47@140@08))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__47@140@08 Int)) (!
  (implies
    (and
      (< i__47@140@08 (Seq_length __flatten_10__42@127@08))
      (<= 0 i__47@140@08))
    (or
      (= (Seq_index __flatten_10__42@127@08 i__47@140@08) (- 0 1))
      (and
        (<
          (Seq_index __flatten_10__42@127@08 i__47@140@08)
          (Seq_length __flatten_13__45@130@08))
        (<= 0 (Seq_index __flatten_10__42@127@08 i__47@140@08)))))
  :pattern ((Seq_index __flatten_10__42@127@08 i__47@140@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      31
;  :arith-assert-lower      88
;  :arith-assert-upper      69
;  :arith-conflicts         11
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         14
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             757
;  :mk-clause               154
;  :num-allocs              4350390
;  :num-checks              191
;  :propagations            89
;  :quant-instantiations    41
;  :rlimit-count            163569)
(assert (forall ((i__47@140@08 Int)) (!
  (implies
    (and
      (< i__47@140@08 (Seq_length __flatten_10__42@127@08))
      (<= 0 i__47@140@08))
    (or
      (= (Seq_index __flatten_10__42@127@08 i__47@140@08) (- 0 1))
      (and
        (<
          (Seq_index __flatten_10__42@127@08 i__47@140@08)
          (Seq_length __flatten_13__45@130@08))
        (<= 0 (Seq_index __flatten_10__42@127@08 i__47@140@08)))))
  :pattern ((Seq_index __flatten_10__42@127@08 i__47@140@08))
  :qid |prog.l<no position>|)))
(declare-const $k@141@08 $Perm)
(assert ($Perm.isReadVar $k@141@08 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      90
;  :arith-assert-upper      70
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             762
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              192
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164038)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@141@08 $Perm.No) (< $Perm.No $k@141@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      90
;  :arith-assert-upper      70
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             762
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              193
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164088)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@118@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      90
;  :arith-assert-upper      70
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             762
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              194
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164099)
(assert (< $k@141@08 $k@118@08))
(assert (<= $Perm.No (- $k@118@08 $k@141@08)))
(assert (<= (- $k@118@08 $k@141@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@118@08 $k@141@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn != null
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              195
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164313)
(push) ; 4
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              196
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164361)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               164
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              197
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164409)
(push) ; 4
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              198
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164457)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              199
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164505)
(push) ; 4
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              200
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164553)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              201
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164601)
(push) ; 4
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              202
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164649)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               170
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              203
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164697)
(push) ; 4
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              204
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164745)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              205
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164793)
(push) ; 4
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              206
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164841)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              207
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164889)
(push) ; 4
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              208
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164937)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              209
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            164985)
(push) ; 4
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              210
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            165033)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              211
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            165081)
(push) ; 4
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               179
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              212
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            165129)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              213
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            165177)
(push) ; 4
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               181
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              214
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            165225)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              215
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            165273)
(push) ; 4
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      92
;  :arith-assert-upper      71
;  :arith-conflicts         11
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             765
;  :mk-clause               156
;  :num-allocs              4350390
;  :num-checks              216
;  :propagations            90
;  :quant-instantiations    41
;  :rlimit-count            165321)
(declare-const $k@142@08 $Perm)
(assert ($Perm.isReadVar $k@142@08 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      94
;  :arith-assert-upper      72
;  :arith-conflicts         11
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               184
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             769
;  :mk-clause               158
;  :num-allocs              4350390
;  :num-checks              217
;  :propagations            91
;  :quant-instantiations    41
;  :rlimit-count            165517)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@142@08 $Perm.No) (< $Perm.No $k@142@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      94
;  :arith-assert-upper      72
;  :arith-conflicts         11
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              114
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             769
;  :mk-clause               158
;  :num-allocs              4350390
;  :num-checks              218
;  :propagations            91
;  :quant-instantiations    41
;  :rlimit-count            165567)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@51@08 $k@119@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      94
;  :arith-assert-upper      73
;  :arith-conflicts         12
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         14
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               186
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             771
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              219
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            165627)
(assert (< $k@142@08 (+ $k@51@08 $k@119@08)))
(assert (<= $Perm.No (- (+ $k@51@08 $k@119@08) $k@142@08)))
(assert (<= (- (+ $k@51@08 $k@119@08) $k@142@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@51@08 $k@119@08) $k@142@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn_casr != null
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      74
;  :arith-conflicts         12
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         14
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               187
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             774
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              220
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            165850)
(push) ; 4
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      75
;  :arith-conflicts         13
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         15
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             775
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              221
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            165910)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      75
;  :arith-conflicts         13
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         15
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               189
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             775
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              222
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            165958)
(push) ; 4
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      76
;  :arith-conflicts         14
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         16
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               190
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             776
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              223
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            166018)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      76
;  :arith-conflicts         14
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         16
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             776
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              224
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            166066)
(push) ; 4
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         17
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               192
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             777
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              225
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            166126)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         17
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             777
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              226
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            166174)
(push) ; 4
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      78
;  :arith-conflicts         16
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         18
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               194
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             778
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              227
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            166234)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      78
;  :arith-conflicts         16
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         18
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             778
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              228
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            166282)
(push) ; 4
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      79
;  :arith-conflicts         17
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         19
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               196
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             779
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              229
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            166342)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      79
;  :arith-conflicts         17
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         19
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               197
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             779
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              230
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            166390)
(push) ; 4
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      80
;  :arith-conflicts         18
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         20
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               198
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             780
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              231
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            166450)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      80
;  :arith-conflicts         18
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         20
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             780
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              232
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            166498)
(push) ; 4
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      81
;  :arith-conflicts         19
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         21
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               200
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             781
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              233
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            166558)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      81
;  :arith-conflicts         19
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         21
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               201
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             781
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              234
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            166606)
(push) ; 4
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      96
;  :arith-assert-upper      82
;  :arith-conflicts         20
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         22
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             782
;  :mk-clause               160
;  :num-allocs              4350390
;  :num-checks              235
;  :propagations            92
;  :quant-instantiations    41
;  :rlimit-count            166666)
(declare-const $k@143@08 $Perm)
(assert ($Perm.isReadVar $k@143@08 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      98
;  :arith-assert-upper      83
;  :arith-conflicts         20
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         22
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             786
;  :mk-clause               162
;  :num-allocs              4350390
;  :num-checks              236
;  :propagations            93
;  :quant-instantiations    41
;  :rlimit-count            166863)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@143@08 $Perm.No) (< $Perm.No $k@143@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      98
;  :arith-assert-upper      83
;  :arith-conflicts         20
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         22
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             786
;  :mk-clause               162
;  :num-allocs              4350390
;  :num-checks              237
;  :propagations            93
;  :quant-instantiations    41
;  :rlimit-count            166913)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@121@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      98
;  :arith-assert-upper      83
;  :arith-conflicts         20
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         22
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             786
;  :mk-clause               162
;  :num-allocs              4350390
;  :num-checks              238
;  :propagations            93
;  :quant-instantiations    41
;  :rlimit-count            166924)
(assert (< $k@143@08 $k@121@08))
(assert (<= $Perm.No (- $k@121@08 $k@143@08)))
(assert (<= (- $k@121@08 $k@143@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@121@08 $k@143@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn_lfsr != null
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      100
;  :arith-assert-upper      84
;  :arith-conflicts         20
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         22
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             789
;  :mk-clause               162
;  :num-allocs              4350390
;  :num-checks              239
;  :propagations            93
;  :quant-instantiations    41
;  :rlimit-count            167138)
(push) ; 4
(assert (not (< $Perm.No $k@121@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      100
;  :arith-assert-upper      84
;  :arith-conflicts         20
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         22
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               206
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             789
;  :mk-clause               162
;  :num-allocs              4350390
;  :num-checks              240
;  :propagations            93
;  :quant-instantiations    41
;  :rlimit-count            167186)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      100
;  :arith-assert-upper      84
;  :arith-conflicts         20
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         22
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             789
;  :mk-clause               162
;  :num-allocs              4350390
;  :num-checks              241
;  :propagations            93
;  :quant-instantiations    41
;  :rlimit-count            167234)
(push) ; 4
(assert (not (< $Perm.No $k@121@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      100
;  :arith-assert-upper      84
;  :arith-conflicts         20
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         22
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               208
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             789
;  :mk-clause               162
;  :num-allocs              4350390
;  :num-checks              242
;  :propagations            93
;  :quant-instantiations    41
;  :rlimit-count            167282)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      100
;  :arith-assert-upper      84
;  :arith-conflicts         20
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         22
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             789
;  :mk-clause               162
;  :num-allocs              4350390
;  :num-checks              243
;  :propagations            93
;  :quant-instantiations    41
;  :rlimit-count            167330)
(push) ; 4
(assert (not (< $Perm.No $k@121@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      100
;  :arith-assert-upper      84
;  :arith-conflicts         20
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         22
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             789
;  :mk-clause               162
;  :num-allocs              4350390
;  :num-checks              244
;  :propagations            93
;  :quant-instantiations    41
;  :rlimit-count            167378)
(declare-const $k@144@08 $Perm)
(assert ($Perm.isReadVar $k@144@08 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      35
;  :arith-assert-lower      102
;  :arith-assert-upper      85
;  :arith-conflicts         20
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         22
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               211
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             793
;  :mk-clause               164
;  :num-allocs              4350390
;  :num-checks              245
;  :propagations            94
;  :quant-instantiations    41
;  :rlimit-count            167574)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@144@08 $Perm.No) (< $Perm.No $k@144@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      35
;  :arith-assert-lower      102
;  :arith-assert-upper      85
;  :arith-conflicts         20
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         22
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             793
;  :mk-clause               164
;  :num-allocs              4350390
;  :num-checks              246
;  :propagations            94
;  :quant-instantiations    41
;  :rlimit-count            167624)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@122@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      35
;  :arith-assert-lower      102
;  :arith-assert-upper      85
;  :arith-conflicts         20
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         22
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             793
;  :mk-clause               164
;  :num-allocs              4350390
;  :num-checks              247
;  :propagations            94
;  :quant-instantiations    41
;  :rlimit-count            167635)
(assert (< $k@144@08 $k@122@08))
(assert (<= $Perm.No (- $k@122@08 $k@144@08)))
(assert (<= (- $k@122@08 $k@144@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@122@08 $k@144@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn_combinate != null
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      35
;  :arith-assert-lower      104
;  :arith-assert-upper      86
;  :arith-conflicts         20
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               213
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             796
;  :mk-clause               164
;  :num-allocs              4350390
;  :num-checks              248
;  :propagations            94
;  :quant-instantiations    41
;  :rlimit-count            167849)
(push) ; 4
(assert (not (< $Perm.No $k@122@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      35
;  :arith-assert-lower      104
;  :arith-assert-upper      86
;  :arith-conflicts         20
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               214
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             796
;  :mk-clause               164
;  :num-allocs              4350390
;  :num-checks              249
;  :propagations            94
;  :quant-instantiations    41
;  :rlimit-count            167897)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      35
;  :arith-assert-lower      104
;  :arith-assert-upper      86
;  :arith-conflicts         20
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             796
;  :mk-clause               164
;  :num-allocs              4350390
;  :num-checks              250
;  :propagations            94
;  :quant-instantiations    41
;  :rlimit-count            167945)
(push) ; 4
(assert (not (< $Perm.No $k@122@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      35
;  :arith-assert-lower      104
;  :arith-assert-upper      86
;  :arith-conflicts         20
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               216
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             796
;  :mk-clause               164
;  :num-allocs              4350390
;  :num-checks              251
;  :propagations            94
;  :quant-instantiations    41
;  :rlimit-count            167993)
(declare-const $k@145@08 $Perm)
(assert ($Perm.isReadVar $k@145@08 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      36
;  :arith-assert-lower      106
;  :arith-assert-upper      87
;  :arith-conflicts         20
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               217
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             800
;  :mk-clause               166
;  :num-allocs              4350390
;  :num-checks              252
;  :propagations            95
;  :quant-instantiations    41
;  :rlimit-count            168190)
(push) ; 4
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      36
;  :arith-assert-lower      106
;  :arith-assert-upper      87
;  :arith-conflicts         20
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             800
;  :mk-clause               166
;  :num-allocs              4350390
;  :num-checks              253
;  :propagations            95
;  :quant-instantiations    41
;  :rlimit-count            168238)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@145@08 $Perm.No) (< $Perm.No $k@145@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      36
;  :arith-assert-lower      106
;  :arith-assert-upper      87
;  :arith-conflicts         20
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             800
;  :mk-clause               166
;  :num-allocs              4350390
;  :num-checks              254
;  :propagations            95
;  :quant-instantiations    41
;  :rlimit-count            168288)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@123@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      36
;  :arith-assert-lower      106
;  :arith-assert-upper      87
;  :arith-conflicts         20
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             800
;  :mk-clause               166
;  :num-allocs              4350390
;  :num-checks              255
;  :propagations            95
;  :quant-instantiations    41
;  :rlimit-count            168299)
(assert (< $k@145@08 $k@123@08))
(assert (<= $Perm.No (- $k@123@08 $k@145@08)))
(assert (<= (- $k@123@08 $k@145@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@123@08 $k@145@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn.Rng_m == diz.CASR_m
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      36
;  :arith-assert-lower      108
;  :arith-assert-upper      88
;  :arith-conflicts         20
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               220
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             803
;  :mk-clause               166
;  :num-allocs              4350390
;  :num-checks              256
;  :propagations            95
;  :quant-instantiations    41
;  :rlimit-count            168507)
(push) ; 4
(assert (not (< $Perm.No $k@118@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      36
;  :arith-assert-lower      108
;  :arith-assert-upper      88
;  :arith-conflicts         20
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               221
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             803
;  :mk-clause               166
;  :num-allocs              4350390
;  :num-checks              257
;  :propagations            95
;  :quant-instantiations    41
;  :rlimit-count            168555)
(push) ; 4
(assert (not (< $Perm.No $k@123@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      36
;  :arith-assert-lower      108
;  :arith-assert-upper      88
;  :arith-conflicts         20
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               222
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             803
;  :mk-clause               166
;  :num-allocs              4350390
;  :num-checks              258
;  :propagations            95
;  :quant-instantiations    41
;  :rlimit-count            168603)
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      36
;  :arith-assert-lower      108
;  :arith-assert-upper      88
;  :arith-conflicts         20
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             803
;  :mk-clause               166
;  :num-allocs              4350390
;  :num-checks              259
;  :propagations            95
;  :quant-instantiations    41
;  :rlimit-count            168651)
; [eval] diz.CASR_m.Main_rn_casr == diz
(push) ; 4
(assert (not (< $Perm.No $k@50@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      36
;  :arith-assert-lower      108
;  :arith-assert-upper      88
;  :arith-conflicts         20
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               224
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             803
;  :mk-clause               166
;  :num-allocs              4350390
;  :num-checks              260
;  :propagations            95
;  :quant-instantiations    41
;  :rlimit-count            168699)
(push) ; 4
(assert (not (< $Perm.No (+ $k@51@08 $k@119@08))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      36
;  :arith-assert-lower      108
;  :arith-assert-upper      89
;  :arith-conflicts         21
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         23
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             804
;  :mk-clause               166
;  :num-allocs              4350390
;  :num-checks              261
;  :propagations            95
;  :quant-instantiations    41
;  :rlimit-count            168759)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@120@08 diz@47@08)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               741
;  :arith-add-rows          4
;  :arith-assert-diseq      36
;  :arith-assert-lower      108
;  :arith-assert-upper      89
;  :arith-conflicts         21
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         23
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 66
;  :datatype-occurs-check   41
;  :datatype-splits         57
;  :decisions               67
;  :del-clause              116
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             804
;  :mk-clause               166
;  :num-allocs              4350390
;  :num-checks              262
;  :propagations            95
;  :quant-instantiations    41
;  :rlimit-count            168815)
(assert (= $t@120@08 diz@47@08))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@132@08 $Perm.Write))
(assert ($Perm.isReadVar $k@134@08 $Perm.Write))
(assert ($Perm.isReadVar $k@135@08 $Perm.Write))
(assert ($Perm.isReadVar $k@136@08 $Perm.Write))
(assert ($Perm.isReadVar $k@137@08 $Perm.Write))
(assert ($Perm.isReadVar $k@138@08 $Perm.Write))
(assert (= $t@131@08 ($Snap.combine ($Snap.first $t@131@08) ($Snap.second $t@131@08))))
(assert (<= $Perm.No $k@132@08))
(assert (<= $k@132@08 $Perm.Write))
(assert (implies (< $Perm.No $k@132@08) (not (= diz@47@08 $Ref.null))))
(assert (=
  ($Snap.second $t@131@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@131@08))
    ($Snap.second ($Snap.second $t@131@08)))))
(assert (= ($Snap.first ($Snap.second $t@131@08)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@131@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@131@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@131@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))
  $Snap.unit))
(assert (forall ((i__47@133@08 Int)) (!
  (implies
    (and
      (<
        i__47@133@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
      (<= 0 i__47@133@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
          i__47@133@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
            i__47@133@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
            i__47@133@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    i__47@133@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))
(assert (<= $Perm.No $k@134@08))
(assert (<= $k@134@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@134@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))
(assert (<= $Perm.No $k@135@08))
(assert (<= $k@135@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@135@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@136@08))
(assert (<= $k@136@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@136@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@137@08))
(assert (<= $k@137@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@137@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@138@08))
(assert (<= $k@138@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@138@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
  diz@47@08))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[0] != -2
; [eval] diz.CASR_m.Main_process_state[0] != -1
; [eval] diz.CASR_m.Main_process_state[0]
(push) ; 5
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1373
;  :arith-add-rows          4
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      103
;  :arith-conflicts         21
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         23
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 208
;  :datatype-occurs-check   59
;  :datatype-splits         169
;  :decisions               205
;  :del-clause              130
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1017
;  :mk-clause               181
;  :num-allocs              4681399
;  :num-checks              265
;  :propagations            104
;  :quant-instantiations    51
;  :rlimit-count            177584)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1373
;  :arith-add-rows          4
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      103
;  :arith-conflicts         21
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         23
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 208
;  :datatype-occurs-check   59
;  :datatype-splits         169
;  :decisions               205
;  :del-clause              130
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1017
;  :mk-clause               181
;  :num-allocs              4681399
;  :num-checks              266
;  :propagations            104
;  :quant-instantiations    51
;  :rlimit-count            177599)
; [eval] -1
(push) ; 5
; [then-branch: 14 | First:(Second:(Second:(Second:($t@131@08))))[0] != -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:($t@131@08))))[0] == -1 | live]
(push) ; 6
; [then-branch: 14 | First:(Second:(Second:(Second:($t@131@08))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
      0)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 14 | First:(Second:(Second:(Second:($t@131@08))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    0)
  (- 0 1)))
; [eval] diz.CASR_m.Main_event_state[0] != -2
; [eval] diz.CASR_m.Main_event_state[0]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1374
;  :arith-add-rows          4
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      103
;  :arith-conflicts         21
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         23
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 208
;  :datatype-occurs-check   59
;  :datatype-splits         169
;  :decisions               205
;  :del-clause              130
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1018
;  :mk-clause               181
;  :num-allocs              4681399
;  :num-checks              267
;  :propagations            104
;  :quant-instantiations    51
;  :rlimit-count            177790)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1374
;  :arith-add-rows          4
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      103
;  :arith-conflicts         21
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         23
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 208
;  :datatype-occurs-check   59
;  :datatype-splits         169
;  :decisions               205
;  :del-clause              130
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1018
;  :mk-clause               181
;  :num-allocs              4681399
;  :num-checks              268
;  :propagations            104
;  :quant-instantiations    51
;  :rlimit-count            177805)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
          0)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1555
;  :arith-add-rows          4
;  :arith-assert-diseq      44
;  :arith-assert-lower      131
;  :arith-assert-upper      106
;  :arith-conflicts         21
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         24
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    140
;  :datatype-constructor-ax 266
;  :datatype-occurs-check   68
;  :datatype-splits         225
;  :decisions               262
;  :del-clause              148
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1089
;  :mk-clause               199
;  :num-allocs              4681399
;  :num-checks              269
;  :propagations            113
;  :quant-instantiations    53
;  :rlimit-count            179446
;  :time                    0.00)
(push) ; 5
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
        0)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      44
;  :arith-assert-lower      131
;  :arith-assert-upper      106
;  :arith-conflicts         21
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         24
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              148
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1146
;  :mk-clause               199
;  :num-allocs              4681399
;  :num-checks              270
;  :propagations            115
;  :quant-instantiations    53
;  :rlimit-count            180918
;  :time                    0.00)
; [then-branch: 15 | First:(Second:(Second:(Second:($t@131@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@131@08))))))[0] != -2 | live]
; [else-branch: 15 | !(First:(Second:(Second:(Second:($t@131@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@131@08))))))[0] != -2) | live]
(push) ; 5
; [then-branch: 15 | First:(Second:(Second:(Second:($t@131@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@131@08))))))[0] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
        0)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      44
;  :arith-assert-lower      131
;  :arith-assert-upper      106
;  :arith-conflicts         21
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         24
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              148
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1148
;  :mk-clause               200
;  :num-allocs              4681399
;  :num-checks              271
;  :propagations            115
;  :quant-instantiations    53
;  :rlimit-count            181196)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      44
;  :arith-assert-lower      131
;  :arith-assert-upper      106
;  :arith-conflicts         21
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         24
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              148
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1148
;  :mk-clause               200
;  :num-allocs              4681399
;  :num-checks              272
;  :propagations            115
;  :quant-instantiations    53
;  :rlimit-count            181244)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@146@08 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 16 | 0 <= i@146@08 | live]
; [else-branch: 16 | !(0 <= i@146@08) | live]
(push) ; 8
; [then-branch: 16 | 0 <= i@146@08]
(assert (<= 0 i@146@08))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 16 | !(0 <= i@146@08)]
(assert (not (<= 0 i@146@08)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 17 | i@146@08 < |First:(Second:(Second:(Second:($t@131@08))))| && 0 <= i@146@08 | live]
; [else-branch: 17 | !(i@146@08 < |First:(Second:(Second:(Second:($t@131@08))))| && 0 <= i@146@08) | live]
(push) ; 8
; [then-branch: 17 | i@146@08 < |First:(Second:(Second:(Second:($t@131@08))))| && 0 <= i@146@08]
(assert (and
  (<
    i@146@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
  (<= 0 i@146@08)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@146@08 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      44
;  :arith-assert-lower      132
;  :arith-assert-upper      107
;  :arith-conflicts         21
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         24
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              148
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1150
;  :mk-clause               200
;  :num-allocs              4681399
;  :num-checks              273
;  :propagations            115
;  :quant-instantiations    53
;  :rlimit-count            181380)
; [eval] -1
(push) ; 9
; [then-branch: 18 | First:(Second:(Second:(Second:($t@131@08))))[i@146@08] == -1 | live]
; [else-branch: 18 | First:(Second:(Second:(Second:($t@131@08))))[i@146@08] != -1 | live]
(push) ; 10
; [then-branch: 18 | First:(Second:(Second:(Second:($t@131@08))))[i@146@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    i@146@08)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 18 | First:(Second:(Second:(Second:($t@131@08))))[i@146@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
      i@146@08)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@146@08 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      45
;  :arith-assert-lower      135
;  :arith-assert-upper      108
;  :arith-conflicts         21
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         24
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              148
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1156
;  :mk-clause               204
;  :num-allocs              4681399
;  :num-checks              274
;  :propagations            117
;  :quant-instantiations    54
;  :rlimit-count            181612)
(push) ; 11
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@131@08))))[i@146@08] | live]
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@131@08))))[i@146@08]) | live]
(push) ; 12
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@131@08))))[i@146@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    i@146@08)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@146@08 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      45
;  :arith-assert-lower      135
;  :arith-assert-upper      108
;  :arith-conflicts         21
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         24
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              148
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1156
;  :mk-clause               204
;  :num-allocs              4681399
;  :num-checks              275
;  :propagations            117
;  :quant-instantiations    54
;  :rlimit-count            181726)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@131@08))))[i@146@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
      i@146@08))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 17 | !(i@146@08 < |First:(Second:(Second:(Second:($t@131@08))))| && 0 <= i@146@08)]
(assert (not
  (and
    (<
      i@146@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
    (<= 0 i@146@08))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@146@08 Int)) (!
  (implies
    (and
      (<
        i@146@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
      (<= 0 i@146@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
          i@146@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
            i@146@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
            i@146@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    i@146@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      47
;  :arith-assert-lower      136
;  :arith-assert-upper      109
;  :arith-conflicts         21
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         24
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1164
;  :mk-clause               218
;  :num-allocs              4681399
;  :num-checks              276
;  :propagations            119
;  :quant-instantiations    55
;  :rlimit-count            182172)
(assert (forall ((i@146@08 Int)) (!
  (implies
    (and
      (<
        i@146@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
      (<= 0 i@146@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
          i@146@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
            i@146@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
            i@146@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    i@146@08))
  :qid |prog.l<no position>|)))
(declare-const $k@147@08 $Perm)
(assert ($Perm.isReadVar $k@147@08 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@147@08 $Perm.No) (< $Perm.No $k@147@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      138
;  :arith-assert-upper      110
;  :arith-conflicts         21
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         24
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1169
;  :mk-clause               220
;  :num-allocs              4681399
;  :num-checks              277
;  :propagations            120
;  :quant-instantiations    55
;  :rlimit-count            182733)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@134@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      138
;  :arith-assert-upper      110
;  :arith-conflicts         21
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         24
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1169
;  :mk-clause               220
;  :num-allocs              4681399
;  :num-checks              278
;  :propagations            120
;  :quant-instantiations    55
;  :rlimit-count            182744)
(assert (< $k@147@08 $k@134@08))
(assert (<= $Perm.No (- $k@134@08 $k@147@08)))
(assert (<= (- $k@134@08 $k@147@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@134@08 $k@147@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
; [eval] diz.Main_rn != null
(push) ; 6
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      140
;  :arith-assert-upper      111
;  :arith-conflicts         21
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1172
;  :mk-clause               220
;  :num-allocs              4681399
;  :num-checks              279
;  :propagations            120
;  :quant-instantiations    55
;  :rlimit-count            182958)
(push) ; 6
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      140
;  :arith-assert-upper      111
;  :arith-conflicts         21
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1172
;  :mk-clause               220
;  :num-allocs              4681399
;  :num-checks              280
;  :propagations            120
;  :quant-instantiations    55
;  :rlimit-count            183006)
(push) ; 6
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      140
;  :arith-assert-upper      111
;  :arith-conflicts         21
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1172
;  :mk-clause               220
;  :num-allocs              4681399
;  :num-checks              281
;  :propagations            120
;  :quant-instantiations    55
;  :rlimit-count            183054)
(push) ; 6
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      140
;  :arith-assert-upper      111
;  :arith-conflicts         21
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1172
;  :mk-clause               220
;  :num-allocs              4681399
;  :num-checks              282
;  :propagations            120
;  :quant-instantiations    55
;  :rlimit-count            183102)
(push) ; 6
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      140
;  :arith-assert-upper      111
;  :arith-conflicts         21
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1172
;  :mk-clause               220
;  :num-allocs              4681399
;  :num-checks              283
;  :propagations            120
;  :quant-instantiations    55
;  :rlimit-count            183150)
(push) ; 6
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      140
;  :arith-assert-upper      111
;  :arith-conflicts         21
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               239
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1172
;  :mk-clause               220
;  :num-allocs              4681399
;  :num-checks              284
;  :propagations            120
;  :quant-instantiations    55
;  :rlimit-count            183198)
(push) ; 6
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      140
;  :arith-assert-upper      111
;  :arith-conflicts         21
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1172
;  :mk-clause               220
;  :num-allocs              4681399
;  :num-checks              285
;  :propagations            120
;  :quant-instantiations    55
;  :rlimit-count            183246)
(push) ; 6
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      140
;  :arith-assert-upper      111
;  :arith-conflicts         21
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1172
;  :mk-clause               220
;  :num-allocs              4681399
;  :num-checks              286
;  :propagations            120
;  :quant-instantiations    55
;  :rlimit-count            183294)
(push) ; 6
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      140
;  :arith-assert-upper      111
;  :arith-conflicts         21
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1172
;  :mk-clause               220
;  :num-allocs              4681399
;  :num-checks              287
;  :propagations            120
;  :quant-instantiations    55
;  :rlimit-count            183342)
(push) ; 6
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      140
;  :arith-assert-upper      111
;  :arith-conflicts         21
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1172
;  :mk-clause               220
;  :num-allocs              4681399
;  :num-checks              288
;  :propagations            120
;  :quant-instantiations    55
;  :rlimit-count            183390)
(push) ; 6
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      140
;  :arith-assert-upper      111
;  :arith-conflicts         21
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1172
;  :mk-clause               220
;  :num-allocs              4681399
;  :num-checks              289
;  :propagations            120
;  :quant-instantiations    55
;  :rlimit-count            183438)
(declare-const $k@148@08 $Perm)
(assert ($Perm.isReadVar $k@148@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@148@08 $Perm.No) (< $Perm.No $k@148@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      49
;  :arith-assert-lower      142
;  :arith-assert-upper      112
;  :arith-conflicts         21
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1176
;  :mk-clause               222
;  :num-allocs              4681399
;  :num-checks              290
;  :propagations            121
;  :quant-instantiations    55
;  :rlimit-count            183637)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@135@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      49
;  :arith-assert-lower      142
;  :arith-assert-upper      112
;  :arith-conflicts         21
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1176
;  :mk-clause               222
;  :num-allocs              4681399
;  :num-checks              291
;  :propagations            121
;  :quant-instantiations    55
;  :rlimit-count            183648)
(assert (< $k@148@08 $k@135@08))
(assert (<= $Perm.No (- $k@135@08 $k@148@08)))
(assert (<= (- $k@135@08 $k@148@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@135@08 $k@148@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
; [eval] diz.Main_rn_casr != null
(push) ; 6
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      49
;  :arith-assert-lower      144
;  :arith-assert-upper      113
;  :arith-conflicts         21
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1179
;  :mk-clause               222
;  :num-allocs              4681399
;  :num-checks              292
;  :propagations            121
;  :quant-instantiations    55
;  :rlimit-count            183856)
(push) ; 6
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      49
;  :arith-assert-lower      144
;  :arith-assert-upper      113
;  :arith-conflicts         21
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1179
;  :mk-clause               222
;  :num-allocs              4681399
;  :num-checks              293
;  :propagations            121
;  :quant-instantiations    55
;  :rlimit-count            183904)
(push) ; 6
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      49
;  :arith-assert-lower      144
;  :arith-assert-upper      113
;  :arith-conflicts         21
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1179
;  :mk-clause               222
;  :num-allocs              4681399
;  :num-checks              294
;  :propagations            121
;  :quant-instantiations    55
;  :rlimit-count            183952)
(push) ; 6
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      49
;  :arith-assert-lower      144
;  :arith-assert-upper      113
;  :arith-conflicts         21
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1179
;  :mk-clause               222
;  :num-allocs              4681399
;  :num-checks              295
;  :propagations            121
;  :quant-instantiations    55
;  :rlimit-count            184000)
(push) ; 6
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      49
;  :arith-assert-lower      144
;  :arith-assert-upper      113
;  :arith-conflicts         21
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1179
;  :mk-clause               222
;  :num-allocs              4681399
;  :num-checks              296
;  :propagations            121
;  :quant-instantiations    55
;  :rlimit-count            184048)
(push) ; 6
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      49
;  :arith-assert-lower      144
;  :arith-assert-upper      113
;  :arith-conflicts         21
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1179
;  :mk-clause               222
;  :num-allocs              4681399
;  :num-checks              297
;  :propagations            121
;  :quant-instantiations    55
;  :rlimit-count            184096)
(push) ; 6
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      49
;  :arith-assert-lower      144
;  :arith-assert-upper      113
;  :arith-conflicts         21
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1179
;  :mk-clause               222
;  :num-allocs              4681399
;  :num-checks              298
;  :propagations            121
;  :quant-instantiations    55
;  :rlimit-count            184144)
(push) ; 6
(assert (not (< $Perm.No $k@135@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      49
;  :arith-assert-lower      144
;  :arith-assert-upper      113
;  :arith-conflicts         21
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1179
;  :mk-clause               222
;  :num-allocs              4681399
;  :num-checks              299
;  :propagations            121
;  :quant-instantiations    55
;  :rlimit-count            184192)
(declare-const $k@149@08 $Perm)
(assert ($Perm.isReadVar $k@149@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@149@08 $Perm.No) (< $Perm.No $k@149@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      50
;  :arith-assert-lower      146
;  :arith-assert-upper      114
;  :arith-conflicts         21
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1183
;  :mk-clause               224
;  :num-allocs              4681399
;  :num-checks              300
;  :propagations            122
;  :quant-instantiations    55
;  :rlimit-count            184390)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@136@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      50
;  :arith-assert-lower      146
;  :arith-assert-upper      114
;  :arith-conflicts         21
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         24
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1183
;  :mk-clause               224
;  :num-allocs              4681399
;  :num-checks              301
;  :propagations            122
;  :quant-instantiations    55
;  :rlimit-count            184401)
(assert (< $k@149@08 $k@136@08))
(assert (<= $Perm.No (- $k@136@08 $k@149@08)))
(assert (<= (- $k@136@08 $k@149@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@136@08 $k@149@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
; [eval] diz.Main_rn_lfsr != null
(push) ; 6
(assert (not (< $Perm.No $k@136@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      50
;  :arith-assert-lower      148
;  :arith-assert-upper      115
;  :arith-conflicts         21
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         24
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1186
;  :mk-clause               224
;  :num-allocs              4681399
;  :num-checks              302
;  :propagations            122
;  :quant-instantiations    55
;  :rlimit-count            184615)
(push) ; 6
(assert (not (< $Perm.No $k@136@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      50
;  :arith-assert-lower      148
;  :arith-assert-upper      115
;  :arith-conflicts         21
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         24
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1186
;  :mk-clause               224
;  :num-allocs              4681399
;  :num-checks              303
;  :propagations            122
;  :quant-instantiations    55
;  :rlimit-count            184663)
(push) ; 6
(assert (not (< $Perm.No $k@136@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      50
;  :arith-assert-lower      148
;  :arith-assert-upper      115
;  :arith-conflicts         21
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         24
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               257
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1186
;  :mk-clause               224
;  :num-allocs              4681399
;  :num-checks              304
;  :propagations            122
;  :quant-instantiations    55
;  :rlimit-count            184711)
(declare-const $k@150@08 $Perm)
(assert ($Perm.isReadVar $k@150@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@150@08 $Perm.No) (< $Perm.No $k@150@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      51
;  :arith-assert-lower      150
;  :arith-assert-upper      116
;  :arith-conflicts         21
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         24
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1190
;  :mk-clause               226
;  :num-allocs              4681399
;  :num-checks              305
;  :propagations            123
;  :quant-instantiations    55
;  :rlimit-count            184910)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@137@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      51
;  :arith-assert-lower      150
;  :arith-assert-upper      116
;  :arith-conflicts         21
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         24
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1190
;  :mk-clause               226
;  :num-allocs              4681399
;  :num-checks              306
;  :propagations            123
;  :quant-instantiations    55
;  :rlimit-count            184921)
(assert (< $k@150@08 $k@137@08))
(assert (<= $Perm.No (- $k@137@08 $k@150@08)))
(assert (<= (- $k@137@08 $k@150@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@137@08 $k@150@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
; [eval] diz.Main_rn_combinate != null
(push) ; 6
(assert (not (< $Perm.No $k@137@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      51
;  :arith-assert-lower      152
;  :arith-assert-upper      117
;  :arith-conflicts         21
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         24
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               259
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1193
;  :mk-clause               226
;  :num-allocs              4681399
;  :num-checks              307
;  :propagations            123
;  :quant-instantiations    55
;  :rlimit-count            185135)
(push) ; 6
(assert (not (< $Perm.No $k@137@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      51
;  :arith-assert-lower      152
;  :arith-assert-upper      117
;  :arith-conflicts         21
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         24
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               260
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1193
;  :mk-clause               226
;  :num-allocs              4681399
;  :num-checks              308
;  :propagations            123
;  :quant-instantiations    55
;  :rlimit-count            185183)
(declare-const $k@151@08 $Perm)
(assert ($Perm.isReadVar $k@151@08 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      52
;  :arith-assert-lower      154
;  :arith-assert-upper      118
;  :arith-conflicts         21
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         24
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               261
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1197
;  :mk-clause               228
;  :num-allocs              4681399
;  :num-checks              309
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            185379)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@151@08 $Perm.No) (< $Perm.No $k@151@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      52
;  :arith-assert-lower      154
;  :arith-assert-upper      118
;  :arith-conflicts         21
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         24
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1197
;  :mk-clause               228
;  :num-allocs              4681399
;  :num-checks              310
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            185429)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@138@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      52
;  :arith-assert-lower      154
;  :arith-assert-upper      118
;  :arith-conflicts         21
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         24
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1197
;  :mk-clause               228
;  :num-allocs              4681399
;  :num-checks              311
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            185440)
(assert (< $k@151@08 $k@138@08))
(assert (<= $Perm.No (- $k@138@08 $k@151@08)))
(assert (<= (- $k@138@08 $k@151@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@138@08 $k@151@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
      $Ref.null))))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 6
(assert (not (< $Perm.No $k@134@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      52
;  :arith-assert-lower      156
;  :arith-assert-upper      119
;  :arith-conflicts         21
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         24
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               263
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1200
;  :mk-clause               228
;  :num-allocs              4681399
;  :num-checks              312
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            185654)
(push) ; 6
(assert (not (< $Perm.No $k@138@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1734
;  :arith-add-rows          4
;  :arith-assert-diseq      52
;  :arith-assert-lower      156
;  :arith-assert-upper      119
;  :arith-conflicts         21
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         24
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1200
;  :mk-clause               228
;  :num-allocs              4681399
;  :num-checks              313
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            185702)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))
                                                          ($Snap.combine
                                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              ($Snap.combine
                                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))
                                                                ($Snap.combine
                                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))
                                                                  ($Snap.combine
                                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))
                                                                    ($Snap.combine
                                                                      $Snap.unit
                                                                      ($Snap.combine
                                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))
                                                                        ($Snap.combine
                                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))))
                                                                          $Snap.unit))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) __globals@48@08))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1808
;  :arith-add-rows          4
;  :arith-assert-diseq      52
;  :arith-assert-lower      156
;  :arith-assert-upper      119
;  :arith-conflicts         21
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         24
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               265
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1201
;  :mk-clause               228
;  :num-allocs              4681399
;  :num-checks              314
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            187257)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1808
;  :arith-add-rows          4
;  :arith-assert-diseq      52
;  :arith-assert-lower      156
;  :arith-assert-upper      119
;  :arith-conflicts         21
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         24
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               266
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 324
;  :datatype-occurs-check   77
;  :datatype-splits         281
;  :decisions               318
;  :del-clause              166
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1201
;  :mk-clause               228
;  :num-allocs              4681399
;  :num-checks              315
;  :propagations            124
;  :quant-instantiations    55
;  :rlimit-count            187305)
(declare-const $t@152@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2027
;  :arith-add-rows          4
;  :arith-assert-diseq      54
;  :arith-assert-lower      163
;  :arith-assert-upper      122
;  :arith-conflicts         21
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         25
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              193
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1270
;  :mk-clause               245
;  :num-allocs              4857891
;  :num-checks              317
;  :propagations            133
;  :quant-instantiations    58
;  :rlimit-count            188833)
(assert (= $t@152@08 ($Snap.combine ($Snap.first $t@152@08) ($Snap.second $t@152@08))))
(assert (= ($Snap.first $t@152@08) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@152@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@152@08))
    ($Snap.second ($Snap.second $t@152@08)))))
(assert (= ($Snap.first ($Snap.second $t@152@08)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@152@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@152@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@152@08))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@152@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@153@08 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 20 | 0 <= i@153@08 | live]
; [else-branch: 20 | !(0 <= i@153@08) | live]
(push) ; 8
; [then-branch: 20 | 0 <= i@153@08]
(assert (<= 0 i@153@08))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 20 | !(0 <= i@153@08)]
(assert (not (<= 0 i@153@08)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 21 | i@153@08 < |First:(Second:(Second:(Second:($t@152@08))))| && 0 <= i@153@08 | live]
; [else-branch: 21 | !(i@153@08 < |First:(Second:(Second:(Second:($t@152@08))))| && 0 <= i@153@08) | live]
(push) ; 8
; [then-branch: 21 | i@153@08 < |First:(Second:(Second:(Second:($t@152@08))))| && 0 <= i@153@08]
(assert (and
  (<
    i@153@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))
  (<= 0 i@153@08)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@153@08 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2077
;  :arith-add-rows          4
;  :arith-assert-diseq      54
;  :arith-assert-lower      168
;  :arith-assert-upper      125
;  :arith-conflicts         21
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         25
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              193
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1296
;  :mk-clause               245
;  :num-allocs              4857891
;  :num-checks              318
;  :propagations            133
;  :quant-instantiations    62
;  :rlimit-count            190136)
; [eval] -1
(push) ; 9
; [then-branch: 22 | First:(Second:(Second:(Second:($t@152@08))))[i@153@08] == -1 | live]
; [else-branch: 22 | First:(Second:(Second:(Second:($t@152@08))))[i@153@08] != -1 | live]
(push) ; 10
; [then-branch: 22 | First:(Second:(Second:(Second:($t@152@08))))[i@153@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
    i@153@08)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 22 | First:(Second:(Second:(Second:($t@152@08))))[i@153@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
      i@153@08)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@153@08 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2077
;  :arith-add-rows          4
;  :arith-assert-diseq      54
;  :arith-assert-lower      168
;  :arith-assert-upper      125
;  :arith-conflicts         21
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         25
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              193
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1297
;  :mk-clause               245
;  :num-allocs              4857891
;  :num-checks              319
;  :propagations            133
;  :quant-instantiations    62
;  :rlimit-count            190311)
(push) ; 11
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@152@08))))[i@153@08] | live]
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@152@08))))[i@153@08]) | live]
(push) ; 12
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@152@08))))[i@153@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
    i@153@08)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@153@08 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2077
;  :arith-add-rows          4
;  :arith-assert-diseq      55
;  :arith-assert-lower      171
;  :arith-assert-upper      125
;  :arith-conflicts         21
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         25
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              193
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1300
;  :mk-clause               246
;  :num-allocs              4857891
;  :num-checks              320
;  :propagations            133
;  :quant-instantiations    62
;  :rlimit-count            190435)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@152@08))))[i@153@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
      i@153@08))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 21 | !(i@153@08 < |First:(Second:(Second:(Second:($t@152@08))))| && 0 <= i@153@08)]
(assert (not
  (and
    (<
      i@153@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))
    (<= 0 i@153@08))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@153@08 Int)) (!
  (implies
    (and
      (<
        i@153@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))
      (<= 0 i@153@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
          i@153@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
            i@153@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
            i@153@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
    i@153@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))
(declare-const $k@154@08 $Perm)
(assert ($Perm.isReadVar $k@154@08 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@154@08 $Perm.No) (< $Perm.No $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2082
;  :arith-add-rows          4
;  :arith-assert-diseq      56
;  :arith-assert-lower      173
;  :arith-assert-upper      126
;  :arith-conflicts         21
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         25
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               268
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1306
;  :mk-clause               248
;  :num-allocs              4857891
;  :num-checks              321
;  :propagations            134
;  :quant-instantiations    62
;  :rlimit-count            191204)
(declare-const $t@155@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@134@08 $k@147@08))
    (=
      $t@155@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))
  (implies
    (< $Perm.No $k@154@08)
    (=
      $t@155@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))
(assert (<= $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08)))
(assert (<= (+ (- $k@134@08 $k@147@08) $k@154@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))
  $Snap.unit))
; [eval] diz.Main_rn != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2092
;  :arith-add-rows          5
;  :arith-assert-diseq      56
;  :arith-assert-lower      174
;  :arith-assert-upper      128
;  :arith-conflicts         22
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         26
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               269
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1314
;  :mk-clause               248
;  :num-allocs              4857891
;  :num-checks              322
;  :propagations            134
;  :quant-instantiations    63
;  :rlimit-count            191884)
(assert (not (= $t@155@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2098
;  :arith-add-rows          5
;  :arith-assert-diseq      56
;  :arith-assert-lower      174
;  :arith-assert-upper      129
;  :arith-conflicts         23
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         27
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1317
;  :mk-clause               248
;  :num-allocs              4857891
;  :num-checks              323
;  :propagations            134
;  :quant-instantiations    63
;  :rlimit-count            192206)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2103
;  :arith-add-rows          5
;  :arith-assert-diseq      56
;  :arith-assert-lower      174
;  :arith-assert-upper      130
;  :arith-conflicts         24
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         28
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               271
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1319
;  :mk-clause               248
;  :num-allocs              4857891
;  :num-checks              324
;  :propagations            134
;  :quant-instantiations    63
;  :rlimit-count            192493)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2108
;  :arith-add-rows          5
;  :arith-assert-diseq      56
;  :arith-assert-lower      174
;  :arith-assert-upper      131
;  :arith-conflicts         25
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         29
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               272
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1321
;  :mk-clause               248
;  :num-allocs              4857891
;  :num-checks              325
;  :propagations            134
;  :quant-instantiations    63
;  :rlimit-count            192790)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2113
;  :arith-add-rows          5
;  :arith-assert-diseq      56
;  :arith-assert-lower      174
;  :arith-assert-upper      132
;  :arith-conflicts         26
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         30
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               273
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1323
;  :mk-clause               248
;  :num-allocs              4857891
;  :num-checks              326
;  :propagations            134
;  :quant-instantiations    63
;  :rlimit-count            193097)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2118
;  :arith-add-rows          5
;  :arith-assert-diseq      56
;  :arith-assert-lower      174
;  :arith-assert-upper      133
;  :arith-conflicts         27
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         31
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1325
;  :mk-clause               248
;  :num-allocs              4857891
;  :num-checks              327
;  :propagations            134
;  :quant-instantiations    63
;  :rlimit-count            193414)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2123
;  :arith-add-rows          5
;  :arith-assert-diseq      56
;  :arith-assert-lower      174
;  :arith-assert-upper      134
;  :arith-conflicts         28
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         32
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               275
;  :datatype-accessor-ax    197
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1327
;  :mk-clause               248
;  :num-allocs              4857891
;  :num-checks              328
;  :propagations            134
;  :quant-instantiations    63
;  :rlimit-count            193741)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2128
;  :arith-add-rows          5
;  :arith-assert-diseq      56
;  :arith-assert-lower      174
;  :arith-assert-upper      135
;  :arith-conflicts         29
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         33
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1329
;  :mk-clause               248
;  :num-allocs              4857891
;  :num-checks              329
;  :propagations            134
;  :quant-instantiations    63
;  :rlimit-count            194078)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          5
;  :arith-assert-diseq      56
;  :arith-assert-lower      174
;  :arith-assert-upper      136
;  :arith-conflicts         30
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         34
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               277
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1331
;  :mk-clause               248
;  :num-allocs              4857891
;  :num-checks              330
;  :propagations            134
;  :quant-instantiations    63
;  :rlimit-count            194425)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2138
;  :arith-add-rows          5
;  :arith-assert-diseq      56
;  :arith-assert-lower      174
;  :arith-assert-upper      137
;  :arith-conflicts         31
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         35
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               278
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1333
;  :mk-clause               248
;  :num-allocs              4857891
;  :num-checks              331
;  :propagations            134
;  :quant-instantiations    63
;  :rlimit-count            194782)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2143
;  :arith-add-rows          5
;  :arith-assert-diseq      56
;  :arith-assert-lower      174
;  :arith-assert-upper      138
;  :arith-conflicts         32
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         36
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               279
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1335
;  :mk-clause               248
;  :num-allocs              4857891
;  :num-checks              332
;  :propagations            134
;  :quant-instantiations    63
;  :rlimit-count            195149)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))
(declare-const $k@156@08 $Perm)
(assert ($Perm.isReadVar $k@156@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@156@08 $Perm.No) (< $Perm.No $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2148
;  :arith-add-rows          5
;  :arith-assert-diseq      57
;  :arith-assert-lower      176
;  :arith-assert-upper      139
;  :arith-conflicts         32
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         36
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               280
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1340
;  :mk-clause               250
;  :num-allocs              4857891
;  :num-checks              333
;  :propagations            135
;  :quant-instantiations    63
;  :rlimit-count            195640)
(declare-const $t@157@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@135@08 $k@148@08))
    (=
      $t@157@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@156@08)
    (=
      $t@157@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08)))
(assert (<= (+ (- $k@135@08 $k@148@08) $k@156@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2158
;  :arith-add-rows          6
;  :arith-assert-diseq      57
;  :arith-assert-lower      177
;  :arith-assert-upper      141
;  :arith-conflicts         33
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         37
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1348
;  :mk-clause               250
;  :num-allocs              4857891
;  :num-checks              334
;  :propagations            135
;  :quant-instantiations    64
;  :rlimit-count            196392)
(assert (not (= $t@157@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2163
;  :arith-add-rows          6
;  :arith-assert-diseq      57
;  :arith-assert-lower      177
;  :arith-assert-upper      142
;  :arith-conflicts         34
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         38
;  :arith-pivots            24
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    204
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1350
;  :mk-clause               250
;  :num-allocs              4857891
;  :num-checks              335
;  :propagations            135
;  :quant-instantiations    64
;  :rlimit-count            196817)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2168
;  :arith-add-rows          6
;  :arith-assert-diseq      57
;  :arith-assert-lower      177
;  :arith-assert-upper      143
;  :arith-conflicts         35
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         39
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1352
;  :mk-clause               250
;  :num-allocs              4857891
;  :num-checks              336
;  :propagations            135
;  :quant-instantiations    64
;  :rlimit-count            197234)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2173
;  :arith-add-rows          6
;  :arith-assert-diseq      57
;  :arith-assert-lower      177
;  :arith-assert-upper      144
;  :arith-conflicts         36
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         40
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               284
;  :datatype-accessor-ax    206
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1354
;  :mk-clause               250
;  :num-allocs              4857891
;  :num-checks              337
;  :propagations            135
;  :quant-instantiations    64
;  :rlimit-count            197661)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2178
;  :arith-add-rows          6
;  :arith-assert-diseq      57
;  :arith-assert-lower      177
;  :arith-assert-upper      145
;  :arith-conflicts         37
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         41
;  :arith-pivots            27
;  :binary-propagations     22
;  :conflicts               285
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1356
;  :mk-clause               250
;  :num-allocs              4857891
;  :num-checks              338
;  :propagations            135
;  :quant-instantiations    64
;  :rlimit-count            198098)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2183
;  :arith-add-rows          6
;  :arith-assert-diseq      57
;  :arith-assert-lower      177
;  :arith-assert-upper      146
;  :arith-conflicts         38
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         42
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1358
;  :mk-clause               250
;  :num-allocs              4857891
;  :num-checks              339
;  :propagations            135
;  :quant-instantiations    64
;  :rlimit-count            198545)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2188
;  :arith-add-rows          6
;  :arith-assert-diseq      57
;  :arith-assert-lower      177
;  :arith-assert-upper      147
;  :arith-conflicts         39
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         43
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1360
;  :mk-clause               250
;  :num-allocs              4857891
;  :num-checks              340
;  :propagations            135
;  :quant-instantiations    64
;  :rlimit-count            199002)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2193
;  :arith-add-rows          6
;  :arith-assert-diseq      57
;  :arith-assert-lower      177
;  :arith-assert-upper      148
;  :arith-conflicts         40
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         44
;  :arith-pivots            30
;  :binary-propagations     22
;  :conflicts               288
;  :datatype-accessor-ax    210
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1362
;  :mk-clause               250
;  :num-allocs              4857891
;  :num-checks              341
;  :propagations            135
;  :quant-instantiations    64
;  :rlimit-count            199469)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))))
(declare-const $k@158@08 $Perm)
(assert ($Perm.isReadVar $k@158@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@158@08 $Perm.No) (< $Perm.No $k@158@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2198
;  :arith-add-rows          6
;  :arith-assert-diseq      58
;  :arith-assert-lower      179
;  :arith-assert-upper      149
;  :arith-conflicts         40
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         44
;  :arith-pivots            30
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1367
;  :mk-clause               252
;  :num-allocs              4857891
;  :num-checks              342
;  :propagations            136
;  :quant-instantiations    64
;  :rlimit-count            200049)
(declare-const $t@159@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@136@08 $k@149@08))
    (=
      $t@159@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@158@08)
    (=
      $t@159@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@136@08 $k@149@08) $k@158@08)))
(assert (<= (+ (- $k@136@08 $k@149@08) $k@158@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@136@08 $k@149@08) $k@158@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@136@08 $k@149@08) $k@158@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2208
;  :arith-add-rows          7
;  :arith-assert-diseq      58
;  :arith-assert-lower      180
;  :arith-assert-upper      151
;  :arith-conflicts         41
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         45
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    212
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1375
;  :mk-clause               252
;  :num-allocs              4857891
;  :num-checks              343
;  :propagations            136
;  :quant-instantiations    65
;  :rlimit-count            201167)
(assert (not (= $t@159@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@136@08 $k@149@08) $k@158@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2214
;  :arith-add-rows          7
;  :arith-assert-diseq      58
;  :arith-assert-lower      180
;  :arith-assert-upper      152
;  :arith-conflicts         42
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         46
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1378
;  :mk-clause               252
;  :num-allocs              4857891
;  :num-checks              344
;  :propagations            136
;  :quant-instantiations    65
;  :rlimit-count            201701)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@136@08 $k@149@08) $k@158@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2219
;  :arith-add-rows          7
;  :arith-assert-diseq      58
;  :arith-assert-lower      180
;  :arith-assert-upper      153
;  :arith-conflicts         43
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         47
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    214
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1380
;  :mk-clause               252
;  :num-allocs              4857891
;  :num-checks              345
;  :propagations            136
;  :quant-instantiations    65
;  :rlimit-count            202200)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))))))))
(declare-const $k@160@08 $Perm)
(assert ($Perm.isReadVar $k@160@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@160@08 $Perm.No) (< $Perm.No $k@160@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2224
;  :arith-add-rows          7
;  :arith-assert-diseq      59
;  :arith-assert-lower      182
;  :arith-assert-upper      154
;  :arith-conflicts         43
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         47
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    215
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1385
;  :mk-clause               254
;  :num-allocs              4857891
;  :num-checks              346
;  :propagations            137
;  :quant-instantiations    65
;  :rlimit-count            202821)
(declare-const $t@161@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@137@08 $k@150@08))
    (=
      $t@161@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@160@08)
    (=
      $t@161@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@137@08 $k@150@08) $k@160@08)))
(assert (<= (+ (- $k@137@08 $k@150@08) $k@160@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@137@08 $k@150@08) $k@160@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@137@08 $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2234
;  :arith-add-rows          8
;  :arith-assert-diseq      59
;  :arith-assert-lower      183
;  :arith-assert-upper      156
;  :arith-conflicts         44
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         48
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    216
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1393
;  :mk-clause               254
;  :num-allocs              4857891
;  :num-checks              347
;  :propagations            137
;  :quant-instantiations    66
;  :rlimit-count            204003)
(assert (not (= $t@161@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@137@08 $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2240
;  :arith-add-rows          8
;  :arith-assert-diseq      59
;  :arith-assert-lower      183
;  :arith-assert-upper      157
;  :arith-conflicts         45
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         49
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1396
;  :mk-clause               254
;  :num-allocs              4857891
;  :num-checks              348
;  :propagations            137
;  :quant-instantiations    66
;  :rlimit-count            204575)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2245
;  :arith-add-rows          8
;  :arith-assert-diseq      59
;  :arith-assert-lower      183
;  :arith-assert-upper      158
;  :arith-conflicts         46
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         50
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1398
;  :mk-clause               254
;  :num-allocs              4857891
;  :num-checks              349
;  :propagations            137
;  :quant-instantiations    66
;  :rlimit-count            205112)
(declare-const $k@162@08 $Perm)
(assert ($Perm.isReadVar $k@162@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@162@08 $Perm.No) (< $Perm.No $k@162@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2245
;  :arith-add-rows          8
;  :arith-assert-diseq      60
;  :arith-assert-lower      185
;  :arith-assert-upper      159
;  :arith-conflicts         46
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         50
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1402
;  :mk-clause               256
;  :num-allocs              4857891
;  :num-checks              350
;  :propagations            138
;  :quant-instantiations    66
;  :rlimit-count            205311)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  $t@155@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2245
;  :arith-add-rows          8
;  :arith-assert-diseq      60
;  :arith-assert-lower      185
;  :arith-assert-upper      159
;  :arith-conflicts         46
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         50
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1402
;  :mk-clause               256
;  :num-allocs              4857891
;  :num-checks              351
;  :propagations            138
;  :quant-instantiations    66
;  :rlimit-count            205322)
(declare-const $t@163@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@138@08 $k@151@08))
    (=
      $t@163@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@162@08)
    (=
      $t@163@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@138@08 $k@151@08) $k@162@08)))
(assert (<= (+ (- $k@138@08 $k@151@08) $k@162@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@138@08 $k@151@08) $k@162@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2251
;  :arith-add-rows          9
;  :arith-assert-diseq      60
;  :arith-assert-lower      186
;  :arith-assert-upper      161
;  :arith-conflicts         47
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         51
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1409
;  :mk-clause               256
;  :num-allocs              5042974
;  :num-checks              352
;  :propagations            138
;  :quant-instantiations    67
;  :rlimit-count            206097)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  $t@155@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2251
;  :arith-add-rows          9
;  :arith-assert-diseq      60
;  :arith-assert-lower      186
;  :arith-assert-upper      161
;  :arith-conflicts         47
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         51
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1409
;  :mk-clause               256
;  :num-allocs              5042974
;  :num-checks              353
;  :propagations            138
;  :quant-instantiations    67
;  :rlimit-count            206108)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@138@08 $k@151@08) $k@162@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2251
;  :arith-add-rows          9
;  :arith-assert-diseq      60
;  :arith-assert-lower      186
;  :arith-assert-upper      162
;  :arith-conflicts         48
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         52
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 382
;  :datatype-occurs-check   129
;  :datatype-splits         337
;  :decisions               375
;  :del-clause              194
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1410
;  :mk-clause               256
;  :num-allocs              5042974
;  :num-checks              354
;  :propagations            138
;  :quant-instantiations    67
;  :rlimit-count            206186)
(assert (= $t@163@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@152@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) __globals@48@08))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2756
;  :arith-add-rows          11
;  :arith-assert-diseq      65
;  :arith-assert-lower      205
;  :arith-assert-upper      171
;  :arith-conflicts         48
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         56
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 515
;  :datatype-occurs-check   182
;  :datatype-splits         417
;  :decisions               506
;  :del-clause              246
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1533
;  :mk-clause               299
;  :num-allocs              5228756
;  :num-checks              356
;  :propagations            158
;  :quant-instantiations    73
;  :rlimit-count            209086)
(declare-const $t@164@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(declare-const $k@165@08 $Perm)
(assert ($Perm.isReadVar $k@165@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@165@08 $Perm.No) (< $Perm.No $k@165@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      69
;  :arith-assert-lower      218
;  :arith-assert-upper      177
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         58
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1639
;  :mk-clause               324
;  :num-allocs              5228756
;  :num-checks              358
;  :propagations            172
;  :quant-instantiations    77
;  :rlimit-count            211252)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@132@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      69
;  :arith-assert-lower      218
;  :arith-assert-upper      177
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         58
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1639
;  :mk-clause               324
;  :num-allocs              5228756
;  :num-checks              359
;  :propagations            172
;  :quant-instantiations    77
;  :rlimit-count            211263)
(assert (< $k@165@08 $k@132@08))
(assert (<= $Perm.No (- $k@132@08 $k@165@08)))
(assert (<= (- $k@132@08 $k@165@08) $Perm.Write))
(assert (implies (< $Perm.No (- $k@132@08 $k@165@08)) (not (= diz@47@08 $Ref.null))))
; [eval] diz.CASR_m != null
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      69
;  :arith-assert-lower      220
;  :arith-assert-upper      178
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1642
;  :mk-clause               324
;  :num-allocs              5228756
;  :num-checks              360
;  :propagations            172
;  :quant-instantiations    77
;  :rlimit-count            211483)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      69
;  :arith-assert-lower      220
;  :arith-assert-upper      178
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               304
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1642
;  :mk-clause               324
;  :num-allocs              5228756
;  :num-checks              361
;  :propagations            172
;  :quant-instantiations    77
;  :rlimit-count            211531)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      69
;  :arith-assert-lower      220
;  :arith-assert-upper      178
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1642
;  :mk-clause               324
;  :num-allocs              5228756
;  :num-checks              362
;  :propagations            172
;  :quant-instantiations    77
;  :rlimit-count            211579)
; [eval] |diz.CASR_m.Main_process_state| == 3
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      69
;  :arith-assert-lower      220
;  :arith-assert-upper      178
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               306
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1642
;  :mk-clause               324
;  :num-allocs              5228756
;  :num-checks              363
;  :propagations            172
;  :quant-instantiations    77
;  :rlimit-count            211627)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      69
;  :arith-assert-lower      220
;  :arith-assert-upper      178
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1642
;  :mk-clause               324
;  :num-allocs              5228756
;  :num-checks              364
;  :propagations            172
;  :quant-instantiations    77
;  :rlimit-count            211675)
; [eval] |diz.CASR_m.Main_event_state| == 6
; [eval] |diz.CASR_m.Main_event_state|
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      69
;  :arith-assert-lower      220
;  :arith-assert-upper      178
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1642
;  :mk-clause               324
;  :num-allocs              5228756
;  :num-checks              365
;  :propagations            172
;  :quant-instantiations    77
;  :rlimit-count            211723)
; [eval] (forall i__47: Int :: { diz.CASR_m.Main_process_state[i__47] } 0 <= i__47 && i__47 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__47] == -1 || 0 <= diz.CASR_m.Main_process_state[i__47] && diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|)
(declare-const i__47@166@08 Int)
(push) ; 6
; [eval] 0 <= i__47 && i__47 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__47] == -1 || 0 <= diz.CASR_m.Main_process_state[i__47] && diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= i__47 && i__47 < |diz.CASR_m.Main_process_state|
; [eval] 0 <= i__47
(push) ; 7
; [then-branch: 24 | 0 <= i__47@166@08 | live]
; [else-branch: 24 | !(0 <= i__47@166@08) | live]
(push) ; 8
; [then-branch: 24 | 0 <= i__47@166@08]
(assert (<= 0 i__47@166@08))
; [eval] i__47 < |diz.CASR_m.Main_process_state|
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      69
;  :arith-assert-lower      221
;  :arith-assert-upper      178
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               309
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1643
;  :mk-clause               324
;  :num-allocs              5228756
;  :num-checks              366
;  :propagations            172
;  :quant-instantiations    77
;  :rlimit-count            211823)
(pop) ; 8
(push) ; 8
; [else-branch: 24 | !(0 <= i__47@166@08)]
(assert (not (<= 0 i__47@166@08)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 25 | i__47@166@08 < |First:(Second:(Second:(Second:($t@152@08))))| && 0 <= i__47@166@08 | live]
; [else-branch: 25 | !(i__47@166@08 < |First:(Second:(Second:(Second:($t@152@08))))| && 0 <= i__47@166@08) | live]
(push) ; 8
; [then-branch: 25 | i__47@166@08 < |First:(Second:(Second:(Second:($t@152@08))))| && 0 <= i__47@166@08]
(assert (and
  (<
    i__47@166@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))
  (<= 0 i__47@166@08)))
; [eval] diz.CASR_m.Main_process_state[i__47] == -1 || 0 <= diz.CASR_m.Main_process_state[i__47] && diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__47] == -1
; [eval] diz.CASR_m.Main_process_state[i__47]
(push) ; 9
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      69
;  :arith-assert-lower      222
;  :arith-assert-upper      179
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1645
;  :mk-clause               324
;  :num-allocs              5228756
;  :num-checks              367
;  :propagations            172
;  :quant-instantiations    77
;  :rlimit-count            211980)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__47@166@08 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      69
;  :arith-assert-lower      222
;  :arith-assert-upper      179
;  :arith-conflicts         48
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1645
;  :mk-clause               324
;  :num-allocs              5228756
;  :num-checks              368
;  :propagations            172
;  :quant-instantiations    77
;  :rlimit-count            211989)
; [eval] -1
(push) ; 9
; [then-branch: 26 | First:(Second:(Second:(Second:($t@152@08))))[i__47@166@08] == -1 | live]
; [else-branch: 26 | First:(Second:(Second:(Second:($t@152@08))))[i__47@166@08] != -1 | live]
(push) ; 10
; [then-branch: 26 | First:(Second:(Second:(Second:($t@152@08))))[i__47@166@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
    i__47@166@08)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 26 | First:(Second:(Second:(Second:($t@152@08))))[i__47@166@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
      i__47@166@08)
    (- 0 1))))
; [eval] 0 <= diz.CASR_m.Main_process_state[i__47] && diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= diz.CASR_m.Main_process_state[i__47]
; [eval] diz.CASR_m.Main_process_state[i__47]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      70
;  :arith-assert-lower      225
;  :arith-assert-upper      180
;  :arith-conflicts         48
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               311
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1651
;  :mk-clause               328
;  :num-allocs              5228756
;  :num-checks              369
;  :propagations            174
;  :quant-instantiations    78
;  :rlimit-count            212260)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__47@166@08 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      70
;  :arith-assert-lower      225
;  :arith-assert-upper      180
;  :arith-conflicts         48
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               311
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1651
;  :mk-clause               328
;  :num-allocs              5228756
;  :num-checks              370
;  :propagations            174
;  :quant-instantiations    78
;  :rlimit-count            212269)
(push) ; 11
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@152@08))))[i__47@166@08] | live]
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@152@08))))[i__47@166@08]) | live]
(push) ; 12
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@152@08))))[i__47@166@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
    i__47@166@08)))
; [eval] diz.CASR_m.Main_process_state[i__47] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__47]
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      70
;  :arith-assert-lower      225
;  :arith-assert-upper      180
;  :arith-conflicts         48
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1651
;  :mk-clause               328
;  :num-allocs              5228756
;  :num-checks              371
;  :propagations            174
;  :quant-instantiations    78
;  :rlimit-count            212422)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__47@166@08 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      70
;  :arith-assert-lower      225
;  :arith-assert-upper      180
;  :arith-conflicts         48
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1651
;  :mk-clause               328
;  :num-allocs              5228756
;  :num-checks              372
;  :propagations            174
;  :quant-instantiations    78
;  :rlimit-count            212431)
; [eval] |diz.CASR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      70
;  :arith-assert-lower      225
;  :arith-assert-upper      180
;  :arith-conflicts         48
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              269
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1651
;  :mk-clause               328
;  :num-allocs              5228756
;  :num-checks              373
;  :propagations            174
;  :quant-instantiations    78
;  :rlimit-count            212479)
(pop) ; 12
(push) ; 12
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@152@08))))[i__47@166@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
      i__47@166@08))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 25 | !(i__47@166@08 < |First:(Second:(Second:(Second:($t@152@08))))| && 0 <= i__47@166@08)]
(assert (not
  (and
    (<
      i__47@166@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))
    (<= 0 i__47@166@08))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((i__47@166@08 Int)) (!
  (implies
    (and
      (<
        i__47@166@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))
      (<= 0 i__47@166@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
          i__47@166@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
            i__47@166@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
            i__47@166@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
    i__47@166@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      72
;  :arith-assert-lower      226
;  :arith-assert-upper      181
;  :arith-conflicts         48
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               314
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              287
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1659
;  :mk-clause               342
;  :num-allocs              5228756
;  :num-checks              374
;  :propagations            176
;  :quant-instantiations    79
;  :rlimit-count            212925)
(assert (forall ((i__47@166@08 Int)) (!
  (implies
    (and
      (<
        i__47@166@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))
      (<= 0 i__47@166@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
          i__47@166@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
            i__47@166@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
            i__47@166@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@08)))))
    i__47@166@08))
  :qid |prog.l<no position>|)))
(declare-const $k@167@08 $Perm)
(assert ($Perm.isReadVar $k@167@08 $Perm.Write))
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      73
;  :arith-assert-lower      228
;  :arith-assert-upper      182
;  :arith-conflicts         48
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              287
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1664
;  :mk-clause               344
;  :num-allocs              5228756
;  :num-checks              375
;  :propagations            177
;  :quant-instantiations    79
;  :rlimit-count            213484)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@167@08 $Perm.No) (< $Perm.No $k@167@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3070
;  :arith-add-rows          11
;  :arith-assert-diseq      73
;  :arith-assert-lower      228
;  :arith-assert-upper      182
;  :arith-conflicts         48
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              287
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1664
;  :mk-clause               344
;  :num-allocs              5228756
;  :num-checks              376
;  :propagations            177
;  :quant-instantiations    79
;  :rlimit-count            213534)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@134@08 $k@147@08) $k@154@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          11
;  :arith-assert-diseq      73
;  :arith-assert-lower      228
;  :arith-assert-upper      183
;  :arith-conflicts         49
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1666
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              377
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            213612)
(assert (< $k@167@08 (+ (- $k@134@08 $k@147@08) $k@154@08)))
(assert (<= $Perm.No (- (+ (- $k@134@08 $k@147@08) $k@154@08) $k@167@08)))
(assert (<= (- (+ (- $k@134@08 $k@147@08) $k@154@08) $k@167@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@134@08 $k@147@08) $k@154@08) $k@167@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn != null
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      184
;  :arith-conflicts         49
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         58
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1669
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              378
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            213847)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      185
;  :arith-conflicts         50
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         59
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1670
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              379
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            213925)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      185
;  :arith-conflicts         50
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         59
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               320
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1670
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              380
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            213973)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      186
;  :arith-conflicts         51
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         60
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               321
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1671
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              381
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214051)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      186
;  :arith-conflicts         51
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         60
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               322
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1671
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              382
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214099)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      187
;  :arith-conflicts         52
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         61
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               323
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1672
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              383
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214177)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      187
;  :arith-conflicts         52
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         61
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1672
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              384
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214225)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      188
;  :arith-conflicts         53
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         62
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1673
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              385
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214303)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      188
;  :arith-conflicts         53
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         62
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1673
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              386
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214351)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      189
;  :arith-conflicts         54
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         63
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1674
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              387
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214429)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      189
;  :arith-conflicts         54
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         63
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               328
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1674
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              388
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214477)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      190
;  :arith-conflicts         55
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         64
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               329
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1675
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              389
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214555)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      190
;  :arith-conflicts         55
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         64
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               330
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1675
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              390
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214603)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      191
;  :arith-conflicts         56
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         65
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1676
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              391
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214681)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      191
;  :arith-conflicts         56
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         65
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               332
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1676
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              392
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214729)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      192
;  :arith-conflicts         57
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         66
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1677
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              393
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214807)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      192
;  :arith-conflicts         57
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         66
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               334
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1677
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              394
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214855)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      193
;  :arith-conflicts         58
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         67
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1678
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              395
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214933)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      193
;  :arith-conflicts         58
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         67
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               336
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1678
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              396
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            214981)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      194
;  :arith-conflicts         59
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         68
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1679
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              397
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            215059)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      194
;  :arith-conflicts         59
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         68
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               338
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1679
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              398
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            215107)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      230
;  :arith-assert-upper      195
;  :arith-conflicts         60
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         69
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1680
;  :mk-clause               346
;  :num-allocs              5228756
;  :num-checks              399
;  :propagations            178
;  :quant-instantiations    79
;  :rlimit-count            215185)
(declare-const $k@168@08 $Perm)
(assert ($Perm.isReadVar $k@168@08 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      74
;  :arith-assert-lower      232
;  :arith-assert-upper      196
;  :arith-conflicts         60
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         69
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               340
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1684
;  :mk-clause               348
;  :num-allocs              5228756
;  :num-checks              400
;  :propagations            179
;  :quant-instantiations    79
;  :rlimit-count            215381)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@168@08 $Perm.No) (< $Perm.No $k@168@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3071
;  :arith-add-rows          12
;  :arith-assert-diseq      74
;  :arith-assert-lower      232
;  :arith-assert-upper      196
;  :arith-conflicts         60
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         69
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              289
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1684
;  :mk-clause               348
;  :num-allocs              5228756
;  :num-checks              401
;  :propagations            179
;  :quant-instantiations    79
;  :rlimit-count            215431)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@135@08 $k@148@08) $k@156@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          12
;  :arith-assert-diseq      74
;  :arith-assert-lower      232
;  :arith-assert-upper      197
;  :arith-conflicts         61
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         69
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               342
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1686
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              402
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            215519)
(assert (< $k@168@08 (+ (- $k@135@08 $k@148@08) $k@156@08)))
(assert (<= $Perm.No (- (+ (- $k@135@08 $k@148@08) $k@156@08) $k@168@08)))
(assert (<= (- (+ (- $k@135@08 $k@148@08) $k@156@08) $k@168@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@135@08 $k@148@08) $k@156@08) $k@168@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_casr != null
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      198
;  :arith-conflicts         61
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         69
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1689
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              403
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            215760)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      199
;  :arith-conflicts         62
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         70
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               344
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1690
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              404
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            215849)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      199
;  :arith-conflicts         62
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         70
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               345
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1690
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              405
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            215897)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      200
;  :arith-conflicts         63
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         71
;  :arith-pivots            49
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1691
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              406
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            215986)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      200
;  :arith-conflicts         63
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         71
;  :arith-pivots            49
;  :binary-propagations     22
;  :conflicts               347
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1691
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              407
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            216034)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      201
;  :arith-conflicts         64
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         72
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               348
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1692
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              408
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            216123)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      201
;  :arith-conflicts         64
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         72
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               349
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1692
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              409
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            216171)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      202
;  :arith-conflicts         65
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         73
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               350
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1693
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              410
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            216260)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      202
;  :arith-conflicts         65
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         73
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1693
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              411
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            216308)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      203
;  :arith-conflicts         66
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         74
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               352
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1694
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              412
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            216397)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      203
;  :arith-conflicts         66
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         74
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               353
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1694
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              413
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            216445)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      204
;  :arith-conflicts         67
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         75
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               354
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1695
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              414
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            216534)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      204
;  :arith-conflicts         67
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         75
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               355
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1695
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              415
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            216582)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      205
;  :arith-conflicts         68
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         76
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               356
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1696
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              416
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            216671)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      205
;  :arith-conflicts         68
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         76
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               357
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1696
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              417
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            216719)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      74
;  :arith-assert-lower      234
;  :arith-assert-upper      206
;  :arith-conflicts         69
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               358
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1697
;  :mk-clause               350
;  :num-allocs              5228756
;  :num-checks              418
;  :propagations            180
;  :quant-instantiations    79
;  :rlimit-count            216808)
(declare-const $k@169@08 $Perm)
(assert ($Perm.isReadVar $k@169@08 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      75
;  :arith-assert-lower      236
;  :arith-assert-upper      207
;  :arith-conflicts         69
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1701
;  :mk-clause               352
;  :num-allocs              5228756
;  :num-checks              419
;  :propagations            181
;  :quant-instantiations    79
;  :rlimit-count            217005)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@169@08 $Perm.No) (< $Perm.No $k@169@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3072
;  :arith-add-rows          13
;  :arith-assert-diseq      75
;  :arith-assert-lower      236
;  :arith-assert-upper      207
;  :arith-conflicts         69
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               360
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              291
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1701
;  :mk-clause               352
;  :num-allocs              5228756
;  :num-checks              420
;  :propagations            181
;  :quant-instantiations    79
;  :rlimit-count            217055)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@136@08 $k@149@08) $k@158@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3073
;  :arith-add-rows          13
;  :arith-assert-diseq      75
;  :arith-assert-lower      236
;  :arith-assert-upper      208
;  :arith-conflicts         70
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               361
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              293
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1703
;  :mk-clause               354
;  :num-allocs              5228756
;  :num-checks              421
;  :propagations            182
;  :quant-instantiations    79
;  :rlimit-count            217135)
(assert (< $k@169@08 (+ (- $k@136@08 $k@149@08) $k@158@08)))
(assert (<= $Perm.No (- (+ (- $k@136@08 $k@149@08) $k@158@08) $k@169@08)))
(assert (<= (- (+ (- $k@136@08 $k@149@08) $k@158@08) $k@169@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@136@08 $k@149@08) $k@158@08) $k@169@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_lfsr != null
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3073
;  :arith-add-rows          15
;  :arith-assert-diseq      75
;  :arith-assert-lower      238
;  :arith-assert-upper      209
;  :arith-conflicts         70
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              293
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1706
;  :mk-clause               354
;  :num-allocs              5228756
;  :num-checks              422
;  :propagations            182
;  :quant-instantiations    79
;  :rlimit-count            217371)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@136@08 $k@149@08) $k@158@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3073
;  :arith-add-rows          15
;  :arith-assert-diseq      75
;  :arith-assert-lower      238
;  :arith-assert-upper      210
;  :arith-conflicts         71
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         78
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               363
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              293
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1707
;  :mk-clause               354
;  :num-allocs              5228756
;  :num-checks              423
;  :propagations            182
;  :quant-instantiations    79
;  :rlimit-count            217452)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3073
;  :arith-add-rows          15
;  :arith-assert-diseq      75
;  :arith-assert-lower      238
;  :arith-assert-upper      210
;  :arith-conflicts         71
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         78
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               364
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              293
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1707
;  :mk-clause               354
;  :num-allocs              5228756
;  :num-checks              424
;  :propagations            182
;  :quant-instantiations    79
;  :rlimit-count            217500)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@136@08 $k@149@08) $k@158@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3073
;  :arith-add-rows          15
;  :arith-assert-diseq      75
;  :arith-assert-lower      238
;  :arith-assert-upper      211
;  :arith-conflicts         72
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         79
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              293
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1708
;  :mk-clause               354
;  :num-allocs              5228756
;  :num-checks              425
;  :propagations            182
;  :quant-instantiations    79
;  :rlimit-count            217581)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3073
;  :arith-add-rows          15
;  :arith-assert-diseq      75
;  :arith-assert-lower      238
;  :arith-assert-upper      211
;  :arith-conflicts         72
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         79
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               366
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              293
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1708
;  :mk-clause               354
;  :num-allocs              5228756
;  :num-checks              426
;  :propagations            182
;  :quant-instantiations    79
;  :rlimit-count            217629)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@136@08 $k@149@08) $k@158@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3073
;  :arith-add-rows          15
;  :arith-assert-diseq      75
;  :arith-assert-lower      238
;  :arith-assert-upper      212
;  :arith-conflicts         73
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         80
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               367
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              293
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1709
;  :mk-clause               354
;  :num-allocs              5228756
;  :num-checks              427
;  :propagations            182
;  :quant-instantiations    79
;  :rlimit-count            217710)
(declare-const $k@170@08 $Perm)
(assert ($Perm.isReadVar $k@170@08 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3073
;  :arith-add-rows          15
;  :arith-assert-diseq      76
;  :arith-assert-lower      240
;  :arith-assert-upper      213
;  :arith-conflicts         73
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         80
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               368
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              293
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1713
;  :mk-clause               356
;  :num-allocs              5228756
;  :num-checks              428
;  :propagations            183
;  :quant-instantiations    79
;  :rlimit-count            217906)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@170@08 $Perm.No) (< $Perm.No $k@170@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3073
;  :arith-add-rows          15
;  :arith-assert-diseq      76
;  :arith-assert-lower      240
;  :arith-assert-upper      213
;  :arith-conflicts         73
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         80
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               369
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              293
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1713
;  :mk-clause               356
;  :num-allocs              5228756
;  :num-checks              429
;  :propagations            183
;  :quant-instantiations    79
;  :rlimit-count            217956)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@137@08 $k@150@08) $k@160@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3074
;  :arith-add-rows          15
;  :arith-assert-diseq      76
;  :arith-assert-lower      240
;  :arith-assert-upper      214
;  :arith-conflicts         74
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         80
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               370
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              295
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1715
;  :mk-clause               358
;  :num-allocs              5228756
;  :num-checks              430
;  :propagations            184
;  :quant-instantiations    79
;  :rlimit-count            218034)
(assert (< $k@170@08 (+ (- $k@137@08 $k@150@08) $k@160@08)))
(assert (<= $Perm.No (- (+ (- $k@137@08 $k@150@08) $k@160@08) $k@170@08)))
(assert (<= (- (+ (- $k@137@08 $k@150@08) $k@160@08) $k@170@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@137@08 $k@150@08) $k@160@08) $k@170@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_combinate != null
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3074
;  :arith-add-rows          16
;  :arith-assert-diseq      76
;  :arith-assert-lower      242
;  :arith-assert-upper      215
;  :arith-conflicts         74
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         80
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               371
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              295
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1718
;  :mk-clause               358
;  :num-allocs              5228756
;  :num-checks              431
;  :propagations            184
;  :quant-instantiations    79
;  :rlimit-count            218276)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@137@08 $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3074
;  :arith-add-rows          16
;  :arith-assert-diseq      76
;  :arith-assert-lower      242
;  :arith-assert-upper      216
;  :arith-conflicts         75
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         81
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               372
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              295
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1719
;  :mk-clause               358
;  :num-allocs              5228756
;  :num-checks              432
;  :propagations            184
;  :quant-instantiations    79
;  :rlimit-count            218354)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3074
;  :arith-add-rows          16
;  :arith-assert-diseq      76
;  :arith-assert-lower      242
;  :arith-assert-upper      216
;  :arith-conflicts         75
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         81
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              295
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1719
;  :mk-clause               358
;  :num-allocs              5228756
;  :num-checks              433
;  :propagations            184
;  :quant-instantiations    79
;  :rlimit-count            218402)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@137@08 $k@150@08) $k@160@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3074
;  :arith-add-rows          16
;  :arith-assert-diseq      76
;  :arith-assert-lower      242
;  :arith-assert-upper      217
;  :arith-conflicts         76
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         82
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              295
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1720
;  :mk-clause               358
;  :num-allocs              5228756
;  :num-checks              434
;  :propagations            184
;  :quant-instantiations    79
;  :rlimit-count            218480)
(declare-const $k@171@08 $Perm)
(assert ($Perm.isReadVar $k@171@08 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3074
;  :arith-add-rows          16
;  :arith-assert-diseq      77
;  :arith-assert-lower      244
;  :arith-assert-upper      218
;  :arith-conflicts         76
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         82
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              295
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1724
;  :mk-clause               360
;  :num-allocs              5228756
;  :num-checks              435
;  :propagations            185
;  :quant-instantiations    79
;  :rlimit-count            218676)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3074
;  :arith-add-rows          16
;  :arith-assert-diseq      77
;  :arith-assert-lower      244
;  :arith-assert-upper      219
;  :arith-conflicts         77
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         83
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              295
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1725
;  :mk-clause               360
;  :num-allocs              5228756
;  :num-checks              436
;  :propagations            185
;  :quant-instantiations    79
;  :rlimit-count            218754)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@171@08 $Perm.No) (< $Perm.No $k@171@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3074
;  :arith-add-rows          16
;  :arith-assert-diseq      77
;  :arith-assert-lower      244
;  :arith-assert-upper      219
;  :arith-conflicts         77
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         83
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              295
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1725
;  :mk-clause               360
;  :num-allocs              5228756
;  :num-checks              437
;  :propagations            185
;  :quant-instantiations    79
;  :rlimit-count            218804)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  $t@155@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3074
;  :arith-add-rows          16
;  :arith-assert-diseq      77
;  :arith-assert-lower      244
;  :arith-assert-upper      219
;  :arith-conflicts         77
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         83
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              295
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1725
;  :mk-clause               360
;  :num-allocs              5228756
;  :num-checks              438
;  :propagations            185
;  :quant-instantiations    79
;  :rlimit-count            218815)
(push) ; 6
(assert (not (not (= (+ (- $k@138@08 $k@151@08) $k@162@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3075
;  :arith-add-rows          16
;  :arith-assert-diseq      77
;  :arith-assert-lower      244
;  :arith-assert-upper      220
;  :arith-conflicts         78
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         83
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               378
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              297
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1727
;  :mk-clause               362
;  :num-allocs              5228756
;  :num-checks              439
;  :propagations            186
;  :quant-instantiations    79
;  :rlimit-count            218893)
(assert (< $k@171@08 (+ (- $k@138@08 $k@151@08) $k@162@08)))
(assert (<= $Perm.No (- (+ (- $k@138@08 $k@151@08) $k@162@08) $k@171@08)))
(assert (<= (- (+ (- $k@138@08 $k@151@08) $k@162@08) $k@171@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@138@08 $k@151@08) $k@162@08) $k@171@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn.Rng_m == diz.CASR_m
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3075
;  :arith-add-rows          17
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      221
;  :arith-conflicts         78
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         83
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               379
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              297
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1730
;  :mk-clause               362
;  :num-allocs              5228756
;  :num-checks              440
;  :propagations            186
;  :quant-instantiations    79
;  :rlimit-count            219135)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@134@08 $k@147@08) $k@154@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3075
;  :arith-add-rows          17
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      222
;  :arith-conflicts         79
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         84
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              297
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1731
;  :mk-clause               362
;  :num-allocs              5228756
;  :num-checks              441
;  :propagations            186
;  :quant-instantiations    79
;  :rlimit-count            219213)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  $t@155@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3075
;  :arith-add-rows          17
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      222
;  :arith-conflicts         79
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         84
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              297
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1731
;  :mk-clause               362
;  :num-allocs              5228756
;  :num-checks              442
;  :propagations            186
;  :quant-instantiations    79
;  :rlimit-count            219224)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@138@08 $k@151@08) $k@162@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3075
;  :arith-add-rows          17
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      223
;  :arith-conflicts         80
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         85
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              297
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1732
;  :mk-clause               362
;  :num-allocs              5228756
;  :num-checks              443
;  :propagations            186
;  :quant-instantiations    79
;  :rlimit-count            219302)
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3075
;  :arith-add-rows          17
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      223
;  :arith-conflicts         80
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         85
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               382
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              297
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1732
;  :mk-clause               362
;  :num-allocs              5228756
;  :num-checks              444
;  :propagations            186
;  :quant-instantiations    79
;  :rlimit-count            219350)
; [eval] diz.CASR_m.Main_rn_casr == diz
(push) ; 6
(assert (not (< $Perm.No $k@132@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3075
;  :arith-add-rows          17
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      223
;  :arith-conflicts         80
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         85
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              297
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1732
;  :mk-clause               362
;  :num-allocs              5228756
;  :num-checks              445
;  :propagations            186
;  :quant-instantiations    79
;  :rlimit-count            219398)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@135@08 $k@148@08) $k@156@08))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3075
;  :arith-add-rows          17
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      224
;  :arith-conflicts         81
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         86
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              297
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1733
;  :mk-clause               362
;  :num-allocs              5228756
;  :num-checks              446
;  :propagations            186
;  :quant-instantiations    79
;  :rlimit-count            219487)
(set-option :timeout 0)
(push) ; 6
(assert (not (= $t@157@08 diz@47@08)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3075
;  :arith-add-rows          17
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      224
;  :arith-conflicts         81
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         86
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 597
;  :datatype-occurs-check   235
;  :datatype-splits         497
;  :decisions               586
;  :del-clause              297
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1733
;  :mk-clause               362
;  :num-allocs              5228756
;  :num-checks              447
;  :propagations            186
;  :quant-instantiations    79
;  :rlimit-count            219498)
(assert (= $t@157@08 diz@47@08))
(pop) ; 5
(push) ; 5
; [else-branch: 15 | !(First:(Second:(Second:(Second:($t@131@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@131@08))))))[0] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
          0)
        (- 0 2))))))
(pop) ; 5
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3315
;  :arith-add-rows          18
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      224
;  :arith-conflicts         81
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         86
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               385
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 682
;  :datatype-occurs-check   244
;  :datatype-splits         555
;  :decisions               668
;  :del-clause              312
;  :final-checks            48
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1794
;  :mk-clause               363
;  :num-allocs              5228756
;  :num-checks              448
;  :propagations            188
;  :quant-instantiations    79
;  :rlimit-count            221458
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3600
;  :arith-add-rows          18
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      224
;  :arith-conflicts         81
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         86
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 795
;  :datatype-occurs-check   256
;  :datatype-splits         664
;  :decisions               776
;  :del-clause              313
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1905
;  :mk-clause               364
;  :num-allocs              5228756
;  :num-checks              449
;  :propagations            192
;  :quant-instantiations    79
;  :rlimit-count            223458
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3885
;  :arith-add-rows          18
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      224
;  :arith-conflicts         81
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         86
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               387
;  :datatype-accessor-ax    237
;  :datatype-constructor-ax 908
;  :datatype-occurs-check   268
;  :datatype-splits         773
;  :decisions               884
;  :del-clause              314
;  :final-checks            56
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2016
;  :mk-clause               365
;  :num-allocs              5228756
;  :num-checks              450
;  :propagations            196
;  :quant-instantiations    79
;  :rlimit-count            225458
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4170
;  :arith-add-rows          18
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      224
;  :arith-conflicts         81
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         86
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    242
;  :datatype-constructor-ax 1021
;  :datatype-occurs-check   280
;  :datatype-splits         882
;  :decisions               992
;  :del-clause              315
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2127
;  :mk-clause               366
;  :num-allocs              5228756
;  :num-checks              451
;  :propagations            200
;  :quant-instantiations    79
;  :rlimit-count            227458
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4455
;  :arith-add-rows          18
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      224
;  :arith-conflicts         81
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         86
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               389
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1134
;  :datatype-occurs-check   292
;  :datatype-splits         991
;  :decisions               1100
;  :del-clause              316
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2238
;  :mk-clause               367
;  :num-allocs              5228756
;  :num-checks              452
;  :propagations            204
;  :quant-instantiations    79
;  :rlimit-count            229458
;  :time                    0.00)
(declare-const $t@172@08 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@132@08)
    (= $t@172@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08))))
  (implies
    (< $Perm.No (- $k@50@08 $k@139@08))
    (=
      $t@172@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))))))
(assert (<= $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08))))
(assert (<= (+ $k@132@08 (- $k@50@08 $k@139@08)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))
  (not (= diz@47@08 $Ref.null))))
; [eval] !(diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[0] != -2)
; [eval] diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[0] != -2
; [eval] diz.CASR_m.Main_process_state[0] != -1
; [eval] diz.CASR_m.Main_process_state[0]
(push) ; 5
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4459
;  :arith-add-rows          19
;  :arith-assert-diseq      77
;  :arith-assert-lower      247
;  :arith-assert-upper      226
;  :arith-conflicts         82
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         87
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1134
;  :datatype-occurs-check   292
;  :datatype-splits         991
;  :decisions               1100
;  :del-clause              316
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2243
;  :mk-clause               367
;  :num-allocs              5228756
;  :num-checks              453
;  :propagations            204
;  :quant-instantiations    79
;  :rlimit-count            229798)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4459
;  :arith-add-rows          19
;  :arith-assert-diseq      77
;  :arith-assert-lower      247
;  :arith-assert-upper      226
;  :arith-conflicts         82
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         87
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1134
;  :datatype-occurs-check   292
;  :datatype-splits         991
;  :decisions               1100
;  :del-clause              316
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2244
;  :mk-clause               367
;  :num-allocs              5228756
;  :num-checks              454
;  :propagations            204
;  :quant-instantiations    79
;  :rlimit-count            229878)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4459
;  :arith-add-rows          19
;  :arith-assert-diseq      77
;  :arith-assert-lower      247
;  :arith-assert-upper      226
;  :arith-conflicts         82
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         87
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1134
;  :datatype-occurs-check   292
;  :datatype-splits         991
;  :decisions               1100
;  :del-clause              316
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2244
;  :mk-clause               367
;  :num-allocs              5228756
;  :num-checks              455
;  :propagations            204
;  :quant-instantiations    79
;  :rlimit-count            229893)
; [eval] -1
(push) ; 5
; [then-branch: 28 | First:(Second:(Second:(Second:($t@131@08))))[0] != -1 | live]
; [else-branch: 28 | First:(Second:(Second:(Second:($t@131@08))))[0] == -1 | live]
(push) ; 6
; [then-branch: 28 | First:(Second:(Second:(Second:($t@131@08))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
      0)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 28 | First:(Second:(Second:(Second:($t@131@08))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    0)
  (- 0 1)))
; [eval] diz.CASR_m.Main_event_state[0] != -2
; [eval] diz.CASR_m.Main_event_state[0]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4460
;  :arith-add-rows          19
;  :arith-assert-diseq      77
;  :arith-assert-lower      247
;  :arith-assert-upper      227
;  :arith-conflicts         83
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         88
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               392
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1134
;  :datatype-occurs-check   292
;  :datatype-splits         991
;  :decisions               1100
;  :del-clause              316
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2246
;  :mk-clause               367
;  :num-allocs              5228756
;  :num-checks              456
;  :propagations            204
;  :quant-instantiations    79
;  :rlimit-count            230116)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4460
;  :arith-add-rows          19
;  :arith-assert-diseq      77
;  :arith-assert-lower      247
;  :arith-assert-upper      227
;  :arith-conflicts         83
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         88
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1134
;  :datatype-occurs-check   292
;  :datatype-splits         991
;  :decisions               1100
;  :del-clause              316
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2247
;  :mk-clause               367
;  :num-allocs              5228756
;  :num-checks              457
;  :propagations            204
;  :quant-instantiations    79
;  :rlimit-count            230196)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4460
;  :arith-add-rows          19
;  :arith-assert-diseq      77
;  :arith-assert-lower      247
;  :arith-assert-upper      227
;  :arith-conflicts         83
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         88
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1134
;  :datatype-occurs-check   292
;  :datatype-splits         991
;  :decisions               1100
;  :del-clause              316
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2247
;  :mk-clause               367
;  :num-allocs              5228756
;  :num-checks              458
;  :propagations            204
;  :quant-instantiations    79
;  :rlimit-count            230211)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
        0)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4635
;  :arith-add-rows          19
;  :arith-assert-diseq      77
;  :arith-assert-lower      247
;  :arith-assert-upper      227
;  :arith-conflicts         83
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         88
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 1191
;  :datatype-occurs-check   303
;  :datatype-splits         1046
;  :decisions               1155
;  :del-clause              316
;  :final-checks            67
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2303
;  :mk-clause               367
;  :num-allocs              5228756
;  :num-checks              459
;  :propagations            206
;  :quant-instantiations    79
;  :rlimit-count            231673
;  :time                    0.00)
(push) ; 5
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
          0)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4812
;  :arith-add-rows          19
;  :arith-assert-diseq      79
;  :arith-assert-lower      254
;  :arith-assert-upper      230
;  :arith-conflicts         83
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    251
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2373
;  :mk-clause               385
;  :num-allocs              5228756
;  :num-checks              460
;  :propagations            215
;  :quant-instantiations    81
;  :rlimit-count            233278
;  :time                    0.00)
; [then-branch: 29 | !(First:(Second:(Second:(Second:($t@131@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@131@08))))))[0] != -2) | live]
; [else-branch: 29 | First:(Second:(Second:(Second:($t@131@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@131@08))))))[0] != -2 | live]
(push) ; 5
; [then-branch: 29 | !(First:(Second:(Second:(Second:($t@131@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@131@08))))))[0] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
          0)
        (- 0 2))))))
(declare-const __flatten_16__49@173@08 $Ref)
(declare-const __flatten_15__48@174@08 $Ref)
(declare-const __flatten_18__51@175@08 $Ref)
(declare-const __flatten_17__50@176@08 $Ref)
(declare-const __flatten_64__96@177@08 $Ref)
(declare-const __flatten_66__98@178@08 $Ref)
(declare-const __flatten_65__97@179@08 Seq<Int>)
(declare-const __flatten_67__99@180@08 $Ref)
(declare-const __flatten_69__101@181@08 $Ref)
(declare-const __flatten_68__100@182@08 Seq<Int>)
(declare-const __flatten_20__53@183@08 $Ref)
(declare-const __flatten_19__52@184@08 $Ref)
(declare-const __flatten_31__64@185@08 $Ref)
(declare-const __flatten_30__63@186@08 $Ref)
(declare-const __flatten_22__55@187@08 $Ref)
(declare-const __flatten_21__54@188@08 $Ref)
(declare-const __flatten_24__57@189@08 $Ref)
(declare-const __flatten_23__56@190@08 $Ref)
(declare-const __flatten_27__60@191@08 $Ref)
(declare-const __flatten_26__59@192@08 $Ref)
(declare-const __flatten_28__61@193@08 $Ref)
(declare-const __flatten_29__62@194@08 Int)
(declare-const __flatten_25__58@195@08 Int)
(declare-const __flatten_34__67@196@08 $Ref)
(declare-const __flatten_33__66@197@08 $Ref)
(declare-const __flatten_35__68@198@08 $Ref)
(declare-const __flatten_36__69@199@08 Int)
(declare-const __flatten_32__65@200@08 Int)
(declare-const __flatten_38__71@201@08 $Ref)
(declare-const __flatten_39__72@202@08 Int)
(declare-const __flatten_37__70@203@08 Int)
(declare-const __flatten_41__74@204@08 $Ref)
(declare-const __flatten_42__75@205@08 Int)
(declare-const __flatten_40__73@206@08 Int)
(declare-const __flatten_43__76@207@08 Int)
(declare-const __flatten_45__78@208@08 $Ref)
(declare-const __flatten_46__79@209@08 Int)
(declare-const __flatten_47__80@210@08 $Ref)
(declare-const __flatten_48__81@211@08 Int)
(declare-const __flatten_44__77@212@08 Int)
(declare-const __flatten_50__83@213@08 $Ref)
(declare-const __flatten_51__84@214@08 $Ref)
(declare-const __flatten_52__85@215@08 Int)
(declare-const __flatten_53__86@216@08 $Ref)
(declare-const __flatten_54__87@217@08 Int)
(declare-const __flatten_49__82@218@08 Int)
(declare-const __flatten_56__88@219@08 Int)
(declare-const __flatten_58__90@220@08 $Ref)
(declare-const __flatten_57__89@221@08 $Ref)
(declare-const __flatten_60__92@222@08 $Ref)
(declare-const __flatten_59__91@223@08 $Ref)
(declare-const __flatten_62__94@224@08 $Ref)
(declare-const __flatten_63__95@225@08 Int)
(declare-const __flatten_61__93@226@08 Int)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@227@08 $Snap)
(assert (= $t@227@08 ($Snap.combine ($Snap.first $t@227@08) ($Snap.second $t@227@08))))
(declare-const $k@228@08 $Perm)
(assert ($Perm.isReadVar $k@228@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@228@08 $Perm.No) (< $Perm.No $k@228@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4819
;  :arith-add-rows          19
;  :arith-assert-diseq      80
;  :arith-assert-lower      256
;  :arith-assert-upper      231
;  :arith-conflicts         83
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               394
;  :datatype-accessor-ax    252
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2380
;  :mk-clause               387
;  :num-allocs              5228756
;  :num-checks              461
;  :propagations            216
;  :quant-instantiations    81
;  :rlimit-count            233773)
(assert (<= $Perm.No $k@228@08))
(assert (<= $k@228@08 $Perm.Write))
(assert (implies (< $Perm.No $k@228@08) (not (= diz@47@08 $Ref.null))))
(assert (=
  ($Snap.second $t@227@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@227@08))
    ($Snap.second ($Snap.second $t@227@08)))))
(assert (= ($Snap.first ($Snap.second $t@227@08)) $Snap.unit))
; [eval] diz.CASR_m != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4825
;  :arith-add-rows          19
;  :arith-assert-diseq      80
;  :arith-assert-lower      256
;  :arith-assert-upper      232
;  :arith-conflicts         83
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2383
;  :mk-clause               387
;  :num-allocs              5228756
;  :num-checks              462
;  :propagations            216
;  :quant-instantiations    81
;  :rlimit-count            234016)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@227@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@227@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4831
;  :arith-add-rows          19
;  :arith-assert-diseq      80
;  :arith-assert-lower      256
;  :arith-assert-upper      232
;  :arith-conflicts         83
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               396
;  :datatype-accessor-ax    254
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2386
;  :mk-clause               387
;  :num-allocs              5228756
;  :num-checks              463
;  :propagations            216
;  :quant-instantiations    82
;  :rlimit-count            234288)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@227@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4836
;  :arith-add-rows          19
;  :arith-assert-diseq      80
;  :arith-assert-lower      256
;  :arith-assert-upper      232
;  :arith-conflicts         83
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    255
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2387
;  :mk-clause               387
;  :num-allocs              5228756
;  :num-checks              464
;  :propagations            216
;  :quant-instantiations    82
;  :rlimit-count            234465)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
  $Snap.unit))
; [eval] |diz.CASR_m.Main_process_state| == 3
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4842
;  :arith-add-rows          19
;  :arith-assert-diseq      80
;  :arith-assert-lower      256
;  :arith-assert-upper      232
;  :arith-conflicts         83
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               398
;  :datatype-accessor-ax    256
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2389
;  :mk-clause               387
;  :num-allocs              5228756
;  :num-checks              465
;  :propagations            216
;  :quant-instantiations    82
;  :rlimit-count            234684)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4849
;  :arith-add-rows          19
;  :arith-assert-diseq      80
;  :arith-assert-lower      258
;  :arith-assert-upper      233
;  :arith-conflicts         83
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               399
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2395
;  :mk-clause               387
;  :num-allocs              5228756
;  :num-checks              466
;  :propagations            216
;  :quant-instantiations    84
;  :rlimit-count            235013)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
  $Snap.unit))
; [eval] |diz.CASR_m.Main_event_state| == 6
; [eval] |diz.CASR_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4855
;  :arith-add-rows          19
;  :arith-assert-diseq      80
;  :arith-assert-lower      258
;  :arith-assert-upper      233
;  :arith-conflicts         83
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               400
;  :datatype-accessor-ax    258
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2397
;  :mk-clause               387
;  :num-allocs              5228756
;  :num-checks              467
;  :propagations            216
;  :quant-instantiations    84
;  :rlimit-count            235252)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))
  $Snap.unit))
; [eval] (forall i__102: Int :: { diz.CASR_m.Main_process_state[i__102] } 0 <= i__102 && i__102 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__102] == -1 || 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|)
(declare-const i__102@229@08 Int)
(push) ; 7
; [eval] 0 <= i__102 && i__102 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__102] == -1 || 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= i__102 && i__102 < |diz.CASR_m.Main_process_state|
; [eval] 0 <= i__102
(push) ; 8
; [then-branch: 30 | 0 <= i__102@229@08 | live]
; [else-branch: 30 | !(0 <= i__102@229@08) | live]
(push) ; 9
; [then-branch: 30 | 0 <= i__102@229@08]
(assert (<= 0 i__102@229@08))
; [eval] i__102 < |diz.CASR_m.Main_process_state|
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4863
;  :arith-add-rows          19
;  :arith-assert-diseq      80
;  :arith-assert-lower      261
;  :arith-assert-upper      234
;  :arith-conflicts         83
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2405
;  :mk-clause               387
;  :num-allocs              5228756
;  :num-checks              468
;  :propagations            216
;  :quant-instantiations    86
;  :rlimit-count            235692)
(pop) ; 9
(push) ; 9
; [else-branch: 30 | !(0 <= i__102@229@08)]
(assert (not (<= 0 i__102@229@08)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 31 | i__102@229@08 < |First:(Second:(Second:(Second:($t@227@08))))| && 0 <= i__102@229@08 | live]
; [else-branch: 31 | !(i__102@229@08 < |First:(Second:(Second:(Second:($t@227@08))))| && 0 <= i__102@229@08) | live]
(push) ; 9
; [then-branch: 31 | i__102@229@08 < |First:(Second:(Second:(Second:($t@227@08))))| && 0 <= i__102@229@08]
(assert (and
  (<
    i__102@229@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
  (<= 0 i__102@229@08)))
; [eval] diz.CASR_m.Main_process_state[i__102] == -1 || 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__102] == -1
; [eval] diz.CASR_m.Main_process_state[i__102]
(push) ; 10
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4863
;  :arith-add-rows          19
;  :arith-assert-diseq      80
;  :arith-assert-lower      262
;  :arith-assert-upper      235
;  :arith-conflicts         83
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2407
;  :mk-clause               387
;  :num-allocs              5228756
;  :num-checks              469
;  :propagations            216
;  :quant-instantiations    86
;  :rlimit-count            235849)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__102@229@08 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4863
;  :arith-add-rows          19
;  :arith-assert-diseq      80
;  :arith-assert-lower      262
;  :arith-assert-upper      235
;  :arith-conflicts         83
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2407
;  :mk-clause               387
;  :num-allocs              5228756
;  :num-checks              470
;  :propagations            216
;  :quant-instantiations    86
;  :rlimit-count            235858)
; [eval] -1
(push) ; 10
; [then-branch: 32 | First:(Second:(Second:(Second:($t@227@08))))[i__102@229@08] == -1 | live]
; [else-branch: 32 | First:(Second:(Second:(Second:($t@227@08))))[i__102@229@08] != -1 | live]
(push) ; 11
; [then-branch: 32 | First:(Second:(Second:(Second:($t@227@08))))[i__102@229@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
    i__102@229@08)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 32 | First:(Second:(Second:(Second:($t@227@08))))[i__102@229@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
      i__102@229@08)
    (- 0 1))))
; [eval] 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= diz.CASR_m.Main_process_state[i__102]
; [eval] diz.CASR_m.Main_process_state[i__102]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4863
;  :arith-add-rows          19
;  :arith-assert-diseq      80
;  :arith-assert-lower      262
;  :arith-assert-upper      235
;  :arith-conflicts         83
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               403
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2408
;  :mk-clause               387
;  :num-allocs              5228756
;  :num-checks              471
;  :propagations            216
;  :quant-instantiations    86
;  :rlimit-count            236072)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__102@229@08 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4863
;  :arith-add-rows          19
;  :arith-assert-diseq      80
;  :arith-assert-lower      262
;  :arith-assert-upper      235
;  :arith-conflicts         83
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               403
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2408
;  :mk-clause               387
;  :num-allocs              5228756
;  :num-checks              472
;  :propagations            216
;  :quant-instantiations    86
;  :rlimit-count            236081)
(push) ; 12
; [then-branch: 33 | 0 <= First:(Second:(Second:(Second:($t@227@08))))[i__102@229@08] | live]
; [else-branch: 33 | !(0 <= First:(Second:(Second:(Second:($t@227@08))))[i__102@229@08]) | live]
(push) ; 13
; [then-branch: 33 | 0 <= First:(Second:(Second:(Second:($t@227@08))))[i__102@229@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
    i__102@229@08)))
; [eval] diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__102]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4863
;  :arith-add-rows          19
;  :arith-assert-diseq      81
;  :arith-assert-lower      265
;  :arith-assert-upper      235
;  :arith-conflicts         83
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2411
;  :mk-clause               388
;  :num-allocs              5228756
;  :num-checks              473
;  :propagations            216
;  :quant-instantiations    86
;  :rlimit-count            236244)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__102@229@08 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4863
;  :arith-add-rows          19
;  :arith-assert-diseq      81
;  :arith-assert-lower      265
;  :arith-assert-upper      235
;  :arith-conflicts         83
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2411
;  :mk-clause               388
;  :num-allocs              5228756
;  :num-checks              474
;  :propagations            216
;  :quant-instantiations    86
;  :rlimit-count            236253)
; [eval] |diz.CASR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4863
;  :arith-add-rows          19
;  :arith-assert-diseq      81
;  :arith-assert-lower      265
;  :arith-assert-upper      235
;  :arith-conflicts         83
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              334
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2411
;  :mk-clause               388
;  :num-allocs              5228756
;  :num-checks              475
;  :propagations            216
;  :quant-instantiations    86
;  :rlimit-count            236301)
(pop) ; 13
(push) ; 13
; [else-branch: 33 | !(0 <= First:(Second:(Second:(Second:($t@227@08))))[i__102@229@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
      i__102@229@08))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 31 | !(i__102@229@08 < |First:(Second:(Second:(Second:($t@227@08))))| && 0 <= i__102@229@08)]
(assert (not
  (and
    (<
      i__102@229@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
    (<= 0 i__102@229@08))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__102@229@08 Int)) (!
  (implies
    (and
      (<
        i__102@229@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
      (<= 0 i__102@229@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
          i__102@229@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
            i__102@229@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
            i__102@229@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
    i__102@229@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4868
;  :arith-add-rows          19
;  :arith-assert-diseq      81
;  :arith-assert-lower      265
;  :arith-assert-upper      235
;  :arith-conflicts         83
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2413
;  :mk-clause               388
;  :num-allocs              5228756
;  :num-checks              476
;  :propagations            216
;  :quant-instantiations    86
;  :rlimit-count            236926)
(declare-const $k@230@08 $Perm)
(assert ($Perm.isReadVar $k@230@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@230@08 $Perm.No) (< $Perm.No $k@230@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4868
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      236
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2417
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              477
;  :propagations            217
;  :quant-instantiations    86
;  :rlimit-count            237124)
(assert (<= $Perm.No $k@230@08))
(assert (<= $k@230@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@230@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4874
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    261
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2420
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              478
;  :propagations            217
;  :quant-instantiations    86
;  :rlimit-count            237447)
(push) ; 7
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4874
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               409
;  :datatype-accessor-ax    261
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2420
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              479
;  :propagations            217
;  :quant-instantiations    86
;  :rlimit-count            237495)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4880
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               410
;  :datatype-accessor-ax    262
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2423
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              480
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            237851)
(push) ; 7
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4880
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               411
;  :datatype-accessor-ax    262
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2423
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              481
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            237899)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4885
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               412
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2424
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              482
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            238156)
(push) ; 7
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4885
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               413
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2424
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              483
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            238204)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4890
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               414
;  :datatype-accessor-ax    264
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2425
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              484
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            238471)
(push) ; 7
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4890
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               415
;  :datatype-accessor-ax    264
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2425
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              485
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            238519)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4895
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               416
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2426
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              486
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            238796)
(push) ; 7
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4895
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               417
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2426
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              487
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            238844)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4900
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               418
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2427
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              488
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            239131)
(push) ; 7
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4900
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               419
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2427
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              489
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            239179)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4905
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    267
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2428
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              490
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            239476)
(push) ; 7
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4905
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    267
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2428
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              491
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            239524)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4910
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2429
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              492
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            239831)
(push) ; 7
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4910
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2429
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              493
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            239879)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4915
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               424
;  :datatype-accessor-ax    269
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2430
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              494
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            240196)
(push) ; 7
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4915
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    269
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2430
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              495
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            240244)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4920
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               426
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2431
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              496
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            240571)
(push) ; 7
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4920
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2431
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              497
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            240619)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4925
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2432
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              498
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            240956)
(push) ; 7
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4925
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2432
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              499
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            241004)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4930
;  :arith-add-rows          19
;  :arith-assert-diseq      82
;  :arith-assert-lower      267
;  :arith-assert-upper      237
;  :arith-conflicts         83
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2433
;  :mk-clause               390
;  :num-allocs              5228756
;  :num-checks              500
;  :propagations            217
;  :quant-instantiations    87
;  :rlimit-count            241351)
(declare-const $k@231@08 $Perm)
(assert ($Perm.isReadVar $k@231@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@231@08 $Perm.No) (< $Perm.No $k@231@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4930
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      238
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2437
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              501
;  :propagations            218
;  :quant-instantiations    87
;  :rlimit-count            241549)
(assert (<= $Perm.No $k@231@08))
(assert (<= $k@231@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@231@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4936
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2440
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              502
;  :propagations            218
;  :quant-instantiations    87
;  :rlimit-count            241992)
(push) ; 7
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4936
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2440
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              503
;  :propagations            218
;  :quant-instantiations    87
;  :rlimit-count            242040)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4942
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    274
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2443
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              504
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            242534)
(push) ; 7
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4942
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    274
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2443
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              505
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            242582)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4947
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    275
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2444
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              506
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            242959)
(push) ; 7
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4947
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    275
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2444
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              507
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            243007)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4952
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               438
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2445
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              508
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            243394)
(push) ; 7
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4952
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               439
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2445
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              509
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            243442)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4957
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               440
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2446
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              510
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            243839)
(push) ; 7
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4957
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2446
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              511
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            243887)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4962
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    278
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2447
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              512
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            244294)
(push) ; 7
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4962
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    278
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2447
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              513
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            244342)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4967
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               444
;  :datatype-accessor-ax    279
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2448
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              514
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            244759)
(push) ; 7
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4967
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               445
;  :datatype-accessor-ax    279
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2448
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              515
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            244807)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4972
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               446
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2449
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              516
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            245234)
(push) ; 7
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4972
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               447
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2449
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              517
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            245282)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4977
;  :arith-add-rows          19
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      239
;  :arith-conflicts         83
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               448
;  :datatype-accessor-ax    281
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2450
;  :mk-clause               392
;  :num-allocs              5228756
;  :num-checks              518
;  :propagations            218
;  :quant-instantiations    88
;  :rlimit-count            245719)
(declare-const $k@232@08 $Perm)
(assert ($Perm.isReadVar $k@232@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@232@08 $Perm.No) (< $Perm.No $k@232@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4977
;  :arith-add-rows          19
;  :arith-assert-diseq      84
;  :arith-assert-lower      271
;  :arith-assert-upper      240
;  :arith-conflicts         83
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    281
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2454
;  :mk-clause               394
;  :num-allocs              5228756
;  :num-checks              519
;  :propagations            219
;  :quant-instantiations    88
;  :rlimit-count            245918)
(assert (<= $Perm.No $k@232@08))
(assert (<= $k@232@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@232@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4983
;  :arith-add-rows          19
;  :arith-assert-diseq      84
;  :arith-assert-lower      271
;  :arith-assert-upper      241
;  :arith-conflicts         83
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    282
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2457
;  :mk-clause               394
;  :num-allocs              5228756
;  :num-checks              520
;  :propagations            219
;  :quant-instantiations    88
;  :rlimit-count            246451)
(push) ; 7
(assert (not (< $Perm.No $k@232@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4983
;  :arith-add-rows          19
;  :arith-assert-diseq      84
;  :arith-assert-lower      271
;  :arith-assert-upper      241
;  :arith-conflicts         83
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               451
;  :datatype-accessor-ax    282
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2457
;  :mk-clause               394
;  :num-allocs              5228756
;  :num-checks              521
;  :propagations            219
;  :quant-instantiations    88
;  :rlimit-count            246499)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4989
;  :arith-add-rows          19
;  :arith-assert-diseq      84
;  :arith-assert-lower      271
;  :arith-assert-upper      241
;  :arith-conflicts         83
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    283
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2460
;  :mk-clause               394
;  :num-allocs              5228756
;  :num-checks              522
;  :propagations            219
;  :quant-instantiations    89
;  :rlimit-count            247077)
(push) ; 7
(assert (not (< $Perm.No $k@232@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4989
;  :arith-add-rows          19
;  :arith-assert-diseq      84
;  :arith-assert-lower      271
;  :arith-assert-upper      241
;  :arith-conflicts         83
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               453
;  :datatype-accessor-ax    283
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2460
;  :mk-clause               394
;  :num-allocs              5228756
;  :num-checks              523
;  :propagations            219
;  :quant-instantiations    89
;  :rlimit-count            247125)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4994
;  :arith-add-rows          19
;  :arith-assert-diseq      84
;  :arith-assert-lower      271
;  :arith-assert-upper      241
;  :arith-conflicts         83
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    284
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2461
;  :mk-clause               394
;  :num-allocs              5228756
;  :num-checks              524
;  :propagations            219
;  :quant-instantiations    89
;  :rlimit-count            247592)
(push) ; 7
(assert (not (< $Perm.No $k@232@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4994
;  :arith-add-rows          19
;  :arith-assert-diseq      84
;  :arith-assert-lower      271
;  :arith-assert-upper      241
;  :arith-conflicts         83
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    284
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2461
;  :mk-clause               394
;  :num-allocs              5228756
;  :num-checks              525
;  :propagations            219
;  :quant-instantiations    89
;  :rlimit-count            247640)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4999
;  :arith-add-rows          19
;  :arith-assert-diseq      84
;  :arith-assert-lower      271
;  :arith-assert-upper      241
;  :arith-conflicts         83
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    285
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2462
;  :mk-clause               394
;  :num-allocs              5228756
;  :num-checks              526
;  :propagations            219
;  :quant-instantiations    89
;  :rlimit-count            248117)
(declare-const $k@233@08 $Perm)
(assert ($Perm.isReadVar $k@233@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@233@08 $Perm.No) (< $Perm.No $k@233@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4999
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      273
;  :arith-assert-upper      242
;  :arith-conflicts         83
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               457
;  :datatype-accessor-ax    285
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2466
;  :mk-clause               396
;  :num-allocs              5228756
;  :num-checks              527
;  :propagations            220
;  :quant-instantiations    89
;  :rlimit-count            248316)
(assert (<= $Perm.No $k@233@08))
(assert (<= $k@233@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@233@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5005
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      273
;  :arith-assert-upper      243
;  :arith-conflicts         83
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               458
;  :datatype-accessor-ax    286
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2469
;  :mk-clause               396
;  :num-allocs              5228756
;  :num-checks              528
;  :propagations            220
;  :quant-instantiations    89
;  :rlimit-count            248889)
(push) ; 7
(assert (not (< $Perm.No $k@233@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5005
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      273
;  :arith-assert-upper      243
;  :arith-conflicts         83
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    286
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2469
;  :mk-clause               396
;  :num-allocs              5228756
;  :num-checks              529
;  :propagations            220
;  :quant-instantiations    89
;  :rlimit-count            248937)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5011
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      273
;  :arith-assert-upper      243
;  :arith-conflicts         83
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               460
;  :datatype-accessor-ax    287
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2472
;  :mk-clause               396
;  :num-allocs              5228756
;  :num-checks              530
;  :propagations            220
;  :quant-instantiations    90
;  :rlimit-count            249545)
(push) ; 7
(assert (not (< $Perm.No $k@233@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5011
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      273
;  :arith-assert-upper      243
;  :arith-conflicts         83
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               461
;  :datatype-accessor-ax    287
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2472
;  :mk-clause               396
;  :num-allocs              5228756
;  :num-checks              531
;  :propagations            220
;  :quant-instantiations    90
;  :rlimit-count            249593)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5016
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      273
;  :arith-assert-upper      243
;  :arith-conflicts         83
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               462
;  :datatype-accessor-ax    288
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2473
;  :mk-clause               396
;  :num-allocs              5228756
;  :num-checks              532
;  :propagations            220
;  :quant-instantiations    90
;  :rlimit-count            250100)
(push) ; 7
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5016
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      273
;  :arith-assert-upper      243
;  :arith-conflicts         83
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               463
;  :datatype-accessor-ax    288
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2473
;  :mk-clause               396
;  :num-allocs              5228756
;  :num-checks              533
;  :propagations            220
;  :quant-instantiations    90
;  :rlimit-count            250148)
(declare-const $k@234@08 $Perm)
(assert ($Perm.isReadVar $k@234@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@234@08 $Perm.No) (< $Perm.No $k@234@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5016
;  :arith-add-rows          19
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      244
;  :arith-conflicts         83
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    288
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2477
;  :mk-clause               398
;  :num-allocs              5228756
;  :num-checks              534
;  :propagations            221
;  :quant-instantiations    90
;  :rlimit-count            250346)
(assert (<= $Perm.No $k@234@08))
(assert (<= $k@234@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@234@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn.Rng_m == diz.CASR_m
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5022
;  :arith-add-rows          19
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      245
;  :arith-conflicts         83
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2480
;  :mk-clause               398
;  :num-allocs              5228756
;  :num-checks              535
;  :propagations            221
;  :quant-instantiations    90
;  :rlimit-count            250949)
(push) ; 7
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5022
;  :arith-add-rows          19
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      245
;  :arith-conflicts         83
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2480
;  :mk-clause               398
;  :num-allocs              5228756
;  :num-checks              536
;  :propagations            221
;  :quant-instantiations    90
;  :rlimit-count            250997)
(push) ; 7
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5022
;  :arith-add-rows          19
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      245
;  :arith-conflicts         83
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               467
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2480
;  :mk-clause               398
;  :num-allocs              5228756
;  :num-checks              537
;  :propagations            221
;  :quant-instantiations    90
;  :rlimit-count            251045)
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5022
;  :arith-add-rows          19
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      245
;  :arith-conflicts         83
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2480
;  :mk-clause               398
;  :num-allocs              5228756
;  :num-checks              538
;  :propagations            221
;  :quant-instantiations    90
;  :rlimit-count            251093)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_casr == diz
(push) ; 7
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5027
;  :arith-add-rows          19
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      245
;  :arith-conflicts         83
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               469
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2483
;  :mk-clause               398
;  :num-allocs              5228756
;  :num-checks              539
;  :propagations            221
;  :quant-instantiations    91
;  :rlimit-count            251677)
(push) ; 7
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5027
;  :arith-add-rows          19
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      245
;  :arith-conflicts         83
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               470
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              335
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2483
;  :mk-clause               398
;  :num-allocs              5228756
;  :num-checks              540
;  :propagations            221
;  :quant-instantiations    91
;  :rlimit-count            251725)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))
  diz@47@08))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
(pop) ; 7
(push) ; 7
; [eval] !true
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(declare-const $k@235@08 $Perm)
(assert ($Perm.isReadVar $k@235@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@235@08 $Perm.No) (< $Perm.No $k@235@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5030
;  :arith-add-rows          19
;  :arith-assert-diseq      87
;  :arith-assert-lower      277
;  :arith-assert-upper      246
;  :arith-conflicts         83
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               471
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              347
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2488
;  :mk-clause               400
;  :num-allocs              5228756
;  :num-checks              541
;  :propagations            222
;  :quant-instantiations    91
;  :rlimit-count            252201)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ $k@132@08 (- $k@50@08 $k@139@08)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          19
;  :arith-assert-diseq      87
;  :arith-assert-lower      277
;  :arith-assert-upper      247
;  :arith-conflicts         84
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         89
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2490
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              542
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            252281)
(assert (< $k@235@08 (+ $k@132@08 (- $k@50@08 $k@139@08))))
(assert (<= $Perm.No (- (+ $k@132@08 (- $k@50@08 $k@139@08)) $k@235@08)))
(assert (<= (- (+ $k@132@08 (- $k@50@08 $k@139@08)) $k@235@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@132@08 (- $k@50@08 $k@139@08)) $k@235@08))
  (not (= diz@47@08 $Ref.null))))
; [eval] diz.CASR_m != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      249
;  :arith-conflicts         85
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         90
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               473
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2494
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              543
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            252550)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= $t@172@08 $Ref.null))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      249
;  :arith-conflicts         85
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         90
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               473
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2494
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              544
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            252568)
(assert (not (= $t@172@08 $Ref.null)))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      250
;  :arith-conflicts         86
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         91
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               474
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2495
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              545
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            252669)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      250
;  :arith-conflicts         86
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         91
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               475
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2496
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              546
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            252749)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      251
;  :arith-conflicts         87
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         92
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               476
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2497
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              547
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            252830)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      251
;  :arith-conflicts         87
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         92
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               477
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2498
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              548
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            252910)
; [eval] |diz.CASR_m.Main_process_state| == 3
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      252
;  :arith-conflicts         88
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         93
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               478
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2499
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              549
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            252991)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      252
;  :arith-conflicts         88
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         93
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               479
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2500
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              550
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            253071)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      253
;  :arith-conflicts         89
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         94
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               480
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2501
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              551
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            253152)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      253
;  :arith-conflicts         89
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         94
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               481
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2502
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              552
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            253232)
; [eval] |diz.CASR_m.Main_event_state| == 6
; [eval] |diz.CASR_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      254
;  :arith-conflicts         90
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         95
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               482
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2503
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              553
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            253313)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      254
;  :arith-conflicts         90
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         95
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2504
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              554
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            253393)
; [eval] (forall i__102: Int :: { diz.CASR_m.Main_process_state[i__102] } 0 <= i__102 && i__102 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__102] == -1 || 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|)
(declare-const i__102@236@08 Int)
(push) ; 7
; [eval] 0 <= i__102 && i__102 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__102] == -1 || 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= i__102 && i__102 < |diz.CASR_m.Main_process_state|
; [eval] 0 <= i__102
(push) ; 8
; [then-branch: 34 | 0 <= i__102@236@08 | live]
; [else-branch: 34 | !(0 <= i__102@236@08) | live]
(push) ; 9
; [then-branch: 34 | 0 <= i__102@236@08]
(assert (<= 0 i__102@236@08))
; [eval] i__102 < |diz.CASR_m.Main_process_state|
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      280
;  :arith-assert-upper      255
;  :arith-conflicts         91
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         96
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               484
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2506
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              555
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            253527)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      280
;  :arith-assert-upper      255
;  :arith-conflicts         91
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         96
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               485
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2507
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              556
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            253607)
(pop) ; 9
(push) ; 9
; [else-branch: 34 | !(0 <= i__102@236@08)]
(assert (not (<= 0 i__102@236@08)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 35 | i__102@236@08 < |First:(Second:(Second:(Second:($t@131@08))))| && 0 <= i__102@236@08 | live]
; [else-branch: 35 | !(i__102@236@08 < |First:(Second:(Second:(Second:($t@131@08))))| && 0 <= i__102@236@08) | live]
(push) ; 9
; [then-branch: 35 | i__102@236@08 < |First:(Second:(Second:(Second:($t@131@08))))| && 0 <= i__102@236@08]
(assert (and
  (<
    i__102@236@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
  (<= 0 i__102@236@08)))
; [eval] diz.CASR_m.Main_process_state[i__102] == -1 || 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__102] == -1
; [eval] diz.CASR_m.Main_process_state[i__102]
(push) ; 10
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      281
;  :arith-assert-upper      257
;  :arith-conflicts         92
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         97
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               486
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2510
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              557
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            253797)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      281
;  :arith-assert-upper      257
;  :arith-conflicts         92
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         97
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               487
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2511
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              558
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            253877)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__102@236@08 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      87
;  :arith-assert-lower      281
;  :arith-assert-upper      257
;  :arith-conflicts         92
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         97
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               487
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2511
;  :mk-clause               402
;  :num-allocs              5228756
;  :num-checks              559
;  :propagations            223
;  :quant-instantiations    91
;  :rlimit-count            253886)
; [eval] -1
(push) ; 10
; [then-branch: 36 | First:(Second:(Second:(Second:($t@131@08))))[i__102@236@08] == -1 | live]
; [else-branch: 36 | First:(Second:(Second:(Second:($t@131@08))))[i__102@236@08] != -1 | live]
(push) ; 11
; [then-branch: 36 | First:(Second:(Second:(Second:($t@131@08))))[i__102@236@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    i__102@236@08)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 36 | First:(Second:(Second:(Second:($t@131@08))))[i__102@236@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
      i__102@236@08)
    (- 0 1))))
; [eval] 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= diz.CASR_m.Main_process_state[i__102]
; [eval] diz.CASR_m.Main_process_state[i__102]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      88
;  :arith-assert-lower      284
;  :arith-assert-upper      259
;  :arith-conflicts         93
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         98
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               488
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2518
;  :mk-clause               406
;  :num-allocs              5228756
;  :num-checks              560
;  :propagations            225
;  :quant-instantiations    92
;  :rlimit-count            254190)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      88
;  :arith-assert-lower      284
;  :arith-assert-upper      259
;  :arith-conflicts         93
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         98
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               489
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2519
;  :mk-clause               406
;  :num-allocs              5228756
;  :num-checks              561
;  :propagations            225
;  :quant-instantiations    92
;  :rlimit-count            254270)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__102@236@08 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      88
;  :arith-assert-lower      284
;  :arith-assert-upper      259
;  :arith-conflicts         93
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         98
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               489
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2519
;  :mk-clause               406
;  :num-allocs              5228756
;  :num-checks              562
;  :propagations            225
;  :quant-instantiations    92
;  :rlimit-count            254279)
(push) ; 12
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@131@08))))[i__102@236@08] | live]
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@131@08))))[i__102@236@08]) | live]
(push) ; 13
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@131@08))))[i__102@236@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    i__102@236@08)))
; [eval] diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__102]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      88
;  :arith-assert-lower      284
;  :arith-assert-upper      260
;  :arith-conflicts         94
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         99
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               490
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2520
;  :mk-clause               406
;  :num-allocs              5228756
;  :num-checks              563
;  :propagations            225
;  :quant-instantiations    92
;  :rlimit-count            254465)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      88
;  :arith-assert-lower      284
;  :arith-assert-upper      260
;  :arith-conflicts         94
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         99
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               491
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2521
;  :mk-clause               406
;  :num-allocs              5228756
;  :num-checks              564
;  :propagations            225
;  :quant-instantiations    92
;  :rlimit-count            254545)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__102@236@08 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      88
;  :arith-assert-lower      284
;  :arith-assert-upper      260
;  :arith-conflicts         94
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         99
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               491
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2521
;  :mk-clause               406
;  :num-allocs              5228756
;  :num-checks              565
;  :propagations            225
;  :quant-instantiations    92
;  :rlimit-count            254554)
; [eval] |diz.CASR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      88
;  :arith-assert-lower      284
;  :arith-assert-upper      261
;  :arith-conflicts         95
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         100
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               492
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2522
;  :mk-clause               406
;  :num-allocs              5228756
;  :num-checks              566
;  :propagations            225
;  :quant-instantiations    92
;  :rlimit-count            254635)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      88
;  :arith-assert-lower      284
;  :arith-assert-upper      261
;  :arith-conflicts         95
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         100
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               493
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              349
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2523
;  :mk-clause               406
;  :num-allocs              5228756
;  :num-checks              567
;  :propagations            225
;  :quant-instantiations    92
;  :rlimit-count            254715)
(pop) ; 13
(push) ; 13
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@131@08))))[i__102@236@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
      i__102@236@08))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 35 | !(i__102@236@08 < |First:(Second:(Second:(Second:($t@131@08))))| && 0 <= i__102@236@08)]
(assert (not
  (and
    (<
      i__102@236@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
    (<= 0 i__102@236@08))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__102@236@08 Int)) (!
  (implies
    (and
      (<
        i__102@236@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
      (<= 0 i__102@236@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
          i__102@236@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
            i__102@236@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
            i__102@236@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    i__102@236@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      262
;  :arith-conflicts         95
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         100
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               494
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              367
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2531
;  :mk-clause               420
;  :num-allocs              5228756
;  :num-checks              568
;  :propagations            227
;  :quant-instantiations    93
;  :rlimit-count            255161)
(assert (forall ((i__102@236@08 Int)) (!
  (implies
    (and
      (<
        i__102@236@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))
      (<= 0 i__102@236@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
          i__102@236@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
            i__102@236@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
            i__102@236@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))
    i__102@236@08))
  :qid |prog.l<no position>|)))
(declare-const $k@237@08 $Perm)
(assert ($Perm.isReadVar $k@237@08 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      91
;  :arith-assert-lower      287
;  :arith-assert-upper      264
;  :arith-conflicts         96
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         101
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               495
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              367
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2537
;  :mk-clause               422
;  :num-allocs              5228756
;  :num-checks              569
;  :propagations            228
;  :quant-instantiations    93
;  :rlimit-count            255754)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@237@08 $Perm.No) (< $Perm.No $k@237@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      91
;  :arith-assert-lower      287
;  :arith-assert-upper      264
;  :arith-conflicts         96
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         101
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               496
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              367
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2537
;  :mk-clause               422
;  :num-allocs              5228756
;  :num-checks              570
;  :propagations            228
;  :quant-instantiations    93
;  :rlimit-count            255804)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      91
;  :arith-assert-lower      287
;  :arith-assert-upper      264
;  :arith-conflicts         96
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         101
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               496
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              367
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2537
;  :mk-clause               422
;  :num-allocs              5228756
;  :num-checks              571
;  :propagations            228
;  :quant-instantiations    93
;  :rlimit-count            255815)
(push) ; 7
(assert (not (not (= (- $k@118@08 $k@141@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          21
;  :arith-assert-diseq      91
;  :arith-assert-lower      287
;  :arith-assert-upper      264
;  :arith-conflicts         96
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         101
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               497
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              367
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2538
;  :mk-clause               422
;  :num-allocs              5228756
;  :num-checks              572
;  :propagations            228
;  :quant-instantiations    93
;  :rlimit-count            255883)
(assert (< $k@237@08 (- $k@118@08 $k@141@08)))
(assert (<= $Perm.No (- (- $k@118@08 $k@141@08) $k@237@08)))
(assert (<= (- (- $k@118@08 $k@141@08) $k@237@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@118@08 $k@141@08) $k@237@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      266
;  :arith-conflicts         97
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         102
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               498
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              367
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2542
;  :mk-clause               422
;  :num-allocs              5228756
;  :num-checks              573
;  :propagations            228
;  :quant-instantiations    93
;  :rlimit-count            256170)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      266
;  :arith-conflicts         97
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         102
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               498
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              367
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2542
;  :mk-clause               422
;  :num-allocs              5228756
;  :num-checks              574
;  :propagations            228
;  :quant-instantiations    93
;  :rlimit-count            256181)
(push) ; 7
(assert (not (< $Perm.No (- $k@118@08 $k@141@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      266
;  :arith-conflicts         97
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         102
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               498
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              367
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2542
;  :mk-clause               422
;  :num-allocs              5228756
;  :num-checks              575
;  :propagations            228
;  :quant-instantiations    93
;  :rlimit-count            256200)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      267
;  :arith-conflicts         98
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         103
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               499
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              367
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2543
;  :mk-clause               422
;  :num-allocs              5228756
;  :num-checks              576
;  :propagations            228
;  :quant-instantiations    93
;  :rlimit-count            256281)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      267
;  :arith-conflicts         98
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         103
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               499
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              367
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2543
;  :mk-clause               422
;  :num-allocs              5228756
;  :num-checks              577
;  :propagations            228
;  :quant-instantiations    93
;  :rlimit-count            256292)
(push) ; 7
(assert (not (< $Perm.No (- $k@118@08 $k@141@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5031
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      267
;  :arith-conflicts         98
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         103
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               499
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1248
;  :datatype-occurs-check   314
;  :datatype-splits         1101
;  :decisions               1211
;  :del-clause              367
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2543
;  :mk-clause               422
;  :num-allocs              5228756
;  :num-checks              578
;  :propagations            228
;  :quant-instantiations    93
;  :rlimit-count            256311)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5267
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      267
;  :arith-conflicts         98
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         103
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               500
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1332
;  :datatype-occurs-check   325
;  :datatype-splits         1158
;  :decisions               1292
;  :del-clause              368
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2603
;  :mk-clause               423
;  :num-allocs              5228756
;  :num-checks              579
;  :propagations            230
;  :quant-instantiations    93
;  :rlimit-count            258181)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5613
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      267
;  :arith-conflicts         98
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         103
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               501
;  :datatype-accessor-ax    296
;  :datatype-constructor-ax 1446
;  :datatype-occurs-check   347
;  :datatype-splits         1268
;  :decisions               1402
;  :del-clause              372
;  :final-checks            79
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2711
;  :mk-clause               423
;  :num-allocs              5228756
;  :num-checks              582
;  :propagations            234
;  :quant-instantiations    93
;  :rlimit-count            260795)
(declare-const $t@238@08 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5849
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      267
;  :arith-conflicts         98
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         103
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               502
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2771
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              583
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            262665
;  :time                    0.00)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5849
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      267
;  :arith-conflicts         98
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         103
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               503
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2772
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              584
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            262745)
(declare-const $t@239@08 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5849
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      267
;  :arith-conflicts         98
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         103
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               504
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2773
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              585
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            262825)
(declare-const $t@240@08 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5849
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      267
;  :arith-conflicts         98
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         103
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               505
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2774
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              586
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            262905)
(declare-const $t@241@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@118@08 $k@141@08) $k@237@08))
    (=
      $t@238@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))
  (implies
    (< $Perm.No $k@134@08)
    (=
      $t@238@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@137@08)
    (=
      $t@239@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@122@08 $k@144@08))
    (=
      $t@239@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@136@08)
    (=
      $t@240@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@121@08 $k@143@08))
    (=
      $t@240@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@135@08)
    (=
      $t@241@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))
  (implies
    (< $Perm.No (- (+ $k@51@08 $k@119@08) $k@142@08))
    (= $t@241@08 $t@120@08))))
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5862
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      267
;  :arith-conflicts         98
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         103
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               506
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2781
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              587
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            264273)
(declare-const $t@242@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@123@08 $k@145@08))
    (=
      $t@242@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@138@08)
    (=
      $t@242@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@135@08 (- (+ $k@51@08 $k@119@08) $k@142@08))))
(assert (<= (+ $k@135@08 (- (+ $k@51@08 $k@119@08) $k@142@08)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@135@08 (- (+ $k@51@08 $k@119@08) $k@142@08)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (<= $Perm.No (+ $k@136@08 (- $k@121@08 $k@143@08))))
(assert (<= (+ $k@136@08 (- $k@121@08 $k@143@08)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@136@08 (- $k@121@08 $k@143@08)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (<= $Perm.No (+ $k@137@08 (- $k@122@08 $k@144@08))))
(assert (<= (+ $k@137@08 (- $k@122@08 $k@144@08)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@137@08 (- $k@122@08 $k@144@08)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@118@08 $k@141@08) $k@237@08) $k@134@08)))
(assert (<= (+ (- (- $k@118@08 $k@141@08) $k@237@08) $k@134@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@118@08 $k@141@08) $k@237@08) $k@134@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08)))
      $Ref.null))))
(assert (<= $Perm.No (+ (- $k@123@08 $k@145@08) $k@138@08)))
(assert (<= (+ (- $k@123@08 $k@145@08) $k@138@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@123@08 $k@145@08) $k@138@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))
      $Ref.null))))
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      272
;  :arith-conflicts         98
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         103
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               507
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2793
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              588
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            265157)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      273
;  :arith-conflicts         99
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         104
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               508
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2794
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              589
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            265238)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      273
;  :arith-conflicts         99
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         104
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               508
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2794
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              590
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            265249)
(push) ; 7
(assert (not (< $Perm.No (- $k@118@08 $k@141@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      273
;  :arith-conflicts         99
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         104
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               508
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2794
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              591
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            265268)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      273
;  :arith-conflicts         99
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         104
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               509
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2795
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              592
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            265428)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      274
;  :arith-conflicts         100
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         105
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               510
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2796
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              593
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            265509)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      274
;  :arith-conflicts         100
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         105
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               510
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2796
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              594
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            265520)
(push) ; 7
(assert (not (< $Perm.No (- $k@118@08 $k@141@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      274
;  :arith-conflicts         100
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         105
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               510
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2796
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              595
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            265539)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      274
;  :arith-conflicts         100
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         105
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               511
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2797
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              596
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            265699)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      275
;  :arith-conflicts         101
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         106
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               512
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2798
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              597
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            265780)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      275
;  :arith-conflicts         101
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         106
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               512
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2798
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              598
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            265791)
(push) ; 7
(assert (not (< $Perm.No (- $k@118@08 $k@141@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      275
;  :arith-conflicts         101
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         106
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               512
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2798
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              599
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            265810)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      275
;  :arith-conflicts         101
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         106
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2799
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              600
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            265970)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      276
;  :arith-conflicts         102
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         107
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               514
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2800
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              601
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266051)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      276
;  :arith-conflicts         102
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         107
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               514
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2800
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              602
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266062)
(push) ; 7
(assert (not (< $Perm.No (- $k@118@08 $k@141@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      276
;  :arith-conflicts         102
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         107
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               514
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2800
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              603
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266081)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      276
;  :arith-conflicts         102
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         107
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               515
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2801
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              604
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266241)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      277
;  :arith-conflicts         103
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         108
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               516
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2802
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              605
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266322)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      277
;  :arith-conflicts         103
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         108
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               516
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2802
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              606
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266333)
(push) ; 7
(assert (not (< $Perm.No (- $k@118@08 $k@141@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      277
;  :arith-conflicts         103
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         108
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               516
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2802
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              607
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266352)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      277
;  :arith-conflicts         103
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         108
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               517
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2803
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              608
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266512)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      278
;  :arith-conflicts         104
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         109
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               518
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2804
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              609
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266593)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      278
;  :arith-conflicts         104
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         109
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               518
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2804
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              610
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266604)
(push) ; 7
(assert (not (< $Perm.No (- $k@118@08 $k@141@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      278
;  :arith-conflicts         104
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         109
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               518
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2804
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              611
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266623)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      278
;  :arith-conflicts         104
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         109
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               519
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2805
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              612
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266783)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      279
;  :arith-conflicts         105
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         110
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2806
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              613
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266864)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      279
;  :arith-conflicts         105
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         110
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2806
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              614
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266875)
(push) ; 7
(assert (not (< $Perm.No (- $k@118@08 $k@141@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      279
;  :arith-conflicts         105
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         110
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2806
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              615
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            266894)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      279
;  :arith-conflicts         105
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         110
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2807
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              616
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            267054)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      280
;  :arith-conflicts         106
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         111
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               522
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2808
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              617
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            267135)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      280
;  :arith-conflicts         106
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         111
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               522
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2808
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              618
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            267146)
(push) ; 7
(assert (not (< $Perm.No (- $k@118@08 $k@141@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      280
;  :arith-conflicts         106
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         111
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               522
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2808
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              619
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            267165)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      280
;  :arith-conflicts         106
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         111
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               523
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2809
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              620
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            267325)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      281
;  :arith-conflicts         107
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         112
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               524
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2810
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              621
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            267406)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      281
;  :arith-conflicts         107
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         112
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               524
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2810
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              622
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            267417)
(push) ; 7
(assert (not (< $Perm.No (- $k@118@08 $k@141@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      281
;  :arith-conflicts         107
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         112
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               524
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2810
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              623
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            267436)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      91
;  :arith-assert-lower      294
;  :arith-assert-upper      281
;  :arith-conflicts         107
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         112
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               525
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2811
;  :mk-clause               424
;  :num-allocs              5228756
;  :num-checks              624
;  :propagations            236
;  :quant-instantiations    93
;  :rlimit-count            267596)
(declare-const $k@243@08 $Perm)
(assert ($Perm.isReadVar $k@243@08 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      92
;  :arith-assert-lower      296
;  :arith-assert-upper      283
;  :arith-conflicts         108
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         113
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               526
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2816
;  :mk-clause               426
;  :num-allocs              5228756
;  :num-checks              625
;  :propagations            237
;  :quant-instantiations    93
;  :rlimit-count            267825)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@243@08 $Perm.No) (< $Perm.No $k@243@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      92
;  :arith-assert-lower      296
;  :arith-assert-upper      283
;  :arith-conflicts         108
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         113
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               527
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2816
;  :mk-clause               426
;  :num-allocs              5228756
;  :num-checks              626
;  :propagations            237
;  :quant-instantiations    93
;  :rlimit-count            267875)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          27
;  :arith-assert-diseq      92
;  :arith-assert-lower      296
;  :arith-assert-upper      283
;  :arith-conflicts         108
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         113
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               528
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              373
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2817
;  :mk-clause               426
;  :num-allocs              5228756
;  :num-checks              627
;  :propagations            237
;  :quant-instantiations    93
;  :rlimit-count            267955)
(push) ; 7
(assert (not (not (= (+ $k@135@08 (- (+ $k@51@08 $k@119@08) $k@142@08)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          27
;  :arith-assert-diseq      92
;  :arith-assert-lower      296
;  :arith-assert-upper      284
;  :arith-conflicts         109
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         113
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               529
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2819
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              628
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268043)
(assert (< $k@243@08 (+ $k@135@08 (- (+ $k@51@08 $k@119@08) $k@142@08))))
(assert (<= $Perm.No (- (+ $k@135@08 (- (+ $k@51@08 $k@119@08) $k@142@08)) $k@243@08)))
(assert (<= (- (+ $k@135@08 (- (+ $k@51@08 $k@119@08) $k@142@08)) $k@243@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@135@08 (- (+ $k@51@08 $k@119@08) $k@142@08)) $k@243@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_casr != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      286
;  :arith-conflicts         110
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         114
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               530
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2823
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              629
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268316)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      286
;  :arith-conflicts         110
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         114
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               530
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2823
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              630
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268327)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@51@08 $k@119@08) $k@142@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      286
;  :arith-conflicts         110
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         114
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               530
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2823
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              631
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268348)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      287
;  :arith-conflicts         111
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         115
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               531
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2824
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              632
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268429)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      287
;  :arith-conflicts         111
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         115
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               531
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2824
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              633
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268440)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@51@08 $k@119@08) $k@142@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      287
;  :arith-conflicts         111
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         115
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               531
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2824
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              634
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268461)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
  $t@120@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      287
;  :arith-conflicts         111
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         115
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               531
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2824
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              635
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268472)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      288
;  :arith-conflicts         112
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         116
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2825
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              636
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268553)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      288
;  :arith-conflicts         112
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         116
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2825
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              637
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268564)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@51@08 $k@119@08) $k@142@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      288
;  :arith-conflicts         112
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         116
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2825
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              638
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268585)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
  $t@120@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      288
;  :arith-conflicts         112
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         116
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2825
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              639
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268596)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      289
;  :arith-conflicts         113
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         117
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               533
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2826
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              640
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268677)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      289
;  :arith-conflicts         113
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         117
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               533
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2826
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              641
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268688)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@51@08 $k@119@08) $k@142@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      289
;  :arith-conflicts         113
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         117
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               533
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2826
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              642
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268709)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
  $t@120@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      289
;  :arith-conflicts         113
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         117
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               533
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2826
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              643
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268720)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      290
;  :arith-conflicts         114
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         118
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2827
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              644
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268801)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      290
;  :arith-conflicts         114
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         118
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2827
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              645
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268812)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@51@08 $k@119@08) $k@142@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      290
;  :arith-conflicts         114
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         118
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2827
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              646
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268833)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
  $t@120@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      290
;  :arith-conflicts         114
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         118
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2827
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              647
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268844)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      291
;  :arith-conflicts         115
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         119
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               535
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2828
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              648
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268925)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      291
;  :arith-conflicts         115
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         119
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               535
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2828
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              649
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268936)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@51@08 $k@119@08) $k@142@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      291
;  :arith-conflicts         115
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         119
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               535
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2828
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              650
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268957)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
  $t@120@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      291
;  :arith-conflicts         115
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         119
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               535
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2828
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              651
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            268968)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      292
;  :arith-conflicts         116
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         120
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2829
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              652
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            269049)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      292
;  :arith-conflicts         116
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         120
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2829
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              653
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            269060)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@51@08 $k@119@08) $k@142@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      292
;  :arith-conflicts         116
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         120
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2829
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              654
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            269081)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
  $t@120@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      292
;  :arith-conflicts         116
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         120
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2829
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              655
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            269092)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      293
;  :arith-conflicts         117
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         121
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               537
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2830
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              656
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            269173)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      293
;  :arith-conflicts         117
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         121
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               537
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2830
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              657
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            269184)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@51@08 $k@119@08) $k@142@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      293
;  :arith-conflicts         117
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         121
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               537
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2830
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              658
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            269205)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08))))))))))))))))))))))
  $t@120@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      92
;  :arith-assert-lower      298
;  :arith-assert-upper      293
;  :arith-conflicts         117
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         121
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               537
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2830
;  :mk-clause               428
;  :num-allocs              5228756
;  :num-checks              659
;  :propagations            238
;  :quant-instantiations    93
;  :rlimit-count            269216)
(declare-const $k@244@08 $Perm)
(assert ($Perm.isReadVar $k@244@08 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      93
;  :arith-assert-lower      300
;  :arith-assert-upper      295
;  :arith-conflicts         118
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         122
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               538
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2835
;  :mk-clause               430
;  :num-allocs              5228756
;  :num-checks              660
;  :propagations            239
;  :quant-instantiations    93
;  :rlimit-count            269446)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@244@08 $Perm.No) (< $Perm.No $k@244@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      93
;  :arith-assert-lower      300
;  :arith-assert-upper      295
;  :arith-conflicts         118
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         122
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               539
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2835
;  :mk-clause               430
;  :num-allocs              5228756
;  :num-checks              661
;  :propagations            239
;  :quant-instantiations    93
;  :rlimit-count            269496)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          29
;  :arith-assert-diseq      93
;  :arith-assert-lower      300
;  :arith-assert-upper      295
;  :arith-conflicts         118
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         122
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               540
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              375
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2836
;  :mk-clause               430
;  :num-allocs              5228756
;  :num-checks              662
;  :propagations            239
;  :quant-instantiations    93
;  :rlimit-count            269576)
(push) ; 7
(assert (not (not (= (+ $k@136@08 (- $k@121@08 $k@143@08)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          29
;  :arith-assert-diseq      93
;  :arith-assert-lower      300
;  :arith-assert-upper      296
;  :arith-conflicts         119
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         122
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               541
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2838
;  :mk-clause               432
;  :num-allocs              5228756
;  :num-checks              663
;  :propagations            240
;  :quant-instantiations    93
;  :rlimit-count            269660)
(assert (< $k@244@08 (+ $k@136@08 (- $k@121@08 $k@143@08))))
(assert (<= $Perm.No (- (+ $k@136@08 (- $k@121@08 $k@143@08)) $k@244@08)))
(assert (<= (- (+ $k@136@08 (- $k@121@08 $k@143@08)) $k@244@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@136@08 (- $k@121@08 $k@143@08)) $k@244@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_lfsr != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      93
;  :arith-assert-lower      302
;  :arith-assert-upper      298
;  :arith-conflicts         120
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         123
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2842
;  :mk-clause               432
;  :num-allocs              5228756
;  :num-checks              664
;  :propagations            240
;  :quant-instantiations    93
;  :rlimit-count            269929)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      93
;  :arith-assert-lower      302
;  :arith-assert-upper      298
;  :arith-conflicts         120
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         123
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2842
;  :mk-clause               432
;  :num-allocs              5228756
;  :num-checks              665
;  :propagations            240
;  :quant-instantiations    93
;  :rlimit-count            269940)
(push) ; 7
(assert (not (< $Perm.No (- $k@121@08 $k@143@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      93
;  :arith-assert-lower      302
;  :arith-assert-upper      298
;  :arith-conflicts         120
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         123
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2842
;  :mk-clause               432
;  :num-allocs              5228756
;  :num-checks              666
;  :propagations            240
;  :quant-instantiations    93
;  :rlimit-count            269959)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      93
;  :arith-assert-lower      302
;  :arith-assert-upper      299
;  :arith-conflicts         121
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         124
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2843
;  :mk-clause               432
;  :num-allocs              5228756
;  :num-checks              667
;  :propagations            240
;  :quant-instantiations    93
;  :rlimit-count            270040)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      93
;  :arith-assert-lower      302
;  :arith-assert-upper      299
;  :arith-conflicts         121
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         124
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2843
;  :mk-clause               432
;  :num-allocs              5228756
;  :num-checks              668
;  :propagations            240
;  :quant-instantiations    93
;  :rlimit-count            270051)
(push) ; 7
(assert (not (< $Perm.No (- $k@121@08 $k@143@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      93
;  :arith-assert-lower      302
;  :arith-assert-upper      299
;  :arith-conflicts         121
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         124
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2843
;  :mk-clause               432
;  :num-allocs              5228756
;  :num-checks              669
;  :propagations            240
;  :quant-instantiations    93
;  :rlimit-count            270070)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      93
;  :arith-assert-lower      302
;  :arith-assert-upper      299
;  :arith-conflicts         121
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         124
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2844
;  :mk-clause               432
;  :num-allocs              5228756
;  :num-checks              670
;  :propagations            240
;  :quant-instantiations    93
;  :rlimit-count            270440)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      93
;  :arith-assert-lower      302
;  :arith-assert-upper      300
;  :arith-conflicts         122
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         125
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               545
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2845
;  :mk-clause               432
;  :num-allocs              5228756
;  :num-checks              671
;  :propagations            240
;  :quant-instantiations    93
;  :rlimit-count            270521)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      93
;  :arith-assert-lower      302
;  :arith-assert-upper      300
;  :arith-conflicts         122
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         125
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               545
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2845
;  :mk-clause               432
;  :num-allocs              5228756
;  :num-checks              672
;  :propagations            240
;  :quant-instantiations    93
;  :rlimit-count            270532)
(push) ; 7
(assert (not (< $Perm.No (- $k@121@08 $k@143@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      93
;  :arith-assert-lower      302
;  :arith-assert-upper      300
;  :arith-conflicts         122
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         125
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               545
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2845
;  :mk-clause               432
;  :num-allocs              5228756
;  :num-checks              673
;  :propagations            240
;  :quant-instantiations    93
;  :rlimit-count            270551)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      93
;  :arith-assert-lower      302
;  :arith-assert-upper      300
;  :arith-conflicts         122
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         125
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               546
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2846
;  :mk-clause               432
;  :num-allocs              5228756
;  :num-checks              674
;  :propagations            240
;  :quant-instantiations    93
;  :rlimit-count            270921)
(declare-const $k@245@08 $Perm)
(assert ($Perm.isReadVar $k@245@08 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      94
;  :arith-assert-lower      304
;  :arith-assert-upper      302
;  :arith-conflicts         123
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         126
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               547
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2851
;  :mk-clause               434
;  :num-allocs              5228756
;  :num-checks              675
;  :propagations            241
;  :quant-instantiations    93
;  :rlimit-count            271151)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@245@08 $Perm.No) (< $Perm.No $k@245@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      94
;  :arith-assert-lower      304
;  :arith-assert-upper      302
;  :arith-conflicts         123
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         126
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               548
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2851
;  :mk-clause               434
;  :num-allocs              5228756
;  :num-checks              676
;  :propagations            241
;  :quant-instantiations    93
;  :rlimit-count            271201)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5865
;  :arith-add-rows          31
;  :arith-assert-diseq      94
;  :arith-assert-lower      304
;  :arith-assert-upper      302
;  :arith-conflicts         123
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         126
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              377
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2852
;  :mk-clause               434
;  :num-allocs              5228756
;  :num-checks              677
;  :propagations            241
;  :quant-instantiations    93
;  :rlimit-count            271281)
(push) ; 7
(assert (not (not (= (+ $k@137@08 (- $k@122@08 $k@144@08)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5866
;  :arith-add-rows          31
;  :arith-assert-diseq      94
;  :arith-assert-lower      304
;  :arith-assert-upper      303
;  :arith-conflicts         124
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         126
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               550
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              379
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2854
;  :mk-clause               436
;  :num-allocs              5228756
;  :num-checks              678
;  :propagations            242
;  :quant-instantiations    93
;  :rlimit-count            271365)
(assert (< $k@245@08 (+ $k@137@08 (- $k@122@08 $k@144@08))))
(assert (<= $Perm.No (- (+ $k@137@08 (- $k@122@08 $k@144@08)) $k@245@08)))
(assert (<= (- (+ $k@137@08 (- $k@122@08 $k@144@08)) $k@245@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@137@08 (- $k@122@08 $k@144@08)) $k@245@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@131@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_combinate != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5866
;  :arith-add-rows          33
;  :arith-assert-diseq      94
;  :arith-assert-lower      306
;  :arith-assert-upper      305
;  :arith-conflicts         125
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         127
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              379
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2858
;  :mk-clause               436
;  :num-allocs              5228756
;  :num-checks              679
;  :propagations            242
;  :quant-instantiations    93
;  :rlimit-count            271634)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5866
;  :arith-add-rows          33
;  :arith-assert-diseq      94
;  :arith-assert-lower      306
;  :arith-assert-upper      305
;  :arith-conflicts         125
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         127
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              379
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2858
;  :mk-clause               436
;  :num-allocs              5228756
;  :num-checks              680
;  :propagations            242
;  :quant-instantiations    93
;  :rlimit-count            271645)
(push) ; 7
(assert (not (< $Perm.No (- $k@122@08 $k@144@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5866
;  :arith-add-rows          33
;  :arith-assert-diseq      94
;  :arith-assert-lower      306
;  :arith-assert-upper      305
;  :arith-conflicts         125
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         127
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              379
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2858
;  :mk-clause               436
;  :num-allocs              5228756
;  :num-checks              681
;  :propagations            242
;  :quant-instantiations    93
;  :rlimit-count            271664)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5866
;  :arith-add-rows          33
;  :arith-assert-diseq      94
;  :arith-assert-lower      306
;  :arith-assert-upper      306
;  :arith-conflicts         126
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         128
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               552
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              379
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2859
;  :mk-clause               436
;  :num-allocs              5228756
;  :num-checks              682
;  :propagations            242
;  :quant-instantiations    93
;  :rlimit-count            271745)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5866
;  :arith-add-rows          33
;  :arith-assert-diseq      94
;  :arith-assert-lower      306
;  :arith-assert-upper      306
;  :arith-conflicts         126
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         128
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               552
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              379
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2859
;  :mk-clause               436
;  :num-allocs              5228756
;  :num-checks              683
;  :propagations            242
;  :quant-instantiations    93
;  :rlimit-count            271756)
(push) ; 7
(assert (not (< $Perm.No (- $k@122@08 $k@144@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5866
;  :arith-add-rows          33
;  :arith-assert-diseq      94
;  :arith-assert-lower      306
;  :arith-assert-upper      306
;  :arith-conflicts         126
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         128
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               552
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              379
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2859
;  :mk-clause               436
;  :num-allocs              5228756
;  :num-checks              684
;  :propagations            242
;  :quant-instantiations    93
;  :rlimit-count            271775)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@131@08)))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5866
;  :arith-add-rows          33
;  :arith-assert-diseq      94
;  :arith-assert-lower      306
;  :arith-assert-upper      306
;  :arith-conflicts         126
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         128
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               553
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              379
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2860
;  :mk-clause               436
;  :num-allocs              5228756
;  :num-checks              685
;  :propagations            242
;  :quant-instantiations    93
;  :rlimit-count            272185)
(declare-const $k@246@08 $Perm)
(assert ($Perm.isReadVar $k@246@08 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5866
;  :arith-add-rows          33
;  :arith-assert-diseq      95
;  :arith-assert-lower      308
;  :arith-assert-upper      308
;  :arith-conflicts         127
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         129
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              379
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2865
;  :mk-clause               438
;  :num-allocs              5228756
;  :num-checks              686
;  :propagations            243
;  :quant-instantiations    93
;  :rlimit-count            272414)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5866
;  :arith-add-rows          33
;  :arith-assert-diseq      95
;  :arith-assert-lower      308
;  :arith-assert-upper      308
;  :arith-conflicts         127
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         129
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              379
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2865
;  :mk-clause               438
;  :num-allocs              5228756
;  :num-checks              687
;  :propagations            243
;  :quant-instantiations    93
;  :rlimit-count            272425)
(push) ; 7
(assert (not (< $Perm.No (- $k@118@08 $k@141@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5866
;  :arith-add-rows          33
;  :arith-assert-diseq      95
;  :arith-assert-lower      308
;  :arith-assert-upper      308
;  :arith-conflicts         127
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         129
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              379
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2865
;  :mk-clause               438
;  :num-allocs              5228756
;  :num-checks              688
;  :propagations            243
;  :quant-instantiations    93
;  :rlimit-count            272444)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@246@08 $Perm.No) (< $Perm.No $k@246@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5866
;  :arith-add-rows          33
;  :arith-assert-diseq      95
;  :arith-assert-lower      308
;  :arith-assert-upper      308
;  :arith-conflicts         127
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         129
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               555
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              379
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2865
;  :mk-clause               438
;  :num-allocs              5228756
;  :num-checks              689
;  :propagations            243
;  :quant-instantiations    93
;  :rlimit-count            272494)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ (- $k@123@08 $k@145@08) $k@138@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5867
;  :arith-add-rows          34
;  :arith-assert-diseq      95
;  :arith-assert-lower      308
;  :arith-assert-upper      309
;  :arith-conflicts         128
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         129
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               556
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              381
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2867
;  :mk-clause               440
;  :num-allocs              5228756
;  :num-checks              690
;  :propagations            244
;  :quant-instantiations    93
;  :rlimit-count            272603)
(assert (< $k@246@08 (+ (- $k@123@08 $k@145@08) $k@138@08)))
(assert (<= $Perm.No (- (+ (- $k@123@08 $k@145@08) $k@138@08) $k@246@08)))
(assert (<= (- (+ (- $k@123@08 $k@145@08) $k@138@08) $k@246@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@123@08 $k@145@08) $k@138@08) $k@246@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn.Rng_m == diz.CASR_m
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5867
;  :arith-add-rows          35
;  :arith-assert-diseq      95
;  :arith-assert-lower      310
;  :arith-assert-upper      311
;  :arith-conflicts         129
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         130
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              381
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2871
;  :mk-clause               440
;  :num-allocs              5228756
;  :num-checks              691
;  :propagations            244
;  :quant-instantiations    93
;  :rlimit-count            272871)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5867
;  :arith-add-rows          35
;  :arith-assert-diseq      95
;  :arith-assert-lower      310
;  :arith-assert-upper      311
;  :arith-conflicts         129
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         130
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              381
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2871
;  :mk-clause               440
;  :num-allocs              5228756
;  :num-checks              692
;  :propagations            244
;  :quant-instantiations    93
;  :rlimit-count            272882)
(push) ; 7
(assert (not (< $Perm.No (- $k@118@08 $k@141@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5867
;  :arith-add-rows          35
;  :arith-assert-diseq      95
;  :arith-assert-lower      310
;  :arith-assert-upper      311
;  :arith-conflicts         129
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         130
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              381
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2871
;  :mk-clause               440
;  :num-allocs              5228756
;  :num-checks              693
;  :propagations            244
;  :quant-instantiations    93
;  :rlimit-count            272901)
(push) ; 7
(assert (not (< $Perm.No (- $k@123@08 $k@145@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5867
;  :arith-add-rows          35
;  :arith-assert-diseq      95
;  :arith-assert-lower      310
;  :arith-assert-upper      311
;  :arith-conflicts         129
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         130
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              381
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2871
;  :mk-clause               440
;  :num-allocs              5228756
;  :num-checks              694
;  :propagations            244
;  :quant-instantiations    93
;  :rlimit-count            272920)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5867
;  :arith-add-rows          35
;  :arith-assert-diseq      95
;  :arith-assert-lower      310
;  :arith-assert-upper      312
;  :arith-conflicts         130
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         131
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               558
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              381
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2872
;  :mk-clause               440
;  :num-allocs              5228756
;  :num-checks              695
;  :propagations            244
;  :quant-instantiations    93
;  :rlimit-count            273001)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))))))
  $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5867
;  :arith-add-rows          35
;  :arith-assert-diseq      95
;  :arith-assert-lower      310
;  :arith-assert-upper      312
;  :arith-conflicts         130
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         131
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               558
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              381
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2872
;  :mk-clause               440
;  :num-allocs              5228756
;  :num-checks              696
;  :propagations            244
;  :quant-instantiations    93
;  :rlimit-count            273020)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@08))))))))))))))))))))))))))))))))))))))
  $t@172@08))
; [eval] diz.CASR_m.Main_rn_casr == diz
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ $k@132@08 (- $k@50@08 $k@139@08)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5867
;  :arith-add-rows          35
;  :arith-assert-diseq      95
;  :arith-assert-lower      310
;  :arith-assert-upper      313
;  :arith-conflicts         131
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              381
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2873
;  :mk-clause               440
;  :num-allocs              5228756
;  :num-checks              697
;  :propagations            244
;  :quant-instantiations    93
;  :rlimit-count            273119)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@49@08))) $t@172@08)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5867
;  :arith-add-rows          35
;  :arith-assert-diseq      95
;  :arith-assert-lower      310
;  :arith-assert-upper      313
;  :arith-conflicts         131
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              381
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2873
;  :mk-clause               440
;  :num-allocs              5228756
;  :num-checks              698
;  :propagations            244
;  :quant-instantiations    93
;  :rlimit-count            273130)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@51@08 $k@119@08) $k@142@08))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5867
;  :arith-add-rows          35
;  :arith-assert-diseq      95
;  :arith-assert-lower      310
;  :arith-assert-upper      313
;  :arith-conflicts         131
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1530
;  :datatype-occurs-check   358
;  :datatype-splits         1325
;  :decisions               1483
;  :del-clause              381
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2873
;  :mk-clause               440
;  :num-allocs              5228756
;  :num-checks              699
;  :propagations            244
;  :quant-instantiations    93
;  :rlimit-count            273151)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@228@08 $Perm.Write))
(assert ($Perm.isReadVar $k@230@08 $Perm.Write))
(assert ($Perm.isReadVar $k@231@08 $Perm.Write))
(assert ($Perm.isReadVar $k@232@08 $Perm.Write))
(assert ($Perm.isReadVar $k@233@08 $Perm.Write))
(assert ($Perm.isReadVar $k@234@08 $Perm.Write))
(assert (= $t@227@08 ($Snap.combine ($Snap.first $t@227@08) ($Snap.second $t@227@08))))
(assert (<= $Perm.No $k@228@08))
(assert (<= $k@228@08 $Perm.Write))
(assert (implies (< $Perm.No $k@228@08) (not (= diz@47@08 $Ref.null))))
(assert (=
  ($Snap.second $t@227@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@227@08))
    ($Snap.second ($Snap.second $t@227@08)))))
(assert (= ($Snap.first ($Snap.second $t@227@08)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@227@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@227@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@227@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))
  $Snap.unit))
(assert (forall ((i__102@229@08 Int)) (!
  (implies
    (and
      (<
        i__102@229@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
      (<= 0 i__102@229@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
          i__102@229@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
            i__102@229@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
            i__102@229@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
    i__102@229@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
(assert (<= $Perm.No $k@230@08))
(assert (<= $k@230@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@230@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))
(assert (<= $Perm.No $k@231@08))
(assert (<= $k@231@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@231@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@232@08))
(assert (<= $k@232@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@232@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@233@08))
(assert (<= $k@233@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@233@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@234@08))
(assert (<= $k@234@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@234@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))
  diz@47@08))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 8
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7027
;  :arith-add-rows          35
;  :arith-assert-diseq      101
;  :arith-assert-lower      326
;  :arith-assert-upper      327
;  :arith-conflicts         131
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               560
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1827
;  :datatype-occurs-check   397
;  :datatype-splits         1568
;  :decisions               1771
;  :del-clause              395
;  :final-checks            91
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3216
;  :mk-clause               455
;  :num-allocs              5949745
;  :num-checks              702
;  :propagations            258
;  :quant-instantiations    103
;  :rlimit-count            284875
;  :time                    0.00)
; [then-branch: 38 | True | live]
; [else-branch: 38 | False | dead]
(push) ; 8
; [then-branch: 38 | True]
; [exec]
; __flatten_16__49 := diz.CASR_m
(push) ; 9
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7027
;  :arith-add-rows          35
;  :arith-assert-diseq      101
;  :arith-assert-lower      326
;  :arith-assert-upper      327
;  :arith-conflicts         131
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               561
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1827
;  :datatype-occurs-check   397
;  :datatype-splits         1568
;  :decisions               1771
;  :del-clause              395
;  :final-checks            91
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3216
;  :mk-clause               455
;  :num-allocs              5949745
;  :num-checks              703
;  :propagations            258
;  :quant-instantiations    103
;  :rlimit-count            284928)
(declare-const __flatten_16__49@247@08 $Ref)
(assert (= __flatten_16__49@247@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_15__48 := __flatten_16__49.Main_rn
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_16__49@247@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7028
;  :arith-add-rows          35
;  :arith-assert-diseq      101
;  :arith-assert-lower      326
;  :arith-assert-upper      327
;  :arith-conflicts         131
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               561
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1827
;  :datatype-occurs-check   397
;  :datatype-splits         1568
;  :decisions               1771
;  :del-clause              395
;  :final-checks            91
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3217
;  :mk-clause               455
;  :num-allocs              5949745
;  :num-checks              704
;  :propagations            258
;  :quant-instantiations    103
;  :rlimit-count            284996)
(push) ; 9
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7028
;  :arith-add-rows          35
;  :arith-assert-diseq      101
;  :arith-assert-lower      326
;  :arith-assert-upper      327
;  :arith-conflicts         131
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               562
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1827
;  :datatype-occurs-check   397
;  :datatype-splits         1568
;  :decisions               1771
;  :del-clause              395
;  :final-checks            91
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3217
;  :mk-clause               455
;  :num-allocs              5949745
;  :num-checks              705
;  :propagations            258
;  :quant-instantiations    103
;  :rlimit-count            285044)
(declare-const __flatten_15__48@248@08 $Ref)
(assert (=
  __flatten_15__48@248@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
; [eval] !__flatten_15__48.Rng_reset
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  __flatten_15__48@248@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7029
;  :arith-add-rows          35
;  :arith-assert-diseq      101
;  :arith-assert-lower      326
;  :arith-assert-upper      327
;  :arith-conflicts         131
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               562
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1827
;  :datatype-occurs-check   397
;  :datatype-splits         1568
;  :decisions               1771
;  :del-clause              395
;  :final-checks            91
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3218
;  :mk-clause               455
;  :num-allocs              5949745
;  :num-checks              706
;  :propagations            258
;  :quant-instantiations    103
;  :rlimit-count            285192)
(push) ; 9
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7303
;  :arith-add-rows          35
;  :arith-assert-diseq      101
;  :arith-assert-lower      326
;  :arith-assert-upper      327
;  :arith-conflicts         131
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               562
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1910
;  :datatype-occurs-check   410
;  :datatype-splits         1649
;  :decisions               1851
;  :del-clause              395
;  :final-checks            94
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3301
;  :mk-clause               455
;  :num-allocs              5949745
;  :num-checks              707
;  :propagations            261
;  :quant-instantiations    105
;  :rlimit-count            287180
;  :time                    0.00)
(push) ; 9
(assert (not (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7577
;  :arith-add-rows          35
;  :arith-assert-diseq      101
;  :arith-assert-lower      326
;  :arith-assert-upper      327
;  :arith-conflicts         131
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               562
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3384
;  :mk-clause               455
;  :num-allocs              5949745
;  :num-checks              708
;  :propagations            264
;  :quant-instantiations    107
;  :rlimit-count            289142
;  :time                    0.00)
; [then-branch: 39 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08))))))))))))) | live]
; [else-branch: 39 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08)))))))))))) | live]
(push) ; 9
; [then-branch: 39 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08)))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
; [exec]
; diz.CASR_CASR_var := 1
; [exec]
; __flatten_64__96 := diz.CASR_m
(push) ; 10
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7581
;  :arith-add-rows          35
;  :arith-assert-diseq      101
;  :arith-assert-lower      326
;  :arith-assert-upper      327
;  :arith-conflicts         131
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               563
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3387
;  :mk-clause               455
;  :num-allocs              5949745
;  :num-checks              709
;  :propagations            264
;  :quant-instantiations    109
;  :rlimit-count            289397)
(declare-const __flatten_64__96@249@08 $Ref)
(assert (= __flatten_64__96@249@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_66__98 := diz.CASR_m
(push) ; 10
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7582
;  :arith-add-rows          35
;  :arith-assert-diseq      101
;  :arith-assert-lower      326
;  :arith-assert-upper      327
;  :arith-conflicts         131
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               564
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3388
;  :mk-clause               455
;  :num-allocs              5949745
;  :num-checks              710
;  :propagations            264
;  :quant-instantiations    109
;  :rlimit-count            289482)
(declare-const __flatten_66__98@250@08 $Ref)
(assert (= __flatten_66__98@250@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_65__97 := __flatten_66__98.Main_process_state[0 := 1]
; [eval] __flatten_66__98.Main_process_state[0 := 1]
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_66__98@250@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7583
;  :arith-add-rows          35
;  :arith-assert-diseq      101
;  :arith-assert-lower      326
;  :arith-assert-upper      327
;  :arith-conflicts         131
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               564
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3389
;  :mk-clause               455
;  :num-allocs              5949745
;  :num-checks              711
;  :propagations            264
;  :quant-instantiations    109
;  :rlimit-count            289530)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7583
;  :arith-add-rows          35
;  :arith-assert-diseq      101
;  :arith-assert-lower      326
;  :arith-assert-upper      327
;  :arith-conflicts         131
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         132
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               564
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3389
;  :mk-clause               455
;  :num-allocs              5949745
;  :num-checks              712
;  :propagations            264
;  :quant-instantiations    109
;  :rlimit-count            289545)
(declare-const __flatten_65__97@251@08 Seq<Int>)
(assert (Seq_equal
  __flatten_65__97@251@08
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
    0
    1)))
; [exec]
; __flatten_64__96.Main_process_state := __flatten_65__97
(set-option :timeout 10)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_64__96@249@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7593
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      330
;  :arith-assert-upper      329
;  :arith-conflicts         131
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         134
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               564
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3412
;  :mk-clause               474
;  :num-allocs              5949745
;  :num-checks              713
;  :propagations            273
;  :quant-instantiations    114
;  :rlimit-count            290026)
(assert (not (= __flatten_64__96@249@08 $Ref.null)))
; [exec]
; __flatten_67__99 := diz.CASR_m
(push) ; 10
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7594
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      330
;  :arith-assert-upper      329
;  :arith-conflicts         131
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         134
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               565
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3413
;  :mk-clause               474
;  :num-allocs              5949745
;  :num-checks              714
;  :propagations            273
;  :quant-instantiations    114
;  :rlimit-count            290130)
(declare-const __flatten_67__99@252@08 $Ref)
(assert (= __flatten_67__99@252@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_69__101 := diz.CASR_m
(push) ; 10
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7595
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      330
;  :arith-assert-upper      329
;  :arith-conflicts         131
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         134
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               566
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3414
;  :mk-clause               474
;  :num-allocs              5949745
;  :num-checks              715
;  :propagations            273
;  :quant-instantiations    114
;  :rlimit-count            290215)
(declare-const __flatten_69__101@253@08 $Ref)
(assert (= __flatten_69__101@253@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_68__100 := __flatten_69__101.Main_event_state[1 := 5]
; [eval] __flatten_69__101.Main_event_state[1 := 5]
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_69__101@253@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7596
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      330
;  :arith-assert-upper      329
;  :arith-conflicts         131
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         134
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               566
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3415
;  :mk-clause               474
;  :num-allocs              5949745
;  :num-checks              716
;  :propagations            273
;  :quant-instantiations    114
;  :rlimit-count            290263)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7596
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      330
;  :arith-assert-upper      329
;  :arith-conflicts         131
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         134
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               566
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3415
;  :mk-clause               474
;  :num-allocs              5949745
;  :num-checks              717
;  :propagations            273
;  :quant-instantiations    114
;  :rlimit-count            290278)
(declare-const __flatten_68__100@254@08 Seq<Int>)
(assert (Seq_equal
  __flatten_68__100@254@08
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
    1
    5)))
; [exec]
; __flatten_67__99.Main_event_state := __flatten_68__100
(set-option :timeout 10)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_67__99@252@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7606
;  :arith-add-rows          41
;  :arith-assert-diseq      103
;  :arith-assert-lower      334
;  :arith-assert-upper      331
;  :arith-conflicts         131
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               566
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3438
;  :mk-clause               493
;  :num-allocs              5949745
;  :num-checks              718
;  :propagations            282
;  :quant-instantiations    119
;  :rlimit-count            290780)
(assert (not (= __flatten_67__99@252@08 $Ref.null)))
(push) ; 10
; Loop head block: Check well-definedness of invariant
(declare-const $t@255@08 $Snap)
(assert (= $t@255@08 ($Snap.combine ($Snap.first $t@255@08) ($Snap.second $t@255@08))))
(declare-const $k@256@08 $Perm)
(assert ($Perm.isReadVar $k@256@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@256@08 $Perm.No) (< $Perm.No $k@256@08))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7611
;  :arith-add-rows          41
;  :arith-assert-diseq      104
;  :arith-assert-lower      336
;  :arith-assert-upper      332
;  :arith-conflicts         131
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               567
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3443
;  :mk-clause               495
;  :num-allocs              5949745
;  :num-checks              719
;  :propagations            283
;  :quant-instantiations    119
;  :rlimit-count            291092)
(assert (<= $Perm.No $k@256@08))
(assert (<= $k@256@08 $Perm.Write))
(assert (implies (< $Perm.No $k@256@08) (not (= diz@47@08 $Ref.null))))
(assert (=
  ($Snap.second $t@255@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@255@08))
    ($Snap.second ($Snap.second $t@255@08)))))
(assert (= ($Snap.first ($Snap.second $t@255@08)) $Snap.unit))
; [eval] diz.CASR_m != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7617
;  :arith-add-rows          41
;  :arith-assert-diseq      104
;  :arith-assert-lower      336
;  :arith-assert-upper      333
;  :arith-conflicts         131
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               568
;  :datatype-accessor-ax    353
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3446
;  :mk-clause               495
;  :num-allocs              5949745
;  :num-checks              720
;  :propagations            283
;  :quant-instantiations    119
;  :rlimit-count            291335)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@255@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@255@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7623
;  :arith-add-rows          41
;  :arith-assert-diseq      104
;  :arith-assert-lower      336
;  :arith-assert-upper      333
;  :arith-conflicts         131
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               569
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3449
;  :mk-clause               495
;  :num-allocs              5949745
;  :num-checks              721
;  :propagations            283
;  :quant-instantiations    120
;  :rlimit-count            291607)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@255@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7628
;  :arith-add-rows          41
;  :arith-assert-diseq      104
;  :arith-assert-lower      336
;  :arith-assert-upper      333
;  :arith-conflicts         131
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               570
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3450
;  :mk-clause               495
;  :num-allocs              5949745
;  :num-checks              722
;  :propagations            283
;  :quant-instantiations    120
;  :rlimit-count            291784)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
  $Snap.unit))
; [eval] |diz.CASR_m.Main_process_state| == 3
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7634
;  :arith-add-rows          41
;  :arith-assert-diseq      104
;  :arith-assert-lower      336
;  :arith-assert-upper      333
;  :arith-conflicts         131
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               571
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3452
;  :mk-clause               495
;  :num-allocs              5949745
;  :num-checks              723
;  :propagations            283
;  :quant-instantiations    120
;  :rlimit-count            292003)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7641
;  :arith-add-rows          41
;  :arith-assert-diseq      104
;  :arith-assert-lower      338
;  :arith-assert-upper      334
;  :arith-conflicts         131
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               572
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3458
;  :mk-clause               495
;  :num-allocs              5949745
;  :num-checks              724
;  :propagations            283
;  :quant-instantiations    122
;  :rlimit-count            292332)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
  $Snap.unit))
; [eval] |diz.CASR_m.Main_event_state| == 6
; [eval] |diz.CASR_m.Main_event_state|
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7647
;  :arith-add-rows          41
;  :arith-assert-diseq      104
;  :arith-assert-lower      338
;  :arith-assert-upper      334
;  :arith-conflicts         131
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               573
;  :datatype-accessor-ax    358
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3460
;  :mk-clause               495
;  :num-allocs              5949745
;  :num-checks              725
;  :propagations            283
;  :quant-instantiations    122
;  :rlimit-count            292571)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))
  $Snap.unit))
; [eval] (forall i__104: Int :: { diz.CASR_m.Main_process_state[i__104] } 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|)
(declare-const i__104@257@08 Int)
(push) ; 11
; [eval] 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state|
; [eval] 0 <= i__104
(push) ; 12
; [then-branch: 40 | 0 <= i__104@257@08 | live]
; [else-branch: 40 | !(0 <= i__104@257@08) | live]
(push) ; 13
; [then-branch: 40 | 0 <= i__104@257@08]
(assert (<= 0 i__104@257@08))
; [eval] i__104 < |diz.CASR_m.Main_process_state|
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 14
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7655
;  :arith-add-rows          41
;  :arith-assert-diseq      104
;  :arith-assert-lower      341
;  :arith-assert-upper      335
;  :arith-conflicts         131
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               574
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3468
;  :mk-clause               495
;  :num-allocs              5949745
;  :num-checks              726
;  :propagations            283
;  :quant-instantiations    124
;  :rlimit-count            293010)
(pop) ; 13
(push) ; 13
; [else-branch: 40 | !(0 <= i__104@257@08)]
(assert (not (<= 0 i__104@257@08)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 41 | i__104@257@08 < |First:(Second:(Second:(Second:($t@255@08))))| && 0 <= i__104@257@08 | live]
; [else-branch: 41 | !(i__104@257@08 < |First:(Second:(Second:(Second:($t@255@08))))| && 0 <= i__104@257@08) | live]
(push) ; 13
; [then-branch: 41 | i__104@257@08 < |First:(Second:(Second:(Second:($t@255@08))))| && 0 <= i__104@257@08]
(assert (and
  (<
    i__104@257@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
  (<= 0 i__104@257@08)))
; [eval] diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__104] == -1
; [eval] diz.CASR_m.Main_process_state[i__104]
(push) ; 14
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7655
;  :arith-add-rows          41
;  :arith-assert-diseq      104
;  :arith-assert-lower      342
;  :arith-assert-upper      336
;  :arith-conflicts         131
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3470
;  :mk-clause               495
;  :num-allocs              5949745
;  :num-checks              727
;  :propagations            283
;  :quant-instantiations    124
;  :rlimit-count            293167)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__104@257@08 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7655
;  :arith-add-rows          41
;  :arith-assert-diseq      104
;  :arith-assert-lower      342
;  :arith-assert-upper      336
;  :arith-conflicts         131
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3470
;  :mk-clause               495
;  :num-allocs              5949745
;  :num-checks              728
;  :propagations            283
;  :quant-instantiations    124
;  :rlimit-count            293176)
; [eval] -1
(push) ; 14
; [then-branch: 42 | First:(Second:(Second:(Second:($t@255@08))))[i__104@257@08] == -1 | live]
; [else-branch: 42 | First:(Second:(Second:(Second:($t@255@08))))[i__104@257@08] != -1 | live]
(push) ; 15
; [then-branch: 42 | First:(Second:(Second:(Second:($t@255@08))))[i__104@257@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    i__104@257@08)
  (- 0 1)))
(pop) ; 15
(push) ; 15
; [else-branch: 42 | First:(Second:(Second:(Second:($t@255@08))))[i__104@257@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
      i__104@257@08)
    (- 0 1))))
; [eval] 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= diz.CASR_m.Main_process_state[i__104]
; [eval] diz.CASR_m.Main_process_state[i__104]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7655
;  :arith-add-rows          41
;  :arith-assert-diseq      104
;  :arith-assert-lower      342
;  :arith-assert-upper      336
;  :arith-conflicts         131
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               576
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3471
;  :mk-clause               495
;  :num-allocs              5949745
;  :num-checks              729
;  :propagations            283
;  :quant-instantiations    124
;  :rlimit-count            293390)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__104@257@08 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7655
;  :arith-add-rows          41
;  :arith-assert-diseq      104
;  :arith-assert-lower      342
;  :arith-assert-upper      336
;  :arith-conflicts         131
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               576
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3471
;  :mk-clause               495
;  :num-allocs              5949745
;  :num-checks              730
;  :propagations            283
;  :quant-instantiations    124
;  :rlimit-count            293399)
(push) ; 16
; [then-branch: 43 | 0 <= First:(Second:(Second:(Second:($t@255@08))))[i__104@257@08] | live]
; [else-branch: 43 | !(0 <= First:(Second:(Second:(Second:($t@255@08))))[i__104@257@08]) | live]
(push) ; 17
; [then-branch: 43 | 0 <= First:(Second:(Second:(Second:($t@255@08))))[i__104@257@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    i__104@257@08)))
; [eval] diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__104]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7655
;  :arith-add-rows          41
;  :arith-assert-diseq      105
;  :arith-assert-lower      345
;  :arith-assert-upper      336
;  :arith-conflicts         131
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               577
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3474
;  :mk-clause               496
;  :num-allocs              5949745
;  :num-checks              731
;  :propagations            283
;  :quant-instantiations    124
;  :rlimit-count            293561)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__104@257@08 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7655
;  :arith-add-rows          41
;  :arith-assert-diseq      105
;  :arith-assert-lower      345
;  :arith-assert-upper      336
;  :arith-conflicts         131
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               577
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3474
;  :mk-clause               496
;  :num-allocs              5949745
;  :num-checks              732
;  :propagations            283
;  :quant-instantiations    124
;  :rlimit-count            293570)
; [eval] |diz.CASR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7655
;  :arith-add-rows          41
;  :arith-assert-diseq      105
;  :arith-assert-lower      345
;  :arith-assert-upper      336
;  :arith-conflicts         131
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               578
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              395
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3474
;  :mk-clause               496
;  :num-allocs              5949745
;  :num-checks              733
;  :propagations            283
;  :quant-instantiations    124
;  :rlimit-count            293618)
(pop) ; 17
(push) ; 17
; [else-branch: 43 | !(0 <= First:(Second:(Second:(Second:($t@255@08))))[i__104@257@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
      i__104@257@08))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 41 | !(i__104@257@08 < |First:(Second:(Second:(Second:($t@255@08))))| && 0 <= i__104@257@08)]
(assert (not
  (and
    (<
      i__104@257@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
    (<= 0 i__104@257@08))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__104@257@08 Int)) (!
  (implies
    (and
      (<
        i__104@257@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
      (<= 0 i__104@257@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
          i__104@257@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
            i__104@257@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
            i__104@257@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    i__104@257@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7660
;  :arith-add-rows          41
;  :arith-assert-diseq      105
;  :arith-assert-lower      345
;  :arith-assert-upper      336
;  :arith-conflicts         131
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               579
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3476
;  :mk-clause               496
;  :num-allocs              5949745
;  :num-checks              734
;  :propagations            283
;  :quant-instantiations    124
;  :rlimit-count            294243)
(declare-const $k@258@08 $Perm)
(assert ($Perm.isReadVar $k@258@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@258@08 $Perm.No) (< $Perm.No $k@258@08))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7660
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      337
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               580
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3480
;  :mk-clause               498
;  :num-allocs              5949745
;  :num-checks              735
;  :propagations            284
;  :quant-instantiations    124
;  :rlimit-count            294442)
(assert (<= $Perm.No $k@258@08))
(assert (<= $k@258@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@258@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7666
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               581
;  :datatype-accessor-ax    361
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3483
;  :mk-clause               498
;  :num-allocs              5949745
;  :num-checks              736
;  :propagations            284
;  :quant-instantiations    124
;  :rlimit-count            294765)
(push) ; 11
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7666
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               582
;  :datatype-accessor-ax    361
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3483
;  :mk-clause               498
;  :num-allocs              5949745
;  :num-checks              737
;  :propagations            284
;  :quant-instantiations    124
;  :rlimit-count            294813)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7672
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               583
;  :datatype-accessor-ax    362
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3486
;  :mk-clause               498
;  :num-allocs              5949745
;  :num-checks              738
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            295169)
(push) ; 11
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7672
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               584
;  :datatype-accessor-ax    362
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3486
;  :mk-clause               498
;  :num-allocs              5949745
;  :num-checks              739
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            295217)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7677
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               585
;  :datatype-accessor-ax    363
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3487
;  :mk-clause               498
;  :num-allocs              5949745
;  :num-checks              740
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            295474)
(push) ; 11
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7677
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               586
;  :datatype-accessor-ax    363
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3487
;  :mk-clause               498
;  :num-allocs              5949745
;  :num-checks              741
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            295522)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7682
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               587
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3488
;  :mk-clause               498
;  :num-allocs              5949745
;  :num-checks              742
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            295789)
(push) ; 11
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7682
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               588
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3488
;  :mk-clause               498
;  :num-allocs              5949745
;  :num-checks              743
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            295837)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7687
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               589
;  :datatype-accessor-ax    365
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3489
;  :mk-clause               498
;  :num-allocs              5949745
;  :num-checks              744
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            296114)
(push) ; 11
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7687
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               590
;  :datatype-accessor-ax    365
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  4.94
;  :mk-bool-var             3489
;  :mk-clause               498
;  :num-allocs              5949745
;  :num-checks              745
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            296162)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7692
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               591
;  :datatype-accessor-ax    366
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3490
;  :mk-clause               498
;  :num-allocs              6200871
;  :num-checks              746
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            296449)
(push) ; 11
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7692
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               592
;  :datatype-accessor-ax    366
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3490
;  :mk-clause               498
;  :num-allocs              6200871
;  :num-checks              747
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            296497)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7697
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               593
;  :datatype-accessor-ax    367
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3491
;  :mk-clause               498
;  :num-allocs              6200871
;  :num-checks              748
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            296794)
(push) ; 11
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7697
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               594
;  :datatype-accessor-ax    367
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3491
;  :mk-clause               498
;  :num-allocs              6200871
;  :num-checks              749
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            296842)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7702
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               595
;  :datatype-accessor-ax    368
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3492
;  :mk-clause               498
;  :num-allocs              6200871
;  :num-checks              750
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            297149)
(push) ; 11
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7702
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               596
;  :datatype-accessor-ax    368
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3492
;  :mk-clause               498
;  :num-allocs              6200871
;  :num-checks              751
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            297197)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7707
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               597
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3493
;  :mk-clause               498
;  :num-allocs              6200871
;  :num-checks              752
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            297514)
(push) ; 11
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7707
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               598
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3493
;  :mk-clause               498
;  :num-allocs              6200871
;  :num-checks              753
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            297562)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7712
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               599
;  :datatype-accessor-ax    370
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3494
;  :mk-clause               498
;  :num-allocs              6200871
;  :num-checks              754
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            297889)
(push) ; 11
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7712
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               600
;  :datatype-accessor-ax    370
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3494
;  :mk-clause               498
;  :num-allocs              6200871
;  :num-checks              755
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            297937)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7717
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               601
;  :datatype-accessor-ax    371
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3495
;  :mk-clause               498
;  :num-allocs              6200871
;  :num-checks              756
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            298274)
(push) ; 11
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7717
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               602
;  :datatype-accessor-ax    371
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3495
;  :mk-clause               498
;  :num-allocs              6200871
;  :num-checks              757
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            298322)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          41
;  :arith-assert-diseq      106
;  :arith-assert-lower      347
;  :arith-assert-upper      338
;  :arith-conflicts         131
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               603
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3496
;  :mk-clause               498
;  :num-allocs              6200871
;  :num-checks              758
;  :propagations            284
;  :quant-instantiations    125
;  :rlimit-count            298669)
(declare-const $k@259@08 $Perm)
(assert ($Perm.isReadVar $k@259@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@259@08 $Perm.No) (< $Perm.No $k@259@08))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7722
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      339
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               604
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3500
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              759
;  :propagations            285
;  :quant-instantiations    125
;  :rlimit-count            298868)
(assert (<= $Perm.No $k@259@08))
(assert (<= $k@259@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@259@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7728
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               605
;  :datatype-accessor-ax    373
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3503
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              760
;  :propagations            285
;  :quant-instantiations    125
;  :rlimit-count            299311)
(push) ; 11
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7728
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               606
;  :datatype-accessor-ax    373
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3503
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              761
;  :propagations            285
;  :quant-instantiations    125
;  :rlimit-count            299359)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7734
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               607
;  :datatype-accessor-ax    374
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3506
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              762
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            299853)
(push) ; 11
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7734
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               608
;  :datatype-accessor-ax    374
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3506
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              763
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            299901)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7739
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               609
;  :datatype-accessor-ax    375
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3507
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              764
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            300278)
(push) ; 11
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7739
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               610
;  :datatype-accessor-ax    375
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3507
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              765
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            300326)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7744
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               611
;  :datatype-accessor-ax    376
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3508
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              766
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            300713)
(push) ; 11
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7744
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               612
;  :datatype-accessor-ax    376
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3508
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              767
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            300761)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7749
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               613
;  :datatype-accessor-ax    377
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3509
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              768
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            301158)
(push) ; 11
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7749
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               614
;  :datatype-accessor-ax    377
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3509
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              769
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            301206)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7754
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               615
;  :datatype-accessor-ax    378
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3510
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              770
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            301613)
(push) ; 11
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7754
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               616
;  :datatype-accessor-ax    378
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3510
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              771
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            301661)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7759
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               617
;  :datatype-accessor-ax    379
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3511
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              772
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            302078)
(push) ; 11
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7759
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               618
;  :datatype-accessor-ax    379
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3511
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              773
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            302126)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7764
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               619
;  :datatype-accessor-ax    380
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3512
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              774
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            302553)
(push) ; 11
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7764
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               620
;  :datatype-accessor-ax    380
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3512
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              775
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            302601)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7769
;  :arith-add-rows          41
;  :arith-assert-diseq      107
;  :arith-assert-lower      349
;  :arith-assert-upper      340
;  :arith-conflicts         131
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               621
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3513
;  :mk-clause               500
;  :num-allocs              6200871
;  :num-checks              776
;  :propagations            285
;  :quant-instantiations    126
;  :rlimit-count            303038)
(declare-const $k@260@08 $Perm)
(assert ($Perm.isReadVar $k@260@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@260@08 $Perm.No) (< $Perm.No $k@260@08))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7769
;  :arith-add-rows          41
;  :arith-assert-diseq      108
;  :arith-assert-lower      351
;  :arith-assert-upper      341
;  :arith-conflicts         131
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               622
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3517
;  :mk-clause               502
;  :num-allocs              6712229
;  :num-checks              777
;  :propagations            286
;  :quant-instantiations    126
;  :rlimit-count            303237)
(assert (<= $Perm.No $k@260@08))
(assert (<= $k@260@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@260@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7775
;  :arith-add-rows          41
;  :arith-assert-diseq      108
;  :arith-assert-lower      351
;  :arith-assert-upper      342
;  :arith-conflicts         131
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               623
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3520
;  :mk-clause               502
;  :num-allocs              6712229
;  :num-checks              778
;  :propagations            286
;  :quant-instantiations    126
;  :rlimit-count            303770)
(push) ; 11
(assert (not (< $Perm.No $k@260@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7775
;  :arith-add-rows          41
;  :arith-assert-diseq      108
;  :arith-assert-lower      351
;  :arith-assert-upper      342
;  :arith-conflicts         131
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               624
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3520
;  :mk-clause               502
;  :num-allocs              6712229
;  :num-checks              779
;  :propagations            286
;  :quant-instantiations    126
;  :rlimit-count            303818)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7781
;  :arith-add-rows          41
;  :arith-assert-diseq      108
;  :arith-assert-lower      351
;  :arith-assert-upper      342
;  :arith-conflicts         131
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               625
;  :datatype-accessor-ax    383
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3523
;  :mk-clause               502
;  :num-allocs              6712229
;  :num-checks              780
;  :propagations            286
;  :quant-instantiations    127
;  :rlimit-count            304396)
(push) ; 11
(assert (not (< $Perm.No $k@260@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7781
;  :arith-add-rows          41
;  :arith-assert-diseq      108
;  :arith-assert-lower      351
;  :arith-assert-upper      342
;  :arith-conflicts         131
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               626
;  :datatype-accessor-ax    383
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3523
;  :mk-clause               502
;  :num-allocs              6712229
;  :num-checks              781
;  :propagations            286
;  :quant-instantiations    127
;  :rlimit-count            304444)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7786
;  :arith-add-rows          41
;  :arith-assert-diseq      108
;  :arith-assert-lower      351
;  :arith-assert-upper      342
;  :arith-conflicts         131
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               627
;  :datatype-accessor-ax    384
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3524
;  :mk-clause               502
;  :num-allocs              6712229
;  :num-checks              782
;  :propagations            286
;  :quant-instantiations    127
;  :rlimit-count            304911)
(push) ; 11
(assert (not (< $Perm.No $k@260@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7786
;  :arith-add-rows          41
;  :arith-assert-diseq      108
;  :arith-assert-lower      351
;  :arith-assert-upper      342
;  :arith-conflicts         131
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               628
;  :datatype-accessor-ax    384
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3524
;  :mk-clause               502
;  :num-allocs              6712229
;  :num-checks              783
;  :propagations            286
;  :quant-instantiations    127
;  :rlimit-count            304959)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7791
;  :arith-add-rows          41
;  :arith-assert-diseq      108
;  :arith-assert-lower      351
;  :arith-assert-upper      342
;  :arith-conflicts         131
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               629
;  :datatype-accessor-ax    385
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3525
;  :mk-clause               502
;  :num-allocs              6712229
;  :num-checks              784
;  :propagations            286
;  :quant-instantiations    127
;  :rlimit-count            305436)
(declare-const $k@261@08 $Perm)
(assert ($Perm.isReadVar $k@261@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@261@08 $Perm.No) (< $Perm.No $k@261@08))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7791
;  :arith-add-rows          41
;  :arith-assert-diseq      109
;  :arith-assert-lower      353
;  :arith-assert-upper      343
;  :arith-conflicts         131
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               630
;  :datatype-accessor-ax    385
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3529
;  :mk-clause               504
;  :num-allocs              6712229
;  :num-checks              785
;  :propagations            287
;  :quant-instantiations    127
;  :rlimit-count            305635)
(assert (<= $Perm.No $k@261@08))
(assert (<= $k@261@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@261@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7797
;  :arith-add-rows          41
;  :arith-assert-diseq      109
;  :arith-assert-lower      353
;  :arith-assert-upper      344
;  :arith-conflicts         131
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               631
;  :datatype-accessor-ax    386
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3532
;  :mk-clause               504
;  :num-allocs              6712229
;  :num-checks              786
;  :propagations            287
;  :quant-instantiations    127
;  :rlimit-count            306208)
(push) ; 11
(assert (not (< $Perm.No $k@261@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7797
;  :arith-add-rows          41
;  :arith-assert-diseq      109
;  :arith-assert-lower      353
;  :arith-assert-upper      344
;  :arith-conflicts         131
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               632
;  :datatype-accessor-ax    386
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3532
;  :mk-clause               504
;  :num-allocs              6712229
;  :num-checks              787
;  :propagations            287
;  :quant-instantiations    127
;  :rlimit-count            306256)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7803
;  :arith-add-rows          41
;  :arith-assert-diseq      109
;  :arith-assert-lower      353
;  :arith-assert-upper      344
;  :arith-conflicts         131
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               633
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3535
;  :mk-clause               504
;  :num-allocs              6712229
;  :num-checks              788
;  :propagations            287
;  :quant-instantiations    128
;  :rlimit-count            306864)
(push) ; 11
(assert (not (< $Perm.No $k@261@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7803
;  :arith-add-rows          41
;  :arith-assert-diseq      109
;  :arith-assert-lower      353
;  :arith-assert-upper      344
;  :arith-conflicts         131
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               634
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3535
;  :mk-clause               504
;  :num-allocs              6712229
;  :num-checks              789
;  :propagations            287
;  :quant-instantiations    128
;  :rlimit-count            306912)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7808
;  :arith-add-rows          41
;  :arith-assert-diseq      109
;  :arith-assert-lower      353
;  :arith-assert-upper      344
;  :arith-conflicts         131
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               635
;  :datatype-accessor-ax    388
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3536
;  :mk-clause               504
;  :num-allocs              6712229
;  :num-checks              790
;  :propagations            287
;  :quant-instantiations    128
;  :rlimit-count            307419)
(push) ; 11
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7808
;  :arith-add-rows          41
;  :arith-assert-diseq      109
;  :arith-assert-lower      353
;  :arith-assert-upper      344
;  :arith-conflicts         131
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               636
;  :datatype-accessor-ax    388
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3536
;  :mk-clause               504
;  :num-allocs              6712229
;  :num-checks              791
;  :propagations            287
;  :quant-instantiations    128
;  :rlimit-count            307467)
(declare-const $k@262@08 $Perm)
(assert ($Perm.isReadVar $k@262@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@262@08 $Perm.No) (< $Perm.No $k@262@08))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7808
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      345
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               637
;  :datatype-accessor-ax    388
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3540
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              792
;  :propagations            288
;  :quant-instantiations    128
;  :rlimit-count            307665)
(assert (<= $Perm.No $k@262@08))
(assert (<= $k@262@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@262@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn.Rng_m == diz.CASR_m
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7814
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               638
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3543
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              793
;  :propagations            288
;  :quant-instantiations    128
;  :rlimit-count            308268)
(push) ; 11
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7814
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               639
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3543
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              794
;  :propagations            288
;  :quant-instantiations    128
;  :rlimit-count            308316)
(push) ; 11
(assert (not (< $Perm.No $k@262@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7814
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               640
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3543
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              795
;  :propagations            288
;  :quant-instantiations    128
;  :rlimit-count            308364)
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7814
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               641
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3543
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              796
;  :propagations            288
;  :quant-instantiations    128
;  :rlimit-count            308412)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_casr == diz
(push) ; 11
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7819
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               642
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3546
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              797
;  :propagations            288
;  :quant-instantiations    129
;  :rlimit-count            308996)
(push) ; 11
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7819
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               643
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3546
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              798
;  :propagations            288
;  :quant-instantiations    129
;  :rlimit-count            309044)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
  diz@47@08))
; Loop head block: Check well-definedness of edge conditions
(push) ; 11
; [eval] diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_process_state[0] != -1
; [eval] diz.CASR_m.Main_process_state[0]
(push) ; 12
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7822
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               644
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3547
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              799
;  :propagations            288
;  :quant-instantiations    129
;  :rlimit-count            309360)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7822
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               644
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3547
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              800
;  :propagations            288
;  :quant-instantiations    129
;  :rlimit-count            309375)
; [eval] -1
(push) ; 12
; [then-branch: 44 | First:(Second:(Second:(Second:($t@255@08))))[0] != -1 | live]
; [else-branch: 44 | First:(Second:(Second:(Second:($t@255@08))))[0] == -1 | live]
(push) ; 13
; [then-branch: 44 | First:(Second:(Second:(Second:($t@255@08))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
      0)
    (- 0 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 44 | First:(Second:(Second:(Second:($t@255@08))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    0)
  (- 0 1)))
; [eval] diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_event_state[1]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7823
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               645
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3548
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              801
;  :propagations            288
;  :quant-instantiations    129
;  :rlimit-count            309570)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7823
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               645
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3548
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              802
;  :propagations            288
;  :quant-instantiations    129
;  :rlimit-count            309585)
; [eval] -2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [eval] !(diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[1] != -2)
; [eval] diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_process_state[0] != -1
; [eval] diz.CASR_m.Main_process_state[0]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7823
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               646
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3548
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              803
;  :propagations            288
;  :quant-instantiations    129
;  :rlimit-count            309638)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7823
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               646
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3548
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              804
;  :propagations            288
;  :quant-instantiations    129
;  :rlimit-count            309653)
; [eval] -1
(push) ; 12
; [then-branch: 45 | First:(Second:(Second:(Second:($t@255@08))))[0] != -1 | live]
; [else-branch: 45 | First:(Second:(Second:(Second:($t@255@08))))[0] == -1 | live]
(push) ; 13
; [then-branch: 45 | First:(Second:(Second:(Second:($t@255@08))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
      0)
    (- 0 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 45 | First:(Second:(Second:(Second:($t@255@08))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    0)
  (- 0 1)))
; [eval] diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_event_state[1]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7824
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               647
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3549
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              805
;  :propagations            288
;  :quant-instantiations    129
;  :rlimit-count            309844)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7824
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      355
;  :arith-assert-upper      346
;  :arith-conflicts         131
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               647
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              396
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3549
;  :mk-clause               506
;  :num-allocs              6712229
;  :num-checks              806
;  :propagations            288
;  :quant-instantiations    129
;  :rlimit-count            309859)
; [eval] -2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
(push) ; 10
; Loop head block: Establish invariant
(declare-const $k@263@08 $Perm)
(assert ($Perm.isReadVar $k@263@08 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@263@08 $Perm.No) (< $Perm.No $k@263@08))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7824
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      357
;  :arith-assert-upper      347
;  :arith-conflicts         131
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               648
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3553
;  :mk-clause               508
;  :num-allocs              6712229
;  :num-checks              807
;  :propagations            289
;  :quant-instantiations    129
;  :rlimit-count            310062)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@228@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7824
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      357
;  :arith-assert-upper      347
;  :arith-conflicts         131
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         136
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               648
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3553
;  :mk-clause               508
;  :num-allocs              6712229
;  :num-checks              808
;  :propagations            289
;  :quant-instantiations    129
;  :rlimit-count            310073)
(assert (< $k@263@08 $k@228@08))
(assert (<= $Perm.No (- $k@228@08 $k@263@08)))
(assert (<= (- $k@228@08 $k@263@08) $Perm.Write))
(assert (implies (< $Perm.No (- $k@228@08 $k@263@08)) (not (= diz@47@08 $Ref.null))))
; [eval] diz.CASR_m != null
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7824
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      359
;  :arith-assert-upper      348
;  :arith-conflicts         131
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               649
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3556
;  :mk-clause               508
;  :num-allocs              6712229
;  :num-checks              809
;  :propagations            289
;  :quant-instantiations    129
;  :rlimit-count            310287)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7824
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      359
;  :arith-assert-upper      348
;  :arith-conflicts         131
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               650
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3556
;  :mk-clause               508
;  :num-allocs              6712229
;  :num-checks              810
;  :propagations            289
;  :quant-instantiations    129
;  :rlimit-count            310335)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7824
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      359
;  :arith-assert-upper      348
;  :arith-conflicts         131
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               651
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3556
;  :mk-clause               508
;  :num-allocs              6712229
;  :num-checks              811
;  :propagations            289
;  :quant-instantiations    129
;  :rlimit-count            310383)
; [eval] |diz.CASR_m.Main_process_state| == 3
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7824
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      359
;  :arith-assert-upper      348
;  :arith-conflicts         131
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               652
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3556
;  :mk-clause               508
;  :num-allocs              6712229
;  :num-checks              812
;  :propagations            289
;  :quant-instantiations    129
;  :rlimit-count            310431)
(set-option :timeout 0)
(push) ; 11
(assert (not (= (Seq_length __flatten_65__97@251@08) 3)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7824
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      359
;  :arith-assert-upper      348
;  :arith-conflicts         131
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               653
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3559
;  :mk-clause               508
;  :num-allocs              6712229
;  :num-checks              813
;  :propagations            289
;  :quant-instantiations    129
;  :rlimit-count            310505)
(assert (= (Seq_length __flatten_65__97@251@08) 3))
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7825
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      360
;  :arith-assert-upper      349
;  :arith-conflicts         131
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               654
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3562
;  :mk-clause               508
;  :num-allocs              6712229
;  :num-checks              814
;  :propagations            289
;  :quant-instantiations    129
;  :rlimit-count            310604)
; [eval] |diz.CASR_m.Main_event_state| == 6
; [eval] |diz.CASR_m.Main_event_state|
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7825
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      360
;  :arith-assert-upper      349
;  :arith-conflicts         131
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               655
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3562
;  :mk-clause               508
;  :num-allocs              6712229
;  :num-checks              815
;  :propagations            289
;  :quant-instantiations    129
;  :rlimit-count            310652)
(set-option :timeout 0)
(push) ; 11
(assert (not (= (Seq_length __flatten_68__100@254@08) 6)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7825
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      360
;  :arith-assert-upper      349
;  :arith-conflicts         131
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               656
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3565
;  :mk-clause               508
;  :num-allocs              6712229
;  :num-checks              816
;  :propagations            289
;  :quant-instantiations    129
;  :rlimit-count            310726)
(assert (= (Seq_length __flatten_68__100@254@08) 6))
; [eval] (forall i__104: Int :: { diz.CASR_m.Main_process_state[i__104] } 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|)
(declare-const i__104@264@08 Int)
(push) ; 11
; [eval] 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state|
; [eval] 0 <= i__104
(push) ; 12
; [then-branch: 46 | 0 <= i__104@264@08 | live]
; [else-branch: 46 | !(0 <= i__104@264@08) | live]
(push) ; 13
; [then-branch: 46 | 0 <= i__104@264@08]
(assert (<= 0 i__104@264@08))
; [eval] i__104 < |diz.CASR_m.Main_process_state|
; [eval] |diz.CASR_m.Main_process_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7826
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      362
;  :arith-assert-upper      350
;  :arith-conflicts         131
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               657
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3569
;  :mk-clause               508
;  :num-allocs              6712229
;  :num-checks              817
;  :propagations            289
;  :quant-instantiations    129
;  :rlimit-count            310877)
(pop) ; 13
(push) ; 13
; [else-branch: 46 | !(0 <= i__104@264@08)]
(assert (not (<= 0 i__104@264@08)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 47 | i__104@264@08 < |__flatten_65__97@251@08| && 0 <= i__104@264@08 | live]
; [else-branch: 47 | !(i__104@264@08 < |__flatten_65__97@251@08| && 0 <= i__104@264@08) | live]
(push) ; 13
; [then-branch: 47 | i__104@264@08 < |__flatten_65__97@251@08| && 0 <= i__104@264@08]
(assert (and (< i__104@264@08 (Seq_length __flatten_65__97@251@08)) (<= 0 i__104@264@08)))
; [eval] diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__104] == -1
; [eval] diz.CASR_m.Main_process_state[i__104]
(push) ; 14
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7826
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      363
;  :arith-assert-upper      351
;  :arith-conflicts         131
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               658
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3571
;  :mk-clause               508
;  :num-allocs              6712229
;  :num-checks              818
;  :propagations            289
;  :quant-instantiations    129
;  :rlimit-count            311034)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__104@264@08 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7826
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      363
;  :arith-assert-upper      351
;  :arith-conflicts         131
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               658
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3571
;  :mk-clause               508
;  :num-allocs              6712229
;  :num-checks              819
;  :propagations            289
;  :quant-instantiations    129
;  :rlimit-count            311043)
; [eval] -1
(push) ; 14
; [then-branch: 48 | __flatten_65__97@251@08[i__104@264@08] == -1 | live]
; [else-branch: 48 | __flatten_65__97@251@08[i__104@264@08] != -1 | live]
(push) ; 15
; [then-branch: 48 | __flatten_65__97@251@08[i__104@264@08] == -1]
(assert (= (Seq_index __flatten_65__97@251@08 i__104@264@08) (- 0 1)))
(pop) ; 15
(push) ; 15
; [else-branch: 48 | __flatten_65__97@251@08[i__104@264@08] != -1]
(assert (not (= (Seq_index __flatten_65__97@251@08 i__104@264@08) (- 0 1))))
; [eval] 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= diz.CASR_m.Main_process_state[i__104]
; [eval] diz.CASR_m.Main_process_state[i__104]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7827
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      363
;  :arith-assert-upper      351
;  :arith-conflicts         131
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               659
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3578
;  :mk-clause               516
;  :num-allocs              6712229
;  :num-checks              820
;  :propagations            289
;  :quant-instantiations    130
;  :rlimit-count            311245)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__104@264@08 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7827
;  :arith-add-rows          41
;  :arith-assert-diseq      111
;  :arith-assert-lower      363
;  :arith-assert-upper      351
;  :arith-conflicts         131
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               659
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3578
;  :mk-clause               516
;  :num-allocs              6712229
;  :num-checks              821
;  :propagations            289
;  :quant-instantiations    130
;  :rlimit-count            311254)
(push) ; 16
; [then-branch: 49 | 0 <= __flatten_65__97@251@08[i__104@264@08] | live]
; [else-branch: 49 | !(0 <= __flatten_65__97@251@08[i__104@264@08]) | live]
(push) ; 17
; [then-branch: 49 | 0 <= __flatten_65__97@251@08[i__104@264@08]]
(assert (<= 0 (Seq_index __flatten_65__97@251@08 i__104@264@08)))
; [eval] diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__104]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7827
;  :arith-add-rows          41
;  :arith-assert-diseq      112
;  :arith-assert-lower      366
;  :arith-assert-upper      351
;  :arith-conflicts         131
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               660
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3581
;  :mk-clause               517
;  :num-allocs              6712229
;  :num-checks              822
;  :propagations            289
;  :quant-instantiations    130
;  :rlimit-count            311366)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__104@264@08 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7827
;  :arith-add-rows          41
;  :arith-assert-diseq      112
;  :arith-assert-lower      366
;  :arith-assert-upper      351
;  :arith-conflicts         131
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               660
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3581
;  :mk-clause               517
;  :num-allocs              6712229
;  :num-checks              823
;  :propagations            289
;  :quant-instantiations    130
;  :rlimit-count            311375)
; [eval] |diz.CASR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7827
;  :arith-add-rows          41
;  :arith-assert-diseq      112
;  :arith-assert-lower      366
;  :arith-assert-upper      351
;  :arith-conflicts         131
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         136
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               661
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1993
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1931
;  :del-clause              408
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3581
;  :mk-clause               517
;  :num-allocs              6712229
;  :num-checks              824
;  :propagations            289
;  :quant-instantiations    130
;  :rlimit-count            311423)
(pop) ; 17
(push) ; 17
; [else-branch: 49 | !(0 <= __flatten_65__97@251@08[i__104@264@08])]
(assert (not (<= 0 (Seq_index __flatten_65__97@251@08 i__104@264@08))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 47 | !(i__104@264@08 < |__flatten_65__97@251@08| && 0 <= i__104@264@08)]
(assert (not
  (and
    (< i__104@264@08 (Seq_length __flatten_65__97@251@08))
    (<= 0 i__104@264@08))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 11
(assert (not (forall ((i__104@264@08 Int)) (!
  (implies
    (and
      (< i__104@264@08 (Seq_length __flatten_65__97@251@08))
      (<= 0 i__104@264@08))
    (or
      (= (Seq_index __flatten_65__97@251@08 i__104@264@08) (- 0 1))
      (and
        (<
          (Seq_index __flatten_65__97@251@08 i__104@264@08)
          (Seq_length __flatten_68__100@254@08))
        (<= 0 (Seq_index __flatten_65__97@251@08 i__104@264@08)))))
  :pattern ((Seq_index __flatten_65__97@251@08 i__104@264@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      117
;  :arith-assert-lower      382
;  :arith-assert-upper      360
;  :arith-conflicts         133
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         138
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               667
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3618
;  :mk-clause               562
;  :num-allocs              6712229
;  :num-checks              825
;  :propagations            319
;  :quant-instantiations    133
;  :rlimit-count            312065)
(assert (forall ((i__104@264@08 Int)) (!
  (implies
    (and
      (< i__104@264@08 (Seq_length __flatten_65__97@251@08))
      (<= 0 i__104@264@08))
    (or
      (= (Seq_index __flatten_65__97@251@08 i__104@264@08) (- 0 1))
      (and
        (<
          (Seq_index __flatten_65__97@251@08 i__104@264@08)
          (Seq_length __flatten_68__100@254@08))
        (<= 0 (Seq_index __flatten_65__97@251@08 i__104@264@08)))))
  :pattern ((Seq_index __flatten_65__97@251@08 i__104@264@08))
  :qid |prog.l<no position>|)))
(declare-const $k@265@08 $Perm)
(assert ($Perm.isReadVar $k@265@08 $Perm.Write))
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      384
;  :arith-assert-upper      361
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               668
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3623
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              826
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            312533)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@265@08 $Perm.No) (< $Perm.No $k@265@08))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      384
;  :arith-assert-upper      361
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               669
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3623
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              827
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            312583)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@230@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      384
;  :arith-assert-upper      361
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               669
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3623
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              828
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            312594)
(assert (< $k@265@08 $k@230@08))
(assert (<= $Perm.No (- $k@230@08 $k@265@08)))
(assert (<= (- $k@230@08 $k@265@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@230@08 $k@265@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn != null
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               670
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              829
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            312814)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               671
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              830
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            312862)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               672
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              831
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            312910)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               673
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              832
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            312958
;  :time                    0.01)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               674
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              833
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313006)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               675
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              834
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313054)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               676
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              835
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313102)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               677
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              836
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313150)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               678
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              837
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313198)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               679
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              838
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313246)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               680
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              839
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313294)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               681
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              840
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313342)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               682
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              841
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313390)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               683
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              842
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313438)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               684
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              843
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313486)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               685
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              844
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313534)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               686
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              845
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313582)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               687
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              846
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313630)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               688
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              847
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313678)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               689
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              848
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313726)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               690
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              849
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313774)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      362
;  :arith-conflicts         133
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               691
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3626
;  :mk-clause               564
;  :num-allocs              6712229
;  :num-checks              850
;  :propagations            320
;  :quant-instantiations    133
;  :rlimit-count            313822)
(declare-const $k@266@08 $Perm)
(assert ($Perm.isReadVar $k@266@08 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      388
;  :arith-assert-upper      363
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               692
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3630
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              851
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314019)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@266@08 $Perm.No) (< $Perm.No $k@266@08))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      388
;  :arith-assert-upper      363
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               693
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3630
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              852
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314069)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@231@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      388
;  :arith-assert-upper      363
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               693
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3630
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              853
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314080)
(assert (< $k@266@08 $k@231@08))
(assert (<= $Perm.No (- $k@231@08 $k@266@08)))
(assert (<= (- $k@231@08 $k@266@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@231@08 $k@266@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_casr != null
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               694
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              854
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314288)
(push) ; 11
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               695
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              855
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314336)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               696
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              856
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314384)
(push) ; 11
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               697
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              857
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314432)
(push) ; 11
(assert (not (=
  diz@47@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               697
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              858
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314443)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               698
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              859
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314491)
(push) ; 11
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               699
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              860
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314539)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               700
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              861
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314587)
(push) ; 11
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               701
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              862
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314635)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               702
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              863
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314683)
(push) ; 11
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               703
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              864
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314731)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               704
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              865
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314779)
(push) ; 11
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               705
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              866
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314827)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               706
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              867
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314875)
(push) ; 11
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               707
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              868
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314923)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               708
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              869
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            314971)
(push) ; 11
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      364
;  :arith-conflicts         133
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               709
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3633
;  :mk-clause               566
;  :num-allocs              6712229
;  :num-checks              870
;  :propagations            321
;  :quant-instantiations    133
;  :rlimit-count            315019)
(declare-const $k@267@08 $Perm)
(assert ($Perm.isReadVar $k@267@08 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      120
;  :arith-assert-lower      392
;  :arith-assert-upper      365
;  :arith-conflicts         133
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               710
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3637
;  :mk-clause               568
;  :num-allocs              6712229
;  :num-checks              871
;  :propagations            322
;  :quant-instantiations    133
;  :rlimit-count            315216)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@267@08 $Perm.No) (< $Perm.No $k@267@08))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      120
;  :arith-assert-lower      392
;  :arith-assert-upper      365
;  :arith-conflicts         133
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               711
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3637
;  :mk-clause               568
;  :num-allocs              6712229
;  :num-checks              872
;  :propagations            322
;  :quant-instantiations    133
;  :rlimit-count            315266)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@232@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      120
;  :arith-assert-lower      392
;  :arith-assert-upper      365
;  :arith-conflicts         133
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         138
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               711
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3637
;  :mk-clause               568
;  :num-allocs              6712229
;  :num-checks              873
;  :propagations            322
;  :quant-instantiations    133
;  :rlimit-count            315277)
(assert (< $k@267@08 $k@232@08))
(assert (<= $Perm.No (- $k@232@08 $k@267@08)))
(assert (<= (- $k@232@08 $k@267@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@232@08 $k@267@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_lfsr != null
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      120
;  :arith-assert-lower      394
;  :arith-assert-upper      366
;  :arith-conflicts         133
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         138
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               712
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3640
;  :mk-clause               568
;  :num-allocs              6712229
;  :num-checks              874
;  :propagations            322
;  :quant-instantiations    133
;  :rlimit-count            315491)
(push) ; 11
(assert (not (< $Perm.No $k@232@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      120
;  :arith-assert-lower      394
;  :arith-assert-upper      366
;  :arith-conflicts         133
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         138
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               713
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3640
;  :mk-clause               568
;  :num-allocs              6712229
;  :num-checks              875
;  :propagations            322
;  :quant-instantiations    133
;  :rlimit-count            315539)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      120
;  :arith-assert-lower      394
;  :arith-assert-upper      366
;  :arith-conflicts         133
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         138
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               714
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3640
;  :mk-clause               568
;  :num-allocs              6712229
;  :num-checks              876
;  :propagations            322
;  :quant-instantiations    133
;  :rlimit-count            315587)
(push) ; 11
(assert (not (< $Perm.No $k@232@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      120
;  :arith-assert-lower      394
;  :arith-assert-upper      366
;  :arith-conflicts         133
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         138
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               715
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3640
;  :mk-clause               568
;  :num-allocs              6712229
;  :num-checks              877
;  :propagations            322
;  :quant-instantiations    133
;  :rlimit-count            315635)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      120
;  :arith-assert-lower      394
;  :arith-assert-upper      366
;  :arith-conflicts         133
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         138
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               716
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3640
;  :mk-clause               568
;  :num-allocs              6712229
;  :num-checks              878
;  :propagations            322
;  :quant-instantiations    133
;  :rlimit-count            315683)
(push) ; 11
(assert (not (< $Perm.No $k@232@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      120
;  :arith-assert-lower      394
;  :arith-assert-upper      366
;  :arith-conflicts         133
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         138
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               717
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3640
;  :mk-clause               568
;  :num-allocs              6712229
;  :num-checks              879
;  :propagations            322
;  :quant-instantiations    133
;  :rlimit-count            315731)
(declare-const $k@268@08 $Perm)
(assert ($Perm.isReadVar $k@268@08 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      121
;  :arith-assert-lower      396
;  :arith-assert-upper      367
;  :arith-conflicts         133
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         138
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               718
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3644
;  :mk-clause               570
;  :num-allocs              6712229
;  :num-checks              880
;  :propagations            323
;  :quant-instantiations    133
;  :rlimit-count            315927)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@268@08 $Perm.No) (< $Perm.No $k@268@08))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      121
;  :arith-assert-lower      396
;  :arith-assert-upper      367
;  :arith-conflicts         133
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         138
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               719
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3644
;  :mk-clause               570
;  :num-allocs              6712229
;  :num-checks              881
;  :propagations            323
;  :quant-instantiations    133
;  :rlimit-count            315977)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@233@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      121
;  :arith-assert-lower      396
;  :arith-assert-upper      367
;  :arith-conflicts         133
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         138
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               719
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3644
;  :mk-clause               570
;  :num-allocs              6712229
;  :num-checks              882
;  :propagations            323
;  :quant-instantiations    133
;  :rlimit-count            315988)
(assert (< $k@268@08 $k@233@08))
(assert (<= $Perm.No (- $k@233@08 $k@268@08)))
(assert (<= (- $k@233@08 $k@268@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@233@08 $k@268@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_combinate != null
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      121
;  :arith-assert-lower      398
;  :arith-assert-upper      368
;  :arith-conflicts         133
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               720
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3647
;  :mk-clause               570
;  :num-allocs              6712229
;  :num-checks              883
;  :propagations            323
;  :quant-instantiations    133
;  :rlimit-count            316202)
(push) ; 11
(assert (not (< $Perm.No $k@233@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      121
;  :arith-assert-lower      398
;  :arith-assert-upper      368
;  :arith-conflicts         133
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               721
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3647
;  :mk-clause               570
;  :num-allocs              6712229
;  :num-checks              884
;  :propagations            323
;  :quant-instantiations    133
;  :rlimit-count            316250)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      121
;  :arith-assert-lower      398
;  :arith-assert-upper      368
;  :arith-conflicts         133
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               722
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3647
;  :mk-clause               570
;  :num-allocs              6712229
;  :num-checks              885
;  :propagations            323
;  :quant-instantiations    133
;  :rlimit-count            316298)
(push) ; 11
(assert (not (< $Perm.No $k@233@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      121
;  :arith-assert-lower      398
;  :arith-assert-upper      368
;  :arith-conflicts         133
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               723
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3647
;  :mk-clause               570
;  :num-allocs              6712229
;  :num-checks              886
;  :propagations            323
;  :quant-instantiations    133
;  :rlimit-count            316346)
(declare-const $k@269@08 $Perm)
(assert ($Perm.isReadVar $k@269@08 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      122
;  :arith-assert-lower      400
;  :arith-assert-upper      369
;  :arith-conflicts         133
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               724
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3651
;  :mk-clause               572
;  :num-allocs              6712229
;  :num-checks              887
;  :propagations            324
;  :quant-instantiations    133
;  :rlimit-count            316543)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      122
;  :arith-assert-lower      400
;  :arith-assert-upper      369
;  :arith-conflicts         133
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               725
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3651
;  :mk-clause               572
;  :num-allocs              6712229
;  :num-checks              888
;  :propagations            324
;  :quant-instantiations    133
;  :rlimit-count            316591)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@269@08 $Perm.No) (< $Perm.No $k@269@08))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      122
;  :arith-assert-lower      400
;  :arith-assert-upper      369
;  :arith-conflicts         133
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               726
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3651
;  :mk-clause               572
;  :num-allocs              6712229
;  :num-checks              889
;  :propagations            324
;  :quant-instantiations    133
;  :rlimit-count            316641)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@234@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      122
;  :arith-assert-lower      400
;  :arith-assert-upper      369
;  :arith-conflicts         133
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               726
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3651
;  :mk-clause               572
;  :num-allocs              6712229
;  :num-checks              890
;  :propagations            324
;  :quant-instantiations    133
;  :rlimit-count            316652)
(assert (< $k@269@08 $k@234@08))
(assert (<= $Perm.No (- $k@234@08 $k@269@08)))
(assert (<= (- $k@234@08 $k@269@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@234@08 $k@269@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn.Rng_m == diz.CASR_m
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      122
;  :arith-assert-lower      402
;  :arith-assert-upper      370
;  :arith-conflicts         133
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               727
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3654
;  :mk-clause               572
;  :num-allocs              6712229
;  :num-checks              891
;  :propagations            324
;  :quant-instantiations    133
;  :rlimit-count            316860)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      122
;  :arith-assert-lower      402
;  :arith-assert-upper      370
;  :arith-conflicts         133
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               728
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3654
;  :mk-clause               572
;  :num-allocs              6712229
;  :num-checks              892
;  :propagations            324
;  :quant-instantiations    133
;  :rlimit-count            316908)
(push) ; 11
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      122
;  :arith-assert-lower      402
;  :arith-assert-upper      370
;  :arith-conflicts         133
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               729
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3654
;  :mk-clause               572
;  :num-allocs              6712229
;  :num-checks              893
;  :propagations            324
;  :quant-instantiations    133
;  :rlimit-count            316956)
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      122
;  :arith-assert-lower      402
;  :arith-assert-upper      370
;  :arith-conflicts         133
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               730
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3654
;  :mk-clause               572
;  :num-allocs              6712229
;  :num-checks              894
;  :propagations            324
;  :quant-instantiations    133
;  :rlimit-count            317004)
; [eval] diz.CASR_m.Main_rn_casr == diz
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      122
;  :arith-assert-lower      402
;  :arith-assert-upper      370
;  :arith-conflicts         133
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               731
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3654
;  :mk-clause               572
;  :num-allocs              6712229
;  :num-checks              895
;  :propagations            324
;  :quant-instantiations    133
;  :rlimit-count            317052)
(push) ; 11
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          41
;  :arith-assert-diseq      122
;  :arith-assert-lower      402
;  :arith-assert-upper      370
;  :arith-conflicts         133
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               732
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1995
;  :datatype-occurs-check   423
;  :datatype-splits         1730
;  :decisions               1936
;  :del-clause              462
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.21
;  :mk-bool-var             3654
;  :mk-clause               572
;  :num-allocs              6712229
;  :num-checks              896
;  :propagations            324
;  :quant-instantiations    133
;  :rlimit-count            317100)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 11
(assert ($Perm.isReadVar $k@256@08 $Perm.Write))
(assert ($Perm.isReadVar $k@258@08 $Perm.Write))
(assert ($Perm.isReadVar $k@259@08 $Perm.Write))
(assert ($Perm.isReadVar $k@260@08 $Perm.Write))
(assert ($Perm.isReadVar $k@261@08 $Perm.Write))
(assert ($Perm.isReadVar $k@262@08 $Perm.Write))
(assert (= $t@255@08 ($Snap.combine ($Snap.first $t@255@08) ($Snap.second $t@255@08))))
(assert (<= $Perm.No $k@256@08))
(assert (<= $k@256@08 $Perm.Write))
(assert (implies (< $Perm.No $k@256@08) (not (= diz@47@08 $Ref.null))))
(assert (=
  ($Snap.second $t@255@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@255@08))
    ($Snap.second ($Snap.second $t@255@08)))))
(assert (= ($Snap.first ($Snap.second $t@255@08)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@255@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@255@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@255@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))
  $Snap.unit))
(assert (forall ((i__104@257@08 Int)) (!
  (implies
    (and
      (<
        i__104@257@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
      (<= 0 i__104@257@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
          i__104@257@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
            i__104@257@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
            i__104@257@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    i__104@257@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))
(assert (<= $Perm.No $k@258@08))
(assert (<= $k@258@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@258@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))
(assert (<= $Perm.No $k@259@08))
(assert (<= $k@259@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@259@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@260@08))
(assert (<= $k@260@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@260@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@261@08))
(assert (<= $k@261@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@261@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@262@08))
(assert (<= $k@262@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@262@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
  diz@47@08))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_process_state[0] != -1
; [eval] diz.CASR_m.Main_process_state[0]
(push) ; 12
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9047
;  :arith-add-rows          41
;  :arith-assert-diseq      128
;  :arith-assert-lower      418
;  :arith-assert-upper      384
;  :arith-conflicts         133
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               734
;  :datatype-accessor-ax    434
;  :datatype-constructor-ax 2293
;  :datatype-occurs-check   453
;  :datatype-splits         1950
;  :decisions               2226
;  :del-clause              476
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.53
;  :memory                  5.53
;  :mk-bool-var             3975
;  :mk-clause               587
;  :num-allocs              8073348
;  :num-checks              899
;  :propagations            337
;  :quant-instantiations    143
;  :rlimit-count            328534)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9047
;  :arith-add-rows          41
;  :arith-assert-diseq      128
;  :arith-assert-lower      418
;  :arith-assert-upper      384
;  :arith-conflicts         133
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               734
;  :datatype-accessor-ax    434
;  :datatype-constructor-ax 2293
;  :datatype-occurs-check   453
;  :datatype-splits         1950
;  :decisions               2226
;  :del-clause              476
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.53
;  :memory                  5.53
;  :mk-bool-var             3975
;  :mk-clause               587
;  :num-allocs              8073348
;  :num-checks              900
;  :propagations            337
;  :quant-instantiations    143
;  :rlimit-count            328549)
; [eval] -1
(push) ; 12
; [then-branch: 50 | First:(Second:(Second:(Second:($t@255@08))))[0] != -1 | live]
; [else-branch: 50 | First:(Second:(Second:(Second:($t@255@08))))[0] == -1 | live]
(push) ; 13
; [then-branch: 50 | First:(Second:(Second:(Second:($t@255@08))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
      0)
    (- 0 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 50 | First:(Second:(Second:(Second:($t@255@08))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    0)
  (- 0 1)))
; [eval] diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_event_state[1]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9048
;  :arith-add-rows          41
;  :arith-assert-diseq      128
;  :arith-assert-lower      418
;  :arith-assert-upper      384
;  :arith-conflicts         133
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               735
;  :datatype-accessor-ax    434
;  :datatype-constructor-ax 2293
;  :datatype-occurs-check   453
;  :datatype-splits         1950
;  :decisions               2226
;  :del-clause              476
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.53
;  :memory                  5.53
;  :mk-bool-var             3976
;  :mk-clause               587
;  :num-allocs              8073348
;  :num-checks              901
;  :propagations            337
;  :quant-instantiations    143
;  :rlimit-count            328740)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9048
;  :arith-add-rows          41
;  :arith-assert-diseq      128
;  :arith-assert-lower      418
;  :arith-assert-upper      384
;  :arith-conflicts         133
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               735
;  :datatype-accessor-ax    434
;  :datatype-constructor-ax 2293
;  :datatype-occurs-check   453
;  :datatype-splits         1950
;  :decisions               2226
;  :del-clause              476
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.53
;  :memory                  5.53
;  :mk-bool-var             3976
;  :mk-clause               587
;  :num-allocs              8073348
;  :num-checks              902
;  :propagations            337
;  :quant-instantiations    143
;  :rlimit-count            328755)
; [eval] -2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
          1)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9614
;  :arith-add-rows          41
;  :arith-assert-diseq      129
;  :arith-assert-lower      421
;  :arith-assert-upper      385
;  :arith-conflicts         133
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               737
;  :datatype-accessor-ax    440
;  :datatype-constructor-ax 2459
;  :datatype-occurs-check   474
;  :datatype-splits         2064
;  :decisions               2387
;  :del-clause              483
;  :final-checks            107
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4106
;  :mk-clause               594
;  :num-allocs              8623806
;  :num-checks              903
;  :propagations            343
;  :quant-instantiations    144
;  :rlimit-count            332095
;  :time                    0.00)
(push) ; 12
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
        1)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      129
;  :arith-assert-lower      421
;  :arith-assert-upper      385
;  :arith-conflicts         133
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               737
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              483
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4217
;  :mk-clause               594
;  :num-allocs              8900334
;  :num-checks              904
;  :propagations            347
;  :quant-instantiations    144
;  :rlimit-count            334585
;  :time                    0.00)
; [then-branch: 51 | First:(Second:(Second:(Second:($t@255@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@255@08))))))[1] != -2 | live]
; [else-branch: 51 | !(First:(Second:(Second:(Second:($t@255@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@255@08))))))[1] != -2) | live]
(push) ; 12
; [then-branch: 51 | First:(Second:(Second:(Second:($t@255@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@255@08))))))[1] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
        1)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      129
;  :arith-assert-lower      421
;  :arith-assert-upper      385
;  :arith-conflicts         133
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               738
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              483
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4219
;  :mk-clause               595
;  :num-allocs              8900334
;  :num-checks              905
;  :propagations            347
;  :quant-instantiations    144
;  :rlimit-count            334863)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      129
;  :arith-assert-lower      421
;  :arith-assert-upper      385
;  :arith-conflicts         133
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               739
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              483
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4219
;  :mk-clause               595
;  :num-allocs              8900334
;  :num-checks              906
;  :propagations            347
;  :quant-instantiations    144
;  :rlimit-count            334911)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@270@08 Int)
(push) ; 13
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 14
; [then-branch: 52 | 0 <= i@270@08 | live]
; [else-branch: 52 | !(0 <= i@270@08) | live]
(push) ; 15
; [then-branch: 52 | 0 <= i@270@08]
(assert (<= 0 i@270@08))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 15
(push) ; 15
; [else-branch: 52 | !(0 <= i@270@08)]
(assert (not (<= 0 i@270@08)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 53 | i@270@08 < |First:(Second:(Second:(Second:($t@255@08))))| && 0 <= i@270@08 | live]
; [else-branch: 53 | !(i@270@08 < |First:(Second:(Second:(Second:($t@255@08))))| && 0 <= i@270@08) | live]
(push) ; 15
; [then-branch: 53 | i@270@08 < |First:(Second:(Second:(Second:($t@255@08))))| && 0 <= i@270@08]
(assert (and
  (<
    i@270@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
  (<= 0 i@270@08)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@270@08 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      129
;  :arith-assert-lower      422
;  :arith-assert-upper      386
;  :arith-conflicts         133
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               739
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              483
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4221
;  :mk-clause               595
;  :num-allocs              8900334
;  :num-checks              907
;  :propagations            347
;  :quant-instantiations    144
;  :rlimit-count            335047)
; [eval] -1
(push) ; 16
; [then-branch: 54 | First:(Second:(Second:(Second:($t@255@08))))[i@270@08] == -1 | live]
; [else-branch: 54 | First:(Second:(Second:(Second:($t@255@08))))[i@270@08] != -1 | live]
(push) ; 17
; [then-branch: 54 | First:(Second:(Second:(Second:($t@255@08))))[i@270@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    i@270@08)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 54 | First:(Second:(Second:(Second:($t@255@08))))[i@270@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
      i@270@08)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 18
(assert (not (>= i@270@08 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      130
;  :arith-assert-lower      425
;  :arith-assert-upper      387
;  :arith-conflicts         133
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               739
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              483
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4227
;  :mk-clause               599
;  :num-allocs              8900334
;  :num-checks              908
;  :propagations            349
;  :quant-instantiations    145
;  :rlimit-count            335279)
(push) ; 18
; [then-branch: 55 | 0 <= First:(Second:(Second:(Second:($t@255@08))))[i@270@08] | live]
; [else-branch: 55 | !(0 <= First:(Second:(Second:(Second:($t@255@08))))[i@270@08]) | live]
(push) ; 19
; [then-branch: 55 | 0 <= First:(Second:(Second:(Second:($t@255@08))))[i@270@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    i@270@08)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 20
(assert (not (>= i@270@08 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      130
;  :arith-assert-lower      425
;  :arith-assert-upper      387
;  :arith-conflicts         133
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               739
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              483
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4227
;  :mk-clause               599
;  :num-allocs              8900334
;  :num-checks              909
;  :propagations            349
;  :quant-instantiations    145
;  :rlimit-count            335393)
; [eval] |diz.Main_event_state|
(pop) ; 19
(push) ; 19
; [else-branch: 55 | !(0 <= First:(Second:(Second:(Second:($t@255@08))))[i@270@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
      i@270@08))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 53 | !(i@270@08 < |First:(Second:(Second:(Second:($t@255@08))))| && 0 <= i@270@08)]
(assert (not
  (and
    (<
      i@270@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
    (<= 0 i@270@08))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 13
(assert (not (forall ((i@270@08 Int)) (!
  (implies
    (and
      (<
        i@270@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
      (<= 0 i@270@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
          i@270@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
            i@270@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
            i@270@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    i@270@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      132
;  :arith-assert-lower      426
;  :arith-assert-upper      388
;  :arith-conflicts         133
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               740
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4235
;  :mk-clause               613
;  :num-allocs              8900334
;  :num-checks              910
;  :propagations            351
;  :quant-instantiations    146
;  :rlimit-count            335839)
(assert (forall ((i@270@08 Int)) (!
  (implies
    (and
      (<
        i@270@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
      (<= 0 i@270@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
          i@270@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
            i@270@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
            i@270@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    i@270@08))
  :qid |prog.l<no position>|)))
(declare-const $k@271@08 $Perm)
(assert ($Perm.isReadVar $k@271@08 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@271@08 $Perm.No) (< $Perm.No $k@271@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      133
;  :arith-assert-lower      428
;  :arith-assert-upper      389
;  :arith-conflicts         133
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               741
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4240
;  :mk-clause               615
;  :num-allocs              8900334
;  :num-checks              911
;  :propagations            352
;  :quant-instantiations    146
;  :rlimit-count            336400)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@258@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      133
;  :arith-assert-lower      428
;  :arith-assert-upper      389
;  :arith-conflicts         133
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         138
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               741
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4240
;  :mk-clause               615
;  :num-allocs              8900334
;  :num-checks              912
;  :propagations            352
;  :quant-instantiations    146
;  :rlimit-count            336411)
(assert (< $k@271@08 $k@258@08))
(assert (<= $Perm.No (- $k@258@08 $k@271@08)))
(assert (<= (- $k@258@08 $k@271@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@258@08 $k@271@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
; [eval] diz.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      133
;  :arith-assert-lower      430
;  :arith-assert-upper      390
;  :arith-conflicts         133
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         138
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               742
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4243
;  :mk-clause               615
;  :num-allocs              8900334
;  :num-checks              913
;  :propagations            352
;  :quant-instantiations    146
;  :rlimit-count            336625)
(push) ; 13
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      133
;  :arith-assert-lower      430
;  :arith-assert-upper      390
;  :arith-conflicts         133
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         138
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               743
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4243
;  :mk-clause               615
;  :num-allocs              8900334
;  :num-checks              914
;  :propagations            352
;  :quant-instantiations    146
;  :rlimit-count            336673)
(push) ; 13
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      133
;  :arith-assert-lower      430
;  :arith-assert-upper      390
;  :arith-conflicts         133
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         138
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               744
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4243
;  :mk-clause               615
;  :num-allocs              8900334
;  :num-checks              915
;  :propagations            352
;  :quant-instantiations    146
;  :rlimit-count            336721)
(push) ; 13
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      133
;  :arith-assert-lower      430
;  :arith-assert-upper      390
;  :arith-conflicts         133
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         138
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               745
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4243
;  :mk-clause               615
;  :num-allocs              8900334
;  :num-checks              916
;  :propagations            352
;  :quant-instantiations    146
;  :rlimit-count            336769)
(push) ; 13
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      133
;  :arith-assert-lower      430
;  :arith-assert-upper      390
;  :arith-conflicts         133
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         138
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               746
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4243
;  :mk-clause               615
;  :num-allocs              8900334
;  :num-checks              917
;  :propagations            352
;  :quant-instantiations    146
;  :rlimit-count            336817)
(push) ; 13
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      133
;  :arith-assert-lower      430
;  :arith-assert-upper      390
;  :arith-conflicts         133
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         138
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               747
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4243
;  :mk-clause               615
;  :num-allocs              8900334
;  :num-checks              918
;  :propagations            352
;  :quant-instantiations    146
;  :rlimit-count            336865)
(push) ; 13
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      133
;  :arith-assert-lower      430
;  :arith-assert-upper      390
;  :arith-conflicts         133
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         138
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               748
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4243
;  :mk-clause               615
;  :num-allocs              8900334
;  :num-checks              919
;  :propagations            352
;  :quant-instantiations    146
;  :rlimit-count            336913)
(push) ; 13
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      133
;  :arith-assert-lower      430
;  :arith-assert-upper      390
;  :arith-conflicts         133
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         138
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               749
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4243
;  :mk-clause               615
;  :num-allocs              8900334
;  :num-checks              920
;  :propagations            352
;  :quant-instantiations    146
;  :rlimit-count            336961)
(push) ; 13
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      133
;  :arith-assert-lower      430
;  :arith-assert-upper      390
;  :arith-conflicts         133
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         138
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               750
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4243
;  :mk-clause               615
;  :num-allocs              8900334
;  :num-checks              921
;  :propagations            352
;  :quant-instantiations    146
;  :rlimit-count            337009)
(push) ; 13
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      133
;  :arith-assert-lower      430
;  :arith-assert-upper      390
;  :arith-conflicts         133
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         138
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               751
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4243
;  :mk-clause               615
;  :num-allocs              8900334
;  :num-checks              922
;  :propagations            352
;  :quant-instantiations    146
;  :rlimit-count            337057)
(push) ; 13
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      133
;  :arith-assert-lower      430
;  :arith-assert-upper      390
;  :arith-conflicts         133
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         138
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               752
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4243
;  :mk-clause               615
;  :num-allocs              8900334
;  :num-checks              923
;  :propagations            352
;  :quant-instantiations    146
;  :rlimit-count            337105)
(declare-const $k@272@08 $Perm)
(assert ($Perm.isReadVar $k@272@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@272@08 $Perm.No) (< $Perm.No $k@272@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      134
;  :arith-assert-lower      432
;  :arith-assert-upper      391
;  :arith-conflicts         133
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         138
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               753
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4247
;  :mk-clause               617
;  :num-allocs              8900334
;  :num-checks              924
;  :propagations            353
;  :quant-instantiations    146
;  :rlimit-count            337304)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@259@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      134
;  :arith-assert-lower      432
;  :arith-assert-upper      391
;  :arith-conflicts         133
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         138
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               753
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4247
;  :mk-clause               617
;  :num-allocs              8900334
;  :num-checks              925
;  :propagations            353
;  :quant-instantiations    146
;  :rlimit-count            337315)
(assert (< $k@272@08 $k@259@08))
(assert (<= $Perm.No (- $k@259@08 $k@272@08)))
(assert (<= (- $k@259@08 $k@272@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@259@08 $k@272@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
; [eval] diz.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      134
;  :arith-assert-lower      434
;  :arith-assert-upper      392
;  :arith-conflicts         133
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         138
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               754
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4250
;  :mk-clause               617
;  :num-allocs              8900334
;  :num-checks              926
;  :propagations            353
;  :quant-instantiations    146
;  :rlimit-count            337529)
(push) ; 13
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      134
;  :arith-assert-lower      434
;  :arith-assert-upper      392
;  :arith-conflicts         133
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         138
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               755
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4250
;  :mk-clause               617
;  :num-allocs              8900334
;  :num-checks              927
;  :propagations            353
;  :quant-instantiations    146
;  :rlimit-count            337577)
(push) ; 13
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      134
;  :arith-assert-lower      434
;  :arith-assert-upper      392
;  :arith-conflicts         133
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         138
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               756
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4250
;  :mk-clause               617
;  :num-allocs              8900334
;  :num-checks              928
;  :propagations            353
;  :quant-instantiations    146
;  :rlimit-count            337625)
(push) ; 13
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      134
;  :arith-assert-lower      434
;  :arith-assert-upper      392
;  :arith-conflicts         133
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         138
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               757
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4250
;  :mk-clause               617
;  :num-allocs              8900334
;  :num-checks              929
;  :propagations            353
;  :quant-instantiations    146
;  :rlimit-count            337673)
(push) ; 13
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      134
;  :arith-assert-lower      434
;  :arith-assert-upper      392
;  :arith-conflicts         133
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         138
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               758
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4250
;  :mk-clause               617
;  :num-allocs              8900334
;  :num-checks              930
;  :propagations            353
;  :quant-instantiations    146
;  :rlimit-count            337721)
(push) ; 13
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      134
;  :arith-assert-lower      434
;  :arith-assert-upper      392
;  :arith-conflicts         133
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         138
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               759
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4250
;  :mk-clause               617
;  :num-allocs              8900334
;  :num-checks              931
;  :propagations            353
;  :quant-instantiations    146
;  :rlimit-count            337769)
(push) ; 13
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      134
;  :arith-assert-lower      434
;  :arith-assert-upper      392
;  :arith-conflicts         133
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         138
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               760
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4250
;  :mk-clause               617
;  :num-allocs              8900334
;  :num-checks              932
;  :propagations            353
;  :quant-instantiations    146
;  :rlimit-count            337817)
(push) ; 13
(assert (not (< $Perm.No $k@259@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      134
;  :arith-assert-lower      434
;  :arith-assert-upper      392
;  :arith-conflicts         133
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         138
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               761
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4250
;  :mk-clause               617
;  :num-allocs              8900334
;  :num-checks              933
;  :propagations            353
;  :quant-instantiations    146
;  :rlimit-count            337865)
(declare-const $k@273@08 $Perm)
(assert ($Perm.isReadVar $k@273@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@273@08 $Perm.No) (< $Perm.No $k@273@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      135
;  :arith-assert-lower      436
;  :arith-assert-upper      393
;  :arith-conflicts         133
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         138
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               762
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4254
;  :mk-clause               619
;  :num-allocs              8900334
;  :num-checks              934
;  :propagations            354
;  :quant-instantiations    146
;  :rlimit-count            338063)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@260@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      135
;  :arith-assert-lower      436
;  :arith-assert-upper      393
;  :arith-conflicts         133
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         138
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               762
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4254
;  :mk-clause               619
;  :num-allocs              8900334
;  :num-checks              935
;  :propagations            354
;  :quant-instantiations    146
;  :rlimit-count            338074)
(assert (< $k@273@08 $k@260@08))
(assert (<= $Perm.No (- $k@260@08 $k@273@08)))
(assert (<= (- $k@260@08 $k@273@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@260@08 $k@273@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
; [eval] diz.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No $k@260@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      135
;  :arith-assert-lower      438
;  :arith-assert-upper      394
;  :arith-conflicts         133
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         138
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               763
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4257
;  :mk-clause               619
;  :num-allocs              8900334
;  :num-checks              936
;  :propagations            354
;  :quant-instantiations    146
;  :rlimit-count            338294)
(push) ; 13
(assert (not (< $Perm.No $k@260@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      135
;  :arith-assert-lower      438
;  :arith-assert-upper      394
;  :arith-conflicts         133
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         138
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               764
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4257
;  :mk-clause               619
;  :num-allocs              8900334
;  :num-checks              937
;  :propagations            354
;  :quant-instantiations    146
;  :rlimit-count            338342)
(push) ; 13
(assert (not (< $Perm.No $k@260@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      135
;  :arith-assert-lower      438
;  :arith-assert-upper      394
;  :arith-conflicts         133
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         138
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               765
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4257
;  :mk-clause               619
;  :num-allocs              8900334
;  :num-checks              938
;  :propagations            354
;  :quant-instantiations    146
;  :rlimit-count            338390)
(declare-const $k@274@08 $Perm)
(assert ($Perm.isReadVar $k@274@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@274@08 $Perm.No) (< $Perm.No $k@274@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      136
;  :arith-assert-lower      440
;  :arith-assert-upper      395
;  :arith-conflicts         133
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         138
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               766
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4261
;  :mk-clause               621
;  :num-allocs              8900334
;  :num-checks              939
;  :propagations            355
;  :quant-instantiations    146
;  :rlimit-count            338589)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@261@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      136
;  :arith-assert-lower      440
;  :arith-assert-upper      395
;  :arith-conflicts         133
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         138
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               766
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4261
;  :mk-clause               621
;  :num-allocs              8900334
;  :num-checks              940
;  :propagations            355
;  :quant-instantiations    146
;  :rlimit-count            338600)
(assert (< $k@274@08 $k@261@08))
(assert (<= $Perm.No (- $k@261@08 $k@274@08)))
(assert (<= (- $k@261@08 $k@274@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@261@08 $k@274@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
; [eval] diz.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No $k@261@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      136
;  :arith-assert-lower      442
;  :arith-assert-upper      396
;  :arith-conflicts         133
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         138
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               767
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4264
;  :mk-clause               621
;  :num-allocs              8900334
;  :num-checks              941
;  :propagations            355
;  :quant-instantiations    146
;  :rlimit-count            338808)
(push) ; 13
(assert (not (< $Perm.No $k@261@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      136
;  :arith-assert-lower      442
;  :arith-assert-upper      396
;  :arith-conflicts         133
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         138
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               768
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4264
;  :mk-clause               621
;  :num-allocs              8900334
;  :num-checks              942
;  :propagations            355
;  :quant-instantiations    146
;  :rlimit-count            338856)
(declare-const $k@275@08 $Perm)
(assert ($Perm.isReadVar $k@275@08 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      137
;  :arith-assert-lower      444
;  :arith-assert-upper      397
;  :arith-conflicts         133
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         138
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               769
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4268
;  :mk-clause               623
;  :num-allocs              8900334
;  :num-checks              943
;  :propagations            356
;  :quant-instantiations    146
;  :rlimit-count            339053)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@275@08 $Perm.No) (< $Perm.No $k@275@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      137
;  :arith-assert-lower      444
;  :arith-assert-upper      397
;  :arith-conflicts         133
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         138
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               770
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4268
;  :mk-clause               623
;  :num-allocs              8900334
;  :num-checks              944
;  :propagations            356
;  :quant-instantiations    146
;  :rlimit-count            339103)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@262@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      137
;  :arith-assert-lower      444
;  :arith-assert-upper      397
;  :arith-conflicts         133
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         138
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               770
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4268
;  :mk-clause               623
;  :num-allocs              8900334
;  :num-checks              945
;  :propagations            356
;  :quant-instantiations    146
;  :rlimit-count            339114)
(assert (< $k@275@08 $k@262@08))
(assert (<= $Perm.No (- $k@262@08 $k@275@08)))
(assert (<= (- $k@262@08 $k@275@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@262@08 $k@275@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
      $Ref.null))))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 13
(assert (not (< $Perm.No $k@258@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      137
;  :arith-assert-lower      446
;  :arith-assert-upper      398
;  :arith-conflicts         133
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         138
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               771
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4271
;  :mk-clause               623
;  :num-allocs              8900334
;  :num-checks              946
;  :propagations            356
;  :quant-instantiations    146
;  :rlimit-count            339328)
(push) ; 13
(assert (not (< $Perm.No $k@262@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9995
;  :arith-add-rows          41
;  :arith-assert-diseq      137
;  :arith-assert-lower      446
;  :arith-assert-upper      398
;  :arith-conflicts         133
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         138
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               772
;  :datatype-accessor-ax    444
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4271
;  :mk-clause               623
;  :num-allocs              8900334
;  :num-checks              947
;  :propagations            356
;  :quant-instantiations    146
;  :rlimit-count            339376)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))
                                                          ($Snap.combine
                                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              ($Snap.combine
                                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))
                                                                ($Snap.combine
                                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))
                                                                  ($Snap.combine
                                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))
                                                                    ($Snap.combine
                                                                      $Snap.unit
                                                                      ($Snap.combine
                                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))
                                                                        ($Snap.combine
                                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))))
                                                                          $Snap.unit))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) __globals@48@08))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10069
;  :arith-add-rows          41
;  :arith-assert-diseq      137
;  :arith-assert-lower      446
;  :arith-assert-upper      398
;  :arith-conflicts         133
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         138
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               773
;  :datatype-accessor-ax    481
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4272
;  :mk-clause               623
;  :num-allocs              8900334
;  :num-checks              948
;  :propagations            356
;  :quant-instantiations    146
;  :rlimit-count            340931)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10069
;  :arith-add-rows          41
;  :arith-assert-diseq      137
;  :arith-assert-lower      446
;  :arith-assert-upper      398
;  :arith-conflicts         133
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         138
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               774
;  :datatype-accessor-ax    481
;  :datatype-constructor-ax 2571
;  :datatype-occurs-check   489
;  :datatype-splits         2174
;  :decisions               2495
;  :del-clause              501
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.44
;  :mk-bool-var             4272
;  :mk-clause               623
;  :num-allocs              8900334
;  :num-checks              949
;  :propagations            356
;  :quant-instantiations    146
;  :rlimit-count            340979)
(declare-const $t@276@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10668
;  :arith-add-rows          41
;  :arith-assert-diseq      138
;  :arith-assert-lower      449
;  :arith-assert-upper      399
;  :arith-conflicts         133
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         138
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               777
;  :datatype-accessor-ax    487
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              515
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4400
;  :mk-clause               629
;  :num-allocs              9184867
;  :num-checks              951
;  :propagations            362
;  :quant-instantiations    148
;  :rlimit-count            344201)
(assert (= $t@276@08 ($Snap.combine ($Snap.first $t@276@08) ($Snap.second $t@276@08))))
(assert (= ($Snap.first $t@276@08) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@276@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@276@08))
    ($Snap.second ($Snap.second $t@276@08)))))
(assert (= ($Snap.first ($Snap.second $t@276@08)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@276@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@276@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@276@08))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@276@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@277@08 Int)
(push) ; 13
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 14
; [then-branch: 56 | 0 <= i@277@08 | live]
; [else-branch: 56 | !(0 <= i@277@08) | live]
(push) ; 15
; [then-branch: 56 | 0 <= i@277@08]
(assert (<= 0 i@277@08))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 15
(push) ; 15
; [else-branch: 56 | !(0 <= i@277@08)]
(assert (not (<= 0 i@277@08)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 57 | i@277@08 < |First:(Second:(Second:(Second:($t@276@08))))| && 0 <= i@277@08 | live]
; [else-branch: 57 | !(i@277@08 < |First:(Second:(Second:(Second:($t@276@08))))| && 0 <= i@277@08) | live]
(push) ; 15
; [then-branch: 57 | i@277@08 < |First:(Second:(Second:(Second:($t@276@08))))| && 0 <= i@277@08]
(assert (and
  (<
    i@277@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))
  (<= 0 i@277@08)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@277@08 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10718
;  :arith-add-rows          41
;  :arith-assert-diseq      138
;  :arith-assert-lower      454
;  :arith-assert-upper      402
;  :arith-conflicts         133
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         138
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               777
;  :datatype-accessor-ax    495
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              515
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4426
;  :mk-clause               629
;  :num-allocs              9184867
;  :num-checks              952
;  :propagations            362
;  :quant-instantiations    152
;  :rlimit-count            345506)
; [eval] -1
(push) ; 16
; [then-branch: 58 | First:(Second:(Second:(Second:($t@276@08))))[i@277@08] == -1 | live]
; [else-branch: 58 | First:(Second:(Second:(Second:($t@276@08))))[i@277@08] != -1 | live]
(push) ; 17
; [then-branch: 58 | First:(Second:(Second:(Second:($t@276@08))))[i@277@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
    i@277@08)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 58 | First:(Second:(Second:(Second:($t@276@08))))[i@277@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
      i@277@08)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 18
(assert (not (>= i@277@08 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10718
;  :arith-add-rows          41
;  :arith-assert-diseq      138
;  :arith-assert-lower      454
;  :arith-assert-upper      402
;  :arith-conflicts         133
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         138
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               777
;  :datatype-accessor-ax    495
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              515
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4427
;  :mk-clause               629
;  :num-allocs              9184867
;  :num-checks              953
;  :propagations            362
;  :quant-instantiations    152
;  :rlimit-count            345681)
(push) ; 18
; [then-branch: 59 | 0 <= First:(Second:(Second:(Second:($t@276@08))))[i@277@08] | live]
; [else-branch: 59 | !(0 <= First:(Second:(Second:(Second:($t@276@08))))[i@277@08]) | live]
(push) ; 19
; [then-branch: 59 | 0 <= First:(Second:(Second:(Second:($t@276@08))))[i@277@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
    i@277@08)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 20
(assert (not (>= i@277@08 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10718
;  :arith-add-rows          41
;  :arith-assert-diseq      139
;  :arith-assert-lower      457
;  :arith-assert-upper      402
;  :arith-conflicts         133
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         138
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               777
;  :datatype-accessor-ax    495
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              515
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4430
;  :mk-clause               630
;  :num-allocs              9184867
;  :num-checks              954
;  :propagations            362
;  :quant-instantiations    152
;  :rlimit-count            345805)
; [eval] |diz.Main_event_state|
(pop) ; 19
(push) ; 19
; [else-branch: 59 | !(0 <= First:(Second:(Second:(Second:($t@276@08))))[i@277@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
      i@277@08))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 57 | !(i@277@08 < |First:(Second:(Second:(Second:($t@276@08))))| && 0 <= i@277@08)]
(assert (not
  (and
    (<
      i@277@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))
    (<= 0 i@277@08))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@277@08 Int)) (!
  (implies
    (and
      (<
        i@277@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))
      (<= 0 i@277@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
          i@277@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
            i@277@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
            i@277@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
    i@277@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))
(declare-const $k@278@08 $Perm)
(assert ($Perm.isReadVar $k@278@08 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@278@08 $Perm.No) (< $Perm.No $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10723
;  :arith-add-rows          41
;  :arith-assert-diseq      140
;  :arith-assert-lower      459
;  :arith-assert-upper      403
;  :arith-conflicts         133
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         138
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               778
;  :datatype-accessor-ax    496
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4436
;  :mk-clause               632
;  :num-allocs              9184867
;  :num-checks              955
;  :propagations            363
;  :quant-instantiations    152
;  :rlimit-count            346574)
(declare-const $t@279@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@258@08 $k@271@08))
    (=
      $t@279@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))
  (implies
    (< $Perm.No $k@278@08)
    (=
      $t@279@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))
(assert (<= $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08)))
(assert (<= (+ (- $k@258@08 $k@271@08) $k@278@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))
  $Snap.unit))
; [eval] diz.Main_rn != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10733
;  :arith-add-rows          42
;  :arith-assert-diseq      140
;  :arith-assert-lower      460
;  :arith-assert-upper      405
;  :arith-conflicts         134
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         139
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               779
;  :datatype-accessor-ax    497
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4444
;  :mk-clause               632
;  :num-allocs              9184867
;  :num-checks              956
;  :propagations            363
;  :quant-instantiations    153
;  :rlimit-count            347254)
(assert (not (= $t@279@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10739
;  :arith-add-rows          42
;  :arith-assert-diseq      140
;  :arith-assert-lower      460
;  :arith-assert-upper      406
;  :arith-conflicts         135
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         140
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               780
;  :datatype-accessor-ax    498
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4447
;  :mk-clause               632
;  :num-allocs              9184867
;  :num-checks              957
;  :propagations            363
;  :quant-instantiations    153
;  :rlimit-count            347576)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10744
;  :arith-add-rows          42
;  :arith-assert-diseq      140
;  :arith-assert-lower      460
;  :arith-assert-upper      407
;  :arith-conflicts         136
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         141
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               781
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4449
;  :mk-clause               632
;  :num-allocs              9184867
;  :num-checks              958
;  :propagations            363
;  :quant-instantiations    153
;  :rlimit-count            347863)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10749
;  :arith-add-rows          42
;  :arith-assert-diseq      140
;  :arith-assert-lower      460
;  :arith-assert-upper      408
;  :arith-conflicts         137
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         142
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               782
;  :datatype-accessor-ax    500
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4451
;  :mk-clause               632
;  :num-allocs              9184867
;  :num-checks              959
;  :propagations            363
;  :quant-instantiations    153
;  :rlimit-count            348160)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10754
;  :arith-add-rows          42
;  :arith-assert-diseq      140
;  :arith-assert-lower      460
;  :arith-assert-upper      409
;  :arith-conflicts         138
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         143
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               783
;  :datatype-accessor-ax    501
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4453
;  :mk-clause               632
;  :num-allocs              9184867
;  :num-checks              960
;  :propagations            363
;  :quant-instantiations    153
;  :rlimit-count            348467)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10759
;  :arith-add-rows          42
;  :arith-assert-diseq      140
;  :arith-assert-lower      460
;  :arith-assert-upper      410
;  :arith-conflicts         139
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         144
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               784
;  :datatype-accessor-ax    502
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4455
;  :mk-clause               632
;  :num-allocs              9184867
;  :num-checks              961
;  :propagations            363
;  :quant-instantiations    153
;  :rlimit-count            348784)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10764
;  :arith-add-rows          42
;  :arith-assert-diseq      140
;  :arith-assert-lower      460
;  :arith-assert-upper      411
;  :arith-conflicts         140
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         145
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               785
;  :datatype-accessor-ax    503
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4457
;  :mk-clause               632
;  :num-allocs              9184867
;  :num-checks              962
;  :propagations            363
;  :quant-instantiations    153
;  :rlimit-count            349111)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10769
;  :arith-add-rows          42
;  :arith-assert-diseq      140
;  :arith-assert-lower      460
;  :arith-assert-upper      412
;  :arith-conflicts         141
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         146
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               786
;  :datatype-accessor-ax    504
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4459
;  :mk-clause               632
;  :num-allocs              9184867
;  :num-checks              963
;  :propagations            363
;  :quant-instantiations    153
;  :rlimit-count            349448)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10774
;  :arith-add-rows          42
;  :arith-assert-diseq      140
;  :arith-assert-lower      460
;  :arith-assert-upper      413
;  :arith-conflicts         142
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         147
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               787
;  :datatype-accessor-ax    505
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4461
;  :mk-clause               632
;  :num-allocs              9184867
;  :num-checks              964
;  :propagations            363
;  :quant-instantiations    153
;  :rlimit-count            349795)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10779
;  :arith-add-rows          42
;  :arith-assert-diseq      140
;  :arith-assert-lower      460
;  :arith-assert-upper      414
;  :arith-conflicts         143
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         148
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               788
;  :datatype-accessor-ax    506
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4463
;  :mk-clause               632
;  :num-allocs              9184867
;  :num-checks              965
;  :propagations            363
;  :quant-instantiations    153
;  :rlimit-count            350152)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10784
;  :arith-add-rows          42
;  :arith-assert-diseq      140
;  :arith-assert-lower      460
;  :arith-assert-upper      415
;  :arith-conflicts         144
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         149
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               789
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4465
;  :mk-clause               632
;  :num-allocs              9184867
;  :num-checks              966
;  :propagations            363
;  :quant-instantiations    153
;  :rlimit-count            350519)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))
(declare-const $k@280@08 $Perm)
(assert ($Perm.isReadVar $k@280@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@280@08 $Perm.No) (< $Perm.No $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10789
;  :arith-add-rows          42
;  :arith-assert-diseq      141
;  :arith-assert-lower      462
;  :arith-assert-upper      416
;  :arith-conflicts         144
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         149
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               790
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4470
;  :mk-clause               634
;  :num-allocs              9184867
;  :num-checks              967
;  :propagations            364
;  :quant-instantiations    153
;  :rlimit-count            351010)
(declare-const $t@281@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@259@08 $k@272@08))
    (=
      $t@281@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@280@08)
    (=
      $t@281@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08)))
(assert (<= (+ (- $k@259@08 $k@272@08) $k@280@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10799
;  :arith-add-rows          43
;  :arith-assert-diseq      141
;  :arith-assert-lower      463
;  :arith-assert-upper      418
;  :arith-conflicts         145
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         150
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               791
;  :datatype-accessor-ax    509
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4478
;  :mk-clause               634
;  :num-allocs              9184867
;  :num-checks              968
;  :propagations            364
;  :quant-instantiations    154
;  :rlimit-count            351734)
(assert (not (= $t@281@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10804
;  :arith-add-rows          43
;  :arith-assert-diseq      141
;  :arith-assert-lower      463
;  :arith-assert-upper      419
;  :arith-conflicts         146
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         151
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               792
;  :datatype-accessor-ax    510
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4480
;  :mk-clause               634
;  :num-allocs              9184867
;  :num-checks              969
;  :propagations            364
;  :quant-instantiations    154
;  :rlimit-count            352149)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10809
;  :arith-add-rows          43
;  :arith-assert-diseq      141
;  :arith-assert-lower      463
;  :arith-assert-upper      420
;  :arith-conflicts         147
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         152
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               793
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4482
;  :mk-clause               634
;  :num-allocs              9184867
;  :num-checks              970
;  :propagations            364
;  :quant-instantiations    154
;  :rlimit-count            352556)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10814
;  :arith-add-rows          43
;  :arith-assert-diseq      141
;  :arith-assert-lower      463
;  :arith-assert-upper      421
;  :arith-conflicts         148
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         153
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               794
;  :datatype-accessor-ax    512
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4484
;  :mk-clause               634
;  :num-allocs              9184867
;  :num-checks              971
;  :propagations            364
;  :quant-instantiations    154
;  :rlimit-count            352973)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10819
;  :arith-add-rows          43
;  :arith-assert-diseq      141
;  :arith-assert-lower      463
;  :arith-assert-upper      422
;  :arith-conflicts         149
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         154
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               795
;  :datatype-accessor-ax    513
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4486
;  :mk-clause               634
;  :num-allocs              9184867
;  :num-checks              972
;  :propagations            364
;  :quant-instantiations    154
;  :rlimit-count            353400)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10824
;  :arith-add-rows          43
;  :arith-assert-diseq      141
;  :arith-assert-lower      463
;  :arith-assert-upper      423
;  :arith-conflicts         150
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         155
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               796
;  :datatype-accessor-ax    514
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4488
;  :mk-clause               634
;  :num-allocs              9184867
;  :num-checks              973
;  :propagations            364
;  :quant-instantiations    154
;  :rlimit-count            353837)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10829
;  :arith-add-rows          43
;  :arith-assert-diseq      141
;  :arith-assert-lower      463
;  :arith-assert-upper      424
;  :arith-conflicts         151
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         156
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               797
;  :datatype-accessor-ax    515
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4490
;  :mk-clause               634
;  :num-allocs              9184867
;  :num-checks              974
;  :propagations            364
;  :quant-instantiations    154
;  :rlimit-count            354284)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10834
;  :arith-add-rows          43
;  :arith-assert-diseq      141
;  :arith-assert-lower      463
;  :arith-assert-upper      425
;  :arith-conflicts         152
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         157
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               798
;  :datatype-accessor-ax    516
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4492
;  :mk-clause               634
;  :num-allocs              9184867
;  :num-checks              975
;  :propagations            364
;  :quant-instantiations    154
;  :rlimit-count            354741)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))))
(declare-const $k@282@08 $Perm)
(assert ($Perm.isReadVar $k@282@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@282@08 $Perm.No) (< $Perm.No $k@282@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10839
;  :arith-add-rows          43
;  :arith-assert-diseq      142
;  :arith-assert-lower      465
;  :arith-assert-upper      426
;  :arith-conflicts         152
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         157
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               799
;  :datatype-accessor-ax    517
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4497
;  :mk-clause               636
;  :num-allocs              9184867
;  :num-checks              976
;  :propagations            365
;  :quant-instantiations    154
;  :rlimit-count            355322)
(declare-const $t@283@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@260@08 $k@273@08))
    (=
      $t@283@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@282@08)
    (=
      $t@283@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@260@08 $k@273@08) $k@282@08)))
(assert (<= (+ (- $k@260@08 $k@273@08) $k@282@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@260@08 $k@273@08) $k@282@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@260@08 $k@273@08) $k@282@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10849
;  :arith-add-rows          44
;  :arith-assert-diseq      142
;  :arith-assert-lower      466
;  :arith-assert-upper      428
;  :arith-conflicts         153
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         158
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               800
;  :datatype-accessor-ax    518
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4505
;  :mk-clause               636
;  :num-allocs              9184867
;  :num-checks              977
;  :propagations            365
;  :quant-instantiations    155
;  :rlimit-count            356434)
(assert (not (= $t@283@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@260@08 $k@273@08) $k@282@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10855
;  :arith-add-rows          44
;  :arith-assert-diseq      142
;  :arith-assert-lower      466
;  :arith-assert-upper      429
;  :arith-conflicts         154
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         159
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               801
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4508
;  :mk-clause               636
;  :num-allocs              9184867
;  :num-checks              978
;  :propagations            365
;  :quant-instantiations    155
;  :rlimit-count            356966)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@260@08 $k@273@08) $k@282@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10860
;  :arith-add-rows          44
;  :arith-assert-diseq      142
;  :arith-assert-lower      466
;  :arith-assert-upper      430
;  :arith-conflicts         155
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         160
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               802
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4510
;  :mk-clause               636
;  :num-allocs              9184867
;  :num-checks              979
;  :propagations            365
;  :quant-instantiations    155
;  :rlimit-count            357463)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))))))))
(declare-const $k@284@08 $Perm)
(assert ($Perm.isReadVar $k@284@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@284@08 $Perm.No) (< $Perm.No $k@284@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10865
;  :arith-add-rows          44
;  :arith-assert-diseq      143
;  :arith-assert-lower      468
;  :arith-assert-upper      431
;  :arith-conflicts         155
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               803
;  :datatype-accessor-ax    521
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4515
;  :mk-clause               638
;  :num-allocs              9184867
;  :num-checks              980
;  :propagations            366
;  :quant-instantiations    155
;  :rlimit-count            358084)
(declare-const $t@285@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@261@08 $k@274@08))
    (=
      $t@285@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@284@08)
    (=
      $t@285@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@261@08 $k@274@08) $k@284@08)))
(assert (<= (+ (- $k@261@08 $k@274@08) $k@284@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@261@08 $k@274@08) $k@284@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@261@08 $k@274@08) $k@284@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10875
;  :arith-add-rows          45
;  :arith-assert-diseq      143
;  :arith-assert-lower      469
;  :arith-assert-upper      433
;  :arith-conflicts         156
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         161
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               804
;  :datatype-accessor-ax    522
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4523
;  :mk-clause               638
;  :num-allocs              9184867
;  :num-checks              981
;  :propagations            366
;  :quant-instantiations    156
;  :rlimit-count            359294)
(assert (not (= $t@285@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@261@08 $k@274@08) $k@284@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10881
;  :arith-add-rows          45
;  :arith-assert-diseq      143
;  :arith-assert-lower      469
;  :arith-assert-upper      434
;  :arith-conflicts         157
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         162
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               805
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4526
;  :mk-clause               638
;  :num-allocs              9184867
;  :num-checks              982
;  :propagations            366
;  :quant-instantiations    156
;  :rlimit-count            359876)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10886
;  :arith-add-rows          45
;  :arith-assert-diseq      143
;  :arith-assert-lower      469
;  :arith-assert-upper      435
;  :arith-conflicts         158
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         163
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               806
;  :datatype-accessor-ax    524
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4528
;  :mk-clause               638
;  :num-allocs              9184867
;  :num-checks              983
;  :propagations            366
;  :quant-instantiations    156
;  :rlimit-count            360413)
(declare-const $k@286@08 $Perm)
(assert ($Perm.isReadVar $k@286@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@286@08 $Perm.No) (< $Perm.No $k@286@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10886
;  :arith-add-rows          45
;  :arith-assert-diseq      144
;  :arith-assert-lower      471
;  :arith-assert-upper      436
;  :arith-conflicts         158
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         163
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               807
;  :datatype-accessor-ax    524
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4532
;  :mk-clause               640
;  :num-allocs              9184867
;  :num-checks              984
;  :propagations            367
;  :quant-instantiations    156
;  :rlimit-count            360612)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  $t@279@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10886
;  :arith-add-rows          45
;  :arith-assert-diseq      144
;  :arith-assert-lower      471
;  :arith-assert-upper      436
;  :arith-conflicts         158
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         163
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               807
;  :datatype-accessor-ax    524
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4532
;  :mk-clause               640
;  :num-allocs              9184867
;  :num-checks              985
;  :propagations            367
;  :quant-instantiations    156
;  :rlimit-count            360623)
(declare-const $t@287@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@262@08 $k@275@08))
    (=
      $t@287@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@286@08)
    (=
      $t@287@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@262@08 $k@275@08) $k@286@08)))
(assert (<= (+ (- $k@262@08 $k@275@08) $k@286@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@262@08 $k@275@08) $k@286@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10892
;  :arith-add-rows          46
;  :arith-assert-diseq      144
;  :arith-assert-lower      472
;  :arith-assert-upper      438
;  :arith-conflicts         159
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         164
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               808
;  :datatype-accessor-ax    524
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4539
;  :mk-clause               640
;  :num-allocs              9184867
;  :num-checks              986
;  :propagations            367
;  :quant-instantiations    157
;  :rlimit-count            361398)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  $t@279@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10892
;  :arith-add-rows          46
;  :arith-assert-diseq      144
;  :arith-assert-lower      472
;  :arith-assert-upper      438
;  :arith-conflicts         159
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         164
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               808
;  :datatype-accessor-ax    524
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4539
;  :mk-clause               640
;  :num-allocs              9184867
;  :num-checks              987
;  :propagations            367
;  :quant-instantiations    157
;  :rlimit-count            361409)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@262@08 $k@275@08) $k@286@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10892
;  :arith-add-rows          46
;  :arith-assert-diseq      144
;  :arith-assert-lower      472
;  :arith-assert-upper      439
;  :arith-conflicts         160
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         165
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               809
;  :datatype-accessor-ax    524
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   561
;  :datatype-splits         2288
;  :decisions               2656
;  :del-clause              516
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.54
;  :memory                  5.54
;  :mk-bool-var             4540
;  :mk-clause               640
;  :num-allocs              9184867
;  :num-checks              988
;  :propagations            367
;  :quant-instantiations    157
;  :rlimit-count            361487)
(assert (= $t@287@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@276@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) __globals@48@08))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11814
;  :arith-add-rows          46
;  :arith-assert-diseq      145
;  :arith-assert-lower      475
;  :arith-assert-upper      440
;  :arith-conflicts         160
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         165
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               815
;  :datatype-accessor-ax    537
;  :datatype-constructor-ax 2992
;  :datatype-occurs-check   643
;  :datatype-splits         2434
;  :decisions               2899
;  :del-clause              530
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.75
;  :memory                  5.75
;  :mk-bool-var             4704
;  :mk-clause               649
;  :num-allocs              9773793
;  :num-checks              990
;  :propagations            377
;  :quant-instantiations    159
;  :rlimit-count            366055)
(declare-const $t@288@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(declare-const $k@289@08 $Perm)
(assert ($Perm.isReadVar $k@289@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@289@08 $Perm.No) (< $Perm.No $k@289@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      147
;  :arith-assert-lower      480
;  :arith-assert-upper      442
;  :arith-conflicts         160
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         165
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               816
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4844
;  :mk-clause               655
;  :num-allocs              10071675
;  :num-checks              992
;  :propagations            391
;  :quant-instantiations    161
;  :rlimit-count            369231)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@256@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      147
;  :arith-assert-lower      480
;  :arith-assert-upper      442
;  :arith-conflicts         160
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         165
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               816
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4844
;  :mk-clause               655
;  :num-allocs              10071675
;  :num-checks              993
;  :propagations            391
;  :quant-instantiations    161
;  :rlimit-count            369242)
(assert (< $k@289@08 $k@256@08))
(assert (<= $Perm.No (- $k@256@08 $k@289@08)))
(assert (<= (- $k@256@08 $k@289@08) $Perm.Write))
(assert (implies (< $Perm.No (- $k@256@08 $k@289@08)) (not (= diz@47@08 $Ref.null))))
; [eval] diz.CASR_m != null
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      147
;  :arith-assert-lower      481
;  :arith-assert-upper      444
;  :arith-conflicts         160
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               817
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4847
;  :mk-clause               655
;  :num-allocs              10071675
;  :num-checks              994
;  :propagations            391
;  :quant-instantiations    161
;  :rlimit-count            369462)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      147
;  :arith-assert-lower      481
;  :arith-assert-upper      444
;  :arith-conflicts         160
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               818
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4847
;  :mk-clause               655
;  :num-allocs              10071675
;  :num-checks              995
;  :propagations            391
;  :quant-instantiations    161
;  :rlimit-count            369510)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      147
;  :arith-assert-lower      481
;  :arith-assert-upper      444
;  :arith-conflicts         160
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               819
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4847
;  :mk-clause               655
;  :num-allocs              10071675
;  :num-checks              996
;  :propagations            391
;  :quant-instantiations    161
;  :rlimit-count            369558)
; [eval] |diz.CASR_m.Main_process_state| == 3
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      147
;  :arith-assert-lower      481
;  :arith-assert-upper      444
;  :arith-conflicts         160
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               820
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4847
;  :mk-clause               655
;  :num-allocs              10071675
;  :num-checks              997
;  :propagations            391
;  :quant-instantiations    161
;  :rlimit-count            369606)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      147
;  :arith-assert-lower      481
;  :arith-assert-upper      444
;  :arith-conflicts         160
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               821
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4847
;  :mk-clause               655
;  :num-allocs              10071675
;  :num-checks              998
;  :propagations            391
;  :quant-instantiations    161
;  :rlimit-count            369654)
; [eval] |diz.CASR_m.Main_event_state| == 6
; [eval] |diz.CASR_m.Main_event_state|
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      147
;  :arith-assert-lower      481
;  :arith-assert-upper      444
;  :arith-conflicts         160
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               822
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4847
;  :mk-clause               655
;  :num-allocs              10071675
;  :num-checks              999
;  :propagations            391
;  :quant-instantiations    161
;  :rlimit-count            369702)
; [eval] (forall i__104: Int :: { diz.CASR_m.Main_process_state[i__104] } 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|)
(declare-const i__104@290@08 Int)
(push) ; 13
; [eval] 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state|
; [eval] 0 <= i__104
(push) ; 14
; [then-branch: 60 | 0 <= i__104@290@08 | live]
; [else-branch: 60 | !(0 <= i__104@290@08) | live]
(push) ; 15
; [then-branch: 60 | 0 <= i__104@290@08]
(assert (<= 0 i__104@290@08))
; [eval] i__104 < |diz.CASR_m.Main_process_state|
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 16
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      147
;  :arith-assert-lower      482
;  :arith-assert-upper      444
;  :arith-conflicts         160
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               823
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4848
;  :mk-clause               655
;  :num-allocs              10071675
;  :num-checks              1000
;  :propagations            391
;  :quant-instantiations    161
;  :rlimit-count            369803)
(pop) ; 15
(push) ; 15
; [else-branch: 60 | !(0 <= i__104@290@08)]
(assert (not (<= 0 i__104@290@08)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 61 | i__104@290@08 < |First:(Second:(Second:(Second:($t@276@08))))| && 0 <= i__104@290@08 | live]
; [else-branch: 61 | !(i__104@290@08 < |First:(Second:(Second:(Second:($t@276@08))))| && 0 <= i__104@290@08) | live]
(push) ; 15
; [then-branch: 61 | i__104@290@08 < |First:(Second:(Second:(Second:($t@276@08))))| && 0 <= i__104@290@08]
(assert (and
  (<
    i__104@290@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))
  (<= 0 i__104@290@08)))
; [eval] diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__104] == -1
; [eval] diz.CASR_m.Main_process_state[i__104]
(push) ; 16
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      147
;  :arith-assert-lower      483
;  :arith-assert-upper      445
;  :arith-conflicts         160
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               824
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4850
;  :mk-clause               655
;  :num-allocs              10071675
;  :num-checks              1001
;  :propagations            391
;  :quant-instantiations    161
;  :rlimit-count            369960)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__104@290@08 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      147
;  :arith-assert-lower      483
;  :arith-assert-upper      445
;  :arith-conflicts         160
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               824
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4850
;  :mk-clause               655
;  :num-allocs              10071675
;  :num-checks              1002
;  :propagations            391
;  :quant-instantiations    161
;  :rlimit-count            369969)
; [eval] -1
(push) ; 16
; [then-branch: 62 | First:(Second:(Second:(Second:($t@276@08))))[i__104@290@08] == -1 | live]
; [else-branch: 62 | First:(Second:(Second:(Second:($t@276@08))))[i__104@290@08] != -1 | live]
(push) ; 17
; [then-branch: 62 | First:(Second:(Second:(Second:($t@276@08))))[i__104@290@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
    i__104@290@08)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 62 | First:(Second:(Second:(Second:($t@276@08))))[i__104@290@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
      i__104@290@08)
    (- 0 1))))
; [eval] 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= diz.CASR_m.Main_process_state[i__104]
; [eval] diz.CASR_m.Main_process_state[i__104]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      148
;  :arith-assert-lower      486
;  :arith-assert-upper      446
;  :arith-conflicts         160
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               825
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4856
;  :mk-clause               659
;  :num-allocs              10071675
;  :num-checks              1003
;  :propagations            393
;  :quant-instantiations    162
;  :rlimit-count            370240)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__104@290@08 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      148
;  :arith-assert-lower      486
;  :arith-assert-upper      446
;  :arith-conflicts         160
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               825
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4856
;  :mk-clause               659
;  :num-allocs              10071675
;  :num-checks              1004
;  :propagations            393
;  :quant-instantiations    162
;  :rlimit-count            370249)
(push) ; 18
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@276@08))))[i__104@290@08] | live]
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@276@08))))[i__104@290@08]) | live]
(push) ; 19
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@276@08))))[i__104@290@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
    i__104@290@08)))
; [eval] diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__104]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      148
;  :arith-assert-lower      486
;  :arith-assert-upper      446
;  :arith-conflicts         160
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               826
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4856
;  :mk-clause               659
;  :num-allocs              10071675
;  :num-checks              1005
;  :propagations            393
;  :quant-instantiations    162
;  :rlimit-count            370402)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__104@290@08 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      148
;  :arith-assert-lower      486
;  :arith-assert-upper      446
;  :arith-conflicts         160
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               826
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4856
;  :mk-clause               659
;  :num-allocs              10071675
;  :num-checks              1006
;  :propagations            393
;  :quant-instantiations    162
;  :rlimit-count            370411)
; [eval] |diz.CASR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      148
;  :arith-assert-lower      486
;  :arith-assert-upper      446
;  :arith-conflicts         160
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               827
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              534
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4856
;  :mk-clause               659
;  :num-allocs              10071675
;  :num-checks              1007
;  :propagations            393
;  :quant-instantiations    162
;  :rlimit-count            370459)
(pop) ; 19
(push) ; 19
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@276@08))))[i__104@290@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
      i__104@290@08))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 61 | !(i__104@290@08 < |First:(Second:(Second:(Second:($t@276@08))))| && 0 <= i__104@290@08)]
(assert (not
  (and
    (<
      i__104@290@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))
    (<= 0 i__104@290@08))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 13
(assert (not (forall ((i__104@290@08 Int)) (!
  (implies
    (and
      (<
        i__104@290@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))
      (<= 0 i__104@290@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
          i__104@290@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
            i__104@290@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
            i__104@290@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
    i__104@290@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      150
;  :arith-assert-lower      487
;  :arith-assert-upper      447
;  :arith-conflicts         160
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               828
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              552
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4864
;  :mk-clause               673
;  :num-allocs              10071675
;  :num-checks              1008
;  :propagations            395
;  :quant-instantiations    163
;  :rlimit-count            370905)
(assert (forall ((i__104@290@08 Int)) (!
  (implies
    (and
      (<
        i__104@290@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))
      (<= 0 i__104@290@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
          i__104@290@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
            i__104@290@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
            i__104@290@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@276@08)))))
    i__104@290@08))
  :qid |prog.l<no position>|)))
(declare-const $k@291@08 $Perm)
(assert ($Perm.isReadVar $k@291@08 $Perm.Write))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      151
;  :arith-assert-lower      489
;  :arith-assert-upper      448
;  :arith-conflicts         160
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               829
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              552
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4869
;  :mk-clause               675
;  :num-allocs              10071675
;  :num-checks              1009
;  :propagations            396
;  :quant-instantiations    163
;  :rlimit-count            371464)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@291@08 $Perm.No) (< $Perm.No $k@291@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12359
;  :arith-add-rows          46
;  :arith-assert-diseq      151
;  :arith-assert-lower      489
;  :arith-assert-upper      448
;  :arith-conflicts         160
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               830
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              552
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.85
;  :mk-bool-var             4869
;  :mk-clause               675
;  :num-allocs              10071675
;  :num-checks              1010
;  :propagations            396
;  :quant-instantiations    163
;  :rlimit-count            371514)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@258@08 $k@271@08) $k@278@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          46
;  :arith-assert-diseq      151
;  :arith-assert-lower      489
;  :arith-assert-upper      449
;  :arith-conflicts         161
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               831
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4871
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1011
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            371592)
(assert (< $k@291@08 (+ (- $k@258@08 $k@271@08) $k@278@08)))
(assert (<= $Perm.No (- (+ (- $k@258@08 $k@271@08) $k@278@08) $k@291@08)))
(assert (<= (- (+ (- $k@258@08 $k@271@08) $k@278@08) $k@291@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@258@08 $k@271@08) $k@278@08) $k@291@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      450
;  :arith-conflicts         161
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         165
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               832
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4874
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1012
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            371827)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      451
;  :arith-conflicts         162
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         166
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               833
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4875
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1013
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            371905)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      451
;  :arith-conflicts         162
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         166
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               834
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4875
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1014
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            371953)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      452
;  :arith-conflicts         163
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         167
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               835
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4876
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1015
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372031)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      452
;  :arith-conflicts         163
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         167
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               836
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4876
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1016
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372079)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      453
;  :arith-conflicts         164
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         168
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               837
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4877
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1017
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372157)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      453
;  :arith-conflicts         164
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         168
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               838
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4877
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1018
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372205)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      454
;  :arith-conflicts         165
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         169
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               839
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4878
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1019
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372283)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      454
;  :arith-conflicts         165
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         169
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               840
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4878
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1020
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372331)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      455
;  :arith-conflicts         166
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         170
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               841
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4879
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1021
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372409)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      455
;  :arith-conflicts         166
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         170
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               842
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4879
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1022
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372457)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      456
;  :arith-conflicts         167
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         171
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               843
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4880
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1023
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372535)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      456
;  :arith-conflicts         167
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         171
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               844
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4880
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1024
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372583)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      457
;  :arith-conflicts         168
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         172
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               845
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4881
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1025
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372661)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      457
;  :arith-conflicts         168
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         172
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               846
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4881
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1026
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372709)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      458
;  :arith-conflicts         169
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         173
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               847
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4882
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1027
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372787)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      458
;  :arith-conflicts         169
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         173
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               848
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4882
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1028
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372835)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      459
;  :arith-conflicts         170
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         174
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               849
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4883
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1029
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372913)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      459
;  :arith-conflicts         170
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         174
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               850
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4883
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1030
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            372961)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      460
;  :arith-conflicts         171
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         175
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               851
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4884
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1031
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            373039)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      460
;  :arith-conflicts         171
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         175
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               852
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4884
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1032
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            373087)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      151
;  :arith-assert-lower      491
;  :arith-assert-upper      461
;  :arith-conflicts         172
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         176
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               853
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4885
;  :mk-clause               677
;  :num-allocs              10372284
;  :num-checks              1033
;  :propagations            397
;  :quant-instantiations    163
;  :rlimit-count            373165)
(declare-const $k@292@08 $Perm)
(assert ($Perm.isReadVar $k@292@08 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      152
;  :arith-assert-lower      493
;  :arith-assert-upper      462
;  :arith-conflicts         172
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         176
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               854
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4889
;  :mk-clause               679
;  :num-allocs              10372284
;  :num-checks              1034
;  :propagations            398
;  :quant-instantiations    163
;  :rlimit-count            373362)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@292@08 $Perm.No) (< $Perm.No $k@292@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12360
;  :arith-add-rows          47
;  :arith-assert-diseq      152
;  :arith-assert-lower      493
;  :arith-assert-upper      462
;  :arith-conflicts         172
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         176
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               855
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              554
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4889
;  :mk-clause               679
;  :num-allocs              10372284
;  :num-checks              1035
;  :propagations            398
;  :quant-instantiations    163
;  :rlimit-count            373412)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@259@08 $k@272@08) $k@280@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          47
;  :arith-assert-diseq      152
;  :arith-assert-lower      493
;  :arith-assert-upper      463
;  :arith-conflicts         173
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         176
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               856
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4891
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1036
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            373490)
(assert (< $k@292@08 (+ (- $k@259@08 $k@272@08) $k@280@08)))
(assert (<= $Perm.No (- (+ (- $k@259@08 $k@272@08) $k@280@08) $k@292@08)))
(assert (<= (- (+ (- $k@259@08 $k@272@08) $k@280@08) $k@292@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@259@08 $k@272@08) $k@280@08) $k@292@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      464
;  :arith-conflicts         173
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         176
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               857
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4894
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1037
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            373725)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      465
;  :arith-conflicts         174
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         177
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               858
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4895
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1038
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            373803)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      465
;  :arith-conflicts         174
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         177
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               859
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4895
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1039
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            373851)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      466
;  :arith-conflicts         175
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         178
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               860
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4896
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1040
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            373929)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      466
;  :arith-conflicts         175
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         178
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               861
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4896
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1041
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            373977)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      467
;  :arith-conflicts         176
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         179
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               862
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4897
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1042
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            374055)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      467
;  :arith-conflicts         176
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         179
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               863
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4897
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1043
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            374103)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      468
;  :arith-conflicts         177
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         180
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               864
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4898
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1044
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            374181)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      468
;  :arith-conflicts         177
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         180
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               865
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4898
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1045
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            374229)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      469
;  :arith-conflicts         178
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         181
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               866
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4899
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1046
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            374307)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      469
;  :arith-conflicts         178
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         181
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               867
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4899
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1047
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            374355)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      470
;  :arith-conflicts         179
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         182
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               868
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4900
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1048
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            374433)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      470
;  :arith-conflicts         179
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         182
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               869
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4900
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1049
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            374481)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      471
;  :arith-conflicts         180
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         183
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               870
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4901
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1050
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            374559)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      471
;  :arith-conflicts         180
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         183
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               871
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4901
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1051
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            374607)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      152
;  :arith-assert-lower      495
;  :arith-assert-upper      472
;  :arith-conflicts         181
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         184
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               872
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4902
;  :mk-clause               681
;  :num-allocs              10372284
;  :num-checks              1052
;  :propagations            399
;  :quant-instantiations    163
;  :rlimit-count            374685)
(declare-const $k@293@08 $Perm)
(assert ($Perm.isReadVar $k@293@08 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      153
;  :arith-assert-lower      497
;  :arith-assert-upper      473
;  :arith-conflicts         181
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         184
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               873
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4906
;  :mk-clause               683
;  :num-allocs              10372284
;  :num-checks              1053
;  :propagations            400
;  :quant-instantiations    163
;  :rlimit-count            374881)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@293@08 $Perm.No) (< $Perm.No $k@293@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12361
;  :arith-add-rows          48
;  :arith-assert-diseq      153
;  :arith-assert-lower      497
;  :arith-assert-upper      473
;  :arith-conflicts         181
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         184
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               874
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              556
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4906
;  :mk-clause               683
;  :num-allocs              10372284
;  :num-checks              1054
;  :propagations            400
;  :quant-instantiations    163
;  :rlimit-count            374931)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@260@08 $k@273@08) $k@282@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12362
;  :arith-add-rows          48
;  :arith-assert-diseq      153
;  :arith-assert-lower      497
;  :arith-assert-upper      474
;  :arith-conflicts         182
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         184
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               875
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              558
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4908
;  :mk-clause               685
;  :num-allocs              10372284
;  :num-checks              1055
;  :propagations            401
;  :quant-instantiations    163
;  :rlimit-count            375009)
(assert (< $k@293@08 (+ (- $k@260@08 $k@273@08) $k@282@08)))
(assert (<= $Perm.No (- (+ (- $k@260@08 $k@273@08) $k@282@08) $k@293@08)))
(assert (<= (- (+ (- $k@260@08 $k@273@08) $k@282@08) $k@293@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@260@08 $k@273@08) $k@282@08) $k@293@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12362
;  :arith-add-rows          49
;  :arith-assert-diseq      153
;  :arith-assert-lower      499
;  :arith-assert-upper      475
;  :arith-conflicts         182
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         184
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               876
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              558
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4911
;  :mk-clause               685
;  :num-allocs              10372284
;  :num-checks              1056
;  :propagations            401
;  :quant-instantiations    163
;  :rlimit-count            375251)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@260@08 $k@273@08) $k@282@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12362
;  :arith-add-rows          49
;  :arith-assert-diseq      153
;  :arith-assert-lower      499
;  :arith-assert-upper      476
;  :arith-conflicts         183
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         185
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               877
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              558
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4912
;  :mk-clause               685
;  :num-allocs              10372284
;  :num-checks              1057
;  :propagations            401
;  :quant-instantiations    163
;  :rlimit-count            375329)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12362
;  :arith-add-rows          49
;  :arith-assert-diseq      153
;  :arith-assert-lower      499
;  :arith-assert-upper      476
;  :arith-conflicts         183
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         185
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               878
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              558
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4912
;  :mk-clause               685
;  :num-allocs              10372284
;  :num-checks              1058
;  :propagations            401
;  :quant-instantiations    163
;  :rlimit-count            375377)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@260@08 $k@273@08) $k@282@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12362
;  :arith-add-rows          49
;  :arith-assert-diseq      153
;  :arith-assert-lower      499
;  :arith-assert-upper      477
;  :arith-conflicts         184
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         186
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               879
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              558
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4913
;  :mk-clause               685
;  :num-allocs              10372284
;  :num-checks              1059
;  :propagations            401
;  :quant-instantiations    163
;  :rlimit-count            375455)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12362
;  :arith-add-rows          49
;  :arith-assert-diseq      153
;  :arith-assert-lower      499
;  :arith-assert-upper      477
;  :arith-conflicts         184
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         186
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               880
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              558
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4913
;  :mk-clause               685
;  :num-allocs              10372284
;  :num-checks              1060
;  :propagations            401
;  :quant-instantiations    163
;  :rlimit-count            375503)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@260@08 $k@273@08) $k@282@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12362
;  :arith-add-rows          49
;  :arith-assert-diseq      153
;  :arith-assert-lower      499
;  :arith-assert-upper      478
;  :arith-conflicts         185
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         187
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               881
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              558
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4914
;  :mk-clause               685
;  :num-allocs              10372284
;  :num-checks              1061
;  :propagations            401
;  :quant-instantiations    163
;  :rlimit-count            375581)
(declare-const $k@294@08 $Perm)
(assert ($Perm.isReadVar $k@294@08 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12362
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      501
;  :arith-assert-upper      479
;  :arith-conflicts         185
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         187
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               882
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              558
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4918
;  :mk-clause               687
;  :num-allocs              10372284
;  :num-checks              1062
;  :propagations            402
;  :quant-instantiations    163
;  :rlimit-count            375777)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@294@08 $Perm.No) (< $Perm.No $k@294@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12362
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      501
;  :arith-assert-upper      479
;  :arith-conflicts         185
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         187
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               883
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              558
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4918
;  :mk-clause               687
;  :num-allocs              10372284
;  :num-checks              1063
;  :propagations            402
;  :quant-instantiations    163
;  :rlimit-count            375827)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@261@08 $k@274@08) $k@284@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12363
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      501
;  :arith-assert-upper      480
;  :arith-conflicts         186
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         187
;  :arith-pivots            104
;  :binary-propagations     22
;  :conflicts               884
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              560
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4920
;  :mk-clause               689
;  :num-allocs              10372284
;  :num-checks              1064
;  :propagations            403
;  :quant-instantiations    163
;  :rlimit-count            375915)
(assert (< $k@294@08 (+ (- $k@261@08 $k@274@08) $k@284@08)))
(assert (<= $Perm.No (- (+ (- $k@261@08 $k@274@08) $k@284@08) $k@294@08)))
(assert (<= (- (+ (- $k@261@08 $k@274@08) $k@284@08) $k@294@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@261@08 $k@274@08) $k@284@08) $k@294@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12363
;  :arith-add-rows          50
;  :arith-assert-diseq      154
;  :arith-assert-lower      503
;  :arith-assert-upper      481
;  :arith-conflicts         186
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         187
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               885
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              560
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4923
;  :mk-clause               689
;  :num-allocs              10372284
;  :num-checks              1065
;  :propagations            403
;  :quant-instantiations    163
;  :rlimit-count            376156)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@261@08 $k@274@08) $k@284@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12363
;  :arith-add-rows          50
;  :arith-assert-diseq      154
;  :arith-assert-lower      503
;  :arith-assert-upper      482
;  :arith-conflicts         187
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         188
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               886
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              560
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4924
;  :mk-clause               689
;  :num-allocs              10372284
;  :num-checks              1066
;  :propagations            403
;  :quant-instantiations    163
;  :rlimit-count            376245)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12363
;  :arith-add-rows          50
;  :arith-assert-diseq      154
;  :arith-assert-lower      503
;  :arith-assert-upper      482
;  :arith-conflicts         187
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         188
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               887
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              560
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4924
;  :mk-clause               689
;  :num-allocs              10372284
;  :num-checks              1067
;  :propagations            403
;  :quant-instantiations    163
;  :rlimit-count            376293)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@261@08 $k@274@08) $k@284@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12363
;  :arith-add-rows          50
;  :arith-assert-diseq      154
;  :arith-assert-lower      503
;  :arith-assert-upper      483
;  :arith-conflicts         188
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         189
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               888
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              560
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4925
;  :mk-clause               689
;  :num-allocs              10372284
;  :num-checks              1068
;  :propagations            403
;  :quant-instantiations    163
;  :rlimit-count            376382)
(declare-const $k@295@08 $Perm)
(assert ($Perm.isReadVar $k@295@08 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12363
;  :arith-add-rows          50
;  :arith-assert-diseq      155
;  :arith-assert-lower      505
;  :arith-assert-upper      484
;  :arith-conflicts         188
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         189
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               889
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              560
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4929
;  :mk-clause               691
;  :num-allocs              10372284
;  :num-checks              1069
;  :propagations            404
;  :quant-instantiations    163
;  :rlimit-count            376578)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12363
;  :arith-add-rows          50
;  :arith-assert-diseq      155
;  :arith-assert-lower      505
;  :arith-assert-upper      485
;  :arith-conflicts         189
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         190
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               890
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              560
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4930
;  :mk-clause               691
;  :num-allocs              10372284
;  :num-checks              1070
;  :propagations            404
;  :quant-instantiations    163
;  :rlimit-count            376656)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@295@08 $Perm.No) (< $Perm.No $k@295@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12363
;  :arith-add-rows          50
;  :arith-assert-diseq      155
;  :arith-assert-lower      505
;  :arith-assert-upper      485
;  :arith-conflicts         189
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         190
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               891
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              560
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4930
;  :mk-clause               691
;  :num-allocs              10372284
;  :num-checks              1071
;  :propagations            404
;  :quant-instantiations    163
;  :rlimit-count            376706)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  $t@279@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12363
;  :arith-add-rows          50
;  :arith-assert-diseq      155
;  :arith-assert-lower      505
;  :arith-assert-upper      485
;  :arith-conflicts         189
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         190
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               891
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              560
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4930
;  :mk-clause               691
;  :num-allocs              10372284
;  :num-checks              1072
;  :propagations            404
;  :quant-instantiations    163
;  :rlimit-count            376717)
(push) ; 13
(assert (not (not (= (+ (- $k@262@08 $k@275@08) $k@286@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12364
;  :arith-add-rows          50
;  :arith-assert-diseq      155
;  :arith-assert-lower      505
;  :arith-assert-upper      486
;  :arith-conflicts         190
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         190
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               892
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              562
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4932
;  :mk-clause               693
;  :num-allocs              10372284
;  :num-checks              1073
;  :propagations            405
;  :quant-instantiations    163
;  :rlimit-count            376795)
(assert (< $k@295@08 (+ (- $k@262@08 $k@275@08) $k@286@08)))
(assert (<= $Perm.No (- (+ (- $k@262@08 $k@275@08) $k@286@08) $k@295@08)))
(assert (<= (- (+ (- $k@262@08 $k@275@08) $k@286@08) $k@295@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@262@08 $k@275@08) $k@286@08) $k@295@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn.Rng_m == diz.CASR_m
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12364
;  :arith-add-rows          51
;  :arith-assert-diseq      155
;  :arith-assert-lower      507
;  :arith-assert-upper      487
;  :arith-conflicts         190
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         190
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               893
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              562
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4935
;  :mk-clause               693
;  :num-allocs              10372284
;  :num-checks              1074
;  :propagations            405
;  :quant-instantiations    163
;  :rlimit-count            377037)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@258@08 $k@271@08) $k@278@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12364
;  :arith-add-rows          51
;  :arith-assert-diseq      155
;  :arith-assert-lower      507
;  :arith-assert-upper      488
;  :arith-conflicts         191
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         191
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               894
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              562
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4936
;  :mk-clause               693
;  :num-allocs              10372284
;  :num-checks              1075
;  :propagations            405
;  :quant-instantiations    163
;  :rlimit-count            377115)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  $t@279@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12364
;  :arith-add-rows          51
;  :arith-assert-diseq      155
;  :arith-assert-lower      507
;  :arith-assert-upper      488
;  :arith-conflicts         191
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         191
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               894
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              562
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4936
;  :mk-clause               693
;  :num-allocs              10372284
;  :num-checks              1076
;  :propagations            405
;  :quant-instantiations    163
;  :rlimit-count            377126)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@262@08 $k@275@08) $k@286@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12364
;  :arith-add-rows          51
;  :arith-assert-diseq      155
;  :arith-assert-lower      507
;  :arith-assert-upper      489
;  :arith-conflicts         192
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         192
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               895
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              562
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4937
;  :mk-clause               693
;  :num-allocs              10372284
;  :num-checks              1077
;  :propagations            405
;  :quant-instantiations    163
;  :rlimit-count            377204)
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12364
;  :arith-add-rows          51
;  :arith-assert-diseq      155
;  :arith-assert-lower      507
;  :arith-assert-upper      489
;  :arith-conflicts         192
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         192
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               896
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              562
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4937
;  :mk-clause               693
;  :num-allocs              10372284
;  :num-checks              1078
;  :propagations            405
;  :quant-instantiations    163
;  :rlimit-count            377252)
; [eval] diz.CASR_m.Main_rn_casr == diz
(push) ; 13
(assert (not (< $Perm.No $k@256@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12364
;  :arith-add-rows          51
;  :arith-assert-diseq      155
;  :arith-assert-lower      507
;  :arith-assert-upper      489
;  :arith-conflicts         192
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         192
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               897
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              562
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4937
;  :mk-clause               693
;  :num-allocs              10372284
;  :num-checks              1079
;  :propagations            405
;  :quant-instantiations    163
;  :rlimit-count            377300)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@259@08 $k@272@08) $k@280@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12364
;  :arith-add-rows          51
;  :arith-assert-diseq      155
;  :arith-assert-lower      507
;  :arith-assert-upper      490
;  :arith-conflicts         193
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         193
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               898
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              562
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4938
;  :mk-clause               693
;  :num-allocs              10372284
;  :num-checks              1080
;  :propagations            405
;  :quant-instantiations    163
;  :rlimit-count            377378)
(set-option :timeout 0)
(push) ; 13
(assert (not (= $t@281@08 diz@47@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12364
;  :arith-add-rows          51
;  :arith-assert-diseq      155
;  :arith-assert-lower      507
;  :arith-assert-upper      490
;  :arith-conflicts         193
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         193
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               898
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3140
;  :datatype-occurs-check   720
;  :datatype-splits         2580
;  :decisions               3037
;  :del-clause              562
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             4938
;  :mk-clause               693
;  :num-allocs              10372284
;  :num-checks              1081
;  :propagations            405
;  :quant-instantiations    163
;  :rlimit-count            377389)
(assert (= $t@281@08 diz@47@08))
(pop) ; 12
(push) ; 12
; [else-branch: 51 | !(First:(Second:(Second:(Second:($t@255@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@255@08))))))[1] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
          1)
        (- 0 2))))))
(pop) ; 12
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12831
;  :arith-add-rows          52
;  :arith-assert-diseq      155
;  :arith-assert-lower      507
;  :arith-assert-upper      490
;  :arith-conflicts         193
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         193
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               899
;  :datatype-accessor-ax    553
;  :datatype-constructor-ax 3280
;  :datatype-occurs-check   736
;  :datatype-splits         2692
;  :decisions               3172
;  :del-clause              583
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5053
;  :mk-clause               694
;  :num-allocs              10372284
;  :num-checks              1082
;  :propagations            409
;  :quant-instantiations    163
;  :rlimit-count            380302
;  :time                    0.00)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13239
;  :arith-add-rows          52
;  :arith-assert-diseq      155
;  :arith-assert-lower      507
;  :arith-assert-upper      490
;  :arith-conflicts         193
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         193
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               900
;  :datatype-accessor-ax    558
;  :datatype-constructor-ax 3420
;  :datatype-occurs-check   752
;  :datatype-splits         2804
;  :decisions               3307
;  :del-clause              584
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5168
;  :mk-clause               695
;  :num-allocs              10372284
;  :num-checks              1083
;  :propagations            413
;  :quant-instantiations    163
;  :rlimit-count            382977
;  :time                    0.00)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13647
;  :arith-add-rows          52
;  :arith-assert-diseq      155
;  :arith-assert-lower      507
;  :arith-assert-upper      490
;  :arith-conflicts         193
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         193
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               901
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 3560
;  :datatype-occurs-check   768
;  :datatype-splits         2916
;  :decisions               3442
;  :del-clause              585
;  :final-checks            130
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5283
;  :mk-clause               696
;  :num-allocs              10372284
;  :num-checks              1084
;  :propagations            417
;  :quant-instantiations    163
;  :rlimit-count            385652
;  :time                    0.00)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14055
;  :arith-add-rows          52
;  :arith-assert-diseq      155
;  :arith-assert-lower      507
;  :arith-assert-upper      490
;  :arith-conflicts         193
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         193
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               902
;  :datatype-accessor-ax    568
;  :datatype-constructor-ax 3700
;  :datatype-occurs-check   784
;  :datatype-splits         3028
;  :decisions               3577
;  :del-clause              586
;  :final-checks            133
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5398
;  :mk-clause               697
;  :num-allocs              10372284
;  :num-checks              1085
;  :propagations            421
;  :quant-instantiations    163
;  :rlimit-count            388327
;  :time                    0.00)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14463
;  :arith-add-rows          52
;  :arith-assert-diseq      155
;  :arith-assert-lower      507
;  :arith-assert-upper      490
;  :arith-conflicts         193
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         193
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               903
;  :datatype-accessor-ax    573
;  :datatype-constructor-ax 3840
;  :datatype-occurs-check   800
;  :datatype-splits         3140
;  :decisions               3712
;  :del-clause              587
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5513
;  :mk-clause               698
;  :num-allocs              10372284
;  :num-checks              1086
;  :propagations            425
;  :quant-instantiations    163
;  :rlimit-count            391002
;  :time                    0.00)
(declare-const $t@296@08 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@256@08)
    (= $t@296@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08))))
  (implies
    (< $Perm.No (- $k@228@08 $k@263@08))
    (= $t@296@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))))
(assert (<= $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08))))
(assert (<= (+ $k@256@08 (- $k@228@08 $k@263@08)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))
  (not (= diz@47@08 $Ref.null))))
; [eval] !(diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[1] != -2)
; [eval] diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_process_state[0] != -1
; [eval] diz.CASR_m.Main_process_state[0]
(push) ; 12
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14468
;  :arith-add-rows          53
;  :arith-assert-diseq      155
;  :arith-assert-lower      508
;  :arith-assert-upper      492
;  :arith-conflicts         194
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         194
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               904
;  :datatype-accessor-ax    573
;  :datatype-constructor-ax 3840
;  :datatype-occurs-check   800
;  :datatype-splits         3140
;  :decisions               3712
;  :del-clause              587
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5518
;  :mk-clause               698
;  :num-allocs              10372284
;  :num-checks              1087
;  :propagations            425
;  :quant-instantiations    163
;  :rlimit-count            391343)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14468
;  :arith-add-rows          53
;  :arith-assert-diseq      155
;  :arith-assert-lower      508
;  :arith-assert-upper      492
;  :arith-conflicts         194
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         194
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               905
;  :datatype-accessor-ax    573
;  :datatype-constructor-ax 3840
;  :datatype-occurs-check   800
;  :datatype-splits         3140
;  :decisions               3712
;  :del-clause              587
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5519
;  :mk-clause               698
;  :num-allocs              10372284
;  :num-checks              1088
;  :propagations            425
;  :quant-instantiations    163
;  :rlimit-count            391423)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14468
;  :arith-add-rows          53
;  :arith-assert-diseq      155
;  :arith-assert-lower      508
;  :arith-assert-upper      492
;  :arith-conflicts         194
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         194
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               905
;  :datatype-accessor-ax    573
;  :datatype-constructor-ax 3840
;  :datatype-occurs-check   800
;  :datatype-splits         3140
;  :decisions               3712
;  :del-clause              587
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5519
;  :mk-clause               698
;  :num-allocs              10372284
;  :num-checks              1089
;  :propagations            425
;  :quant-instantiations    163
;  :rlimit-count            391438)
; [eval] -1
(push) ; 12
; [then-branch: 64 | First:(Second:(Second:(Second:($t@255@08))))[0] != -1 | live]
; [else-branch: 64 | First:(Second:(Second:(Second:($t@255@08))))[0] == -1 | live]
(push) ; 13
; [then-branch: 64 | First:(Second:(Second:(Second:($t@255@08))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
      0)
    (- 0 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 64 | First:(Second:(Second:(Second:($t@255@08))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    0)
  (- 0 1)))
; [eval] diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_event_state[1]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14469
;  :arith-add-rows          53
;  :arith-assert-diseq      155
;  :arith-assert-lower      508
;  :arith-assert-upper      493
;  :arith-conflicts         195
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         195
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               906
;  :datatype-accessor-ax    573
;  :datatype-constructor-ax 3840
;  :datatype-occurs-check   800
;  :datatype-splits         3140
;  :decisions               3712
;  :del-clause              587
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5521
;  :mk-clause               698
;  :num-allocs              10372284
;  :num-checks              1090
;  :propagations            425
;  :quant-instantiations    163
;  :rlimit-count            391661)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14469
;  :arith-add-rows          53
;  :arith-assert-diseq      155
;  :arith-assert-lower      508
;  :arith-assert-upper      493
;  :arith-conflicts         195
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         195
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               907
;  :datatype-accessor-ax    573
;  :datatype-constructor-ax 3840
;  :datatype-occurs-check   800
;  :datatype-splits         3140
;  :decisions               3712
;  :del-clause              587
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5522
;  :mk-clause               698
;  :num-allocs              10372284
;  :num-checks              1091
;  :propagations            425
;  :quant-instantiations    163
;  :rlimit-count            391741)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14469
;  :arith-add-rows          53
;  :arith-assert-diseq      155
;  :arith-assert-lower      508
;  :arith-assert-upper      493
;  :arith-conflicts         195
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         195
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               907
;  :datatype-accessor-ax    573
;  :datatype-constructor-ax 3840
;  :datatype-occurs-check   800
;  :datatype-splits         3140
;  :decisions               3712
;  :del-clause              587
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5522
;  :mk-clause               698
;  :num-allocs              10372284
;  :num-checks              1092
;  :propagations            425
;  :quant-instantiations    163
;  :rlimit-count            391756)
; [eval] -2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
        1)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14845
;  :arith-add-rows          53
;  :arith-assert-diseq      155
;  :arith-assert-lower      508
;  :arith-assert-upper      493
;  :arith-conflicts         195
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         195
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               907
;  :datatype-accessor-ax    577
;  :datatype-constructor-ax 3951
;  :datatype-occurs-check   815
;  :datatype-splits         3249
;  :decisions               3819
;  :del-clause              587
;  :final-checks            139
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5632
;  :mk-clause               698
;  :num-allocs              10372284
;  :num-checks              1093
;  :propagations            429
;  :quant-instantiations    163
;  :rlimit-count            394235
;  :time                    0.00)
(push) ; 12
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
          1)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15371
;  :arith-add-rows          53
;  :arith-assert-diseq      156
;  :arith-assert-lower      511
;  :arith-assert-upper      494
;  :arith-conflicts         195
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         195
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               909
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              594
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5761
;  :mk-clause               705
;  :num-allocs              10372284
;  :num-checks              1094
;  :propagations            435
;  :quant-instantiations    164
;  :rlimit-count            397493
;  :time                    0.00)
; [then-branch: 65 | !(First:(Second:(Second:(Second:($t@255@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@255@08))))))[1] != -2) | live]
; [else-branch: 65 | First:(Second:(Second:(Second:($t@255@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@255@08))))))[1] != -2 | live]
(push) ; 12
; [then-branch: 65 | !(First:(Second:(Second:(Second:($t@255@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@255@08))))))[1] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
          1)
        (- 0 2))))))
; Loop head block: Re-establish invariant
(declare-const $k@297@08 $Perm)
(assert ($Perm.isReadVar $k@297@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@297@08 $Perm.No) (< $Perm.No $k@297@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15373
;  :arith-add-rows          53
;  :arith-assert-diseq      157
;  :arith-assert-lower      513
;  :arith-assert-upper      495
;  :arith-conflicts         195
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         195
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               910
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              594
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5767
;  :mk-clause               707
;  :num-allocs              10372284
;  :num-checks              1095
;  :propagations            436
;  :quant-instantiations    164
;  :rlimit-count            397889)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ $k@256@08 (- $k@228@08 $k@263@08)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          53
;  :arith-assert-diseq      157
;  :arith-assert-lower      513
;  :arith-assert-upper      496
;  :arith-conflicts         196
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         195
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               911
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5769
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1096
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            397969)
(assert (< $k@297@08 (+ $k@256@08 (- $k@228@08 $k@263@08))))
(assert (<= $Perm.No (- (+ $k@256@08 (- $k@228@08 $k@263@08)) $k@297@08)))
(assert (<= (- (+ $k@256@08 (- $k@228@08 $k@263@08)) $k@297@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@256@08 (- $k@228@08 $k@263@08)) $k@297@08))
  (not (= diz@47@08 $Ref.null))))
; [eval] diz.CASR_m != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      515
;  :arith-assert-upper      498
;  :arith-conflicts         197
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         196
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               912
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5773
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1097
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            398238)
(set-option :timeout 0)
(push) ; 13
(assert (not (not (= $t@296@08 $Ref.null))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      515
;  :arith-assert-upper      498
;  :arith-conflicts         197
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         196
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               912
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5773
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1098
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            398256)
(assert (not (= $t@296@08 $Ref.null)))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      515
;  :arith-assert-upper      499
;  :arith-conflicts         198
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         197
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               913
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5774
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1099
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            398357)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      515
;  :arith-assert-upper      499
;  :arith-conflicts         198
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         197
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               914
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5775
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1100
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            398437)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      515
;  :arith-assert-upper      500
;  :arith-conflicts         199
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         198
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               915
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5776
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1101
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            398518)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      515
;  :arith-assert-upper      500
;  :arith-conflicts         199
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         198
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               916
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5777
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1102
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            398598)
; [eval] |diz.CASR_m.Main_process_state| == 3
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      515
;  :arith-assert-upper      501
;  :arith-conflicts         200
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         199
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               917
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5778
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1103
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            398679)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      515
;  :arith-assert-upper      501
;  :arith-conflicts         200
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         199
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               918
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5779
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1104
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            398759)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      515
;  :arith-assert-upper      502
;  :arith-conflicts         201
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         200
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               919
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5780
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1105
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            398840)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      515
;  :arith-assert-upper      502
;  :arith-conflicts         201
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         200
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               920
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5781
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1106
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            398920)
; [eval] |diz.CASR_m.Main_event_state| == 6
; [eval] |diz.CASR_m.Main_event_state|
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      515
;  :arith-assert-upper      503
;  :arith-conflicts         202
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         201
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               921
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5782
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1107
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            399001)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      515
;  :arith-assert-upper      503
;  :arith-conflicts         202
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         201
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               922
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5783
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1108
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            399081)
; [eval] (forall i__102: Int :: { diz.CASR_m.Main_process_state[i__102] } 0 <= i__102 && i__102 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__102] == -1 || 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|)
(declare-const i__102@298@08 Int)
(push) ; 13
; [eval] 0 <= i__102 && i__102 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__102] == -1 || 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= i__102 && i__102 < |diz.CASR_m.Main_process_state|
; [eval] 0 <= i__102
(push) ; 14
; [then-branch: 66 | 0 <= i__102@298@08 | live]
; [else-branch: 66 | !(0 <= i__102@298@08) | live]
(push) ; 15
; [then-branch: 66 | 0 <= i__102@298@08]
(assert (<= 0 i__102@298@08))
; [eval] i__102 < |diz.CASR_m.Main_process_state|
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 16
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      516
;  :arith-assert-upper      504
;  :arith-conflicts         203
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         202
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               923
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5785
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1109
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            399215)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      516
;  :arith-assert-upper      504
;  :arith-conflicts         203
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         202
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               924
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5786
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1110
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            399295)
(pop) ; 15
(push) ; 15
; [else-branch: 66 | !(0 <= i__102@298@08)]
(assert (not (<= 0 i__102@298@08)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 67 | i__102@298@08 < |First:(Second:(Second:(Second:($t@255@08))))| && 0 <= i__102@298@08 | live]
; [else-branch: 67 | !(i__102@298@08 < |First:(Second:(Second:(Second:($t@255@08))))| && 0 <= i__102@298@08) | live]
(push) ; 15
; [then-branch: 67 | i__102@298@08 < |First:(Second:(Second:(Second:($t@255@08))))| && 0 <= i__102@298@08]
(assert (and
  (<
    i__102@298@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
  (<= 0 i__102@298@08)))
; [eval] diz.CASR_m.Main_process_state[i__102] == -1 || 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__102] == -1
; [eval] diz.CASR_m.Main_process_state[i__102]
(push) ; 16
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      517
;  :arith-assert-upper      506
;  :arith-conflicts         204
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         203
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               925
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5789
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1111
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            399485)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      517
;  :arith-assert-upper      506
;  :arith-conflicts         204
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         203
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               926
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5790
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1112
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            399565)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__102@298@08 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      157
;  :arith-assert-lower      517
;  :arith-assert-upper      506
;  :arith-conflicts         204
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         203
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               926
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5790
;  :mk-clause               709
;  :num-allocs              10372284
;  :num-checks              1113
;  :propagations            437
;  :quant-instantiations    164
;  :rlimit-count            399574)
; [eval] -1
(push) ; 16
; [then-branch: 68 | First:(Second:(Second:(Second:($t@255@08))))[i__102@298@08] == -1 | live]
; [else-branch: 68 | First:(Second:(Second:(Second:($t@255@08))))[i__102@298@08] != -1 | live]
(push) ; 17
; [then-branch: 68 | First:(Second:(Second:(Second:($t@255@08))))[i__102@298@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    i__102@298@08)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 68 | First:(Second:(Second:(Second:($t@255@08))))[i__102@298@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
      i__102@298@08)
    (- 0 1))))
; [eval] 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= diz.CASR_m.Main_process_state[i__102]
; [eval] diz.CASR_m.Main_process_state[i__102]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      158
;  :arith-assert-lower      520
;  :arith-assert-upper      508
;  :arith-conflicts         205
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         204
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               927
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5797
;  :mk-clause               713
;  :num-allocs              10372284
;  :num-checks              1114
;  :propagations            439
;  :quant-instantiations    165
;  :rlimit-count            399878)
(push) ; 18
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      158
;  :arith-assert-lower      520
;  :arith-assert-upper      508
;  :arith-conflicts         205
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         204
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               928
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5798
;  :mk-clause               713
;  :num-allocs              10372284
;  :num-checks              1115
;  :propagations            439
;  :quant-instantiations    165
;  :rlimit-count            399958)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__102@298@08 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      158
;  :arith-assert-lower      520
;  :arith-assert-upper      508
;  :arith-conflicts         205
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         204
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               928
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5798
;  :mk-clause               713
;  :num-allocs              10372284
;  :num-checks              1116
;  :propagations            439
;  :quant-instantiations    165
;  :rlimit-count            399967)
(push) ; 18
; [then-branch: 69 | 0 <= First:(Second:(Second:(Second:($t@255@08))))[i__102@298@08] | live]
; [else-branch: 69 | !(0 <= First:(Second:(Second:(Second:($t@255@08))))[i__102@298@08]) | live]
(push) ; 19
; [then-branch: 69 | 0 <= First:(Second:(Second:(Second:($t@255@08))))[i__102@298@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    i__102@298@08)))
; [eval] diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__102]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      158
;  :arith-assert-lower      520
;  :arith-assert-upper      509
;  :arith-conflicts         206
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         205
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               929
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5799
;  :mk-clause               713
;  :num-allocs              10372284
;  :num-checks              1117
;  :propagations            439
;  :quant-instantiations    165
;  :rlimit-count            400153)
(push) ; 20
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      158
;  :arith-assert-lower      520
;  :arith-assert-upper      509
;  :arith-conflicts         206
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         205
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               930
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5800
;  :mk-clause               713
;  :num-allocs              10372284
;  :num-checks              1118
;  :propagations            439
;  :quant-instantiations    165
;  :rlimit-count            400233)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__102@298@08 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      158
;  :arith-assert-lower      520
;  :arith-assert-upper      509
;  :arith-conflicts         206
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         205
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               930
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5800
;  :mk-clause               713
;  :num-allocs              10372284
;  :num-checks              1119
;  :propagations            439
;  :quant-instantiations    165
;  :rlimit-count            400242)
; [eval] |diz.CASR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      158
;  :arith-assert-lower      520
;  :arith-assert-upper      510
;  :arith-conflicts         207
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         206
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               931
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5801
;  :mk-clause               713
;  :num-allocs              10372284
;  :num-checks              1120
;  :propagations            439
;  :quant-instantiations    165
;  :rlimit-count            400323)
(push) ; 20
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      158
;  :arith-assert-lower      520
;  :arith-assert-upper      510
;  :arith-conflicts         207
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         206
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               932
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              596
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5802
;  :mk-clause               713
;  :num-allocs              10372284
;  :num-checks              1121
;  :propagations            439
;  :quant-instantiations    165
;  :rlimit-count            400403)
(pop) ; 19
(push) ; 19
; [else-branch: 69 | !(0 <= First:(Second:(Second:(Second:($t@255@08))))[i__102@298@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
      i__102@298@08))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 67 | !(i__102@298@08 < |First:(Second:(Second:(Second:($t@255@08))))| && 0 <= i__102@298@08)]
(assert (not
  (and
    (<
      i__102@298@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
    (<= 0 i__102@298@08))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 13
(assert (not (forall ((i__102@298@08 Int)) (!
  (implies
    (and
      (<
        i__102@298@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
      (<= 0 i__102@298@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
          i__102@298@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
            i__102@298@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
            i__102@298@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    i__102@298@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      159
;  :arith-assert-lower      521
;  :arith-assert-upper      511
;  :arith-conflicts         207
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         206
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               933
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              612
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5810
;  :mk-clause               725
;  :num-allocs              10372284
;  :num-checks              1122
;  :propagations            441
;  :quant-instantiations    166
;  :rlimit-count            400849)
(assert (forall ((i__102@298@08 Int)) (!
  (implies
    (and
      (<
        i__102@298@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
      (<= 0 i__102@298@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
          i__102@298@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
            i__102@298@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
            i__102@298@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
    i__102@298@08))
  :qid |prog.l<no position>|)))
(declare-const $k@299@08 $Perm)
(assert ($Perm.isReadVar $k@299@08 $Perm.Write))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      160
;  :arith-assert-lower      523
;  :arith-assert-upper      513
;  :arith-conflicts         208
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         207
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               934
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              612
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5816
;  :mk-clause               727
;  :num-allocs              10372284
;  :num-checks              1123
;  :propagations            442
;  :quant-instantiations    166
;  :rlimit-count            401442)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@299@08 $Perm.No) (< $Perm.No $k@299@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      160
;  :arith-assert-lower      523
;  :arith-assert-upper      513
;  :arith-conflicts         208
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         207
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               935
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              612
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5816
;  :mk-clause               727
;  :num-allocs              10372284
;  :num-checks              1124
;  :propagations            442
;  :quant-instantiations    166
;  :rlimit-count            401492)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      160
;  :arith-assert-lower      523
;  :arith-assert-upper      513
;  :arith-conflicts         208
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         207
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               935
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              612
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5816
;  :mk-clause               727
;  :num-allocs              10372284
;  :num-checks              1125
;  :propagations            442
;  :quant-instantiations    166
;  :rlimit-count            401503)
(push) ; 13
(assert (not (not (= (- $k@230@08 $k@265@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          55
;  :arith-assert-diseq      160
;  :arith-assert-lower      523
;  :arith-assert-upper      513
;  :arith-conflicts         208
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         207
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               936
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              612
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5817
;  :mk-clause               727
;  :num-allocs              10372284
;  :num-checks              1126
;  :propagations            442
;  :quant-instantiations    166
;  :rlimit-count            401571)
(assert (< $k@299@08 (- $k@230@08 $k@265@08)))
(assert (<= $Perm.No (- (- $k@230@08 $k@265@08) $k@299@08)))
(assert (<= (- (- $k@230@08 $k@265@08) $k@299@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@230@08 $k@265@08) $k@299@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          57
;  :arith-assert-diseq      160
;  :arith-assert-lower      525
;  :arith-assert-upper      515
;  :arith-conflicts         209
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         208
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               937
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              612
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5821
;  :mk-clause               727
;  :num-allocs              10372284
;  :num-checks              1127
;  :propagations            442
;  :quant-instantiations    166
;  :rlimit-count            401858)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          57
;  :arith-assert-diseq      160
;  :arith-assert-lower      525
;  :arith-assert-upper      515
;  :arith-conflicts         209
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         208
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               937
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              612
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5821
;  :mk-clause               727
;  :num-allocs              10372284
;  :num-checks              1128
;  :propagations            442
;  :quant-instantiations    166
;  :rlimit-count            401869)
(push) ; 13
(assert (not (< $Perm.No (- $k@230@08 $k@265@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          57
;  :arith-assert-diseq      160
;  :arith-assert-lower      525
;  :arith-assert-upper      515
;  :arith-conflicts         209
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         208
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               937
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              612
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5821
;  :mk-clause               727
;  :num-allocs              10372284
;  :num-checks              1129
;  :propagations            442
;  :quant-instantiations    166
;  :rlimit-count            401888)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          57
;  :arith-assert-diseq      160
;  :arith-assert-lower      525
;  :arith-assert-upper      516
;  :arith-conflicts         210
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         209
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               938
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              612
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5822
;  :mk-clause               727
;  :num-allocs              10372284
;  :num-checks              1130
;  :propagations            442
;  :quant-instantiations    166
;  :rlimit-count            401969)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          57
;  :arith-assert-diseq      160
;  :arith-assert-lower      525
;  :arith-assert-upper      516
;  :arith-conflicts         210
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         209
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               938
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              612
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5822
;  :mk-clause               727
;  :num-allocs              10372284
;  :num-checks              1131
;  :propagations            442
;  :quant-instantiations    166
;  :rlimit-count            401980)
(push) ; 13
(assert (not (< $Perm.No (- $k@230@08 $k@265@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15374
;  :arith-add-rows          57
;  :arith-assert-diseq      160
;  :arith-assert-lower      525
;  :arith-assert-upper      516
;  :arith-conflicts         210
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         209
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               938
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 4115
;  :datatype-occurs-check   836
;  :datatype-splits         3362
;  :decisions               3978
;  :del-clause              612
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5822
;  :mk-clause               727
;  :num-allocs              10372284
;  :num-checks              1132
;  :propagations            442
;  :quant-instantiations    166
;  :rlimit-count            401999)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15801
;  :arith-add-rows          57
;  :arith-assert-diseq      160
;  :arith-assert-lower      525
;  :arith-assert-upper      516
;  :arith-conflicts         210
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         209
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               939
;  :datatype-accessor-ax    588
;  :datatype-constructor-ax 4253
;  :datatype-occurs-check   852
;  :datatype-splits         3473
;  :decisions               4111
;  :del-clause              613
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             5936
;  :mk-clause               728
;  :num-allocs              10372284
;  :num-checks              1133
;  :propagations            446
;  :quant-instantiations    166
;  :rlimit-count            404779
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16549
;  :arith-add-rows          57
;  :arith-assert-diseq      160
;  :arith-assert-lower      525
;  :arith-assert-upper      516
;  :arith-conflicts         210
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         209
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               940
;  :datatype-accessor-ax    596
;  :datatype-constructor-ax 4475
;  :datatype-occurs-check   882
;  :datatype-splits         3691
;  :decisions               4325
;  :del-clause              617
;  :final-checks            152
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6152
;  :mk-clause               728
;  :num-allocs              10372284
;  :num-checks              1136
;  :propagations            454
;  :quant-instantiations    166
;  :rlimit-count            409429)
(declare-const $t@300@08 $Ref)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16976
;  :arith-add-rows          57
;  :arith-assert-diseq      160
;  :arith-assert-lower      525
;  :arith-assert-upper      516
;  :arith-conflicts         210
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         209
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               941
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6266
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1137
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            412209
;  :time                    0.00)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16976
;  :arith-add-rows          57
;  :arith-assert-diseq      160
;  :arith-assert-lower      525
;  :arith-assert-upper      516
;  :arith-conflicts         210
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         209
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               942
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6267
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1138
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            412289)
(declare-const $t@301@08 $Ref)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16976
;  :arith-add-rows          57
;  :arith-assert-diseq      160
;  :arith-assert-lower      525
;  :arith-assert-upper      516
;  :arith-conflicts         210
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         209
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               943
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6268
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1139
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            412369)
(declare-const $t@302@08 $Ref)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16976
;  :arith-add-rows          57
;  :arith-assert-diseq      160
;  :arith-assert-lower      525
;  :arith-assert-upper      516
;  :arith-conflicts         210
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         209
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               944
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6269
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1140
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            412449)
(declare-const $t@303@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@230@08 $k@265@08) $k@299@08))
    (=
      $t@300@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
  (implies
    (< $Perm.No $k@258@08)
    (=
      $t@300@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@261@08)
    (=
      $t@301@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@233@08 $k@268@08))
    (=
      $t@301@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@260@08)
    (=
      $t@302@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@232@08 $k@267@08))
    (=
      $t@302@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@259@08)
    (=
      $t@303@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@231@08 $k@266@08))
    (=
      $t@303@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16989
;  :arith-add-rows          57
;  :arith-assert-diseq      160
;  :arith-assert-lower      525
;  :arith-assert-upper      516
;  :arith-conflicts         210
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         209
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               945
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6276
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1141
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            413790)
(declare-const $t@304@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@234@08 $k@269@08))
    (=
      $t@304@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@262@08)
    (=
      $t@304@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@259@08 (- $k@231@08 $k@266@08))))
(assert (<= (+ $k@259@08 (- $k@231@08 $k@266@08)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@259@08 (- $k@231@08 $k@266@08)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (<= $Perm.No (+ $k@260@08 (- $k@232@08 $k@267@08))))
(assert (<= (+ $k@260@08 (- $k@232@08 $k@267@08)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@260@08 (- $k@232@08 $k@267@08)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (<= $Perm.No (+ $k@261@08 (- $k@233@08 $k@268@08))))
(assert (<= (+ $k@261@08 (- $k@233@08 $k@268@08)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@261@08 (- $k@233@08 $k@268@08)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@230@08 $k@265@08) $k@299@08) $k@258@08)))
(assert (<= (+ (- (- $k@230@08 $k@265@08) $k@299@08) $k@258@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@230@08 $k@265@08) $k@299@08) $k@258@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (<= $Perm.No (+ (- $k@234@08 $k@269@08) $k@262@08)))
(assert (<= (+ (- $k@234@08 $k@269@08) $k@262@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@234@08 $k@269@08) $k@262@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
      $Ref.null))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      521
;  :arith-conflicts         210
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         209
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               946
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6288
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1142
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            414667)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      522
;  :arith-conflicts         211
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         210
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               947
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6289
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1143
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            414748)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      522
;  :arith-conflicts         211
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         210
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               947
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6289
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1144
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            414759)
(push) ; 13
(assert (not (< $Perm.No (- $k@230@08 $k@265@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      522
;  :arith-conflicts         211
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         210
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               947
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6289
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1145
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            414778)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      522
;  :arith-conflicts         211
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         210
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               948
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6290
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1146
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            414943)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      523
;  :arith-conflicts         212
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         211
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               949
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6291
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1147
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415024)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      523
;  :arith-conflicts         212
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         211
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               949
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6291
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1148
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415035)
(push) ; 13
(assert (not (< $Perm.No (- $k@230@08 $k@265@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      523
;  :arith-conflicts         212
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         211
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               949
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6291
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1149
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415054)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      523
;  :arith-conflicts         212
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         211
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               950
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6292
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1150
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415219)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      524
;  :arith-conflicts         213
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         212
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               951
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6293
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1151
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415300)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      524
;  :arith-conflicts         213
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         212
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               951
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6293
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1152
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415311)
(push) ; 13
(assert (not (< $Perm.No (- $k@230@08 $k@265@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      524
;  :arith-conflicts         213
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         212
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               951
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6293
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1153
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415330)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      524
;  :arith-conflicts         213
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         212
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               952
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6294
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1154
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415495)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      525
;  :arith-conflicts         214
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         213
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               953
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6295
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1155
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415576)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      525
;  :arith-conflicts         214
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         213
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               953
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6295
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1156
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415587)
(push) ; 13
(assert (not (< $Perm.No (- $k@230@08 $k@265@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      525
;  :arith-conflicts         214
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         213
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               953
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6295
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1157
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415606)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      525
;  :arith-conflicts         214
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         213
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               954
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6296
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1158
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415771)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      526
;  :arith-conflicts         215
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         214
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               955
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6297
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1159
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415852)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      526
;  :arith-conflicts         215
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         214
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               955
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6297
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1160
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415863)
(push) ; 13
(assert (not (< $Perm.No (- $k@230@08 $k@265@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      526
;  :arith-conflicts         215
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         214
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               955
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6297
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1161
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            415882)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      526
;  :arith-conflicts         215
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         214
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               956
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6298
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1162
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416047)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      527
;  :arith-conflicts         216
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         215
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               957
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6299
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1163
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416128)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      527
;  :arith-conflicts         216
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         215
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               957
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6299
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1164
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416139)
(push) ; 13
(assert (not (< $Perm.No (- $k@230@08 $k@265@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      527
;  :arith-conflicts         216
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         215
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               957
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6299
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1165
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416158)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      527
;  :arith-conflicts         216
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         215
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               958
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6300
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1166
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416323)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      528
;  :arith-conflicts         217
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         216
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               959
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6301
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1167
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416404)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      528
;  :arith-conflicts         217
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         216
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               959
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6301
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1168
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416415)
(push) ; 13
(assert (not (< $Perm.No (- $k@230@08 $k@265@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      528
;  :arith-conflicts         217
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         216
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               959
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6301
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1169
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416434)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      528
;  :arith-conflicts         217
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         216
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               960
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6302
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1170
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416599)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      529
;  :arith-conflicts         218
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         217
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               961
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6303
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1171
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416680)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      529
;  :arith-conflicts         218
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         217
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               961
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6303
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1172
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416691)
(push) ; 13
(assert (not (< $Perm.No (- $k@230@08 $k@265@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      529
;  :arith-conflicts         218
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         217
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               961
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6303
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1173
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416710)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      529
;  :arith-conflicts         218
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         217
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               962
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6304
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1174
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416875)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      530
;  :arith-conflicts         219
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         218
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               963
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6305
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1175
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416956)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      530
;  :arith-conflicts         219
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         218
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               963
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6305
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1176
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416967)
(push) ; 13
(assert (not (< $Perm.No (- $k@230@08 $k@265@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      530
;  :arith-conflicts         219
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         218
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               963
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6305
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1177
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            416986)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      160
;  :arith-assert-lower      530
;  :arith-assert-upper      530
;  :arith-conflicts         219
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         218
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               964
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6306
;  :mk-clause               729
;  :num-allocs              10372284
;  :num-checks              1178
;  :propagations            458
;  :quant-instantiations    166
;  :rlimit-count            417151)
(declare-const $k@305@08 $Perm)
(assert ($Perm.isReadVar $k@305@08 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      161
;  :arith-assert-lower      532
;  :arith-assert-upper      532
;  :arith-conflicts         220
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         219
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               965
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6311
;  :mk-clause               731
;  :num-allocs              10372284
;  :num-checks              1179
;  :propagations            459
;  :quant-instantiations    166
;  :rlimit-count            417381)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@305@08 $Perm.No) (< $Perm.No $k@305@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      161
;  :arith-assert-lower      532
;  :arith-assert-upper      532
;  :arith-conflicts         220
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         219
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               966
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6311
;  :mk-clause               731
;  :num-allocs              10372284
;  :num-checks              1180
;  :propagations            459
;  :quant-instantiations    166
;  :rlimit-count            417431)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16990
;  :arith-add-rows          60
;  :arith-assert-diseq      161
;  :arith-assert-lower      532
;  :arith-assert-upper      532
;  :arith-conflicts         220
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         219
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               967
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              618
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6312
;  :mk-clause               731
;  :num-allocs              10372284
;  :num-checks              1181
;  :propagations            459
;  :quant-instantiations    166
;  :rlimit-count            417511)
(push) ; 13
(assert (not (not (= (+ $k@259@08 (- $k@231@08 $k@266@08)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          61
;  :arith-assert-diseq      161
;  :arith-assert-lower      532
;  :arith-assert-upper      533
;  :arith-conflicts         221
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         219
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               968
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6314
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1182
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            417625)
(assert (< $k@305@08 (+ $k@259@08 (- $k@231@08 $k@266@08))))
(assert (<= $Perm.No (- (+ $k@259@08 (- $k@231@08 $k@266@08)) $k@305@08)))
(assert (<= (- (+ $k@259@08 (- $k@231@08 $k@266@08)) $k@305@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@259@08 (- $k@231@08 $k@266@08)) $k@305@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      535
;  :arith-conflicts         222
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         220
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               969
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6318
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1183
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            417893)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      535
;  :arith-conflicts         222
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         220
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               969
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6318
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1184
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            417904)
(push) ; 13
(assert (not (< $Perm.No (- $k@231@08 $k@266@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      535
;  :arith-conflicts         222
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         220
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               969
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6318
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1185
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            417923)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      536
;  :arith-conflicts         223
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         221
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               970
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6319
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1186
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418004)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      536
;  :arith-conflicts         223
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         221
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               970
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6319
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1187
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418015)
(push) ; 13
(assert (not (< $Perm.No (- $k@231@08 $k@266@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      536
;  :arith-conflicts         223
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         221
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               970
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6319
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1188
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418034)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      536
;  :arith-conflicts         223
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         221
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               970
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6319
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1189
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418045)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      537
;  :arith-conflicts         224
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         222
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               971
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6320
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1190
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418126)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      537
;  :arith-conflicts         224
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         222
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               971
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6320
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1191
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418137)
(push) ; 13
(assert (not (< $Perm.No (- $k@231@08 $k@266@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      537
;  :arith-conflicts         224
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         222
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               971
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6320
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1192
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418156)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      537
;  :arith-conflicts         224
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         222
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               971
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6320
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1193
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418167)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      538
;  :arith-conflicts         225
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         223
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               972
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6321
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1194
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418248)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      538
;  :arith-conflicts         225
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         223
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               972
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6321
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1195
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418259)
(push) ; 13
(assert (not (< $Perm.No (- $k@231@08 $k@266@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      538
;  :arith-conflicts         225
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         223
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               972
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6321
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1196
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418278)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      538
;  :arith-conflicts         225
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         223
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               972
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6321
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1197
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418289)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      539
;  :arith-conflicts         226
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         224
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               973
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6322
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1198
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418370)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      539
;  :arith-conflicts         226
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         224
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               973
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6322
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1199
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418381)
(push) ; 13
(assert (not (< $Perm.No (- $k@231@08 $k@266@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      539
;  :arith-conflicts         226
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         224
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               973
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6322
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1200
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418400)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      539
;  :arith-conflicts         226
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         224
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               973
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6322
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1201
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418411)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      540
;  :arith-conflicts         227
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         225
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               974
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6323
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1202
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418492)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      540
;  :arith-conflicts         227
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         225
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               974
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6323
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1203
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418503)
(push) ; 13
(assert (not (< $Perm.No (- $k@231@08 $k@266@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      540
;  :arith-conflicts         227
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         225
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               974
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6323
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1204
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418522)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      540
;  :arith-conflicts         227
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         225
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               974
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6323
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1205
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418533)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      541
;  :arith-conflicts         228
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         226
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               975
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6324
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1206
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418614)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      541
;  :arith-conflicts         228
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         226
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               975
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6324
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1207
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418625)
(push) ; 13
(assert (not (< $Perm.No (- $k@231@08 $k@266@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      541
;  :arith-conflicts         228
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         226
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               975
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6324
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1208
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418644)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      541
;  :arith-conflicts         228
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         226
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               975
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6324
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1209
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418655)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      542
;  :arith-conflicts         229
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         227
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               976
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6325
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1210
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418736)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      542
;  :arith-conflicts         229
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         227
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               976
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6325
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1211
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418747)
(push) ; 13
(assert (not (< $Perm.No (- $k@231@08 $k@266@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      542
;  :arith-conflicts         229
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         227
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               976
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6325
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1212
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418766)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      161
;  :arith-assert-lower      534
;  :arith-assert-upper      542
;  :arith-conflicts         229
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         227
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               976
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6325
;  :mk-clause               733
;  :num-allocs              10372284
;  :num-checks              1213
;  :propagations            460
;  :quant-instantiations    166
;  :rlimit-count            418777)
(declare-const $k@306@08 $Perm)
(assert ($Perm.isReadVar $k@306@08 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      162
;  :arith-assert-lower      536
;  :arith-assert-upper      544
;  :arith-conflicts         230
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         228
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               977
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6330
;  :mk-clause               735
;  :num-allocs              10372284
;  :num-checks              1214
;  :propagations            461
;  :quant-instantiations    166
;  :rlimit-count            419007)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@306@08 $Perm.No) (< $Perm.No $k@306@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      162
;  :arith-assert-lower      536
;  :arith-assert-upper      544
;  :arith-conflicts         230
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         228
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               978
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6330
;  :mk-clause               735
;  :num-allocs              10372284
;  :num-checks              1215
;  :propagations            461
;  :quant-instantiations    166
;  :rlimit-count            419057)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16991
;  :arith-add-rows          62
;  :arith-assert-diseq      162
;  :arith-assert-lower      536
;  :arith-assert-upper      544
;  :arith-conflicts         230
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         228
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               979
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              620
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6331
;  :mk-clause               735
;  :num-allocs              10372284
;  :num-checks              1216
;  :propagations            461
;  :quant-instantiations    166
;  :rlimit-count            419137)
(push) ; 13
(assert (not (not (= (+ $k@260@08 (- $k@232@08 $k@267@08)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          62
;  :arith-assert-diseq      162
;  :arith-assert-lower      536
;  :arith-assert-upper      545
;  :arith-conflicts         231
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         228
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               980
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6333
;  :mk-clause               737
;  :num-allocs              10372284
;  :num-checks              1217
;  :propagations            462
;  :quant-instantiations    166
;  :rlimit-count            419221)
(assert (< $k@306@08 (+ $k@260@08 (- $k@232@08 $k@267@08))))
(assert (<= $Perm.No (- (+ $k@260@08 (- $k@232@08 $k@267@08)) $k@306@08)))
(assert (<= (- (+ $k@260@08 (- $k@232@08 $k@267@08)) $k@306@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@260@08 (- $k@232@08 $k@267@08)) $k@306@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      162
;  :arith-assert-lower      538
;  :arith-assert-upper      547
;  :arith-conflicts         232
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         229
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               981
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6337
;  :mk-clause               737
;  :num-allocs              10372284
;  :num-checks              1218
;  :propagations            462
;  :quant-instantiations    166
;  :rlimit-count            419490)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      162
;  :arith-assert-lower      538
;  :arith-assert-upper      547
;  :arith-conflicts         232
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         229
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               981
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6337
;  :mk-clause               737
;  :num-allocs              10372284
;  :num-checks              1219
;  :propagations            462
;  :quant-instantiations    166
;  :rlimit-count            419501)
(push) ; 13
(assert (not (< $Perm.No (- $k@232@08 $k@267@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      162
;  :arith-assert-lower      538
;  :arith-assert-upper      547
;  :arith-conflicts         232
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         229
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               981
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6337
;  :mk-clause               737
;  :num-allocs              10372284
;  :num-checks              1220
;  :propagations            462
;  :quant-instantiations    166
;  :rlimit-count            419520)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      162
;  :arith-assert-lower      538
;  :arith-assert-upper      548
;  :arith-conflicts         233
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         230
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               982
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6338
;  :mk-clause               737
;  :num-allocs              10372284
;  :num-checks              1221
;  :propagations            462
;  :quant-instantiations    166
;  :rlimit-count            419601)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      162
;  :arith-assert-lower      538
;  :arith-assert-upper      548
;  :arith-conflicts         233
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         230
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               982
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6338
;  :mk-clause               737
;  :num-allocs              10372284
;  :num-checks              1222
;  :propagations            462
;  :quant-instantiations    166
;  :rlimit-count            419612)
(push) ; 13
(assert (not (< $Perm.No (- $k@232@08 $k@267@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      162
;  :arith-assert-lower      538
;  :arith-assert-upper      548
;  :arith-conflicts         233
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         230
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               982
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6338
;  :mk-clause               737
;  :num-allocs              10372284
;  :num-checks              1223
;  :propagations            462
;  :quant-instantiations    166
;  :rlimit-count            419631)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      162
;  :arith-assert-lower      538
;  :arith-assert-upper      548
;  :arith-conflicts         233
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         230
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               983
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6339
;  :mk-clause               737
;  :num-allocs              10372284
;  :num-checks              1224
;  :propagations            462
;  :quant-instantiations    166
;  :rlimit-count            420001)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      162
;  :arith-assert-lower      538
;  :arith-assert-upper      549
;  :arith-conflicts         234
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         231
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               984
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6340
;  :mk-clause               737
;  :num-allocs              10372284
;  :num-checks              1225
;  :propagations            462
;  :quant-instantiations    166
;  :rlimit-count            420082)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      162
;  :arith-assert-lower      538
;  :arith-assert-upper      549
;  :arith-conflicts         234
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         231
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               984
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6340
;  :mk-clause               737
;  :num-allocs              10372284
;  :num-checks              1226
;  :propagations            462
;  :quant-instantiations    166
;  :rlimit-count            420093)
(push) ; 13
(assert (not (< $Perm.No (- $k@232@08 $k@267@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      162
;  :arith-assert-lower      538
;  :arith-assert-upper      549
;  :arith-conflicts         234
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         231
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               984
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6340
;  :mk-clause               737
;  :num-allocs              10372284
;  :num-checks              1227
;  :propagations            462
;  :quant-instantiations    166
;  :rlimit-count            420112)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      162
;  :arith-assert-lower      538
;  :arith-assert-upper      549
;  :arith-conflicts         234
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         231
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               985
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6341
;  :mk-clause               737
;  :num-allocs              10372284
;  :num-checks              1228
;  :propagations            462
;  :quant-instantiations    166
;  :rlimit-count            420482)
(declare-const $k@307@08 $Perm)
(assert ($Perm.isReadVar $k@307@08 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      163
;  :arith-assert-lower      540
;  :arith-assert-upper      551
;  :arith-conflicts         235
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         232
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               986
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6346
;  :mk-clause               739
;  :num-allocs              10372284
;  :num-checks              1229
;  :propagations            463
;  :quant-instantiations    166
;  :rlimit-count            420711)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@307@08 $Perm.No) (< $Perm.No $k@307@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      163
;  :arith-assert-lower      540
;  :arith-assert-upper      551
;  :arith-conflicts         235
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         232
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               987
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6346
;  :mk-clause               739
;  :num-allocs              10372284
;  :num-checks              1230
;  :propagations            463
;  :quant-instantiations    166
;  :rlimit-count            420761)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16992
;  :arith-add-rows          64
;  :arith-assert-diseq      163
;  :arith-assert-lower      540
;  :arith-assert-upper      551
;  :arith-conflicts         235
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         232
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               988
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              622
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6347
;  :mk-clause               739
;  :num-allocs              10372284
;  :num-checks              1231
;  :propagations            463
;  :quant-instantiations    166
;  :rlimit-count            420841)
(push) ; 13
(assert (not (not (= (+ $k@261@08 (- $k@233@08 $k@268@08)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16993
;  :arith-add-rows          64
;  :arith-assert-diseq      163
;  :arith-assert-lower      540
;  :arith-assert-upper      552
;  :arith-conflicts         236
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         232
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               989
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              624
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6349
;  :mk-clause               741
;  :num-allocs              10372284
;  :num-checks              1232
;  :propagations            464
;  :quant-instantiations    166
;  :rlimit-count            420925)
(assert (< $k@307@08 (+ $k@261@08 (- $k@233@08 $k@268@08))))
(assert (<= $Perm.No (- (+ $k@261@08 (- $k@233@08 $k@268@08)) $k@307@08)))
(assert (<= (- (+ $k@261@08 (- $k@233@08 $k@268@08)) $k@307@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@261@08 (- $k@233@08 $k@268@08)) $k@307@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@255@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16993
;  :arith-add-rows          66
;  :arith-assert-diseq      163
;  :arith-assert-lower      542
;  :arith-assert-upper      554
;  :arith-conflicts         237
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         233
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               990
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              624
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6353
;  :mk-clause               741
;  :num-allocs              10372284
;  :num-checks              1233
;  :propagations            464
;  :quant-instantiations    166
;  :rlimit-count            421194)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16993
;  :arith-add-rows          66
;  :arith-assert-diseq      163
;  :arith-assert-lower      542
;  :arith-assert-upper      554
;  :arith-conflicts         237
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         233
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               990
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              624
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6353
;  :mk-clause               741
;  :num-allocs              10372284
;  :num-checks              1234
;  :propagations            464
;  :quant-instantiations    166
;  :rlimit-count            421205)
(push) ; 13
(assert (not (< $Perm.No (- $k@233@08 $k@268@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16993
;  :arith-add-rows          66
;  :arith-assert-diseq      163
;  :arith-assert-lower      542
;  :arith-assert-upper      554
;  :arith-conflicts         237
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         233
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               990
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              624
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6353
;  :mk-clause               741
;  :num-allocs              10372284
;  :num-checks              1235
;  :propagations            464
;  :quant-instantiations    166
;  :rlimit-count            421224)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16993
;  :arith-add-rows          66
;  :arith-assert-diseq      163
;  :arith-assert-lower      542
;  :arith-assert-upper      555
;  :arith-conflicts         238
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         234
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               991
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              624
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6354
;  :mk-clause               741
;  :num-allocs              10372284
;  :num-checks              1236
;  :propagations            464
;  :quant-instantiations    166
;  :rlimit-count            421305)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16993
;  :arith-add-rows          66
;  :arith-assert-diseq      163
;  :arith-assert-lower      542
;  :arith-assert-upper      555
;  :arith-conflicts         238
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         234
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               991
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              624
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6354
;  :mk-clause               741
;  :num-allocs              10372284
;  :num-checks              1237
;  :propagations            464
;  :quant-instantiations    166
;  :rlimit-count            421316)
(push) ; 13
(assert (not (< $Perm.No (- $k@233@08 $k@268@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16993
;  :arith-add-rows          66
;  :arith-assert-diseq      163
;  :arith-assert-lower      542
;  :arith-assert-upper      555
;  :arith-conflicts         238
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         234
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               991
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              624
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6354
;  :mk-clause               741
;  :num-allocs              10372284
;  :num-checks              1238
;  :propagations            464
;  :quant-instantiations    166
;  :rlimit-count            421335)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16993
;  :arith-add-rows          66
;  :arith-assert-diseq      163
;  :arith-assert-lower      542
;  :arith-assert-upper      555
;  :arith-conflicts         238
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         234
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               992
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              624
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6355
;  :mk-clause               741
;  :num-allocs              10372284
;  :num-checks              1239
;  :propagations            464
;  :quant-instantiations    166
;  :rlimit-count            421745)
(declare-const $k@308@08 $Perm)
(assert ($Perm.isReadVar $k@308@08 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16993
;  :arith-add-rows          66
;  :arith-assert-diseq      164
;  :arith-assert-lower      544
;  :arith-assert-upper      557
;  :arith-conflicts         239
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         235
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               993
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              624
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6360
;  :mk-clause               743
;  :num-allocs              10372284
;  :num-checks              1240
;  :propagations            465
;  :quant-instantiations    166
;  :rlimit-count            421974)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16993
;  :arith-add-rows          66
;  :arith-assert-diseq      164
;  :arith-assert-lower      544
;  :arith-assert-upper      557
;  :arith-conflicts         239
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         235
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               993
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              624
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6360
;  :mk-clause               743
;  :num-allocs              10372284
;  :num-checks              1241
;  :propagations            465
;  :quant-instantiations    166
;  :rlimit-count            421985)
(push) ; 13
(assert (not (< $Perm.No (- $k@230@08 $k@265@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16993
;  :arith-add-rows          66
;  :arith-assert-diseq      164
;  :arith-assert-lower      544
;  :arith-assert-upper      557
;  :arith-conflicts         239
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         235
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               993
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              624
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6360
;  :mk-clause               743
;  :num-allocs              10372284
;  :num-checks              1242
;  :propagations            465
;  :quant-instantiations    166
;  :rlimit-count            422004)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@308@08 $Perm.No) (< $Perm.No $k@308@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16993
;  :arith-add-rows          66
;  :arith-assert-diseq      164
;  :arith-assert-lower      544
;  :arith-assert-upper      557
;  :arith-conflicts         239
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         235
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               994
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              624
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6360
;  :mk-clause               743
;  :num-allocs              10372284
;  :num-checks              1243
;  :propagations            465
;  :quant-instantiations    166
;  :rlimit-count            422054)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@234@08 $k@269@08) $k@262@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16994
;  :arith-add-rows          67
;  :arith-assert-diseq      164
;  :arith-assert-lower      544
;  :arith-assert-upper      558
;  :arith-conflicts         240
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         235
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               995
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              626
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6362
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1244
;  :propagations            466
;  :quant-instantiations    166
;  :rlimit-count            422168)
(assert (< $k@308@08 (+ (- $k@234@08 $k@269@08) $k@262@08)))
(assert (<= $Perm.No (- (+ (- $k@234@08 $k@269@08) $k@262@08) $k@308@08)))
(assert (<= (- (+ (- $k@234@08 $k@269@08) $k@262@08) $k@308@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@234@08 $k@269@08) $k@262@08) $k@308@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn.Rng_m == diz.CASR_m
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16994
;  :arith-add-rows          68
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      560
;  :arith-conflicts         241
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         236
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               996
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              626
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6366
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1245
;  :propagations            466
;  :quant-instantiations    166
;  :rlimit-count            422436)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16994
;  :arith-add-rows          68
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      560
;  :arith-conflicts         241
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         236
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               996
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              626
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6366
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1246
;  :propagations            466
;  :quant-instantiations    166
;  :rlimit-count            422447)
(push) ; 13
(assert (not (< $Perm.No (- $k@230@08 $k@265@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16994
;  :arith-add-rows          68
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      560
;  :arith-conflicts         241
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         236
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               996
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              626
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6366
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1247
;  :propagations            466
;  :quant-instantiations    166
;  :rlimit-count            422466)
(push) ; 13
(assert (not (< $Perm.No (- $k@234@08 $k@269@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16994
;  :arith-add-rows          68
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      560
;  :arith-conflicts         241
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         236
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               996
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              626
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6366
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1248
;  :propagations            466
;  :quant-instantiations    166
;  :rlimit-count            422485)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16994
;  :arith-add-rows          68
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      561
;  :arith-conflicts         242
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         237
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               997
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              626
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6367
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1249
;  :propagations            466
;  :quant-instantiations    166
;  :rlimit-count            422566)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
  $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16994
;  :arith-add-rows          68
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      561
;  :arith-conflicts         242
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         237
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               997
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              626
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6367
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1250
;  :propagations            466
;  :quant-instantiations    166
;  :rlimit-count            422585)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
  $t@296@08))
; [eval] diz.CASR_m.Main_rn_casr == diz
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ $k@256@08 (- $k@228@08 $k@263@08)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16994
;  :arith-add-rows          68
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               998
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              626
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6368
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1251
;  :propagations            466
;  :quant-instantiations    166
;  :rlimit-count            422684)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@296@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16994
;  :arith-add-rows          68
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               998
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              626
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6368
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1252
;  :propagations            466
;  :quant-instantiations    166
;  :rlimit-count            422695)
(push) ; 13
(assert (not (< $Perm.No (- $k@231@08 $k@266@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16994
;  :arith-add-rows          68
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               998
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              626
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6368
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1253
;  :propagations            466
;  :quant-instantiations    166
;  :rlimit-count            422714)
(pop) ; 12
(push) ; 12
; [else-branch: 65 | First:(Second:(Second:(Second:($t@255@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@255@08))))))[1] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@08)))))))
        1)
      (- 0 2)))))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 39 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))
(pop) ; 9
; [eval] !!__flatten_15__48.Rng_reset
; [eval] !__flatten_15__48.Rng_reset
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  __flatten_15__48@248@08)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16994
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               998
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 4613
;  :datatype-occurs-check   898
;  :datatype-splits         3802
;  :decisions               4458
;  :del-clause              685
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6368
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1254
;  :propagations            466
;  :quant-instantiations    166
;  :rlimit-count            422921)
(push) ; 9
(assert (not (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17268
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               998
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4696
;  :datatype-occurs-check   911
;  :datatype-splits         3883
;  :decisions               4538
;  :del-clause              685
;  :final-checks            158
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6451
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1255
;  :propagations            469
;  :quant-instantiations    168
;  :rlimit-count            424881
;  :time                    0.00)
(push) ; 9
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17542
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               998
;  :datatype-accessor-ax    607
;  :datatype-constructor-ax 4779
;  :datatype-occurs-check   924
;  :datatype-splits         3964
;  :decisions               4618
;  :del-clause              685
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6534
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1256
;  :propagations            472
;  :quant-instantiations    170
;  :rlimit-count            426847
;  :time                    0.00)
; [then-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08)))))))))))) | live]
; [else-branch: 70 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08))))))))))))) | live]
(push) ; 9
; [then-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))
; [exec]
; __flatten_18__51 := diz.CASR_m
(push) ; 10
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17546
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               999
;  :datatype-accessor-ax    607
;  :datatype-constructor-ax 4779
;  :datatype-occurs-check   924
;  :datatype-splits         3964
;  :decisions               4618
;  :del-clause              685
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6537
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1257
;  :propagations            472
;  :quant-instantiations    172
;  :rlimit-count            427088)
(declare-const __flatten_18__51@309@08 $Ref)
(assert (= __flatten_18__51@309@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_17__50 := __flatten_18__51.Main_rn
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_18__51@309@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17547
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               999
;  :datatype-accessor-ax    607
;  :datatype-constructor-ax 4779
;  :datatype-occurs-check   924
;  :datatype-splits         3964
;  :decisions               4618
;  :del-clause              685
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6538
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1258
;  :propagations            472
;  :quant-instantiations    172
;  :rlimit-count            427136)
(push) ; 10
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17547
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1000
;  :datatype-accessor-ax    607
;  :datatype-constructor-ax 4779
;  :datatype-occurs-check   924
;  :datatype-splits         3964
;  :decisions               4618
;  :del-clause              685
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6538
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1259
;  :propagations            472
;  :quant-instantiations    172
;  :rlimit-count            427184)
(declare-const __flatten_17__50@310@08 $Ref)
(assert (=
  __flatten_17__50@310@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  __flatten_17__50@310@08)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17548
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1000
;  :datatype-accessor-ax    607
;  :datatype-constructor-ax 4779
;  :datatype-occurs-check   924
;  :datatype-splits         3964
;  :decisions               4618
;  :del-clause              685
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6539
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1260
;  :propagations            472
;  :quant-instantiations    172
;  :rlimit-count            427232)
(push) ; 10
(assert (not (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17819
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1000
;  :datatype-accessor-ax    610
;  :datatype-constructor-ax 4861
;  :datatype-occurs-check   937
;  :datatype-splits         4044
;  :decisions               4697
;  :del-clause              685
;  :final-checks            164
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6620
;  :mk-clause               745
;  :num-allocs              10372284
;  :num-checks              1261
;  :propagations            475
;  :quant-instantiations    173
;  :rlimit-count            429185
;  :time                    0.00)
(push) ; 10
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18091
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1001
;  :datatype-accessor-ax    614
;  :datatype-constructor-ax 4947
;  :datatype-occurs-check   951
;  :datatype-splits         4127
;  :decisions               4779
;  :del-clause              686
;  :final-checks            167
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6708
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1262
;  :propagations            478
;  :quant-instantiations    175
;  :rlimit-count            431195
;  :time                    0.00)
; [then-branch: 71 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08))))))))))))) | live]
; [else-branch: 71 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08)))))))))))))) | live]
(push) ; 10
; [then-branch: 71 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08)))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
; [exec]
; __flatten_20__53 := diz.CASR_m
(push) ; 11
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18094
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1002
;  :datatype-accessor-ax    614
;  :datatype-constructor-ax 4947
;  :datatype-occurs-check   951
;  :datatype-splits         4127
;  :decisions               4779
;  :del-clause              686
;  :final-checks            167
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6710
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1263
;  :propagations            478
;  :quant-instantiations    176
;  :rlimit-count            431428)
(declare-const __flatten_20__53@311@08 $Ref)
(assert (= __flatten_20__53@311@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_19__52 := __flatten_20__53.Main_rn
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_20__53@311@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18095
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1002
;  :datatype-accessor-ax    614
;  :datatype-constructor-ax 4947
;  :datatype-occurs-check   951
;  :datatype-splits         4127
;  :decisions               4779
;  :del-clause              686
;  :final-checks            167
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6711
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1264
;  :propagations            478
;  :quant-instantiations    176
;  :rlimit-count            431476)
(push) ; 11
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18095
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1003
;  :datatype-accessor-ax    614
;  :datatype-constructor-ax 4947
;  :datatype-occurs-check   951
;  :datatype-splits         4127
;  :decisions               4779
;  :del-clause              686
;  :final-checks            167
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6711
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1265
;  :propagations            478
;  :quant-instantiations    176
;  :rlimit-count            431524)
(declare-const __flatten_19__52@312@08 $Ref)
(assert (=
  __flatten_19__52@312@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
; [eval] __flatten_19__52.Rng_seed_i == 0
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  __flatten_19__52@312@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18096
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1003
;  :datatype-accessor-ax    614
;  :datatype-constructor-ax 4947
;  :datatype-occurs-check   951
;  :datatype-splits         4127
;  :decisions               4779
;  :del-clause              686
;  :final-checks            167
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6712
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1266
;  :propagations            478
;  :quant-instantiations    176
;  :rlimit-count            431572)
(push) ; 11
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18366
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1003
;  :datatype-accessor-ax    617
;  :datatype-constructor-ax 5029
;  :datatype-occurs-check   964
;  :datatype-splits         4207
;  :decisions               4858
;  :del-clause              686
;  :final-checks            170
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6793
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1267
;  :propagations            481
;  :quant-instantiations    177
;  :rlimit-count            433557
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
  0)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18635
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1003
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6874
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1268
;  :propagations            484
;  :quant-instantiations    178
;  :rlimit-count            435540
;  :time                    0.00)
; [then-branch: 72 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08)))))))))))))) == 0 | live]
; [else-branch: 72 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08)))))))))))))) != 0 | live]
(push) ; 11
; [then-branch: 72 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08)))))))))))))) == 0]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
  0))
; [exec]
; __flatten_22__55 := diz.CASR_m
(push) ; 12
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18637
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1004
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6876
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1269
;  :propagations            484
;  :quant-instantiations    179
;  :rlimit-count            435793)
(declare-const __flatten_22__55@313@08 $Ref)
(assert (= __flatten_22__55@313@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_21__54 := __flatten_22__55.Main_rn
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_22__55@313@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18638
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1004
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6877
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1270
;  :propagations            484
;  :quant-instantiations    179
;  :rlimit-count            435841)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18638
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1005
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6877
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1271
;  :propagations            484
;  :quant-instantiations    179
;  :rlimit-count            435889)
(declare-const __flatten_21__54@314@08 $Ref)
(assert (=
  __flatten_21__54@314@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
; [exec]
; __flatten_21__54.Rng_CASR_reg := 0
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  __flatten_21__54@314@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18639
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1005
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6878
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1272
;  :propagations            484
;  :quant-instantiations    179
;  :rlimit-count            435945)
(assert (not (= __flatten_21__54@314@08 $Ref.null)))
; [exec]
; __flatten_64__96 := diz.CASR_m
(push) ; 12
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18640
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1006
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6879
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1273
;  :propagations            484
;  :quant-instantiations    179
;  :rlimit-count            436049)
(declare-const __flatten_64__96@315@08 $Ref)
(assert (= __flatten_64__96@315@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_66__98 := diz.CASR_m
(push) ; 12
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18641
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1007
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6880
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1274
;  :propagations            484
;  :quant-instantiations    179
;  :rlimit-count            436134)
(declare-const __flatten_66__98@316@08 $Ref)
(assert (= __flatten_66__98@316@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_65__97 := __flatten_66__98.Main_process_state[0 := 1]
; [eval] __flatten_66__98.Main_process_state[0 := 1]
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_66__98@316@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18642
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1007
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6881
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1275
;  :propagations            484
;  :quant-instantiations    179
;  :rlimit-count            436193)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18642
;  :arith-add-rows          73
;  :arith-assert-diseq      164
;  :arith-assert-lower      546
;  :arith-assert-upper      562
;  :arith-conflicts         243
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         238
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               1007
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6881
;  :mk-clause               746
;  :num-allocs              10372284
;  :num-checks              1276
;  :propagations            484
;  :quant-instantiations    179
;  :rlimit-count            436208)
(declare-const __flatten_65__97@317@08 Seq<Int>)
(assert (Seq_equal
  __flatten_65__97@317@08
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
    0
    1)))
; [exec]
; __flatten_64__96.Main_process_state := __flatten_65__97
(set-option :timeout 10)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_64__96@315@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18653
;  :arith-add-rows          76
;  :arith-assert-diseq      165
;  :arith-assert-lower      550
;  :arith-assert-upper      564
;  :arith-conflicts         243
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         240
;  :arith-pivots            143
;  :binary-propagations     22
;  :conflicts               1007
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6905
;  :mk-clause               766
;  :num-allocs              10372284
;  :num-checks              1277
;  :propagations            493
;  :quant-instantiations    184
;  :rlimit-count            436679)
(assert (not (= __flatten_64__96@315@08 $Ref.null)))
; [exec]
; __flatten_67__99 := diz.CASR_m
(push) ; 12
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18654
;  :arith-add-rows          76
;  :arith-assert-diseq      165
;  :arith-assert-lower      550
;  :arith-assert-upper      564
;  :arith-conflicts         243
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         240
;  :arith-pivots            143
;  :binary-propagations     22
;  :conflicts               1008
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6906
;  :mk-clause               766
;  :num-allocs              10372284
;  :num-checks              1278
;  :propagations            493
;  :quant-instantiations    184
;  :rlimit-count            436783)
(declare-const __flatten_67__99@318@08 $Ref)
(assert (= __flatten_67__99@318@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_69__101 := diz.CASR_m
(push) ; 12
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18655
;  :arith-add-rows          76
;  :arith-assert-diseq      165
;  :arith-assert-lower      550
;  :arith-assert-upper      564
;  :arith-conflicts         243
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         240
;  :arith-pivots            143
;  :binary-propagations     22
;  :conflicts               1009
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6907
;  :mk-clause               766
;  :num-allocs              10372284
;  :num-checks              1279
;  :propagations            493
;  :quant-instantiations    184
;  :rlimit-count            436871)
(declare-const __flatten_69__101@319@08 $Ref)
(assert (= __flatten_69__101@319@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_68__100 := __flatten_69__101.Main_event_state[1 := 5]
; [eval] __flatten_69__101.Main_event_state[1 := 5]
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_69__101@319@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18656
;  :arith-add-rows          76
;  :arith-assert-diseq      165
;  :arith-assert-lower      550
;  :arith-assert-upper      564
;  :arith-conflicts         243
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         240
;  :arith-pivots            143
;  :binary-propagations     22
;  :conflicts               1009
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6908
;  :mk-clause               766
;  :num-allocs              10372284
;  :num-checks              1280
;  :propagations            493
;  :quant-instantiations    184
;  :rlimit-count            436930)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18656
;  :arith-add-rows          76
;  :arith-assert-diseq      165
;  :arith-assert-lower      550
;  :arith-assert-upper      564
;  :arith-conflicts         243
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         240
;  :arith-pivots            143
;  :binary-propagations     22
;  :conflicts               1009
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6908
;  :mk-clause               766
;  :num-allocs              10372284
;  :num-checks              1281
;  :propagations            493
;  :quant-instantiations    184
;  :rlimit-count            436945)
(declare-const __flatten_68__100@320@08 Seq<Int>)
(assert (Seq_equal
  __flatten_68__100@320@08
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
    1
    5)))
; [exec]
; __flatten_67__99.Main_event_state := __flatten_68__100
(set-option :timeout 10)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_67__99@318@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18667
;  :arith-add-rows          79
;  :arith-assert-diseq      166
;  :arith-assert-lower      554
;  :arith-assert-upper      566
;  :arith-conflicts         243
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1009
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6932
;  :mk-clause               787
;  :num-allocs              10372284
;  :num-checks              1282
;  :propagations            502
;  :quant-instantiations    189
;  :rlimit-count            437442)
(assert (not (= __flatten_67__99@318@08 $Ref.null)))
(push) ; 12
; Loop head block: Check well-definedness of invariant
(declare-const $t@321@08 $Snap)
(assert (= $t@321@08 ($Snap.combine ($Snap.first $t@321@08) ($Snap.second $t@321@08))))
(declare-const $k@322@08 $Perm)
(assert ($Perm.isReadVar $k@322@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@322@08 $Perm.No) (< $Perm.No $k@322@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18672
;  :arith-add-rows          79
;  :arith-assert-diseq      167
;  :arith-assert-lower      556
;  :arith-assert-upper      567
;  :arith-conflicts         243
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1010
;  :datatype-accessor-ax    621
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6937
;  :mk-clause               789
;  :num-allocs              10372284
;  :num-checks              1283
;  :propagations            503
;  :quant-instantiations    189
;  :rlimit-count            437753)
(assert (<= $Perm.No $k@322@08))
(assert (<= $k@322@08 $Perm.Write))
(assert (implies (< $Perm.No $k@322@08) (not (= diz@47@08 $Ref.null))))
(assert (=
  ($Snap.second $t@321@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@321@08))
    ($Snap.second ($Snap.second $t@321@08)))))
(assert (= ($Snap.first ($Snap.second $t@321@08)) $Snap.unit))
; [eval] diz.CASR_m != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18678
;  :arith-add-rows          79
;  :arith-assert-diseq      167
;  :arith-assert-lower      556
;  :arith-assert-upper      568
;  :arith-conflicts         243
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1011
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6940
;  :mk-clause               789
;  :num-allocs              10372284
;  :num-checks              1284
;  :propagations            503
;  :quant-instantiations    189
;  :rlimit-count            437996)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@321@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@321@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18684
;  :arith-add-rows          79
;  :arith-assert-diseq      167
;  :arith-assert-lower      556
;  :arith-assert-upper      568
;  :arith-conflicts         243
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1012
;  :datatype-accessor-ax    623
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6943
;  :mk-clause               789
;  :num-allocs              10372284
;  :num-checks              1285
;  :propagations            503
;  :quant-instantiations    190
;  :rlimit-count            438268)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@321@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18689
;  :arith-add-rows          79
;  :arith-assert-diseq      167
;  :arith-assert-lower      556
;  :arith-assert-upper      568
;  :arith-conflicts         243
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1013
;  :datatype-accessor-ax    624
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6944
;  :mk-clause               789
;  :num-allocs              10372284
;  :num-checks              1286
;  :propagations            503
;  :quant-instantiations    190
;  :rlimit-count            438445)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
  $Snap.unit))
; [eval] |diz.CASR_m.Main_process_state| == 3
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18695
;  :arith-add-rows          79
;  :arith-assert-diseq      167
;  :arith-assert-lower      556
;  :arith-assert-upper      568
;  :arith-conflicts         243
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1014
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6946
;  :mk-clause               789
;  :num-allocs              10372284
;  :num-checks              1287
;  :propagations            503
;  :quant-instantiations    190
;  :rlimit-count            438664)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18702
;  :arith-add-rows          79
;  :arith-assert-diseq      167
;  :arith-assert-lower      558
;  :arith-assert-upper      569
;  :arith-conflicts         243
;  :arith-eq-adapter        243
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1015
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6952
;  :mk-clause               789
;  :num-allocs              10372284
;  :num-checks              1288
;  :propagations            503
;  :quant-instantiations    192
;  :rlimit-count            438994)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
  $Snap.unit))
; [eval] |diz.CASR_m.Main_event_state| == 6
; [eval] |diz.CASR_m.Main_event_state|
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18708
;  :arith-add-rows          79
;  :arith-assert-diseq      167
;  :arith-assert-lower      558
;  :arith-assert-upper      569
;  :arith-conflicts         243
;  :arith-eq-adapter        243
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1016
;  :datatype-accessor-ax    627
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6954
;  :mk-clause               789
;  :num-allocs              10372284
;  :num-checks              1289
;  :propagations            503
;  :quant-instantiations    192
;  :rlimit-count            439233)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))
  $Snap.unit))
; [eval] (forall i__104: Int :: { diz.CASR_m.Main_process_state[i__104] } 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|)
(declare-const i__104@323@08 Int)
(push) ; 13
; [eval] 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state|
; [eval] 0 <= i__104
(push) ; 14
; [then-branch: 73 | 0 <= i__104@323@08 | live]
; [else-branch: 73 | !(0 <= i__104@323@08) | live]
(push) ; 15
; [then-branch: 73 | 0 <= i__104@323@08]
(assert (<= 0 i__104@323@08))
; [eval] i__104 < |diz.CASR_m.Main_process_state|
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 16
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          79
;  :arith-assert-diseq      167
;  :arith-assert-lower      561
;  :arith-assert-upper      570
;  :arith-conflicts         243
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1017
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6962
;  :mk-clause               789
;  :num-allocs              10372284
;  :num-checks              1290
;  :propagations            503
;  :quant-instantiations    194
;  :rlimit-count            439671)
(pop) ; 15
(push) ; 15
; [else-branch: 73 | !(0 <= i__104@323@08)]
(assert (not (<= 0 i__104@323@08)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 74 | i__104@323@08 < |First:(Second:(Second:(Second:($t@321@08))))| && 0 <= i__104@323@08 | live]
; [else-branch: 74 | !(i__104@323@08 < |First:(Second:(Second:(Second:($t@321@08))))| && 0 <= i__104@323@08) | live]
(push) ; 15
; [then-branch: 74 | i__104@323@08 < |First:(Second:(Second:(Second:($t@321@08))))| && 0 <= i__104@323@08]
(assert (and
  (<
    i__104@323@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
  (<= 0 i__104@323@08)))
; [eval] diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__104] == -1
; [eval] diz.CASR_m.Main_process_state[i__104]
(push) ; 16
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          79
;  :arith-assert-diseq      167
;  :arith-assert-lower      562
;  :arith-assert-upper      571
;  :arith-conflicts         243
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1018
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6964
;  :mk-clause               789
;  :num-allocs              10372284
;  :num-checks              1291
;  :propagations            503
;  :quant-instantiations    194
;  :rlimit-count            439828)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__104@323@08 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          79
;  :arith-assert-diseq      167
;  :arith-assert-lower      562
;  :arith-assert-upper      571
;  :arith-conflicts         243
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1018
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6964
;  :mk-clause               789
;  :num-allocs              10372284
;  :num-checks              1292
;  :propagations            503
;  :quant-instantiations    194
;  :rlimit-count            439837)
; [eval] -1
(push) ; 16
; [then-branch: 75 | First:(Second:(Second:(Second:($t@321@08))))[i__104@323@08] == -1 | live]
; [else-branch: 75 | First:(Second:(Second:(Second:($t@321@08))))[i__104@323@08] != -1 | live]
(push) ; 17
; [then-branch: 75 | First:(Second:(Second:(Second:($t@321@08))))[i__104@323@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    i__104@323@08)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 75 | First:(Second:(Second:(Second:($t@321@08))))[i__104@323@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
      i__104@323@08)
    (- 0 1))))
; [eval] 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= diz.CASR_m.Main_process_state[i__104]
; [eval] diz.CASR_m.Main_process_state[i__104]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          79
;  :arith-assert-diseq      167
;  :arith-assert-lower      562
;  :arith-assert-upper      571
;  :arith-conflicts         243
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1019
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6965
;  :mk-clause               789
;  :num-allocs              10372284
;  :num-checks              1293
;  :propagations            503
;  :quant-instantiations    194
;  :rlimit-count            440051)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__104@323@08 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          79
;  :arith-assert-diseq      167
;  :arith-assert-lower      562
;  :arith-assert-upper      571
;  :arith-conflicts         243
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1019
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6965
;  :mk-clause               789
;  :num-allocs              10372284
;  :num-checks              1294
;  :propagations            503
;  :quant-instantiations    194
;  :rlimit-count            440060)
(push) ; 18
; [then-branch: 76 | 0 <= First:(Second:(Second:(Second:($t@321@08))))[i__104@323@08] | live]
; [else-branch: 76 | !(0 <= First:(Second:(Second:(Second:($t@321@08))))[i__104@323@08]) | live]
(push) ; 19
; [then-branch: 76 | 0 <= First:(Second:(Second:(Second:($t@321@08))))[i__104@323@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    i__104@323@08)))
; [eval] diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__104]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          79
;  :arith-assert-diseq      168
;  :arith-assert-lower      565
;  :arith-assert-upper      571
;  :arith-conflicts         243
;  :arith-eq-adapter        245
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1020
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6968
;  :mk-clause               790
;  :num-allocs              10372284
;  :num-checks              1295
;  :propagations            503
;  :quant-instantiations    194
;  :rlimit-count            440222)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__104@323@08 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          79
;  :arith-assert-diseq      168
;  :arith-assert-lower      565
;  :arith-assert-upper      571
;  :arith-conflicts         243
;  :arith-eq-adapter        245
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1020
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6968
;  :mk-clause               790
;  :num-allocs              10372284
;  :num-checks              1296
;  :propagations            503
;  :quant-instantiations    194
;  :rlimit-count            440231)
; [eval] |diz.CASR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          79
;  :arith-assert-diseq      168
;  :arith-assert-lower      565
;  :arith-assert-upper      571
;  :arith-conflicts         243
;  :arith-eq-adapter        245
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1021
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              686
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6968
;  :mk-clause               790
;  :num-allocs              10372284
;  :num-checks              1297
;  :propagations            503
;  :quant-instantiations    194
;  :rlimit-count            440279)
(pop) ; 19
(push) ; 19
; [else-branch: 76 | !(0 <= First:(Second:(Second:(Second:($t@321@08))))[i__104@323@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
      i__104@323@08))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 74 | !(i__104@323@08 < |First:(Second:(Second:(Second:($t@321@08))))| && 0 <= i__104@323@08)]
(assert (not
  (and
    (<
      i__104@323@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
    (<= 0 i__104@323@08))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__104@323@08 Int)) (!
  (implies
    (and
      (<
        i__104@323@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
      (<= 0 i__104@323@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
          i__104@323@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
            i__104@323@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
            i__104@323@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    i__104@323@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18721
;  :arith-add-rows          79
;  :arith-assert-diseq      168
;  :arith-assert-lower      565
;  :arith-assert-upper      571
;  :arith-conflicts         243
;  :arith-eq-adapter        245
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1022
;  :datatype-accessor-ax    629
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6970
;  :mk-clause               790
;  :num-allocs              10372284
;  :num-checks              1298
;  :propagations            503
;  :quant-instantiations    194
;  :rlimit-count            440904)
(declare-const $k@324@08 $Perm)
(assert ($Perm.isReadVar $k@324@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@324@08 $Perm.No) (< $Perm.No $k@324@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18721
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      572
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1023
;  :datatype-accessor-ax    629
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6974
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1299
;  :propagations            504
;  :quant-instantiations    194
;  :rlimit-count            441103)
(assert (<= $Perm.No $k@324@08))
(assert (<= $k@324@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@324@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18727
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1024
;  :datatype-accessor-ax    630
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6977
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1300
;  :propagations            504
;  :quant-instantiations    194
;  :rlimit-count            441426)
(push) ; 13
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18727
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1025
;  :datatype-accessor-ax    630
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6977
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1301
;  :propagations            504
;  :quant-instantiations    194
;  :rlimit-count            441474)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18733
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1026
;  :datatype-accessor-ax    631
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6980
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1302
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            441830)
(push) ; 13
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18733
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1027
;  :datatype-accessor-ax    631
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6980
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1303
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            441878)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18738
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1028
;  :datatype-accessor-ax    632
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6981
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1304
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            442135)
(push) ; 13
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18738
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1029
;  :datatype-accessor-ax    632
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6981
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1305
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            442183)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18743
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1030
;  :datatype-accessor-ax    633
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6982
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1306
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            442450)
(push) ; 13
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18743
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1031
;  :datatype-accessor-ax    633
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6982
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1307
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            442498)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18748
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1032
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6983
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1308
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            442775)
(push) ; 13
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18748
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1033
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6983
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1309
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            442823)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18753
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1034
;  :datatype-accessor-ax    635
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6984
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1310
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            443110)
(push) ; 13
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18753
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1035
;  :datatype-accessor-ax    635
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6984
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1311
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            443158)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18758
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1036
;  :datatype-accessor-ax    636
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6985
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1312
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            443455)
(push) ; 13
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18758
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1037
;  :datatype-accessor-ax    636
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6985
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1313
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            443503)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18763
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1038
;  :datatype-accessor-ax    637
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6986
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1314
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            443810)
(push) ; 13
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18763
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1039
;  :datatype-accessor-ax    637
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6986
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1315
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            443858)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18768
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1040
;  :datatype-accessor-ax    638
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6987
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1316
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            444175)
(push) ; 13
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18768
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1041
;  :datatype-accessor-ax    638
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6987
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1317
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            444223)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18773
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1042
;  :datatype-accessor-ax    639
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6988
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1318
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            444550)
(push) ; 13
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18773
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1043
;  :datatype-accessor-ax    639
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6988
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1319
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            444598)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18778
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1044
;  :datatype-accessor-ax    640
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6989
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1320
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            444935)
(push) ; 13
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18778
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1045
;  :datatype-accessor-ax    640
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6989
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1321
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            444983)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18783
;  :arith-add-rows          79
;  :arith-assert-diseq      169
;  :arith-assert-lower      567
;  :arith-assert-upper      573
;  :arith-conflicts         243
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1046
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6990
;  :mk-clause               792
;  :num-allocs              10372284
;  :num-checks              1322
;  :propagations            504
;  :quant-instantiations    195
;  :rlimit-count            445330)
(declare-const $k@325@08 $Perm)
(assert ($Perm.isReadVar $k@325@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@325@08 $Perm.No) (< $Perm.No $k@325@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18783
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      574
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1047
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6994
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1323
;  :propagations            505
;  :quant-instantiations    195
;  :rlimit-count            445528)
(assert (<= $Perm.No $k@325@08))
(assert (<= $k@325@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@325@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18789
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1048
;  :datatype-accessor-ax    642
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6997
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1324
;  :propagations            505
;  :quant-instantiations    195
;  :rlimit-count            445971)
(push) ; 13
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18789
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1049
;  :datatype-accessor-ax    642
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             6997
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1325
;  :propagations            505
;  :quant-instantiations    195
;  :rlimit-count            446019)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18795
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1050
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7000
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1326
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            446513)
(push) ; 13
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18795
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1051
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7000
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1327
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            446561)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18800
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1052
;  :datatype-accessor-ax    644
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7001
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1328
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            446938)
(push) ; 13
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18800
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1053
;  :datatype-accessor-ax    644
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7001
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1329
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            446986)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18805
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1054
;  :datatype-accessor-ax    645
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7002
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1330
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            447373)
(push) ; 13
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18805
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1055
;  :datatype-accessor-ax    645
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7002
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1331
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            447421)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18810
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1056
;  :datatype-accessor-ax    646
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7003
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1332
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            447818)
(push) ; 13
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18810
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1057
;  :datatype-accessor-ax    646
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7003
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1333
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            447866)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18815
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1058
;  :datatype-accessor-ax    647
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7004
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1334
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            448273)
(push) ; 13
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18815
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1059
;  :datatype-accessor-ax    647
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7004
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1335
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            448321)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18820
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1060
;  :datatype-accessor-ax    648
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7005
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1336
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            448738)
(push) ; 13
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18820
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1061
;  :datatype-accessor-ax    648
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7005
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1337
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            448786)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18825
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1062
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7006
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1338
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            449213)
(push) ; 13
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18825
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1063
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7006
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1339
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            449261)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18830
;  :arith-add-rows          79
;  :arith-assert-diseq      170
;  :arith-assert-lower      569
;  :arith-assert-upper      575
;  :arith-conflicts         243
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1064
;  :datatype-accessor-ax    650
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7007
;  :mk-clause               794
;  :num-allocs              10372284
;  :num-checks              1340
;  :propagations            505
;  :quant-instantiations    196
;  :rlimit-count            449698)
(declare-const $k@326@08 $Perm)
(assert ($Perm.isReadVar $k@326@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@326@08 $Perm.No) (< $Perm.No $k@326@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18830
;  :arith-add-rows          79
;  :arith-assert-diseq      171
;  :arith-assert-lower      571
;  :arith-assert-upper      576
;  :arith-conflicts         243
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1065
;  :datatype-accessor-ax    650
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7011
;  :mk-clause               796
;  :num-allocs              10372284
;  :num-checks              1341
;  :propagations            506
;  :quant-instantiations    196
;  :rlimit-count            449897)
(assert (<= $Perm.No $k@326@08))
(assert (<= $k@326@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@326@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18836
;  :arith-add-rows          79
;  :arith-assert-diseq      171
;  :arith-assert-lower      571
;  :arith-assert-upper      577
;  :arith-conflicts         243
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1066
;  :datatype-accessor-ax    651
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7014
;  :mk-clause               796
;  :num-allocs              10372284
;  :num-checks              1342
;  :propagations            506
;  :quant-instantiations    196
;  :rlimit-count            450430)
(push) ; 13
(assert (not (< $Perm.No $k@326@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18836
;  :arith-add-rows          79
;  :arith-assert-diseq      171
;  :arith-assert-lower      571
;  :arith-assert-upper      577
;  :arith-conflicts         243
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1067
;  :datatype-accessor-ax    651
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7014
;  :mk-clause               796
;  :num-allocs              10372284
;  :num-checks              1343
;  :propagations            506
;  :quant-instantiations    196
;  :rlimit-count            450478)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18842
;  :arith-add-rows          79
;  :arith-assert-diseq      171
;  :arith-assert-lower      571
;  :arith-assert-upper      577
;  :arith-conflicts         243
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1068
;  :datatype-accessor-ax    652
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7017
;  :mk-clause               796
;  :num-allocs              10372284
;  :num-checks              1344
;  :propagations            506
;  :quant-instantiations    197
;  :rlimit-count            451056)
(push) ; 13
(assert (not (< $Perm.No $k@326@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18842
;  :arith-add-rows          79
;  :arith-assert-diseq      171
;  :arith-assert-lower      571
;  :arith-assert-upper      577
;  :arith-conflicts         243
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1069
;  :datatype-accessor-ax    652
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7017
;  :mk-clause               796
;  :num-allocs              10372284
;  :num-checks              1345
;  :propagations            506
;  :quant-instantiations    197
;  :rlimit-count            451104)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18847
;  :arith-add-rows          79
;  :arith-assert-diseq      171
;  :arith-assert-lower      571
;  :arith-assert-upper      577
;  :arith-conflicts         243
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1070
;  :datatype-accessor-ax    653
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7018
;  :mk-clause               796
;  :num-allocs              10372284
;  :num-checks              1346
;  :propagations            506
;  :quant-instantiations    197
;  :rlimit-count            451571)
(push) ; 13
(assert (not (< $Perm.No $k@326@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18847
;  :arith-add-rows          79
;  :arith-assert-diseq      171
;  :arith-assert-lower      571
;  :arith-assert-upper      577
;  :arith-conflicts         243
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1071
;  :datatype-accessor-ax    653
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7018
;  :mk-clause               796
;  :num-allocs              10372284
;  :num-checks              1347
;  :propagations            506
;  :quant-instantiations    197
;  :rlimit-count            451619)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18852
;  :arith-add-rows          79
;  :arith-assert-diseq      171
;  :arith-assert-lower      571
;  :arith-assert-upper      577
;  :arith-conflicts         243
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1072
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7019
;  :mk-clause               796
;  :num-allocs              10372284
;  :num-checks              1348
;  :propagations            506
;  :quant-instantiations    197
;  :rlimit-count            452096)
(declare-const $k@327@08 $Perm)
(assert ($Perm.isReadVar $k@327@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@327@08 $Perm.No) (< $Perm.No $k@327@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18852
;  :arith-add-rows          79
;  :arith-assert-diseq      172
;  :arith-assert-lower      573
;  :arith-assert-upper      578
;  :arith-conflicts         243
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1073
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7023
;  :mk-clause               798
;  :num-allocs              10372284
;  :num-checks              1349
;  :propagations            507
;  :quant-instantiations    197
;  :rlimit-count            452294)
(assert (<= $Perm.No $k@327@08))
(assert (<= $k@327@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@327@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18858
;  :arith-add-rows          79
;  :arith-assert-diseq      172
;  :arith-assert-lower      573
;  :arith-assert-upper      579
;  :arith-conflicts         243
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1074
;  :datatype-accessor-ax    655
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7026
;  :mk-clause               798
;  :num-allocs              10372284
;  :num-checks              1350
;  :propagations            507
;  :quant-instantiations    197
;  :rlimit-count            452867)
(push) ; 13
(assert (not (< $Perm.No $k@327@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18858
;  :arith-add-rows          79
;  :arith-assert-diseq      172
;  :arith-assert-lower      573
;  :arith-assert-upper      579
;  :arith-conflicts         243
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1075
;  :datatype-accessor-ax    655
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7026
;  :mk-clause               798
;  :num-allocs              10372284
;  :num-checks              1351
;  :propagations            507
;  :quant-instantiations    197
;  :rlimit-count            452915)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18864
;  :arith-add-rows          79
;  :arith-assert-diseq      172
;  :arith-assert-lower      573
;  :arith-assert-upper      579
;  :arith-conflicts         243
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1076
;  :datatype-accessor-ax    656
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7029
;  :mk-clause               798
;  :num-allocs              10372284
;  :num-checks              1352
;  :propagations            507
;  :quant-instantiations    198
;  :rlimit-count            453523)
(push) ; 13
(assert (not (< $Perm.No $k@327@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18864
;  :arith-add-rows          79
;  :arith-assert-diseq      172
;  :arith-assert-lower      573
;  :arith-assert-upper      579
;  :arith-conflicts         243
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1077
;  :datatype-accessor-ax    656
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7029
;  :mk-clause               798
;  :num-allocs              10372284
;  :num-checks              1353
;  :propagations            507
;  :quant-instantiations    198
;  :rlimit-count            453571)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18869
;  :arith-add-rows          79
;  :arith-assert-diseq      172
;  :arith-assert-lower      573
;  :arith-assert-upper      579
;  :arith-conflicts         243
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1078
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7030
;  :mk-clause               798
;  :num-allocs              10372284
;  :num-checks              1354
;  :propagations            507
;  :quant-instantiations    198
;  :rlimit-count            454078)
(push) ; 13
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18869
;  :arith-add-rows          79
;  :arith-assert-diseq      172
;  :arith-assert-lower      573
;  :arith-assert-upper      579
;  :arith-conflicts         243
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1079
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7030
;  :mk-clause               798
;  :num-allocs              10372284
;  :num-checks              1355
;  :propagations            507
;  :quant-instantiations    198
;  :rlimit-count            454126)
(declare-const $k@328@08 $Perm)
(assert ($Perm.isReadVar $k@328@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@328@08 $Perm.No) (< $Perm.No $k@328@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18869
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      580
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1080
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7034
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1356
;  :propagations            508
;  :quant-instantiations    198
;  :rlimit-count            454324)
(assert (<= $Perm.No $k@328@08))
(assert (<= $k@328@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@328@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn.Rng_m == diz.CASR_m
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18875
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1081
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7037
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1357
;  :propagations            508
;  :quant-instantiations    198
;  :rlimit-count            454927)
(push) ; 13
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18875
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1082
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7037
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1358
;  :propagations            508
;  :quant-instantiations    198
;  :rlimit-count            454975)
(push) ; 13
(assert (not (< $Perm.No $k@328@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18875
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1083
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7037
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1359
;  :propagations            508
;  :quant-instantiations    198
;  :rlimit-count            455023)
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18875
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1084
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7037
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1360
;  :propagations            508
;  :quant-instantiations    198
;  :rlimit-count            455071)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_casr == diz
(push) ; 13
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18880
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1085
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7040
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1361
;  :propagations            508
;  :quant-instantiations    199
;  :rlimit-count            455655)
(push) ; 13
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18880
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1086
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7040
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1362
;  :propagations            508
;  :quant-instantiations    199
;  :rlimit-count            455703)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
  diz@47@08))
; Loop head block: Check well-definedness of edge conditions
(push) ; 13
; [eval] diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_process_state[0] != -1
; [eval] diz.CASR_m.Main_process_state[0]
(push) ; 14
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18883
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1087
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7041
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1363
;  :propagations            508
;  :quant-instantiations    199
;  :rlimit-count            456019)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18883
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1087
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7041
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1364
;  :propagations            508
;  :quant-instantiations    199
;  :rlimit-count            456034)
; [eval] -1
(push) ; 14
; [then-branch: 77 | First:(Second:(Second:(Second:($t@321@08))))[0] != -1 | live]
; [else-branch: 77 | First:(Second:(Second:(Second:($t@321@08))))[0] == -1 | live]
(push) ; 15
; [then-branch: 77 | First:(Second:(Second:(Second:($t@321@08))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
      0)
    (- 0 1))))
(pop) ; 15
(push) ; 15
; [else-branch: 77 | First:(Second:(Second:(Second:($t@321@08))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    0)
  (- 0 1)))
; [eval] diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_event_state[1]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18884
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1088
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7042
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1365
;  :propagations            508
;  :quant-instantiations    199
;  :rlimit-count            456229)
(set-option :timeout 0)
(push) ; 16
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18884
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1088
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7042
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1366
;  :propagations            508
;  :quant-instantiations    199
;  :rlimit-count            456244)
; [eval] -2
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [eval] !(diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[1] != -2)
; [eval] diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_process_state[0] != -1
; [eval] diz.CASR_m.Main_process_state[0]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18884
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1089
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7042
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1367
;  :propagations            508
;  :quant-instantiations    199
;  :rlimit-count            456297)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18884
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1089
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7042
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1368
;  :propagations            508
;  :quant-instantiations    199
;  :rlimit-count            456312)
; [eval] -1
(push) ; 14
; [then-branch: 78 | First:(Second:(Second:(Second:($t@321@08))))[0] != -1 | live]
; [else-branch: 78 | First:(Second:(Second:(Second:($t@321@08))))[0] == -1 | live]
(push) ; 15
; [then-branch: 78 | First:(Second:(Second:(Second:($t@321@08))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
      0)
    (- 0 1))))
(pop) ; 15
(push) ; 15
; [else-branch: 78 | First:(Second:(Second:(Second:($t@321@08))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    0)
  (- 0 1)))
; [eval] diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_event_state[1]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18885
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1090
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7043
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1369
;  :propagations            508
;  :quant-instantiations    199
;  :rlimit-count            456503)
(set-option :timeout 0)
(push) ; 16
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18885
;  :arith-add-rows          79
;  :arith-assert-diseq      173
;  :arith-assert-lower      575
;  :arith-assert-upper      581
;  :arith-conflicts         243
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1090
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              687
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7043
;  :mk-clause               800
;  :num-allocs              10372284
;  :num-checks              1370
;  :propagations            508
;  :quant-instantiations    199
;  :rlimit-count            456518)
; [eval] -2
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
(push) ; 12
; Loop head block: Establish invariant
(declare-const $k@329@08 $Perm)
(assert ($Perm.isReadVar $k@329@08 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@329@08 $Perm.No) (< $Perm.No $k@329@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18885
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      577
;  :arith-assert-upper      582
;  :arith-conflicts         243
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1091
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7047
;  :mk-clause               802
;  :num-allocs              10372284
;  :num-checks              1371
;  :propagations            509
;  :quant-instantiations    199
;  :rlimit-count            456721)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@228@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18885
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      577
;  :arith-assert-upper      582
;  :arith-conflicts         243
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         242
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               1091
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7047
;  :mk-clause               802
;  :num-allocs              10372284
;  :num-checks              1372
;  :propagations            509
;  :quant-instantiations    199
;  :rlimit-count            456732)
(assert (< $k@329@08 $k@228@08))
(assert (<= $Perm.No (- $k@228@08 $k@329@08)))
(assert (<= (- $k@228@08 $k@329@08) $Perm.Write))
(assert (implies (< $Perm.No (- $k@228@08 $k@329@08)) (not (= diz@47@08 $Ref.null))))
; [eval] diz.CASR_m != null
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18885
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      579
;  :arith-assert-upper      583
;  :arith-conflicts         243
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1092
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7050
;  :mk-clause               802
;  :num-allocs              10372284
;  :num-checks              1373
;  :propagations            509
;  :quant-instantiations    199
;  :rlimit-count            456946)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18885
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      579
;  :arith-assert-upper      583
;  :arith-conflicts         243
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1093
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7050
;  :mk-clause               802
;  :num-allocs              10372284
;  :num-checks              1374
;  :propagations            509
;  :quant-instantiations    199
;  :rlimit-count            456994)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18885
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      579
;  :arith-assert-upper      583
;  :arith-conflicts         243
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1094
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7050
;  :mk-clause               802
;  :num-allocs              10372284
;  :num-checks              1375
;  :propagations            509
;  :quant-instantiations    199
;  :rlimit-count            457042)
; [eval] |diz.CASR_m.Main_process_state| == 3
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18885
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      579
;  :arith-assert-upper      583
;  :arith-conflicts         243
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1095
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7050
;  :mk-clause               802
;  :num-allocs              10372284
;  :num-checks              1376
;  :propagations            509
;  :quant-instantiations    199
;  :rlimit-count            457090)
(set-option :timeout 0)
(push) ; 13
(assert (not (= (Seq_length __flatten_65__97@317@08) 3)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18885
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      579
;  :arith-assert-upper      583
;  :arith-conflicts         243
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1096
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7053
;  :mk-clause               802
;  :num-allocs              10372284
;  :num-checks              1377
;  :propagations            509
;  :quant-instantiations    199
;  :rlimit-count            457164)
(assert (= (Seq_length __flatten_65__97@317@08) 3))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18886
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      580
;  :arith-assert-upper      584
;  :arith-conflicts         243
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1097
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7056
;  :mk-clause               802
;  :num-allocs              10372284
;  :num-checks              1378
;  :propagations            509
;  :quant-instantiations    199
;  :rlimit-count            457263)
; [eval] |diz.CASR_m.Main_event_state| == 6
; [eval] |diz.CASR_m.Main_event_state|
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18886
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      580
;  :arith-assert-upper      584
;  :arith-conflicts         243
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1098
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7056
;  :mk-clause               802
;  :num-allocs              10372284
;  :num-checks              1379
;  :propagations            509
;  :quant-instantiations    199
;  :rlimit-count            457311)
(set-option :timeout 0)
(push) ; 13
(assert (not (= (Seq_length __flatten_68__100@320@08) 6)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18886
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      580
;  :arith-assert-upper      584
;  :arith-conflicts         243
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1099
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7059
;  :mk-clause               802
;  :num-allocs              10372284
;  :num-checks              1380
;  :propagations            509
;  :quant-instantiations    199
;  :rlimit-count            457385)
(assert (= (Seq_length __flatten_68__100@320@08) 6))
; [eval] (forall i__104: Int :: { diz.CASR_m.Main_process_state[i__104] } 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|)
(declare-const i__104@330@08 Int)
(push) ; 13
; [eval] 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state|
; [eval] 0 <= i__104
(push) ; 14
; [then-branch: 79 | 0 <= i__104@330@08 | live]
; [else-branch: 79 | !(0 <= i__104@330@08) | live]
(push) ; 15
; [then-branch: 79 | 0 <= i__104@330@08]
(assert (<= 0 i__104@330@08))
; [eval] i__104 < |diz.CASR_m.Main_process_state|
; [eval] |diz.CASR_m.Main_process_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18887
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      582
;  :arith-assert-upper      585
;  :arith-conflicts         243
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1100
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7063
;  :mk-clause               802
;  :num-allocs              10372284
;  :num-checks              1381
;  :propagations            509
;  :quant-instantiations    199
;  :rlimit-count            457536)
(pop) ; 15
(push) ; 15
; [else-branch: 79 | !(0 <= i__104@330@08)]
(assert (not (<= 0 i__104@330@08)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 80 | i__104@330@08 < |__flatten_65__97@317@08| && 0 <= i__104@330@08 | live]
; [else-branch: 80 | !(i__104@330@08 < |__flatten_65__97@317@08| && 0 <= i__104@330@08) | live]
(push) ; 15
; [then-branch: 80 | i__104@330@08 < |__flatten_65__97@317@08| && 0 <= i__104@330@08]
(assert (and (< i__104@330@08 (Seq_length __flatten_65__97@317@08)) (<= 0 i__104@330@08)))
; [eval] diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__104] == -1
; [eval] diz.CASR_m.Main_process_state[i__104]
(push) ; 16
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18887
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      583
;  :arith-assert-upper      586
;  :arith-conflicts         243
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1101
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7065
;  :mk-clause               802
;  :num-allocs              10372284
;  :num-checks              1382
;  :propagations            509
;  :quant-instantiations    199
;  :rlimit-count            457693)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__104@330@08 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18887
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      583
;  :arith-assert-upper      586
;  :arith-conflicts         243
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1101
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7065
;  :mk-clause               802
;  :num-allocs              10372284
;  :num-checks              1383
;  :propagations            509
;  :quant-instantiations    199
;  :rlimit-count            457702)
; [eval] -1
(push) ; 16
; [then-branch: 81 | __flatten_65__97@317@08[i__104@330@08] == -1 | live]
; [else-branch: 81 | __flatten_65__97@317@08[i__104@330@08] != -1 | live]
(push) ; 17
; [then-branch: 81 | __flatten_65__97@317@08[i__104@330@08] == -1]
(assert (= (Seq_index __flatten_65__97@317@08 i__104@330@08) (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 81 | __flatten_65__97@317@08[i__104@330@08] != -1]
(assert (not (= (Seq_index __flatten_65__97@317@08 i__104@330@08) (- 0 1))))
; [eval] 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= diz.CASR_m.Main_process_state[i__104]
; [eval] diz.CASR_m.Main_process_state[i__104]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18888
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      583
;  :arith-assert-upper      586
;  :arith-conflicts         243
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1102
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7072
;  :mk-clause               810
;  :num-allocs              10372284
;  :num-checks              1384
;  :propagations            509
;  :quant-instantiations    200
;  :rlimit-count            457902)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__104@330@08 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18888
;  :arith-add-rows          79
;  :arith-assert-diseq      174
;  :arith-assert-lower      583
;  :arith-assert-upper      586
;  :arith-conflicts         243
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1102
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7072
;  :mk-clause               810
;  :num-allocs              10372284
;  :num-checks              1385
;  :propagations            509
;  :quant-instantiations    200
;  :rlimit-count            457911)
(push) ; 18
; [then-branch: 82 | 0 <= __flatten_65__97@317@08[i__104@330@08] | live]
; [else-branch: 82 | !(0 <= __flatten_65__97@317@08[i__104@330@08]) | live]
(push) ; 19
; [then-branch: 82 | 0 <= __flatten_65__97@317@08[i__104@330@08]]
(assert (<= 0 (Seq_index __flatten_65__97@317@08 i__104@330@08)))
; [eval] diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__104]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18888
;  :arith-add-rows          79
;  :arith-assert-diseq      175
;  :arith-assert-lower      586
;  :arith-assert-upper      586
;  :arith-conflicts         243
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1103
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7075
;  :mk-clause               811
;  :num-allocs              10372284
;  :num-checks              1386
;  :propagations            509
;  :quant-instantiations    200
;  :rlimit-count            458024)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__104@330@08 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18888
;  :arith-add-rows          79
;  :arith-assert-diseq      175
;  :arith-assert-lower      586
;  :arith-assert-upper      586
;  :arith-conflicts         243
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1103
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7075
;  :mk-clause               811
;  :num-allocs              10372284
;  :num-checks              1387
;  :propagations            509
;  :quant-instantiations    200
;  :rlimit-count            458033)
; [eval] |diz.CASR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18888
;  :arith-add-rows          79
;  :arith-assert-diseq      175
;  :arith-assert-lower      586
;  :arith-assert-upper      586
;  :arith-conflicts         243
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         242
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1104
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5111
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4937
;  :del-clause              699
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7075
;  :mk-clause               811
;  :num-allocs              10372284
;  :num-checks              1388
;  :propagations            509
;  :quant-instantiations    200
;  :rlimit-count            458081)
(pop) ; 19
(push) ; 19
; [else-branch: 82 | !(0 <= __flatten_65__97@317@08[i__104@330@08])]
(assert (not (<= 0 (Seq_index __flatten_65__97@317@08 i__104@330@08))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 80 | !(i__104@330@08 < |__flatten_65__97@317@08| && 0 <= i__104@330@08)]
(assert (not
  (and
    (< i__104@330@08 (Seq_length __flatten_65__97@317@08))
    (<= 0 i__104@330@08))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 13
(assert (not (forall ((i__104@330@08 Int)) (!
  (implies
    (and
      (< i__104@330@08 (Seq_length __flatten_65__97@317@08))
      (<= 0 i__104@330@08))
    (or
      (= (Seq_index __flatten_65__97@317@08 i__104@330@08) (- 0 1))
      (and
        (<
          (Seq_index __flatten_65__97@317@08 i__104@330@08)
          (Seq_length __flatten_68__100@320@08))
        (<= 0 (Seq_index __flatten_65__97@317@08 i__104@330@08)))))
  :pattern ((Seq_index __flatten_65__97@317@08 i__104@330@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      181
;  :arith-assert-lower      602
;  :arith-assert-upper      595
;  :arith-conflicts         245
;  :arith-eq-adapter        265
;  :arith-fixed-eqs         244
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               1110
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7112
;  :mk-clause               858
;  :num-allocs              10372284
;  :num-checks              1389
;  :propagations            539
;  :quant-instantiations    203
;  :rlimit-count            458707)
(assert (forall ((i__104@330@08 Int)) (!
  (implies
    (and
      (< i__104@330@08 (Seq_length __flatten_65__97@317@08))
      (<= 0 i__104@330@08))
    (or
      (= (Seq_index __flatten_65__97@317@08 i__104@330@08) (- 0 1))
      (and
        (<
          (Seq_index __flatten_65__97@317@08 i__104@330@08)
          (Seq_length __flatten_68__100@320@08))
        (<= 0 (Seq_index __flatten_65__97@317@08 i__104@330@08)))))
  :pattern ((Seq_index __flatten_65__97@317@08 i__104@330@08))
  :qid |prog.l<no position>|)))
(declare-const $k@331@08 $Perm)
(assert ($Perm.isReadVar $k@331@08 $Perm.Write))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      604
;  :arith-assert-upper      596
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               1111
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7117
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1390
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459175)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@331@08 $Perm.No) (< $Perm.No $k@331@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      604
;  :arith-assert-upper      596
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               1112
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7117
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1391
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459225)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@230@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      604
;  :arith-assert-upper      596
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               1112
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7117
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1392
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459236)
(assert (< $k@331@08 $k@230@08))
(assert (<= $Perm.No (- $k@230@08 $k@331@08)))
(assert (<= (- $k@230@08 $k@331@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@230@08 $k@331@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1113
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1393
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459450)
(push) ; 13
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1114
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1394
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459498)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1115
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1395
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459546)
(push) ; 13
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1116
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1396
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459594)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1117
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1397
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459642)
(push) ; 13
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1118
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1398
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459690)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1119
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1399
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459738)
(push) ; 13
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1120
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1400
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459786)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1121
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1401
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459834)
(push) ; 13
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1122
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1402
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459882)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1123
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1403
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459930)
(push) ; 13
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1124
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1404
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            459978)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1125
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1405
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            460026)
(push) ; 13
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1126
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1406
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            460074)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1127
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1407
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            460122)
(push) ; 13
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1128
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1408
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            460170)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1129
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1409
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            460218)
(push) ; 13
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1130
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1410
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            460266)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1131
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1411
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            460314)
(push) ; 13
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1132
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1412
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            460362)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1133
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1413
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            460410)
(push) ; 13
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      182
;  :arith-assert-lower      606
;  :arith-assert-upper      597
;  :arith-conflicts         245
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1134
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7120
;  :mk-clause               860
;  :num-allocs              10372284
;  :num-checks              1414
;  :propagations            540
;  :quant-instantiations    203
;  :rlimit-count            460458)
(declare-const $k@332@08 $Perm)
(assert ($Perm.isReadVar $k@332@08 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      608
;  :arith-assert-upper      598
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1135
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7124
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1415
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            460654)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@332@08 $Perm.No) (< $Perm.No $k@332@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      608
;  :arith-assert-upper      598
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1136
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7124
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1416
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            460704)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@231@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      608
;  :arith-assert-upper      598
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               1136
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7124
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1417
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            460715)
(assert (< $k@332@08 $k@231@08))
(assert (<= $Perm.No (- $k@231@08 $k@332@08)))
(assert (<= (- $k@231@08 $k@332@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@231@08 $k@332@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1137
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1418
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            460929)
(push) ; 13
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1138
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1419
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            460977)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1139
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1420
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461025)
(push) ; 13
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1140
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1421
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461073)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1141
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1422
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461121)
(push) ; 13
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1142
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1423
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461169)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1143
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1424
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461217)
(push) ; 13
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1144
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1425
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461265)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1145
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1426
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461313)
(push) ; 13
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1146
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1427
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461361)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1147
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1428
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461409)
(push) ; 13
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1148
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1429
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461457)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1149
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1430
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461505)
(push) ; 13
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1150
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1431
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461553)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1151
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1432
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461601)
(push) ; 13
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      183
;  :arith-assert-lower      610
;  :arith-assert-upper      599
;  :arith-conflicts         245
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1152
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7127
;  :mk-clause               862
;  :num-allocs              10372284
;  :num-checks              1433
;  :propagations            541
;  :quant-instantiations    203
;  :rlimit-count            461649)
(declare-const $k@333@08 $Perm)
(assert ($Perm.isReadVar $k@333@08 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      184
;  :arith-assert-lower      612
;  :arith-assert-upper      600
;  :arith-conflicts         245
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1153
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7131
;  :mk-clause               864
;  :num-allocs              10372284
;  :num-checks              1434
;  :propagations            542
;  :quant-instantiations    203
;  :rlimit-count            461846)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@333@08 $Perm.No) (< $Perm.No $k@333@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      184
;  :arith-assert-lower      612
;  :arith-assert-upper      600
;  :arith-conflicts         245
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1154
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7131
;  :mk-clause               864
;  :num-allocs              10372284
;  :num-checks              1435
;  :propagations            542
;  :quant-instantiations    203
;  :rlimit-count            461896)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@232@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      184
;  :arith-assert-lower      612
;  :arith-assert-upper      600
;  :arith-conflicts         245
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1154
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7131
;  :mk-clause               864
;  :num-allocs              10372284
;  :num-checks              1436
;  :propagations            542
;  :quant-instantiations    203
;  :rlimit-count            461907)
(assert (< $k@333@08 $k@232@08))
(assert (<= $Perm.No (- $k@232@08 $k@333@08)))
(assert (<= (- $k@232@08 $k@333@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@232@08 $k@333@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      184
;  :arith-assert-lower      614
;  :arith-assert-upper      601
;  :arith-conflicts         245
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1155
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7134
;  :mk-clause               864
;  :num-allocs              10372284
;  :num-checks              1437
;  :propagations            542
;  :quant-instantiations    203
;  :rlimit-count            462115)
(push) ; 13
(assert (not (< $Perm.No $k@232@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      184
;  :arith-assert-lower      614
;  :arith-assert-upper      601
;  :arith-conflicts         245
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1156
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7134
;  :mk-clause               864
;  :num-allocs              10372284
;  :num-checks              1438
;  :propagations            542
;  :quant-instantiations    203
;  :rlimit-count            462163)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      184
;  :arith-assert-lower      614
;  :arith-assert-upper      601
;  :arith-conflicts         245
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1157
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7134
;  :mk-clause               864
;  :num-allocs              10372284
;  :num-checks              1439
;  :propagations            542
;  :quant-instantiations    203
;  :rlimit-count            462211)
(push) ; 13
(assert (not (< $Perm.No $k@232@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      184
;  :arith-assert-lower      614
;  :arith-assert-upper      601
;  :arith-conflicts         245
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1158
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7134
;  :mk-clause               864
;  :num-allocs              10372284
;  :num-checks              1440
;  :propagations            542
;  :quant-instantiations    203
;  :rlimit-count            462259)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      184
;  :arith-assert-lower      614
;  :arith-assert-upper      601
;  :arith-conflicts         245
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1159
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7134
;  :mk-clause               864
;  :num-allocs              10372284
;  :num-checks              1441
;  :propagations            542
;  :quant-instantiations    203
;  :rlimit-count            462307)
(push) ; 13
(assert (not (< $Perm.No $k@232@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      184
;  :arith-assert-lower      614
;  :arith-assert-upper      601
;  :arith-conflicts         245
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1160
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7134
;  :mk-clause               864
;  :num-allocs              10372284
;  :num-checks              1442
;  :propagations            542
;  :quant-instantiations    203
;  :rlimit-count            462355)
(declare-const $k@334@08 $Perm)
(assert ($Perm.isReadVar $k@334@08 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      185
;  :arith-assert-lower      616
;  :arith-assert-upper      602
;  :arith-conflicts         245
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1161
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7138
;  :mk-clause               866
;  :num-allocs              10372284
;  :num-checks              1443
;  :propagations            543
;  :quant-instantiations    203
;  :rlimit-count            462551)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@334@08 $Perm.No) (< $Perm.No $k@334@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      185
;  :arith-assert-lower      616
;  :arith-assert-upper      602
;  :arith-conflicts         245
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1162
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7138
;  :mk-clause               866
;  :num-allocs              10372284
;  :num-checks              1444
;  :propagations            543
;  :quant-instantiations    203
;  :rlimit-count            462601)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@233@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      185
;  :arith-assert-lower      616
;  :arith-assert-upper      602
;  :arith-conflicts         245
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         244
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1162
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7138
;  :mk-clause               866
;  :num-allocs              10372284
;  :num-checks              1445
;  :propagations            543
;  :quant-instantiations    203
;  :rlimit-count            462612)
(assert (< $k@334@08 $k@233@08))
(assert (<= $Perm.No (- $k@233@08 $k@334@08)))
(assert (<= (- $k@233@08 $k@334@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@233@08 $k@334@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      185
;  :arith-assert-lower      618
;  :arith-assert-upper      603
;  :arith-conflicts         245
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1163
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7141
;  :mk-clause               866
;  :num-allocs              10372284
;  :num-checks              1446
;  :propagations            543
;  :quant-instantiations    203
;  :rlimit-count            462826)
(push) ; 13
(assert (not (< $Perm.No $k@233@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      185
;  :arith-assert-lower      618
;  :arith-assert-upper      603
;  :arith-conflicts         245
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1164
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7141
;  :mk-clause               866
;  :num-allocs              10372284
;  :num-checks              1447
;  :propagations            543
;  :quant-instantiations    203
;  :rlimit-count            462874)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      185
;  :arith-assert-lower      618
;  :arith-assert-upper      603
;  :arith-conflicts         245
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1165
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7141
;  :mk-clause               866
;  :num-allocs              10372284
;  :num-checks              1448
;  :propagations            543
;  :quant-instantiations    203
;  :rlimit-count            462922)
(push) ; 13
(assert (not (< $Perm.No $k@233@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      185
;  :arith-assert-lower      618
;  :arith-assert-upper      603
;  :arith-conflicts         245
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1166
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7141
;  :mk-clause               866
;  :num-allocs              10372284
;  :num-checks              1449
;  :propagations            543
;  :quant-instantiations    203
;  :rlimit-count            462970)
(declare-const $k@335@08 $Perm)
(assert ($Perm.isReadVar $k@335@08 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      186
;  :arith-assert-lower      620
;  :arith-assert-upper      604
;  :arith-conflicts         245
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1167
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7145
;  :mk-clause               868
;  :num-allocs              10372284
;  :num-checks              1450
;  :propagations            544
;  :quant-instantiations    203
;  :rlimit-count            463167)
(push) ; 13
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      186
;  :arith-assert-lower      620
;  :arith-assert-upper      604
;  :arith-conflicts         245
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1168
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7145
;  :mk-clause               868
;  :num-allocs              10372284
;  :num-checks              1451
;  :propagations            544
;  :quant-instantiations    203
;  :rlimit-count            463215)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@335@08 $Perm.No) (< $Perm.No $k@335@08))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      186
;  :arith-assert-lower      620
;  :arith-assert-upper      604
;  :arith-conflicts         245
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1169
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7145
;  :mk-clause               868
;  :num-allocs              10372284
;  :num-checks              1452
;  :propagations            544
;  :quant-instantiations    203
;  :rlimit-count            463265)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@234@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      186
;  :arith-assert-lower      620
;  :arith-assert-upper      604
;  :arith-conflicts         245
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1169
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7145
;  :mk-clause               868
;  :num-allocs              10372284
;  :num-checks              1453
;  :propagations            544
;  :quant-instantiations    203
;  :rlimit-count            463276)
(assert (< $k@335@08 $k@234@08))
(assert (<= $Perm.No (- $k@234@08 $k@335@08)))
(assert (<= (- $k@234@08 $k@335@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@234@08 $k@335@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn.Rng_m == diz.CASR_m
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      186
;  :arith-assert-lower      622
;  :arith-assert-upper      605
;  :arith-conflicts         245
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1170
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7148
;  :mk-clause               868
;  :num-allocs              10372284
;  :num-checks              1454
;  :propagations            544
;  :quant-instantiations    203
;  :rlimit-count            463484)
(push) ; 13
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      186
;  :arith-assert-lower      622
;  :arith-assert-upper      605
;  :arith-conflicts         245
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1171
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7148
;  :mk-clause               868
;  :num-allocs              10372284
;  :num-checks              1455
;  :propagations            544
;  :quant-instantiations    203
;  :rlimit-count            463532)
(push) ; 13
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      186
;  :arith-assert-lower      622
;  :arith-assert-upper      605
;  :arith-conflicts         245
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1172
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7148
;  :mk-clause               868
;  :num-allocs              10372284
;  :num-checks              1456
;  :propagations            544
;  :quant-instantiations    203
;  :rlimit-count            463580)
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      186
;  :arith-assert-lower      622
;  :arith-assert-upper      605
;  :arith-conflicts         245
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1173
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7148
;  :mk-clause               868
;  :num-allocs              10372284
;  :num-checks              1457
;  :propagations            544
;  :quant-instantiations    203
;  :rlimit-count            463628)
; [eval] diz.CASR_m.Main_rn_casr == diz
(push) ; 13
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      186
;  :arith-assert-lower      622
;  :arith-assert-upper      605
;  :arith-conflicts         245
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1174
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7148
;  :mk-clause               868
;  :num-allocs              10372284
;  :num-checks              1458
;  :propagations            544
;  :quant-instantiations    203
;  :rlimit-count            463676)
(push) ; 13
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18908
;  :arith-add-rows          79
;  :arith-assert-diseq      186
;  :arith-assert-lower      622
;  :arith-assert-upper      605
;  :arith-conflicts         245
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1175
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5113
;  :datatype-occurs-check   977
;  :datatype-splits         4287
;  :decisions               4942
;  :del-clause              755
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.85
;  :memory                  5.75
;  :mk-bool-var             7148
;  :mk-clause               868
;  :num-allocs              10372284
;  :num-checks              1459
;  :propagations            544
;  :quant-instantiations    203
;  :rlimit-count            463724)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 13
(assert ($Perm.isReadVar $k@322@08 $Perm.Write))
(assert ($Perm.isReadVar $k@324@08 $Perm.Write))
(assert ($Perm.isReadVar $k@325@08 $Perm.Write))
(assert ($Perm.isReadVar $k@326@08 $Perm.Write))
(assert ($Perm.isReadVar $k@327@08 $Perm.Write))
(assert ($Perm.isReadVar $k@328@08 $Perm.Write))
(assert (= $t@321@08 ($Snap.combine ($Snap.first $t@321@08) ($Snap.second $t@321@08))))
(assert (<= $Perm.No $k@322@08))
(assert (<= $k@322@08 $Perm.Write))
(assert (implies (< $Perm.No $k@322@08) (not (= diz@47@08 $Ref.null))))
(assert (=
  ($Snap.second $t@321@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@321@08))
    ($Snap.second ($Snap.second $t@321@08)))))
(assert (= ($Snap.first ($Snap.second $t@321@08)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@321@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@321@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@321@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))
  $Snap.unit))
(assert (forall ((i__104@323@08 Int)) (!
  (implies
    (and
      (<
        i__104@323@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
      (<= 0 i__104@323@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
          i__104@323@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
            i__104@323@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
            i__104@323@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    i__104@323@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))
(assert (<= $Perm.No $k@324@08))
(assert (<= $k@324@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@324@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))
(assert (<= $Perm.No $k@325@08))
(assert (<= $k@325@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@325@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@326@08))
(assert (<= $k@326@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@326@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@327@08))
(assert (<= $k@327@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@327@08)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@328@08))
(assert (<= $k@328@08 $Perm.Write))
(assert (implies
  (< $Perm.No $k@328@08)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
  diz@47@08))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_process_state[0] != -1
; [eval] diz.CASR_m.Main_process_state[0]
(push) ; 14
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20102
;  :arith-add-rows          79
;  :arith-assert-diseq      192
;  :arith-assert-lower      638
;  :arith-assert-upper      619
;  :arith-conflicts         245
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1177
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 5408
;  :datatype-occurs-check   1007
;  :datatype-splits         4505
;  :decisions               5229
;  :del-clause              769
;  :final-checks            179
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7467
;  :mk-clause               883
;  :num-allocs              11501047
;  :num-checks              1462
;  :propagations            557
;  :quant-instantiations    213
;  :rlimit-count            475151)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20102
;  :arith-add-rows          79
;  :arith-assert-diseq      192
;  :arith-assert-lower      638
;  :arith-assert-upper      619
;  :arith-conflicts         245
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1177
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 5408
;  :datatype-occurs-check   1007
;  :datatype-splits         4505
;  :decisions               5229
;  :del-clause              769
;  :final-checks            179
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7467
;  :mk-clause               883
;  :num-allocs              11501047
;  :num-checks              1463
;  :propagations            557
;  :quant-instantiations    213
;  :rlimit-count            475166)
; [eval] -1
(push) ; 14
; [then-branch: 83 | First:(Second:(Second:(Second:($t@321@08))))[0] != -1 | live]
; [else-branch: 83 | First:(Second:(Second:(Second:($t@321@08))))[0] == -1 | live]
(push) ; 15
; [then-branch: 83 | First:(Second:(Second:(Second:($t@321@08))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
      0)
    (- 0 1))))
(pop) ; 15
(push) ; 15
; [else-branch: 83 | First:(Second:(Second:(Second:($t@321@08))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    0)
  (- 0 1)))
; [eval] diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_event_state[1]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20103
;  :arith-add-rows          79
;  :arith-assert-diseq      192
;  :arith-assert-lower      638
;  :arith-assert-upper      619
;  :arith-conflicts         245
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1178
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 5408
;  :datatype-occurs-check   1007
;  :datatype-splits         4505
;  :decisions               5229
;  :del-clause              769
;  :final-checks            179
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7468
;  :mk-clause               883
;  :num-allocs              11501047
;  :num-checks              1464
;  :propagations            557
;  :quant-instantiations    213
;  :rlimit-count            475357)
(set-option :timeout 0)
(push) ; 16
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20103
;  :arith-add-rows          79
;  :arith-assert-diseq      192
;  :arith-assert-lower      638
;  :arith-assert-upper      619
;  :arith-conflicts         245
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1178
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 5408
;  :datatype-occurs-check   1007
;  :datatype-splits         4505
;  :decisions               5229
;  :del-clause              769
;  :final-checks            179
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7468
;  :mk-clause               883
;  :num-allocs              11501047
;  :num-checks              1465
;  :propagations            557
;  :quant-instantiations    213
;  :rlimit-count            475372)
; [eval] -2
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 14
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
          1)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20665
;  :arith-add-rows          79
;  :arith-assert-diseq      193
;  :arith-assert-lower      641
;  :arith-assert-upper      620
;  :arith-conflicts         245
;  :arith-eq-adapter        279
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1180
;  :datatype-accessor-ax    709
;  :datatype-constructor-ax 5572
;  :datatype-occurs-check   1028
;  :datatype-splits         4618
;  :decisions               5388
;  :del-clause              776
;  :final-checks            183
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7597
;  :mk-clause               890
;  :num-allocs              11878891
;  :num-checks              1466
;  :propagations            563
;  :quant-instantiations    214
;  :rlimit-count            478697
;  :time                    0.00)
(push) ; 14
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
        1)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      193
;  :arith-assert-lower      641
;  :arith-assert-upper      620
;  :arith-conflicts         245
;  :arith-eq-adapter        279
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1180
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              776
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7707
;  :mk-clause               890
;  :num-allocs              11878891
;  :num-checks              1467
;  :propagations            567
;  :quant-instantiations    214
;  :rlimit-count            481188
;  :time                    0.00)
; [then-branch: 84 | First:(Second:(Second:(Second:($t@321@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@321@08))))))[1] != -2 | live]
; [else-branch: 84 | !(First:(Second:(Second:(Second:($t@321@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@321@08))))))[1] != -2) | live]
(push) ; 14
; [then-branch: 84 | First:(Second:(Second:(Second:($t@321@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@321@08))))))[1] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
        1)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      193
;  :arith-assert-lower      641
;  :arith-assert-upper      620
;  :arith-conflicts         245
;  :arith-eq-adapter        279
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1181
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              776
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7709
;  :mk-clause               891
;  :num-allocs              11878891
;  :num-checks              1468
;  :propagations            567
;  :quant-instantiations    214
;  :rlimit-count            481466)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      193
;  :arith-assert-lower      641
;  :arith-assert-upper      620
;  :arith-conflicts         245
;  :arith-eq-adapter        279
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1182
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              776
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7709
;  :mk-clause               891
;  :num-allocs              11878891
;  :num-checks              1469
;  :propagations            567
;  :quant-instantiations    214
;  :rlimit-count            481514)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@336@08 Int)
(push) ; 15
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 16
; [then-branch: 85 | 0 <= i@336@08 | live]
; [else-branch: 85 | !(0 <= i@336@08) | live]
(push) ; 17
; [then-branch: 85 | 0 <= i@336@08]
(assert (<= 0 i@336@08))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 17
(push) ; 17
; [else-branch: 85 | !(0 <= i@336@08)]
(assert (not (<= 0 i@336@08)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 86 | i@336@08 < |First:(Second:(Second:(Second:($t@321@08))))| && 0 <= i@336@08 | live]
; [else-branch: 86 | !(i@336@08 < |First:(Second:(Second:(Second:($t@321@08))))| && 0 <= i@336@08) | live]
(push) ; 17
; [then-branch: 86 | i@336@08 < |First:(Second:(Second:(Second:($t@321@08))))| && 0 <= i@336@08]
(assert (and
  (<
    i@336@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
  (<= 0 i@336@08)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@336@08 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      193
;  :arith-assert-lower      642
;  :arith-assert-upper      621
;  :arith-conflicts         245
;  :arith-eq-adapter        279
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1182
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              776
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7711
;  :mk-clause               891
;  :num-allocs              11878891
;  :num-checks              1470
;  :propagations            567
;  :quant-instantiations    214
;  :rlimit-count            481650)
; [eval] -1
(push) ; 18
; [then-branch: 87 | First:(Second:(Second:(Second:($t@321@08))))[i@336@08] == -1 | live]
; [else-branch: 87 | First:(Second:(Second:(Second:($t@321@08))))[i@336@08] != -1 | live]
(push) ; 19
; [then-branch: 87 | First:(Second:(Second:(Second:($t@321@08))))[i@336@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    i@336@08)
  (- 0 1)))
(pop) ; 19
(push) ; 19
; [else-branch: 87 | First:(Second:(Second:(Second:($t@321@08))))[i@336@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
      i@336@08)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 20
(assert (not (>= i@336@08 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      194
;  :arith-assert-lower      645
;  :arith-assert-upper      622
;  :arith-conflicts         245
;  :arith-eq-adapter        280
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1182
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              776
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7717
;  :mk-clause               895
;  :num-allocs              11878891
;  :num-checks              1471
;  :propagations            569
;  :quant-instantiations    215
;  :rlimit-count            481882)
(push) ; 20
; [then-branch: 88 | 0 <= First:(Second:(Second:(Second:($t@321@08))))[i@336@08] | live]
; [else-branch: 88 | !(0 <= First:(Second:(Second:(Second:($t@321@08))))[i@336@08]) | live]
(push) ; 21
; [then-branch: 88 | 0 <= First:(Second:(Second:(Second:($t@321@08))))[i@336@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    i@336@08)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 22
(assert (not (>= i@336@08 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      194
;  :arith-assert-lower      645
;  :arith-assert-upper      622
;  :arith-conflicts         245
;  :arith-eq-adapter        280
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1182
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              776
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7717
;  :mk-clause               895
;  :num-allocs              11878891
;  :num-checks              1472
;  :propagations            569
;  :quant-instantiations    215
;  :rlimit-count            481996)
; [eval] |diz.Main_event_state|
(pop) ; 21
(push) ; 21
; [else-branch: 88 | !(0 <= First:(Second:(Second:(Second:($t@321@08))))[i@336@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
      i@336@08))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 86 | !(i@336@08 < |First:(Second:(Second:(Second:($t@321@08))))| && 0 <= i@336@08)]
(assert (not
  (and
    (<
      i@336@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
    (<= 0 i@336@08))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 15
(assert (not (forall ((i@336@08 Int)) (!
  (implies
    (and
      (<
        i@336@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
      (<= 0 i@336@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
          i@336@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
            i@336@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
            i@336@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    i@336@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      196
;  :arith-assert-lower      646
;  :arith-assert-upper      623
;  :arith-conflicts         245
;  :arith-eq-adapter        281
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1183
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7725
;  :mk-clause               909
;  :num-allocs              11878891
;  :num-checks              1473
;  :propagations            571
;  :quant-instantiations    216
;  :rlimit-count            482442)
(assert (forall ((i@336@08 Int)) (!
  (implies
    (and
      (<
        i@336@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
      (<= 0 i@336@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
          i@336@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
            i@336@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
            i@336@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    i@336@08))
  :qid |prog.l<no position>|)))
(declare-const $k@337@08 $Perm)
(assert ($Perm.isReadVar $k@337@08 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@337@08 $Perm.No) (< $Perm.No $k@337@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      197
;  :arith-assert-lower      648
;  :arith-assert-upper      624
;  :arith-conflicts         245
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1184
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7730
;  :mk-clause               911
;  :num-allocs              11878891
;  :num-checks              1474
;  :propagations            572
;  :quant-instantiations    216
;  :rlimit-count            483002)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= $k@324@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      197
;  :arith-assert-lower      648
;  :arith-assert-upper      624
;  :arith-conflicts         245
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         244
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               1184
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7730
;  :mk-clause               911
;  :num-allocs              11878891
;  :num-checks              1475
;  :propagations            572
;  :quant-instantiations    216
;  :rlimit-count            483013)
(assert (< $k@337@08 $k@324@08))
(assert (<= $Perm.No (- $k@324@08 $k@337@08)))
(assert (<= (- $k@324@08 $k@337@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@324@08 $k@337@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
; [eval] diz.Main_rn != null
(push) ; 15
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      197
;  :arith-assert-lower      650
;  :arith-assert-upper      625
;  :arith-conflicts         245
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         244
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               1185
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7733
;  :mk-clause               911
;  :num-allocs              11878891
;  :num-checks              1476
;  :propagations            572
;  :quant-instantiations    216
;  :rlimit-count            483233)
(push) ; 15
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      197
;  :arith-assert-lower      650
;  :arith-assert-upper      625
;  :arith-conflicts         245
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         244
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               1186
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7733
;  :mk-clause               911
;  :num-allocs              11878891
;  :num-checks              1477
;  :propagations            572
;  :quant-instantiations    216
;  :rlimit-count            483281)
(push) ; 15
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      197
;  :arith-assert-lower      650
;  :arith-assert-upper      625
;  :arith-conflicts         245
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         244
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               1187
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7733
;  :mk-clause               911
;  :num-allocs              11878891
;  :num-checks              1478
;  :propagations            572
;  :quant-instantiations    216
;  :rlimit-count            483329)
(push) ; 15
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      197
;  :arith-assert-lower      650
;  :arith-assert-upper      625
;  :arith-conflicts         245
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         244
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               1188
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7733
;  :mk-clause               911
;  :num-allocs              11878891
;  :num-checks              1479
;  :propagations            572
;  :quant-instantiations    216
;  :rlimit-count            483377)
(push) ; 15
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      197
;  :arith-assert-lower      650
;  :arith-assert-upper      625
;  :arith-conflicts         245
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         244
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               1189
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7733
;  :mk-clause               911
;  :num-allocs              11878891
;  :num-checks              1480
;  :propagations            572
;  :quant-instantiations    216
;  :rlimit-count            483425)
(push) ; 15
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      197
;  :arith-assert-lower      650
;  :arith-assert-upper      625
;  :arith-conflicts         245
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         244
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               1190
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7733
;  :mk-clause               911
;  :num-allocs              11878891
;  :num-checks              1481
;  :propagations            572
;  :quant-instantiations    216
;  :rlimit-count            483473)
(push) ; 15
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      197
;  :arith-assert-lower      650
;  :arith-assert-upper      625
;  :arith-conflicts         245
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         244
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               1191
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7733
;  :mk-clause               911
;  :num-allocs              11878891
;  :num-checks              1482
;  :propagations            572
;  :quant-instantiations    216
;  :rlimit-count            483521)
(push) ; 15
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      197
;  :arith-assert-lower      650
;  :arith-assert-upper      625
;  :arith-conflicts         245
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         244
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               1192
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7733
;  :mk-clause               911
;  :num-allocs              11878891
;  :num-checks              1483
;  :propagations            572
;  :quant-instantiations    216
;  :rlimit-count            483569)
(push) ; 15
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      197
;  :arith-assert-lower      650
;  :arith-assert-upper      625
;  :arith-conflicts         245
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         244
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               1193
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7733
;  :mk-clause               911
;  :num-allocs              11878891
;  :num-checks              1484
;  :propagations            572
;  :quant-instantiations    216
;  :rlimit-count            483617)
(push) ; 15
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      197
;  :arith-assert-lower      650
;  :arith-assert-upper      625
;  :arith-conflicts         245
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         244
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               1194
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7733
;  :mk-clause               911
;  :num-allocs              11878891
;  :num-checks              1485
;  :propagations            572
;  :quant-instantiations    216
;  :rlimit-count            483665)
(push) ; 15
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      197
;  :arith-assert-lower      650
;  :arith-assert-upper      625
;  :arith-conflicts         245
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         244
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               1195
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7733
;  :mk-clause               911
;  :num-allocs              11878891
;  :num-checks              1486
;  :propagations            572
;  :quant-instantiations    216
;  :rlimit-count            483713)
(declare-const $k@338@08 $Perm)
(assert ($Perm.isReadVar $k@338@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@338@08 $Perm.No) (< $Perm.No $k@338@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      198
;  :arith-assert-lower      652
;  :arith-assert-upper      626
;  :arith-conflicts         245
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         244
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               1196
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7737
;  :mk-clause               913
;  :num-allocs              11878891
;  :num-checks              1487
;  :propagations            573
;  :quant-instantiations    216
;  :rlimit-count            483911)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= $k@325@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      198
;  :arith-assert-lower      652
;  :arith-assert-upper      626
;  :arith-conflicts         245
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         244
;  :arith-pivots            153
;  :binary-propagations     22
;  :conflicts               1196
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7737
;  :mk-clause               913
;  :num-allocs              11878891
;  :num-checks              1488
;  :propagations            573
;  :quant-instantiations    216
;  :rlimit-count            483922)
(assert (< $k@338@08 $k@325@08))
(assert (<= $Perm.No (- $k@325@08 $k@338@08)))
(assert (<= (- $k@325@08 $k@338@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@325@08 $k@338@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
; [eval] diz.Main_rn_casr != null
(push) ; 15
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      198
;  :arith-assert-lower      654
;  :arith-assert-upper      627
;  :arith-conflicts         245
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         244
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1197
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7740
;  :mk-clause               913
;  :num-allocs              11878891
;  :num-checks              1489
;  :propagations            573
;  :quant-instantiations    216
;  :rlimit-count            484142)
(push) ; 15
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      198
;  :arith-assert-lower      654
;  :arith-assert-upper      627
;  :arith-conflicts         245
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         244
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1198
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7740
;  :mk-clause               913
;  :num-allocs              11878891
;  :num-checks              1490
;  :propagations            573
;  :quant-instantiations    216
;  :rlimit-count            484190)
(push) ; 15
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      198
;  :arith-assert-lower      654
;  :arith-assert-upper      627
;  :arith-conflicts         245
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         244
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1199
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7740
;  :mk-clause               913
;  :num-allocs              11878891
;  :num-checks              1491
;  :propagations            573
;  :quant-instantiations    216
;  :rlimit-count            484238)
(push) ; 15
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      198
;  :arith-assert-lower      654
;  :arith-assert-upper      627
;  :arith-conflicts         245
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         244
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1200
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7740
;  :mk-clause               913
;  :num-allocs              11878891
;  :num-checks              1492
;  :propagations            573
;  :quant-instantiations    216
;  :rlimit-count            484286)
(push) ; 15
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      198
;  :arith-assert-lower      654
;  :arith-assert-upper      627
;  :arith-conflicts         245
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         244
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1201
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7740
;  :mk-clause               913
;  :num-allocs              11878891
;  :num-checks              1493
;  :propagations            573
;  :quant-instantiations    216
;  :rlimit-count            484334)
(push) ; 15
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      198
;  :arith-assert-lower      654
;  :arith-assert-upper      627
;  :arith-conflicts         245
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         244
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1202
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7740
;  :mk-clause               913
;  :num-allocs              11878891
;  :num-checks              1494
;  :propagations            573
;  :quant-instantiations    216
;  :rlimit-count            484382)
(push) ; 15
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      198
;  :arith-assert-lower      654
;  :arith-assert-upper      627
;  :arith-conflicts         245
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         244
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1203
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7740
;  :mk-clause               913
;  :num-allocs              11878891
;  :num-checks              1495
;  :propagations            573
;  :quant-instantiations    216
;  :rlimit-count            484430)
(push) ; 15
(assert (not (< $Perm.No $k@325@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      198
;  :arith-assert-lower      654
;  :arith-assert-upper      627
;  :arith-conflicts         245
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         244
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1204
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7740
;  :mk-clause               913
;  :num-allocs              11878891
;  :num-checks              1496
;  :propagations            573
;  :quant-instantiations    216
;  :rlimit-count            484478)
(declare-const $k@339@08 $Perm)
(assert ($Perm.isReadVar $k@339@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@339@08 $Perm.No) (< $Perm.No $k@339@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      199
;  :arith-assert-lower      656
;  :arith-assert-upper      628
;  :arith-conflicts         245
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         244
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1205
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7744
;  :mk-clause               915
;  :num-allocs              11878891
;  :num-checks              1497
;  :propagations            574
;  :quant-instantiations    216
;  :rlimit-count            484676)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= $k@326@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      199
;  :arith-assert-lower      656
;  :arith-assert-upper      628
;  :arith-conflicts         245
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         244
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1205
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7744
;  :mk-clause               915
;  :num-allocs              11878891
;  :num-checks              1498
;  :propagations            574
;  :quant-instantiations    216
;  :rlimit-count            484687)
(assert (< $k@339@08 $k@326@08))
(assert (<= $Perm.No (- $k@326@08 $k@339@08)))
(assert (<= (- $k@326@08 $k@339@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@326@08 $k@339@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
; [eval] diz.Main_rn_lfsr != null
(push) ; 15
(assert (not (< $Perm.No $k@326@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      199
;  :arith-assert-lower      658
;  :arith-assert-upper      629
;  :arith-conflicts         245
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         244
;  :arith-pivots            157
;  :binary-propagations     22
;  :conflicts               1206
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7747
;  :mk-clause               915
;  :num-allocs              11878891
;  :num-checks              1499
;  :propagations            574
;  :quant-instantiations    216
;  :rlimit-count            484907)
(push) ; 15
(assert (not (< $Perm.No $k@326@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      199
;  :arith-assert-lower      658
;  :arith-assert-upper      629
;  :arith-conflicts         245
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         244
;  :arith-pivots            157
;  :binary-propagations     22
;  :conflicts               1207
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7747
;  :mk-clause               915
;  :num-allocs              11878891
;  :num-checks              1500
;  :propagations            574
;  :quant-instantiations    216
;  :rlimit-count            484955)
(push) ; 15
(assert (not (< $Perm.No $k@326@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      199
;  :arith-assert-lower      658
;  :arith-assert-upper      629
;  :arith-conflicts         245
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         244
;  :arith-pivots            157
;  :binary-propagations     22
;  :conflicts               1208
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7747
;  :mk-clause               915
;  :num-allocs              11878891
;  :num-checks              1501
;  :propagations            574
;  :quant-instantiations    216
;  :rlimit-count            485003)
(declare-const $k@340@08 $Perm)
(assert ($Perm.isReadVar $k@340@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@340@08 $Perm.No) (< $Perm.No $k@340@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      200
;  :arith-assert-lower      660
;  :arith-assert-upper      630
;  :arith-conflicts         245
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         244
;  :arith-pivots            157
;  :binary-propagations     22
;  :conflicts               1209
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7751
;  :mk-clause               917
;  :num-allocs              11878891
;  :num-checks              1502
;  :propagations            575
;  :quant-instantiations    216
;  :rlimit-count            485202)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= $k@327@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      200
;  :arith-assert-lower      660
;  :arith-assert-upper      630
;  :arith-conflicts         245
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         244
;  :arith-pivots            157
;  :binary-propagations     22
;  :conflicts               1209
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7751
;  :mk-clause               917
;  :num-allocs              11878891
;  :num-checks              1503
;  :propagations            575
;  :quant-instantiations    216
;  :rlimit-count            485213)
(assert (< $k@340@08 $k@327@08))
(assert (<= $Perm.No (- $k@327@08 $k@340@08)))
(assert (<= (- $k@327@08 $k@340@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@327@08 $k@340@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
; [eval] diz.Main_rn_combinate != null
(push) ; 15
(assert (not (< $Perm.No $k@327@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      200
;  :arith-assert-lower      662
;  :arith-assert-upper      631
;  :arith-conflicts         245
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         244
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1210
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7754
;  :mk-clause               917
;  :num-allocs              11878891
;  :num-checks              1504
;  :propagations            575
;  :quant-instantiations    216
;  :rlimit-count            485427)
(push) ; 15
(assert (not (< $Perm.No $k@327@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      200
;  :arith-assert-lower      662
;  :arith-assert-upper      631
;  :arith-conflicts         245
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         244
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1211
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7754
;  :mk-clause               917
;  :num-allocs              11878891
;  :num-checks              1505
;  :propagations            575
;  :quant-instantiations    216
;  :rlimit-count            485475)
(declare-const $k@341@08 $Perm)
(assert ($Perm.isReadVar $k@341@08 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      201
;  :arith-assert-lower      664
;  :arith-assert-upper      632
;  :arith-conflicts         245
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         244
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1212
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7758
;  :mk-clause               919
;  :num-allocs              11878891
;  :num-checks              1506
;  :propagations            576
;  :quant-instantiations    216
;  :rlimit-count            485671)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@341@08 $Perm.No) (< $Perm.No $k@341@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      201
;  :arith-assert-lower      664
;  :arith-assert-upper      632
;  :arith-conflicts         245
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         244
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1213
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7758
;  :mk-clause               919
;  :num-allocs              11878891
;  :num-checks              1507
;  :propagations            576
;  :quant-instantiations    216
;  :rlimit-count            485721)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= $k@328@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      201
;  :arith-assert-lower      664
;  :arith-assert-upper      632
;  :arith-conflicts         245
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         244
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1213
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7758
;  :mk-clause               919
;  :num-allocs              11878891
;  :num-checks              1508
;  :propagations            576
;  :quant-instantiations    216
;  :rlimit-count            485732)
(assert (< $k@341@08 $k@328@08))
(assert (<= $Perm.No (- $k@328@08 $k@341@08)))
(assert (<= (- $k@328@08 $k@341@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@328@08 $k@341@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
      $Ref.null))))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 15
(assert (not (< $Perm.No $k@324@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      201
;  :arith-assert-lower      666
;  :arith-assert-upper      633
;  :arith-conflicts         245
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         244
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1214
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7761
;  :mk-clause               919
;  :num-allocs              11878891
;  :num-checks              1509
;  :propagations            576
;  :quant-instantiations    216
;  :rlimit-count            485946)
(push) ; 15
(assert (not (< $Perm.No $k@328@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21044
;  :arith-add-rows          79
;  :arith-assert-diseq      201
;  :arith-assert-lower      666
;  :arith-assert-upper      633
;  :arith-conflicts         245
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         244
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1215
;  :datatype-accessor-ax    713
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7761
;  :mk-clause               919
;  :num-allocs              11878891
;  :num-checks              1510
;  :propagations            576
;  :quant-instantiations    216
;  :rlimit-count            485994)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))
                                                          ($Snap.combine
                                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              ($Snap.combine
                                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))
                                                                ($Snap.combine
                                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))
                                                                  ($Snap.combine
                                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))
                                                                    ($Snap.combine
                                                                      $Snap.unit
                                                                      ($Snap.combine
                                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))
                                                                        ($Snap.combine
                                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))))
                                                                          $Snap.unit))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) __globals@48@08))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21118
;  :arith-add-rows          79
;  :arith-assert-diseq      201
;  :arith-assert-lower      666
;  :arith-assert-upper      633
;  :arith-conflicts         245
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         244
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1216
;  :datatype-accessor-ax    750
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7762
;  :mk-clause               919
;  :num-allocs              11878891
;  :num-checks              1511
;  :propagations            576
;  :quant-instantiations    216
;  :rlimit-count            487549)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21118
;  :arith-add-rows          79
;  :arith-assert-diseq      201
;  :arith-assert-lower      666
;  :arith-assert-upper      633
;  :arith-conflicts         245
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         244
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1217
;  :datatype-accessor-ax    750
;  :datatype-constructor-ax 5683
;  :datatype-occurs-check   1043
;  :datatype-splits         4727
;  :decisions               5495
;  :del-clause              794
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.78
;  :mk-bool-var             7762
;  :mk-clause               919
;  :num-allocs              11878891
;  :num-checks              1512
;  :propagations            576
;  :quant-instantiations    216
;  :rlimit-count            487597)
(declare-const $t@342@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21713
;  :arith-add-rows          79
;  :arith-assert-diseq      202
;  :arith-assert-lower      669
;  :arith-assert-upper      634
;  :arith-conflicts         245
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         244
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1220
;  :datatype-accessor-ax    756
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              808
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7889
;  :mk-clause               925
;  :num-allocs              12266759
;  :num-checks              1514
;  :propagations            582
;  :quant-instantiations    218
;  :rlimit-count            490804)
(assert (= $t@342@08 ($Snap.combine ($Snap.first $t@342@08) ($Snap.second $t@342@08))))
(assert (= ($Snap.first $t@342@08) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@342@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@342@08))
    ($Snap.second ($Snap.second $t@342@08)))))
(assert (= ($Snap.first ($Snap.second $t@342@08)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@342@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@342@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@342@08))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@342@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@343@08 Int)
(push) ; 15
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 16
; [then-branch: 89 | 0 <= i@343@08 | live]
; [else-branch: 89 | !(0 <= i@343@08) | live]
(push) ; 17
; [then-branch: 89 | 0 <= i@343@08]
(assert (<= 0 i@343@08))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 17
(push) ; 17
; [else-branch: 89 | !(0 <= i@343@08)]
(assert (not (<= 0 i@343@08)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 90 | i@343@08 < |First:(Second:(Second:(Second:($t@342@08))))| && 0 <= i@343@08 | live]
; [else-branch: 90 | !(i@343@08 < |First:(Second:(Second:(Second:($t@342@08))))| && 0 <= i@343@08) | live]
(push) ; 17
; [then-branch: 90 | i@343@08 < |First:(Second:(Second:(Second:($t@342@08))))| && 0 <= i@343@08]
(assert (and
  (<
    i@343@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))
  (<= 0 i@343@08)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@343@08 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21763
;  :arith-add-rows          79
;  :arith-assert-diseq      202
;  :arith-assert-lower      674
;  :arith-assert-upper      637
;  :arith-conflicts         245
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         244
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1220
;  :datatype-accessor-ax    764
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              808
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7915
;  :mk-clause               925
;  :num-allocs              12266759
;  :num-checks              1515
;  :propagations            582
;  :quant-instantiations    222
;  :rlimit-count            492108)
; [eval] -1
(push) ; 18
; [then-branch: 91 | First:(Second:(Second:(Second:($t@342@08))))[i@343@08] == -1 | live]
; [else-branch: 91 | First:(Second:(Second:(Second:($t@342@08))))[i@343@08] != -1 | live]
(push) ; 19
; [then-branch: 91 | First:(Second:(Second:(Second:($t@342@08))))[i@343@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
    i@343@08)
  (- 0 1)))
(pop) ; 19
(push) ; 19
; [else-branch: 91 | First:(Second:(Second:(Second:($t@342@08))))[i@343@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
      i@343@08)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 20
(assert (not (>= i@343@08 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21763
;  :arith-add-rows          79
;  :arith-assert-diseq      202
;  :arith-assert-lower      674
;  :arith-assert-upper      637
;  :arith-conflicts         245
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         244
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1220
;  :datatype-accessor-ax    764
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              808
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7916
;  :mk-clause               925
;  :num-allocs              12266759
;  :num-checks              1516
;  :propagations            582
;  :quant-instantiations    222
;  :rlimit-count            492283)
(push) ; 20
; [then-branch: 92 | 0 <= First:(Second:(Second:(Second:($t@342@08))))[i@343@08] | live]
; [else-branch: 92 | !(0 <= First:(Second:(Second:(Second:($t@342@08))))[i@343@08]) | live]
(push) ; 21
; [then-branch: 92 | 0 <= First:(Second:(Second:(Second:($t@342@08))))[i@343@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
    i@343@08)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 22
(assert (not (>= i@343@08 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21763
;  :arith-add-rows          79
;  :arith-assert-diseq      203
;  :arith-assert-lower      677
;  :arith-assert-upper      637
;  :arith-conflicts         245
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         244
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1220
;  :datatype-accessor-ax    764
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              808
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7919
;  :mk-clause               926
;  :num-allocs              12266759
;  :num-checks              1517
;  :propagations            582
;  :quant-instantiations    222
;  :rlimit-count            492406)
; [eval] |diz.Main_event_state|
(pop) ; 21
(push) ; 21
; [else-branch: 92 | !(0 <= First:(Second:(Second:(Second:($t@342@08))))[i@343@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
      i@343@08))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 90 | !(i@343@08 < |First:(Second:(Second:(Second:($t@342@08))))| && 0 <= i@343@08)]
(assert (not
  (and
    (<
      i@343@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))
    (<= 0 i@343@08))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@343@08 Int)) (!
  (implies
    (and
      (<
        i@343@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))
      (<= 0 i@343@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
          i@343@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
            i@343@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
            i@343@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
    i@343@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))
(declare-const $k@344@08 $Perm)
(assert ($Perm.isReadVar $k@344@08 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@344@08 $Perm.No) (< $Perm.No $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21768
;  :arith-add-rows          79
;  :arith-assert-diseq      204
;  :arith-assert-lower      679
;  :arith-assert-upper      638
;  :arith-conflicts         245
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         244
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1221
;  :datatype-accessor-ax    765
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7925
;  :mk-clause               928
;  :num-allocs              12266759
;  :num-checks              1518
;  :propagations            583
;  :quant-instantiations    222
;  :rlimit-count            493174)
(declare-const $t@345@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@324@08 $k@337@08))
    (=
      $t@345@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))
  (implies
    (< $Perm.No $k@344@08)
    (=
      $t@345@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))
(assert (<= $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08)))
(assert (<= (+ (- $k@324@08 $k@337@08) $k@344@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))
  $Snap.unit))
; [eval] diz.Main_rn != null
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21778
;  :arith-add-rows          80
;  :arith-assert-diseq      204
;  :arith-assert-lower      680
;  :arith-assert-upper      640
;  :arith-conflicts         246
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         245
;  :arith-pivots            160
;  :binary-propagations     22
;  :conflicts               1222
;  :datatype-accessor-ax    766
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7933
;  :mk-clause               928
;  :num-allocs              12266759
;  :num-checks              1519
;  :propagations            583
;  :quant-instantiations    223
;  :rlimit-count            493860)
(assert (not (= $t@345@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21784
;  :arith-add-rows          80
;  :arith-assert-diseq      204
;  :arith-assert-lower      680
;  :arith-assert-upper      641
;  :arith-conflicts         247
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         246
;  :arith-pivots            160
;  :binary-propagations     22
;  :conflicts               1223
;  :datatype-accessor-ax    767
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7936
;  :mk-clause               928
;  :num-allocs              12266759
;  :num-checks              1520
;  :propagations            583
;  :quant-instantiations    223
;  :rlimit-count            494184)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21789
;  :arith-add-rows          80
;  :arith-assert-diseq      204
;  :arith-assert-lower      680
;  :arith-assert-upper      642
;  :arith-conflicts         248
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         247
;  :arith-pivots            160
;  :binary-propagations     22
;  :conflicts               1224
;  :datatype-accessor-ax    768
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7938
;  :mk-clause               928
;  :num-allocs              12266759
;  :num-checks              1521
;  :propagations            583
;  :quant-instantiations    223
;  :rlimit-count            494473)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21794
;  :arith-add-rows          80
;  :arith-assert-diseq      204
;  :arith-assert-lower      680
;  :arith-assert-upper      643
;  :arith-conflicts         249
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         248
;  :arith-pivots            160
;  :binary-propagations     22
;  :conflicts               1225
;  :datatype-accessor-ax    769
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7940
;  :mk-clause               928
;  :num-allocs              12266759
;  :num-checks              1522
;  :propagations            583
;  :quant-instantiations    223
;  :rlimit-count            494772)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21799
;  :arith-add-rows          80
;  :arith-assert-diseq      204
;  :arith-assert-lower      680
;  :arith-assert-upper      644
;  :arith-conflicts         250
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         249
;  :arith-pivots            160
;  :binary-propagations     22
;  :conflicts               1226
;  :datatype-accessor-ax    770
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7942
;  :mk-clause               928
;  :num-allocs              12266759
;  :num-checks              1523
;  :propagations            583
;  :quant-instantiations    223
;  :rlimit-count            495081)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21804
;  :arith-add-rows          80
;  :arith-assert-diseq      204
;  :arith-assert-lower      680
;  :arith-assert-upper      645
;  :arith-conflicts         251
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         250
;  :arith-pivots            160
;  :binary-propagations     22
;  :conflicts               1227
;  :datatype-accessor-ax    771
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7944
;  :mk-clause               928
;  :num-allocs              12266759
;  :num-checks              1524
;  :propagations            583
;  :quant-instantiations    223
;  :rlimit-count            495400)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21809
;  :arith-add-rows          80
;  :arith-assert-diseq      204
;  :arith-assert-lower      680
;  :arith-assert-upper      646
;  :arith-conflicts         252
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         251
;  :arith-pivots            160
;  :binary-propagations     22
;  :conflicts               1228
;  :datatype-accessor-ax    772
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7946
;  :mk-clause               928
;  :num-allocs              12266759
;  :num-checks              1525
;  :propagations            583
;  :quant-instantiations    223
;  :rlimit-count            495729)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21814
;  :arith-add-rows          80
;  :arith-assert-diseq      204
;  :arith-assert-lower      680
;  :arith-assert-upper      647
;  :arith-conflicts         253
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         252
;  :arith-pivots            160
;  :binary-propagations     22
;  :conflicts               1229
;  :datatype-accessor-ax    773
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7948
;  :mk-clause               928
;  :num-allocs              12266759
;  :num-checks              1526
;  :propagations            583
;  :quant-instantiations    223
;  :rlimit-count            496068)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21819
;  :arith-add-rows          80
;  :arith-assert-diseq      204
;  :arith-assert-lower      680
;  :arith-assert-upper      648
;  :arith-conflicts         254
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         253
;  :arith-pivots            160
;  :binary-propagations     22
;  :conflicts               1230
;  :datatype-accessor-ax    774
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7950
;  :mk-clause               928
;  :num-allocs              12266759
;  :num-checks              1527
;  :propagations            583
;  :quant-instantiations    223
;  :rlimit-count            496417)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21824
;  :arith-add-rows          80
;  :arith-assert-diseq      204
;  :arith-assert-lower      680
;  :arith-assert-upper      649
;  :arith-conflicts         255
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         254
;  :arith-pivots            160
;  :binary-propagations     22
;  :conflicts               1231
;  :datatype-accessor-ax    775
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7952
;  :mk-clause               928
;  :num-allocs              12266759
;  :num-checks              1528
;  :propagations            583
;  :quant-instantiations    223
;  :rlimit-count            496776)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21829
;  :arith-add-rows          80
;  :arith-assert-diseq      204
;  :arith-assert-lower      680
;  :arith-assert-upper      650
;  :arith-conflicts         256
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         255
;  :arith-pivots            160
;  :binary-propagations     22
;  :conflicts               1232
;  :datatype-accessor-ax    776
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7954
;  :mk-clause               928
;  :num-allocs              12266759
;  :num-checks              1529
;  :propagations            583
;  :quant-instantiations    223
;  :rlimit-count            497145)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))
(declare-const $k@346@08 $Perm)
(assert ($Perm.isReadVar $k@346@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@346@08 $Perm.No) (< $Perm.No $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21834
;  :arith-add-rows          80
;  :arith-assert-diseq      205
;  :arith-assert-lower      682
;  :arith-assert-upper      651
;  :arith-conflicts         256
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         255
;  :arith-pivots            160
;  :binary-propagations     22
;  :conflicts               1233
;  :datatype-accessor-ax    777
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7959
;  :mk-clause               930
;  :num-allocs              12266759
;  :num-checks              1530
;  :propagations            584
;  :quant-instantiations    223
;  :rlimit-count            497635)
(declare-const $t@347@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@325@08 $k@338@08))
    (=
      $t@347@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@346@08)
    (=
      $t@347@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08)))
(assert (<= (+ (- $k@325@08 $k@338@08) $k@346@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.05s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21844
;  :arith-add-rows          81
;  :arith-assert-diseq      205
;  :arith-assert-lower      683
;  :arith-assert-upper      653
;  :arith-conflicts         257
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         256
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1234
;  :datatype-accessor-ax    778
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7967
;  :mk-clause               930
;  :num-allocs              12266759
;  :num-checks              1531
;  :propagations            584
;  :quant-instantiations    224
;  :rlimit-count            498365)
(assert (not (= $t@347@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21849
;  :arith-add-rows          81
;  :arith-assert-diseq      205
;  :arith-assert-lower      683
;  :arith-assert-upper      654
;  :arith-conflicts         258
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         257
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1235
;  :datatype-accessor-ax    779
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7969
;  :mk-clause               930
;  :num-allocs              12266759
;  :num-checks              1532
;  :propagations            584
;  :quant-instantiations    224
;  :rlimit-count            498782)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21854
;  :arith-add-rows          81
;  :arith-assert-diseq      205
;  :arith-assert-lower      683
;  :arith-assert-upper      655
;  :arith-conflicts         259
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         258
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1236
;  :datatype-accessor-ax    780
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7971
;  :mk-clause               930
;  :num-allocs              12266759
;  :num-checks              1533
;  :propagations            584
;  :quant-instantiations    224
;  :rlimit-count            499191)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21859
;  :arith-add-rows          81
;  :arith-assert-diseq      205
;  :arith-assert-lower      683
;  :arith-assert-upper      656
;  :arith-conflicts         260
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         259
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1237
;  :datatype-accessor-ax    781
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7973
;  :mk-clause               930
;  :num-allocs              12266759
;  :num-checks              1534
;  :propagations            584
;  :quant-instantiations    224
;  :rlimit-count            499610)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21864
;  :arith-add-rows          81
;  :arith-assert-diseq      205
;  :arith-assert-lower      683
;  :arith-assert-upper      657
;  :arith-conflicts         261
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         260
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1238
;  :datatype-accessor-ax    782
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7975
;  :mk-clause               930
;  :num-allocs              12266759
;  :num-checks              1535
;  :propagations            584
;  :quant-instantiations    224
;  :rlimit-count            500039)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21869
;  :arith-add-rows          81
;  :arith-assert-diseq      205
;  :arith-assert-lower      683
;  :arith-assert-upper      658
;  :arith-conflicts         262
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         261
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1239
;  :datatype-accessor-ax    783
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7977
;  :mk-clause               930
;  :num-allocs              12266759
;  :num-checks              1536
;  :propagations            584
;  :quant-instantiations    224
;  :rlimit-count            500478)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21874
;  :arith-add-rows          81
;  :arith-assert-diseq      205
;  :arith-assert-lower      683
;  :arith-assert-upper      659
;  :arith-conflicts         263
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         262
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1240
;  :datatype-accessor-ax    784
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7979
;  :mk-clause               930
;  :num-allocs              12266759
;  :num-checks              1537
;  :propagations            584
;  :quant-instantiations    224
;  :rlimit-count            500927)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21879
;  :arith-add-rows          81
;  :arith-assert-diseq      205
;  :arith-assert-lower      683
;  :arith-assert-upper      660
;  :arith-conflicts         264
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         263
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1241
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7981
;  :mk-clause               930
;  :num-allocs              12266759
;  :num-checks              1538
;  :propagations            584
;  :quant-instantiations    224
;  :rlimit-count            501386)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))))
(declare-const $k@348@08 $Perm)
(assert ($Perm.isReadVar $k@348@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@348@08 $Perm.No) (< $Perm.No $k@348@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21884
;  :arith-add-rows          81
;  :arith-assert-diseq      206
;  :arith-assert-lower      685
;  :arith-assert-upper      661
;  :arith-conflicts         264
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         263
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1242
;  :datatype-accessor-ax    786
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7986
;  :mk-clause               932
;  :num-allocs              12266759
;  :num-checks              1539
;  :propagations            585
;  :quant-instantiations    224
;  :rlimit-count            501966)
(declare-const $t@349@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@326@08 $k@339@08))
    (=
      $t@349@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@348@08)
    (=
      $t@349@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@326@08 $k@339@08) $k@348@08)))
(assert (<= (+ (- $k@326@08 $k@339@08) $k@348@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@326@08 $k@339@08) $k@348@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@326@08 $k@339@08) $k@348@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21894
;  :arith-add-rows          82
;  :arith-assert-diseq      206
;  :arith-assert-lower      686
;  :arith-assert-upper      663
;  :arith-conflicts         265
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         264
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1243
;  :datatype-accessor-ax    787
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7994
;  :mk-clause               932
;  :num-allocs              12266759
;  :num-checks              1540
;  :propagations            585
;  :quant-instantiations    225
;  :rlimit-count            503084)
(assert (not (= $t@349@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@326@08 $k@339@08) $k@348@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21900
;  :arith-add-rows          82
;  :arith-assert-diseq      206
;  :arith-assert-lower      686
;  :arith-assert-upper      664
;  :arith-conflicts         266
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         265
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1244
;  :datatype-accessor-ax    788
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7997
;  :mk-clause               932
;  :num-allocs              12266759
;  :num-checks              1541
;  :propagations            585
;  :quant-instantiations    225
;  :rlimit-count            503618)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@326@08 $k@339@08) $k@348@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21905
;  :arith-add-rows          82
;  :arith-assert-diseq      206
;  :arith-assert-lower      686
;  :arith-assert-upper      665
;  :arith-conflicts         267
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         266
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1245
;  :datatype-accessor-ax    789
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             7999
;  :mk-clause               932
;  :num-allocs              12266759
;  :num-checks              1542
;  :propagations            585
;  :quant-instantiations    225
;  :rlimit-count            504117
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))))))))
(declare-const $k@350@08 $Perm)
(assert ($Perm.isReadVar $k@350@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@350@08 $Perm.No) (< $Perm.No $k@350@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21910
;  :arith-add-rows          82
;  :arith-assert-diseq      207
;  :arith-assert-lower      688
;  :arith-assert-upper      666
;  :arith-conflicts         267
;  :arith-eq-adapter        294
;  :arith-fixed-eqs         266
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1246
;  :datatype-accessor-ax    790
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             8004
;  :mk-clause               934
;  :num-allocs              12266759
;  :num-checks              1543
;  :propagations            586
;  :quant-instantiations    225
;  :rlimit-count            504737)
(declare-const $t@351@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@327@08 $k@340@08))
    (=
      $t@351@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@350@08)
    (=
      $t@351@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@327@08 $k@340@08) $k@350@08)))
(assert (<= (+ (- $k@327@08 $k@340@08) $k@350@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@327@08 $k@340@08) $k@350@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@327@08 $k@340@08) $k@350@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21920
;  :arith-add-rows          83
;  :arith-assert-diseq      207
;  :arith-assert-lower      689
;  :arith-assert-upper      668
;  :arith-conflicts         268
;  :arith-eq-adapter        294
;  :arith-fixed-eqs         267
;  :arith-pivots            163
;  :binary-propagations     22
;  :conflicts               1247
;  :datatype-accessor-ax    791
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             8012
;  :mk-clause               934
;  :num-allocs              12266759
;  :num-checks              1544
;  :propagations            586
;  :quant-instantiations    226
;  :rlimit-count            505925)
(assert (not (= $t@351@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@327@08 $k@340@08) $k@350@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21926
;  :arith-add-rows          83
;  :arith-assert-diseq      207
;  :arith-assert-lower      689
;  :arith-assert-upper      669
;  :arith-conflicts         269
;  :arith-eq-adapter        294
;  :arith-fixed-eqs         268
;  :arith-pivots            163
;  :binary-propagations     22
;  :conflicts               1248
;  :datatype-accessor-ax    792
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             8015
;  :mk-clause               934
;  :num-allocs              12266759
;  :num-checks              1545
;  :propagations            586
;  :quant-instantiations    226
;  :rlimit-count            506499)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21931
;  :arith-add-rows          83
;  :arith-assert-diseq      207
;  :arith-assert-lower      689
;  :arith-assert-upper      670
;  :arith-conflicts         270
;  :arith-eq-adapter        294
;  :arith-fixed-eqs         269
;  :arith-pivots            163
;  :binary-propagations     22
;  :conflicts               1249
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             8017
;  :mk-clause               934
;  :num-allocs              12266759
;  :num-checks              1546
;  :propagations            586
;  :quant-instantiations    226
;  :rlimit-count            507038)
(declare-const $k@352@08 $Perm)
(assert ($Perm.isReadVar $k@352@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@352@08 $Perm.No) (< $Perm.No $k@352@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21931
;  :arith-add-rows          83
;  :arith-assert-diseq      208
;  :arith-assert-lower      691
;  :arith-assert-upper      671
;  :arith-conflicts         270
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         269
;  :arith-pivots            163
;  :binary-propagations     22
;  :conflicts               1250
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             8021
;  :mk-clause               936
;  :num-allocs              12266759
;  :num-checks              1547
;  :propagations            587
;  :quant-instantiations    226
;  :rlimit-count            507236)
(set-option :timeout 10)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  $t@345@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21931
;  :arith-add-rows          83
;  :arith-assert-diseq      208
;  :arith-assert-lower      691
;  :arith-assert-upper      671
;  :arith-conflicts         270
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         269
;  :arith-pivots            163
;  :binary-propagations     22
;  :conflicts               1250
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             8021
;  :mk-clause               936
;  :num-allocs              12266759
;  :num-checks              1548
;  :propagations            587
;  :quant-instantiations    226
;  :rlimit-count            507247)
(declare-const $t@353@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@328@08 $k@341@08))
    (=
      $t@353@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@352@08)
    (=
      $t@353@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@328@08 $k@341@08) $k@352@08)))
(assert (<= (+ (- $k@328@08 $k@341@08) $k@352@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@328@08 $k@341@08) $k@352@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21937
;  :arith-add-rows          84
;  :arith-assert-diseq      208
;  :arith-assert-lower      692
;  :arith-assert-upper      673
;  :arith-conflicts         271
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         270
;  :arith-pivots            163
;  :binary-propagations     22
;  :conflicts               1251
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             8028
;  :mk-clause               936
;  :num-allocs              12266759
;  :num-checks              1549
;  :propagations            587
;  :quant-instantiations    227
;  :rlimit-count            508024)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  $t@345@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21937
;  :arith-add-rows          84
;  :arith-assert-diseq      208
;  :arith-assert-lower      692
;  :arith-assert-upper      673
;  :arith-conflicts         271
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         270
;  :arith-pivots            163
;  :binary-propagations     22
;  :conflicts               1251
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             8028
;  :mk-clause               936
;  :num-allocs              12266759
;  :num-checks              1550
;  :propagations            587
;  :quant-instantiations    227
;  :rlimit-count            508035)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@328@08 $k@341@08) $k@352@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21937
;  :arith-add-rows          84
;  :arith-assert-diseq      208
;  :arith-assert-lower      692
;  :arith-assert-upper      674
;  :arith-conflicts         272
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         271
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1252
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5847
;  :datatype-occurs-check   1115
;  :datatype-splits         4840
;  :decisions               5654
;  :del-clause              809
;  :final-checks            190
;  :max-generation          2
;  :max-memory              5.87
;  :memory                  5.87
;  :mk-bool-var             8029
;  :mk-clause               936
;  :num-allocs              12266759
;  :num-checks              1551
;  :propagations            587
;  :quant-instantiations    227
;  :rlimit-count            508119)
(assert (= $t@353@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@342@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) __globals@48@08))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.CASR_m, globals__40), write)
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22855
;  :arith-add-rows          84
;  :arith-assert-diseq      209
;  :arith-assert-lower      695
;  :arith-assert-upper      675
;  :arith-conflicts         272
;  :arith-eq-adapter        296
;  :arith-fixed-eqs         271
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1258
;  :datatype-accessor-ax    806
;  :datatype-constructor-ax 6100
;  :datatype-occurs-check   1197
;  :datatype-splits         4985
;  :decisions               5895
;  :del-clause              823
;  :final-checks            194
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8192
;  :mk-clause               945
;  :num-allocs              12664903
;  :num-checks              1553
;  :propagations            597
;  :quant-instantiations    229
;  :rlimit-count            512672)
(declare-const $t@354@08 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(declare-const $k@355@08 $Perm)
(assert ($Perm.isReadVar $k@355@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@355@08 $Perm.No) (< $Perm.No $k@355@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      211
;  :arith-assert-lower      700
;  :arith-assert-upper      677
;  :arith-conflicts         272
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         271
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1259
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8331
;  :mk-clause               951
;  :num-allocs              12664903
;  :num-checks              1555
;  :propagations            611
;  :quant-instantiations    231
;  :rlimit-count            515845)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= $k@322@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      211
;  :arith-assert-lower      700
;  :arith-assert-upper      677
;  :arith-conflicts         272
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         271
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1259
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8331
;  :mk-clause               951
;  :num-allocs              12664903
;  :num-checks              1556
;  :propagations            611
;  :quant-instantiations    231
;  :rlimit-count            515856)
(assert (< $k@355@08 $k@322@08))
(assert (<= $Perm.No (- $k@322@08 $k@355@08)))
(assert (<= (- $k@322@08 $k@355@08) $Perm.Write))
(assert (implies (< $Perm.No (- $k@322@08 $k@355@08)) (not (= diz@47@08 $Ref.null))))
; [eval] diz.CASR_m != null
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      211
;  :arith-assert-lower      702
;  :arith-assert-upper      678
;  :arith-conflicts         272
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1260
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8334
;  :mk-clause               951
;  :num-allocs              12664903
;  :num-checks              1557
;  :propagations            611
;  :quant-instantiations    231
;  :rlimit-count            516070)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      211
;  :arith-assert-lower      702
;  :arith-assert-upper      678
;  :arith-conflicts         272
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1261
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8334
;  :mk-clause               951
;  :num-allocs              12664903
;  :num-checks              1558
;  :propagations            611
;  :quant-instantiations    231
;  :rlimit-count            516118)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      211
;  :arith-assert-lower      702
;  :arith-assert-upper      678
;  :arith-conflicts         272
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1262
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8334
;  :mk-clause               951
;  :num-allocs              12664903
;  :num-checks              1559
;  :propagations            611
;  :quant-instantiations    231
;  :rlimit-count            516166)
; [eval] |diz.CASR_m.Main_process_state| == 3
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      211
;  :arith-assert-lower      702
;  :arith-assert-upper      678
;  :arith-conflicts         272
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1263
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8334
;  :mk-clause               951
;  :num-allocs              12664903
;  :num-checks              1560
;  :propagations            611
;  :quant-instantiations    231
;  :rlimit-count            516214)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      211
;  :arith-assert-lower      702
;  :arith-assert-upper      678
;  :arith-conflicts         272
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1264
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8334
;  :mk-clause               951
;  :num-allocs              12664903
;  :num-checks              1561
;  :propagations            611
;  :quant-instantiations    231
;  :rlimit-count            516262)
; [eval] |diz.CASR_m.Main_event_state| == 6
; [eval] |diz.CASR_m.Main_event_state|
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      211
;  :arith-assert-lower      702
;  :arith-assert-upper      678
;  :arith-conflicts         272
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1265
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8334
;  :mk-clause               951
;  :num-allocs              12664903
;  :num-checks              1562
;  :propagations            611
;  :quant-instantiations    231
;  :rlimit-count            516310)
; [eval] (forall i__104: Int :: { diz.CASR_m.Main_process_state[i__104] } 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|)
(declare-const i__104@356@08 Int)
(push) ; 15
; [eval] 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= i__104 && i__104 < |diz.CASR_m.Main_process_state|
; [eval] 0 <= i__104
(push) ; 16
; [then-branch: 93 | 0 <= i__104@356@08 | live]
; [else-branch: 93 | !(0 <= i__104@356@08) | live]
(push) ; 17
; [then-branch: 93 | 0 <= i__104@356@08]
(assert (<= 0 i__104@356@08))
; [eval] i__104 < |diz.CASR_m.Main_process_state|
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 18
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      211
;  :arith-assert-lower      703
;  :arith-assert-upper      678
;  :arith-conflicts         272
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1266
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8335
;  :mk-clause               951
;  :num-allocs              12664903
;  :num-checks              1563
;  :propagations            611
;  :quant-instantiations    231
;  :rlimit-count            516410)
(pop) ; 17
(push) ; 17
; [else-branch: 93 | !(0 <= i__104@356@08)]
(assert (not (<= 0 i__104@356@08)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 94 | i__104@356@08 < |First:(Second:(Second:(Second:($t@342@08))))| && 0 <= i__104@356@08 | live]
; [else-branch: 94 | !(i__104@356@08 < |First:(Second:(Second:(Second:($t@342@08))))| && 0 <= i__104@356@08) | live]
(push) ; 17
; [then-branch: 94 | i__104@356@08 < |First:(Second:(Second:(Second:($t@342@08))))| && 0 <= i__104@356@08]
(assert (and
  (<
    i__104@356@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))
  (<= 0 i__104@356@08)))
; [eval] diz.CASR_m.Main_process_state[i__104] == -1 || 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__104] == -1
; [eval] diz.CASR_m.Main_process_state[i__104]
(push) ; 18
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      211
;  :arith-assert-lower      704
;  :arith-assert-upper      679
;  :arith-conflicts         272
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1267
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8337
;  :mk-clause               951
;  :num-allocs              12664903
;  :num-checks              1564
;  :propagations            611
;  :quant-instantiations    231
;  :rlimit-count            516567)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__104@356@08 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      211
;  :arith-assert-lower      704
;  :arith-assert-upper      679
;  :arith-conflicts         272
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1267
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8337
;  :mk-clause               951
;  :num-allocs              12664903
;  :num-checks              1565
;  :propagations            611
;  :quant-instantiations    231
;  :rlimit-count            516576)
; [eval] -1
(push) ; 18
; [then-branch: 95 | First:(Second:(Second:(Second:($t@342@08))))[i__104@356@08] == -1 | live]
; [else-branch: 95 | First:(Second:(Second:(Second:($t@342@08))))[i__104@356@08] != -1 | live]
(push) ; 19
; [then-branch: 95 | First:(Second:(Second:(Second:($t@342@08))))[i__104@356@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
    i__104@356@08)
  (- 0 1)))
(pop) ; 19
(push) ; 19
; [else-branch: 95 | First:(Second:(Second:(Second:($t@342@08))))[i__104@356@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
      i__104@356@08)
    (- 0 1))))
; [eval] 0 <= diz.CASR_m.Main_process_state[i__104] && diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= diz.CASR_m.Main_process_state[i__104]
; [eval] diz.CASR_m.Main_process_state[i__104]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      212
;  :arith-assert-lower      707
;  :arith-assert-upper      680
;  :arith-conflicts         272
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1268
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8343
;  :mk-clause               955
;  :num-allocs              12664903
;  :num-checks              1566
;  :propagations            613
;  :quant-instantiations    232
;  :rlimit-count            516847)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__104@356@08 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      212
;  :arith-assert-lower      707
;  :arith-assert-upper      680
;  :arith-conflicts         272
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1268
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8343
;  :mk-clause               955
;  :num-allocs              12664903
;  :num-checks              1567
;  :propagations            613
;  :quant-instantiations    232
;  :rlimit-count            516856)
(push) ; 20
; [then-branch: 96 | 0 <= First:(Second:(Second:(Second:($t@342@08))))[i__104@356@08] | live]
; [else-branch: 96 | !(0 <= First:(Second:(Second:(Second:($t@342@08))))[i__104@356@08]) | live]
(push) ; 21
; [then-branch: 96 | 0 <= First:(Second:(Second:(Second:($t@342@08))))[i__104@356@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
    i__104@356@08)))
; [eval] diz.CASR_m.Main_process_state[i__104] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__104]
(set-option :timeout 10)
(push) ; 22
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      212
;  :arith-assert-lower      707
;  :arith-assert-upper      680
;  :arith-conflicts         272
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1269
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8343
;  :mk-clause               955
;  :num-allocs              12664903
;  :num-checks              1568
;  :propagations            613
;  :quant-instantiations    232
;  :rlimit-count            517009)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= i__104@356@08 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      212
;  :arith-assert-lower      707
;  :arith-assert-upper      680
;  :arith-conflicts         272
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1269
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8343
;  :mk-clause               955
;  :num-allocs              12664903
;  :num-checks              1569
;  :propagations            613
;  :quant-instantiations    232
;  :rlimit-count            517018)
; [eval] |diz.CASR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 22
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      212
;  :arith-assert-lower      707
;  :arith-assert-upper      680
;  :arith-conflicts         272
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1270
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              827
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8343
;  :mk-clause               955
;  :num-allocs              12664903
;  :num-checks              1570
;  :propagations            613
;  :quant-instantiations    232
;  :rlimit-count            517066)
(pop) ; 21
(push) ; 21
; [else-branch: 96 | !(0 <= First:(Second:(Second:(Second:($t@342@08))))[i__104@356@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
      i__104@356@08))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 94 | !(i__104@356@08 < |First:(Second:(Second:(Second:($t@342@08))))| && 0 <= i__104@356@08)]
(assert (not
  (and
    (<
      i__104@356@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))
    (<= 0 i__104@356@08))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 15
(assert (not (forall ((i__104@356@08 Int)) (!
  (implies
    (and
      (<
        i__104@356@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))
      (<= 0 i__104@356@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
          i__104@356@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
            i__104@356@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
            i__104@356@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
    i__104@356@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      214
;  :arith-assert-lower      708
;  :arith-assert-upper      681
;  :arith-conflicts         272
;  :arith-eq-adapter        300
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1271
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              845
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8351
;  :mk-clause               969
;  :num-allocs              12664903
;  :num-checks              1571
;  :propagations            615
;  :quant-instantiations    233
;  :rlimit-count            517512)
(assert (forall ((i__104@356@08 Int)) (!
  (implies
    (and
      (<
        i__104@356@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))
      (<= 0 i__104@356@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
          i__104@356@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
            i__104@356@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
            i__104@356@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@08)))))
    i__104@356@08))
  :qid |prog.l<no position>|)))
(declare-const $k@357@08 $Perm)
(assert ($Perm.isReadVar $k@357@08 $Perm.Write))
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      682
;  :arith-conflicts         272
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1272
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              845
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8356
;  :mk-clause               971
;  :num-allocs              12664903
;  :num-checks              1572
;  :propagations            616
;  :quant-instantiations    233
;  :rlimit-count            518071)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@357@08 $Perm.No) (< $Perm.No $k@357@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          84
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      682
;  :arith-conflicts         272
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1273
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              845
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8356
;  :mk-clause               971
;  :num-allocs              12664903
;  :num-checks              1573
;  :propagations            616
;  :quant-instantiations    233
;  :rlimit-count            518121)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= (+ (- $k@324@08 $k@337@08) $k@344@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          84
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      683
;  :arith-conflicts         273
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1274
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8358
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1574
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            518201)
(assert (< $k@357@08 (+ (- $k@324@08 $k@337@08) $k@344@08)))
(assert (<= $Perm.No (- (+ (- $k@324@08 $k@337@08) $k@344@08) $k@357@08)))
(assert (<= (- (+ (- $k@324@08 $k@337@08) $k@344@08) $k@357@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@324@08 $k@337@08) $k@344@08) $k@357@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn != null
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      684
;  :arith-conflicts         273
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         271
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1275
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8361
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1575
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            518437)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      685
;  :arith-conflicts         274
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         272
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1276
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8362
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1576
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            518518)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      685
;  :arith-conflicts         274
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         272
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1277
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8362
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1577
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            518566)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      686
;  :arith-conflicts         275
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         273
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1278
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8363
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1578
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            518647)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      686
;  :arith-conflicts         275
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         273
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1279
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8363
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1579
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            518695)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      687
;  :arith-conflicts         276
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         274
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1280
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8364
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1580
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            518776)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      687
;  :arith-conflicts         276
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         274
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1281
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8364
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1581
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            518824)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      688
;  :arith-conflicts         277
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         275
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1282
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8365
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1582
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            518905)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      688
;  :arith-conflicts         277
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         275
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1283
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8365
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1583
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            518953)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      689
;  :arith-conflicts         278
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         276
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1284
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8366
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1584
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            519034)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      689
;  :arith-conflicts         278
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         276
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1285
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8366
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1585
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            519082)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      690
;  :arith-conflicts         279
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         277
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1286
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8367
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1586
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            519163)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      690
;  :arith-conflicts         279
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         277
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1287
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8367
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1587
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            519211)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      691
;  :arith-conflicts         280
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         278
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1288
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8368
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1588
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            519292)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      691
;  :arith-conflicts         280
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         278
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1289
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8368
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1589
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            519340)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      692
;  :arith-conflicts         281
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         279
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1290
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8369
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1590
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            519421)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      692
;  :arith-conflicts         281
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         279
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1291
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8369
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1591
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            519469)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      693
;  :arith-conflicts         282
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         280
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1292
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8370
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1592
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            519550)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      693
;  :arith-conflicts         282
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         280
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1293
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8370
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1593
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            519598)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      694
;  :arith-conflicts         283
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         281
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1294
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8371
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1594
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            519679)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      694
;  :arith-conflicts         283
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         281
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1295
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8371
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1595
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            519727)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      215
;  :arith-assert-lower      712
;  :arith-assert-upper      695
;  :arith-conflicts         284
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         282
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1296
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8372
;  :mk-clause               973
;  :num-allocs              12664903
;  :num-checks              1596
;  :propagations            617
;  :quant-instantiations    233
;  :rlimit-count            519808)
(declare-const $k@358@08 $Perm)
(assert ($Perm.isReadVar $k@358@08 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      216
;  :arith-assert-lower      714
;  :arith-assert-upper      696
;  :arith-conflicts         284
;  :arith-eq-adapter        303
;  :arith-fixed-eqs         282
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1297
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8376
;  :mk-clause               975
;  :num-allocs              12664903
;  :num-checks              1597
;  :propagations            618
;  :quant-instantiations    233
;  :rlimit-count            520005)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@358@08 $Perm.No) (< $Perm.No $k@358@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23399
;  :arith-add-rows          86
;  :arith-assert-diseq      216
;  :arith-assert-lower      714
;  :arith-assert-upper      696
;  :arith-conflicts         284
;  :arith-eq-adapter        303
;  :arith-fixed-eqs         282
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1298
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              847
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8376
;  :mk-clause               975
;  :num-allocs              12664903
;  :num-checks              1598
;  :propagations            618
;  :quant-instantiations    233
;  :rlimit-count            520055)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= (+ (- $k@325@08 $k@338@08) $k@346@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          86
;  :arith-assert-diseq      216
;  :arith-assert-lower      714
;  :arith-assert-upper      697
;  :arith-conflicts         285
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         282
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1299
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8378
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1599
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            520135)
(assert (< $k@358@08 (+ (- $k@325@08 $k@338@08) $k@346@08)))
(assert (<= $Perm.No (- (+ (- $k@325@08 $k@338@08) $k@346@08) $k@358@08)))
(assert (<= (- (+ (- $k@325@08 $k@338@08) $k@346@08) $k@358@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@325@08 $k@338@08) $k@346@08) $k@358@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_casr != null
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      698
;  :arith-conflicts         285
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         282
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1300
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8381
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1600
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            520371)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      699
;  :arith-conflicts         286
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         283
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1301
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8382
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1601
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            520452)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      699
;  :arith-conflicts         286
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         283
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1302
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8382
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1602
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            520500)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      700
;  :arith-conflicts         287
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         284
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1303
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8383
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1603
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            520581)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      700
;  :arith-conflicts         287
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         284
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1304
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8383
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1604
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            520629)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      701
;  :arith-conflicts         288
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         285
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1305
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8384
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1605
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            520710)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      701
;  :arith-conflicts         288
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         285
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1306
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8384
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1606
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            520758)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      702
;  :arith-conflicts         289
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         286
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1307
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8385
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1607
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            520839)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      702
;  :arith-conflicts         289
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         286
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1308
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8385
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1608
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            520887)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      703
;  :arith-conflicts         290
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         287
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1309
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8386
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1609
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            520968)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      703
;  :arith-conflicts         290
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         287
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1310
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8386
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1610
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            521016)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      704
;  :arith-conflicts         291
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         288
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1311
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8387
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1611
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            521097)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      704
;  :arith-conflicts         291
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         288
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1312
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8387
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1612
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            521145)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      705
;  :arith-conflicts         292
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         289
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1313
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8388
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1613
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            521226)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      705
;  :arith-conflicts         292
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         289
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1314
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8388
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1614
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            521274)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      216
;  :arith-assert-lower      716
;  :arith-assert-upper      706
;  :arith-conflicts         293
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         290
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1315
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8389
;  :mk-clause               977
;  :num-allocs              12664903
;  :num-checks              1615
;  :propagations            619
;  :quant-instantiations    233
;  :rlimit-count            521355)
(declare-const $k@359@08 $Perm)
(assert ($Perm.isReadVar $k@359@08 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      707
;  :arith-conflicts         293
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         290
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1316
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8393
;  :mk-clause               979
;  :num-allocs              12664903
;  :num-checks              1616
;  :propagations            620
;  :quant-instantiations    233
;  :rlimit-count            521551)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@359@08 $Perm.No) (< $Perm.No $k@359@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23400
;  :arith-add-rows          88
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      707
;  :arith-conflicts         293
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         290
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1317
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              849
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8393
;  :mk-clause               979
;  :num-allocs              12664903
;  :num-checks              1617
;  :propagations            620
;  :quant-instantiations    233
;  :rlimit-count            521601)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= (+ (- $k@326@08 $k@339@08) $k@348@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23401
;  :arith-add-rows          88
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      708
;  :arith-conflicts         294
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         290
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1318
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              851
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8395
;  :mk-clause               981
;  :num-allocs              12664903
;  :num-checks              1618
;  :propagations            621
;  :quant-instantiations    233
;  :rlimit-count            521681)
(assert (< $k@359@08 (+ (- $k@326@08 $k@339@08) $k@348@08)))
(assert (<= $Perm.No (- (+ (- $k@326@08 $k@339@08) $k@348@08) $k@359@08)))
(assert (<= (- (+ (- $k@326@08 $k@339@08) $k@348@08) $k@359@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@326@08 $k@339@08) $k@348@08) $k@359@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_lfsr != null
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23401
;  :arith-add-rows          90
;  :arith-assert-diseq      217
;  :arith-assert-lower      720
;  :arith-assert-upper      709
;  :arith-conflicts         294
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         290
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1319
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              851
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8398
;  :mk-clause               981
;  :num-allocs              12664903
;  :num-checks              1619
;  :propagations            621
;  :quant-instantiations    233
;  :rlimit-count            521917)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@326@08 $k@339@08) $k@348@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23401
;  :arith-add-rows          90
;  :arith-assert-diseq      217
;  :arith-assert-lower      720
;  :arith-assert-upper      710
;  :arith-conflicts         295
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         291
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1320
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              851
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8399
;  :mk-clause               981
;  :num-allocs              12664903
;  :num-checks              1620
;  :propagations            621
;  :quant-instantiations    233
;  :rlimit-count            521998)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23401
;  :arith-add-rows          90
;  :arith-assert-diseq      217
;  :arith-assert-lower      720
;  :arith-assert-upper      710
;  :arith-conflicts         295
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         291
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1321
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              851
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8399
;  :mk-clause               981
;  :num-allocs              12664903
;  :num-checks              1621
;  :propagations            621
;  :quant-instantiations    233
;  :rlimit-count            522046)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@326@08 $k@339@08) $k@348@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23401
;  :arith-add-rows          90
;  :arith-assert-diseq      217
;  :arith-assert-lower      720
;  :arith-assert-upper      711
;  :arith-conflicts         296
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         292
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1322
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              851
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8400
;  :mk-clause               981
;  :num-allocs              12664903
;  :num-checks              1622
;  :propagations            621
;  :quant-instantiations    233
;  :rlimit-count            522127)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23401
;  :arith-add-rows          90
;  :arith-assert-diseq      217
;  :arith-assert-lower      720
;  :arith-assert-upper      711
;  :arith-conflicts         296
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         292
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1323
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              851
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8400
;  :mk-clause               981
;  :num-allocs              12664903
;  :num-checks              1623
;  :propagations            621
;  :quant-instantiations    233
;  :rlimit-count            522175)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@326@08 $k@339@08) $k@348@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23401
;  :arith-add-rows          90
;  :arith-assert-diseq      217
;  :arith-assert-lower      720
;  :arith-assert-upper      712
;  :arith-conflicts         297
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         293
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1324
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              851
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8401
;  :mk-clause               981
;  :num-allocs              12664903
;  :num-checks              1624
;  :propagations            621
;  :quant-instantiations    233
;  :rlimit-count            522256)
(declare-const $k@360@08 $Perm)
(assert ($Perm.isReadVar $k@360@08 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23401
;  :arith-add-rows          90
;  :arith-assert-diseq      218
;  :arith-assert-lower      722
;  :arith-assert-upper      713
;  :arith-conflicts         297
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         293
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1325
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              851
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8405
;  :mk-clause               983
;  :num-allocs              12664903
;  :num-checks              1625
;  :propagations            622
;  :quant-instantiations    233
;  :rlimit-count            522453)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@360@08 $Perm.No) (< $Perm.No $k@360@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23401
;  :arith-add-rows          90
;  :arith-assert-diseq      218
;  :arith-assert-lower      722
;  :arith-assert-upper      713
;  :arith-conflicts         297
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         293
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1326
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              851
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8405
;  :mk-clause               983
;  :num-allocs              12664903
;  :num-checks              1626
;  :propagations            622
;  :quant-instantiations    233
;  :rlimit-count            522503)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= (+ (- $k@327@08 $k@340@08) $k@350@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23402
;  :arith-add-rows          90
;  :arith-assert-diseq      218
;  :arith-assert-lower      722
;  :arith-assert-upper      714
;  :arith-conflicts         298
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         293
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1327
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              853
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8407
;  :mk-clause               985
;  :num-allocs              12664903
;  :num-checks              1627
;  :propagations            623
;  :quant-instantiations    233
;  :rlimit-count            522583)
(assert (< $k@360@08 (+ (- $k@327@08 $k@340@08) $k@350@08)))
(assert (<= $Perm.No (- (+ (- $k@327@08 $k@340@08) $k@350@08) $k@360@08)))
(assert (<= (- (+ (- $k@327@08 $k@340@08) $k@350@08) $k@360@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@327@08 $k@340@08) $k@350@08) $k@360@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_combinate != null
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23402
;  :arith-add-rows          92
;  :arith-assert-diseq      218
;  :arith-assert-lower      724
;  :arith-assert-upper      715
;  :arith-conflicts         298
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         293
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1328
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              853
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8410
;  :mk-clause               985
;  :num-allocs              12664903
;  :num-checks              1628
;  :propagations            623
;  :quant-instantiations    233
;  :rlimit-count            522819)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@327@08 $k@340@08) $k@350@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23402
;  :arith-add-rows          92
;  :arith-assert-diseq      218
;  :arith-assert-lower      724
;  :arith-assert-upper      716
;  :arith-conflicts         299
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         294
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1329
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              853
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8411
;  :mk-clause               985
;  :num-allocs              12664903
;  :num-checks              1629
;  :propagations            623
;  :quant-instantiations    233
;  :rlimit-count            522900)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23402
;  :arith-add-rows          92
;  :arith-assert-diseq      218
;  :arith-assert-lower      724
;  :arith-assert-upper      716
;  :arith-conflicts         299
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         294
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1330
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              853
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8411
;  :mk-clause               985
;  :num-allocs              12664903
;  :num-checks              1630
;  :propagations            623
;  :quant-instantiations    233
;  :rlimit-count            522948)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@327@08 $k@340@08) $k@350@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23402
;  :arith-add-rows          92
;  :arith-assert-diseq      218
;  :arith-assert-lower      724
;  :arith-assert-upper      717
;  :arith-conflicts         300
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         295
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1331
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              853
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8412
;  :mk-clause               985
;  :num-allocs              12664903
;  :num-checks              1631
;  :propagations            623
;  :quant-instantiations    233
;  :rlimit-count            523029)
(declare-const $k@361@08 $Perm)
(assert ($Perm.isReadVar $k@361@08 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23402
;  :arith-add-rows          92
;  :arith-assert-diseq      219
;  :arith-assert-lower      726
;  :arith-assert-upper      718
;  :arith-conflicts         300
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         295
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1332
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              853
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8416
;  :mk-clause               987
;  :num-allocs              12664903
;  :num-checks              1632
;  :propagations            624
;  :quant-instantiations    233
;  :rlimit-count            523226)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23402
;  :arith-add-rows          92
;  :arith-assert-diseq      219
;  :arith-assert-lower      726
;  :arith-assert-upper      719
;  :arith-conflicts         301
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         296
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1333
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              853
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8417
;  :mk-clause               987
;  :num-allocs              12664903
;  :num-checks              1633
;  :propagations            624
;  :quant-instantiations    233
;  :rlimit-count            523307)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@361@08 $Perm.No) (< $Perm.No $k@361@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23402
;  :arith-add-rows          92
;  :arith-assert-diseq      219
;  :arith-assert-lower      726
;  :arith-assert-upper      719
;  :arith-conflicts         301
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         296
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1334
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              853
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8417
;  :mk-clause               987
;  :num-allocs              12664903
;  :num-checks              1634
;  :propagations            624
;  :quant-instantiations    233
;  :rlimit-count            523357)
(set-option :timeout 10)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  $t@345@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23402
;  :arith-add-rows          92
;  :arith-assert-diseq      219
;  :arith-assert-lower      726
;  :arith-assert-upper      719
;  :arith-conflicts         301
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         296
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1334
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              853
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8417
;  :mk-clause               987
;  :num-allocs              12664903
;  :num-checks              1635
;  :propagations            624
;  :quant-instantiations    233
;  :rlimit-count            523368)
(push) ; 15
(assert (not (not (= (+ (- $k@328@08 $k@341@08) $k@352@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23403
;  :arith-add-rows          92
;  :arith-assert-diseq      219
;  :arith-assert-lower      726
;  :arith-assert-upper      720
;  :arith-conflicts         302
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         296
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1335
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              855
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8419
;  :mk-clause               989
;  :num-allocs              12664903
;  :num-checks              1636
;  :propagations            625
;  :quant-instantiations    233
;  :rlimit-count            523448)
(assert (< $k@361@08 (+ (- $k@328@08 $k@341@08) $k@352@08)))
(assert (<= $Perm.No (- (+ (- $k@328@08 $k@341@08) $k@352@08) $k@361@08)))
(assert (<= (- (+ (- $k@328@08 $k@341@08) $k@352@08) $k@361@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@328@08 $k@341@08) $k@352@08) $k@361@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn.Rng_m == diz.CASR_m
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23403
;  :arith-add-rows          94
;  :arith-assert-diseq      219
;  :arith-assert-lower      728
;  :arith-assert-upper      721
;  :arith-conflicts         302
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         296
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1336
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              855
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8422
;  :mk-clause               989
;  :num-allocs              12664903
;  :num-checks              1637
;  :propagations            625
;  :quant-instantiations    233
;  :rlimit-count            523684)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@324@08 $k@337@08) $k@344@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23403
;  :arith-add-rows          94
;  :arith-assert-diseq      219
;  :arith-assert-lower      728
;  :arith-assert-upper      722
;  :arith-conflicts         303
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         297
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1337
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              855
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8423
;  :mk-clause               989
;  :num-allocs              12664903
;  :num-checks              1638
;  :propagations            625
;  :quant-instantiations    233
;  :rlimit-count            523765)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  $t@345@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23403
;  :arith-add-rows          94
;  :arith-assert-diseq      219
;  :arith-assert-lower      728
;  :arith-assert-upper      722
;  :arith-conflicts         303
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         297
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1337
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              855
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8423
;  :mk-clause               989
;  :num-allocs              12664903
;  :num-checks              1639
;  :propagations            625
;  :quant-instantiations    233
;  :rlimit-count            523776)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@328@08 $k@341@08) $k@352@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23403
;  :arith-add-rows          94
;  :arith-assert-diseq      219
;  :arith-assert-lower      728
;  :arith-assert-upper      723
;  :arith-conflicts         304
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         298
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1338
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              855
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8424
;  :mk-clause               989
;  :num-allocs              12664903
;  :num-checks              1640
;  :propagations            625
;  :quant-instantiations    233
;  :rlimit-count            523857)
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23403
;  :arith-add-rows          94
;  :arith-assert-diseq      219
;  :arith-assert-lower      728
;  :arith-assert-upper      723
;  :arith-conflicts         304
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         298
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1339
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              855
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8424
;  :mk-clause               989
;  :num-allocs              12664903
;  :num-checks              1641
;  :propagations            625
;  :quant-instantiations    233
;  :rlimit-count            523905)
; [eval] diz.CASR_m.Main_rn_casr == diz
(push) ; 15
(assert (not (< $Perm.No $k@322@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23403
;  :arith-add-rows          94
;  :arith-assert-diseq      219
;  :arith-assert-lower      728
;  :arith-assert-upper      723
;  :arith-conflicts         304
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         298
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1340
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              855
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8424
;  :mk-clause               989
;  :num-allocs              12664903
;  :num-checks              1642
;  :propagations            625
;  :quant-instantiations    233
;  :rlimit-count            523953)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@325@08 $k@338@08) $k@346@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23403
;  :arith-add-rows          94
;  :arith-assert-diseq      219
;  :arith-assert-lower      728
;  :arith-assert-upper      724
;  :arith-conflicts         305
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         299
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1341
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              855
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8425
;  :mk-clause               989
;  :num-allocs              12664903
;  :num-checks              1643
;  :propagations            625
;  :quant-instantiations    233
;  :rlimit-count            524034)
(set-option :timeout 0)
(push) ; 15
(assert (not (= $t@347@08 diz@47@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23403
;  :arith-add-rows          94
;  :arith-assert-diseq      219
;  :arith-assert-lower      728
;  :arith-assert-upper      724
;  :arith-conflicts         305
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         299
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1341
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 6247
;  :datatype-occurs-check   1274
;  :datatype-splits         5130
;  :decisions               6032
;  :del-clause              855
;  :final-checks            197
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8425
;  :mk-clause               989
;  :num-allocs              12664903
;  :num-checks              1644
;  :propagations            625
;  :quant-instantiations    233
;  :rlimit-count            524045)
(assert (= $t@347@08 diz@47@08))
(pop) ; 14
(push) ; 14
; [else-branch: 84 | !(First:(Second:(Second:(Second:($t@321@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@321@08))))))[1] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
          1)
        (- 0 2))))))
(pop) ; 14
(set-option :timeout 10)
(push) ; 14
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23866
;  :arith-add-rows          94
;  :arith-assert-diseq      219
;  :arith-assert-lower      728
;  :arith-assert-upper      724
;  :arith-conflicts         305
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         299
;  :arith-pivots            176
;  :binary-propagations     22
;  :conflicts               1342
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 6385
;  :datatype-occurs-check   1290
;  :datatype-splits         5241
;  :decisions               6165
;  :del-clause              876
;  :final-checks            200
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8539
;  :mk-clause               990
;  :num-allocs              12664903
;  :num-checks              1645
;  :propagations            629
;  :quant-instantiations    233
;  :rlimit-count            526945
;  :time                    0.00)
(push) ; 14
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24272
;  :arith-add-rows          94
;  :arith-assert-diseq      219
;  :arith-assert-lower      728
;  :arith-assert-upper      724
;  :arith-conflicts         305
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         299
;  :arith-pivots            176
;  :binary-propagations     22
;  :conflicts               1343
;  :datatype-accessor-ax    827
;  :datatype-constructor-ax 6524
;  :datatype-occurs-check   1306
;  :datatype-splits         5352
;  :decisions               6299
;  :del-clause              877
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8653
;  :mk-clause               991
;  :num-allocs              12664903
;  :num-checks              1646
;  :propagations            633
;  :quant-instantiations    233
;  :rlimit-count            529630
;  :time                    0.00)
(push) ; 14
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24678
;  :arith-add-rows          94
;  :arith-assert-diseq      219
;  :arith-assert-lower      728
;  :arith-assert-upper      724
;  :arith-conflicts         305
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         299
;  :arith-pivots            176
;  :binary-propagations     22
;  :conflicts               1344
;  :datatype-accessor-ax    832
;  :datatype-constructor-ax 6663
;  :datatype-occurs-check   1322
;  :datatype-splits         5463
;  :decisions               6433
;  :del-clause              878
;  :final-checks            206
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8767
;  :mk-clause               992
;  :num-allocs              12664903
;  :num-checks              1647
;  :propagations            637
;  :quant-instantiations    233
;  :rlimit-count            532315
;  :time                    0.00)
(push) ; 14
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25084
;  :arith-add-rows          94
;  :arith-assert-diseq      219
;  :arith-assert-lower      728
;  :arith-assert-upper      724
;  :arith-conflicts         305
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         299
;  :arith-pivots            176
;  :binary-propagations     22
;  :conflicts               1345
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6802
;  :datatype-occurs-check   1338
;  :datatype-splits         5574
;  :decisions               6567
;  :del-clause              879
;  :final-checks            209
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8881
;  :mk-clause               993
;  :num-allocs              12664903
;  :num-checks              1648
;  :propagations            641
;  :quant-instantiations    233
;  :rlimit-count            535000
;  :time                    0.00)
(push) ; 14
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25490
;  :arith-add-rows          94
;  :arith-assert-diseq      219
;  :arith-assert-lower      728
;  :arith-assert-upper      724
;  :arith-conflicts         305
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         299
;  :arith-pivots            176
;  :binary-propagations     22
;  :conflicts               1346
;  :datatype-accessor-ax    842
;  :datatype-constructor-ax 6941
;  :datatype-occurs-check   1354
;  :datatype-splits         5685
;  :decisions               6701
;  :del-clause              880
;  :final-checks            212
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             8995
;  :mk-clause               994
;  :num-allocs              12664903
;  :num-checks              1649
;  :propagations            645
;  :quant-instantiations    233
;  :rlimit-count            537685
;  :time                    0.00)
(declare-const $t@362@08 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@322@08)
    (= $t@362@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08))))
  (implies
    (< $Perm.No (- $k@228@08 $k@329@08))
    (= $t@362@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))))
(assert (<= $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08))))
(assert (<= (+ $k@322@08 (- $k@228@08 $k@329@08)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))
  (not (= diz@47@08 $Ref.null))))
; [eval] !(diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[1] != -2)
; [eval] diz.CASR_m.Main_process_state[0] != -1 || diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_process_state[0] != -1
; [eval] diz.CASR_m.Main_process_state[0]
(push) ; 14
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25495
;  :arith-add-rows          95
;  :arith-assert-diseq      219
;  :arith-assert-lower      729
;  :arith-assert-upper      726
;  :arith-conflicts         306
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         300
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1347
;  :datatype-accessor-ax    842
;  :datatype-constructor-ax 6941
;  :datatype-occurs-check   1354
;  :datatype-splits         5685
;  :decisions               6701
;  :del-clause              880
;  :final-checks            212
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9000
;  :mk-clause               994
;  :num-allocs              12664903
;  :num-checks              1650
;  :propagations            645
;  :quant-instantiations    233
;  :rlimit-count            538026)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25495
;  :arith-add-rows          95
;  :arith-assert-diseq      219
;  :arith-assert-lower      729
;  :arith-assert-upper      726
;  :arith-conflicts         306
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         300
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1348
;  :datatype-accessor-ax    842
;  :datatype-constructor-ax 6941
;  :datatype-occurs-check   1354
;  :datatype-splits         5685
;  :decisions               6701
;  :del-clause              880
;  :final-checks            212
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9001
;  :mk-clause               994
;  :num-allocs              12664903
;  :num-checks              1651
;  :propagations            645
;  :quant-instantiations    233
;  :rlimit-count            538106)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25495
;  :arith-add-rows          95
;  :arith-assert-diseq      219
;  :arith-assert-lower      729
;  :arith-assert-upper      726
;  :arith-conflicts         306
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         300
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1348
;  :datatype-accessor-ax    842
;  :datatype-constructor-ax 6941
;  :datatype-occurs-check   1354
;  :datatype-splits         5685
;  :decisions               6701
;  :del-clause              880
;  :final-checks            212
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9001
;  :mk-clause               994
;  :num-allocs              12664903
;  :num-checks              1652
;  :propagations            645
;  :quant-instantiations    233
;  :rlimit-count            538121)
; [eval] -1
(push) ; 14
; [then-branch: 97 | First:(Second:(Second:(Second:($t@321@08))))[0] != -1 | live]
; [else-branch: 97 | First:(Second:(Second:(Second:($t@321@08))))[0] == -1 | live]
(push) ; 15
; [then-branch: 97 | First:(Second:(Second:(Second:($t@321@08))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
      0)
    (- 0 1))))
(pop) ; 15
(push) ; 15
; [else-branch: 97 | First:(Second:(Second:(Second:($t@321@08))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    0)
  (- 0 1)))
; [eval] diz.CASR_m.Main_event_state[1] != -2
; [eval] diz.CASR_m.Main_event_state[1]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25496
;  :arith-add-rows          95
;  :arith-assert-diseq      219
;  :arith-assert-lower      729
;  :arith-assert-upper      727
;  :arith-conflicts         307
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         301
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1349
;  :datatype-accessor-ax    842
;  :datatype-constructor-ax 6941
;  :datatype-occurs-check   1354
;  :datatype-splits         5685
;  :decisions               6701
;  :del-clause              880
;  :final-checks            212
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9003
;  :mk-clause               994
;  :num-allocs              12664903
;  :num-checks              1653
;  :propagations            645
;  :quant-instantiations    233
;  :rlimit-count            538344)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25496
;  :arith-add-rows          95
;  :arith-assert-diseq      219
;  :arith-assert-lower      729
;  :arith-assert-upper      727
;  :arith-conflicts         307
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         301
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1350
;  :datatype-accessor-ax    842
;  :datatype-constructor-ax 6941
;  :datatype-occurs-check   1354
;  :datatype-splits         5685
;  :decisions               6701
;  :del-clause              880
;  :final-checks            212
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9004
;  :mk-clause               994
;  :num-allocs              12664903
;  :num-checks              1654
;  :propagations            645
;  :quant-instantiations    233
;  :rlimit-count            538424)
(set-option :timeout 0)
(push) ; 16
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25496
;  :arith-add-rows          95
;  :arith-assert-diseq      219
;  :arith-assert-lower      729
;  :arith-assert-upper      727
;  :arith-conflicts         307
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         301
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1350
;  :datatype-accessor-ax    842
;  :datatype-constructor-ax 6941
;  :datatype-occurs-check   1354
;  :datatype-splits         5685
;  :decisions               6701
;  :del-clause              880
;  :final-checks            212
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9004
;  :mk-clause               994
;  :num-allocs              12664903
;  :num-checks              1655
;  :propagations            645
;  :quant-instantiations    233
;  :rlimit-count            538439)
; [eval] -2
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 14
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
        1)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25870
;  :arith-add-rows          95
;  :arith-assert-diseq      219
;  :arith-assert-lower      729
;  :arith-assert-upper      727
;  :arith-conflicts         307
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         301
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1350
;  :datatype-accessor-ax    846
;  :datatype-constructor-ax 7051
;  :datatype-occurs-check   1369
;  :datatype-splits         5793
;  :decisions               6807
;  :del-clause              880
;  :final-checks            215
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9113
;  :mk-clause               994
;  :num-allocs              12664903
;  :num-checks              1656
;  :propagations            649
;  :quant-instantiations    233
;  :rlimit-count            540919
;  :time                    0.00)
(push) ; 14
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
          1)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26392
;  :arith-add-rows          95
;  :arith-assert-diseq      220
;  :arith-assert-lower      732
;  :arith-assert-upper      728
;  :arith-conflicts         307
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         301
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1352
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              887
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9241
;  :mk-clause               1001
;  :num-allocs              12664903
;  :num-checks              1657
;  :propagations            655
;  :quant-instantiations    234
;  :rlimit-count            544162
;  :time                    0.00)
; [then-branch: 98 | !(First:(Second:(Second:(Second:($t@321@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@321@08))))))[1] != -2) | live]
; [else-branch: 98 | First:(Second:(Second:(Second:($t@321@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@321@08))))))[1] != -2 | live]
(push) ; 14
; [then-branch: 98 | !(First:(Second:(Second:(Second:($t@321@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@321@08))))))[1] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
          1)
        (- 0 2))))))
; Loop head block: Re-establish invariant
(declare-const $k@363@08 $Perm)
(assert ($Perm.isReadVar $k@363@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@363@08 $Perm.No) (< $Perm.No $k@363@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26394
;  :arith-add-rows          95
;  :arith-assert-diseq      221
;  :arith-assert-lower      734
;  :arith-assert-upper      729
;  :arith-conflicts         307
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         301
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1353
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              887
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9247
;  :mk-clause               1003
;  :num-allocs              12664903
;  :num-checks              1658
;  :propagations            656
;  :quant-instantiations    234
;  :rlimit-count            544558)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= (+ $k@322@08 (- $k@228@08 $k@329@08)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          95
;  :arith-assert-diseq      221
;  :arith-assert-lower      734
;  :arith-assert-upper      730
;  :arith-conflicts         308
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         301
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1354
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9249
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1659
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            544638)
(assert (< $k@363@08 (+ $k@322@08 (- $k@228@08 $k@329@08))))
(assert (<= $Perm.No (- (+ $k@322@08 (- $k@228@08 $k@329@08)) $k@363@08)))
(assert (<= (- (+ $k@322@08 (- $k@228@08 $k@329@08)) $k@363@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@322@08 (- $k@228@08 $k@329@08)) $k@363@08))
  (not (= diz@47@08 $Ref.null))))
; [eval] diz.CASR_m != null
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      732
;  :arith-conflicts         309
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         302
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1355
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9253
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1660
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            544907)
(set-option :timeout 0)
(push) ; 15
(assert (not (not (= $t@362@08 $Ref.null))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      732
;  :arith-conflicts         309
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         302
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1355
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9253
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1661
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            544925)
(assert (not (= $t@362@08 $Ref.null)))
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      733
;  :arith-conflicts         310
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         303
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1356
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9254
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1662
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            545026)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      733
;  :arith-conflicts         310
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         303
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1357
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9255
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1663
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            545106)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      734
;  :arith-conflicts         311
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         304
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1358
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9256
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1664
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            545187)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      734
;  :arith-conflicts         311
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         304
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1359
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9257
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1665
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            545267)
; [eval] |diz.CASR_m.Main_process_state| == 3
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      735
;  :arith-conflicts         312
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         305
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1360
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9258
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1666
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            545348)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      735
;  :arith-conflicts         312
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         305
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1361
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9259
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1667
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            545428)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      736
;  :arith-conflicts         313
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         306
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1362
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9260
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1668
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            545509)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      736
;  :arith-conflicts         313
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         306
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1363
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9261
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1669
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            545589)
; [eval] |diz.CASR_m.Main_event_state| == 6
; [eval] |diz.CASR_m.Main_event_state|
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      737
;  :arith-conflicts         314
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         307
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1364
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9262
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1670
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            545670)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      737
;  :arith-conflicts         314
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         307
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1365
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9263
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1671
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            545750)
; [eval] (forall i__102: Int :: { diz.CASR_m.Main_process_state[i__102] } 0 <= i__102 && i__102 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__102] == -1 || 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|)
(declare-const i__102@364@08 Int)
(push) ; 15
; [eval] 0 <= i__102 && i__102 < |diz.CASR_m.Main_process_state| ==> diz.CASR_m.Main_process_state[i__102] == -1 || 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= i__102 && i__102 < |diz.CASR_m.Main_process_state|
; [eval] 0 <= i__102
(push) ; 16
; [then-branch: 99 | 0 <= i__102@364@08 | live]
; [else-branch: 99 | !(0 <= i__102@364@08) | live]
(push) ; 17
; [then-branch: 99 | 0 <= i__102@364@08]
(assert (<= 0 i__102@364@08))
; [eval] i__102 < |diz.CASR_m.Main_process_state|
; [eval] |diz.CASR_m.Main_process_state|
(push) ; 18
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      737
;  :arith-assert-upper      738
;  :arith-conflicts         315
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         308
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1366
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9265
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1672
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            545884)
(push) ; 18
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      737
;  :arith-assert-upper      738
;  :arith-conflicts         315
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         308
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1367
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9266
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1673
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            545964)
(pop) ; 17
(push) ; 17
; [else-branch: 99 | !(0 <= i__102@364@08)]
(assert (not (<= 0 i__102@364@08)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 100 | i__102@364@08 < |First:(Second:(Second:(Second:($t@321@08))))| && 0 <= i__102@364@08 | live]
; [else-branch: 100 | !(i__102@364@08 < |First:(Second:(Second:(Second:($t@321@08))))| && 0 <= i__102@364@08) | live]
(push) ; 17
; [then-branch: 100 | i__102@364@08 < |First:(Second:(Second:(Second:($t@321@08))))| && 0 <= i__102@364@08]
(assert (and
  (<
    i__102@364@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
  (<= 0 i__102@364@08)))
; [eval] diz.CASR_m.Main_process_state[i__102] == -1 || 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__102] == -1
; [eval] diz.CASR_m.Main_process_state[i__102]
(push) ; 18
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      738
;  :arith-assert-upper      740
;  :arith-conflicts         316
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         309
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1368
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9269
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1674
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            546154)
(push) ; 18
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      738
;  :arith-assert-upper      740
;  :arith-conflicts         316
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         309
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1369
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9270
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1675
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            546234)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__102@364@08 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      221
;  :arith-assert-lower      738
;  :arith-assert-upper      740
;  :arith-conflicts         316
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         309
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1369
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9270
;  :mk-clause               1005
;  :num-allocs              12664903
;  :num-checks              1676
;  :propagations            657
;  :quant-instantiations    234
;  :rlimit-count            546243)
; [eval] -1
(push) ; 18
; [then-branch: 101 | First:(Second:(Second:(Second:($t@321@08))))[i__102@364@08] == -1 | live]
; [else-branch: 101 | First:(Second:(Second:(Second:($t@321@08))))[i__102@364@08] != -1 | live]
(push) ; 19
; [then-branch: 101 | First:(Second:(Second:(Second:($t@321@08))))[i__102@364@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    i__102@364@08)
  (- 0 1)))
(pop) ; 19
(push) ; 19
; [else-branch: 101 | First:(Second:(Second:(Second:($t@321@08))))[i__102@364@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
      i__102@364@08)
    (- 0 1))))
; [eval] 0 <= diz.CASR_m.Main_process_state[i__102] && diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] 0 <= diz.CASR_m.Main_process_state[i__102]
; [eval] diz.CASR_m.Main_process_state[i__102]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      222
;  :arith-assert-lower      741
;  :arith-assert-upper      742
;  :arith-conflicts         317
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         310
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1370
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9277
;  :mk-clause               1009
;  :num-allocs              12664903
;  :num-checks              1677
;  :propagations            659
;  :quant-instantiations    235
;  :rlimit-count            546547)
(push) ; 20
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      222
;  :arith-assert-lower      741
;  :arith-assert-upper      742
;  :arith-conflicts         317
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         310
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1371
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9278
;  :mk-clause               1009
;  :num-allocs              12664903
;  :num-checks              1678
;  :propagations            659
;  :quant-instantiations    235
;  :rlimit-count            546627)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__102@364@08 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      222
;  :arith-assert-lower      741
;  :arith-assert-upper      742
;  :arith-conflicts         317
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         310
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1371
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9278
;  :mk-clause               1009
;  :num-allocs              12664903
;  :num-checks              1679
;  :propagations            659
;  :quant-instantiations    235
;  :rlimit-count            546636)
(push) ; 20
; [then-branch: 102 | 0 <= First:(Second:(Second:(Second:($t@321@08))))[i__102@364@08] | live]
; [else-branch: 102 | !(0 <= First:(Second:(Second:(Second:($t@321@08))))[i__102@364@08]) | live]
(push) ; 21
; [then-branch: 102 | 0 <= First:(Second:(Second:(Second:($t@321@08))))[i__102@364@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    i__102@364@08)))
; [eval] diz.CASR_m.Main_process_state[i__102] < |diz.CASR_m.Main_event_state|
; [eval] diz.CASR_m.Main_process_state[i__102]
(set-option :timeout 10)
(push) ; 22
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      222
;  :arith-assert-lower      741
;  :arith-assert-upper      743
;  :arith-conflicts         318
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         311
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1372
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9279
;  :mk-clause               1009
;  :num-allocs              12664903
;  :num-checks              1680
;  :propagations            659
;  :quant-instantiations    235
;  :rlimit-count            546822)
(push) ; 22
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      222
;  :arith-assert-lower      741
;  :arith-assert-upper      743
;  :arith-conflicts         318
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         311
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1373
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9280
;  :mk-clause               1009
;  :num-allocs              12664903
;  :num-checks              1681
;  :propagations            659
;  :quant-instantiations    235
;  :rlimit-count            546902)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= i__102@364@08 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      222
;  :arith-assert-lower      741
;  :arith-assert-upper      743
;  :arith-conflicts         318
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         311
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1373
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9280
;  :mk-clause               1009
;  :num-allocs              12664903
;  :num-checks              1682
;  :propagations            659
;  :quant-instantiations    235
;  :rlimit-count            546911)
; [eval] |diz.CASR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 22
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      222
;  :arith-assert-lower      741
;  :arith-assert-upper      744
;  :arith-conflicts         319
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         312
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1374
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9281
;  :mk-clause               1009
;  :num-allocs              12664903
;  :num-checks              1683
;  :propagations            659
;  :quant-instantiations    235
;  :rlimit-count            546992)
(push) ; 22
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      222
;  :arith-assert-lower      741
;  :arith-assert-upper      744
;  :arith-conflicts         319
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         312
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1375
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              889
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9282
;  :mk-clause               1009
;  :num-allocs              12664903
;  :num-checks              1684
;  :propagations            659
;  :quant-instantiations    235
;  :rlimit-count            547072)
(pop) ; 21
(push) ; 21
; [else-branch: 102 | !(0 <= First:(Second:(Second:(Second:($t@321@08))))[i__102@364@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
      i__102@364@08))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 100 | !(i__102@364@08 < |First:(Second:(Second:(Second:($t@321@08))))| && 0 <= i__102@364@08)]
(assert (not
  (and
    (<
      i__102@364@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
    (<= 0 i__102@364@08))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 15
(assert (not (forall ((i__102@364@08 Int)) (!
  (implies
    (and
      (<
        i__102@364@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
      (<= 0 i__102@364@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
          i__102@364@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
            i__102@364@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
            i__102@364@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    i__102@364@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      223
;  :arith-assert-lower      742
;  :arith-assert-upper      745
;  :arith-conflicts         319
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         312
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1376
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              905
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9290
;  :mk-clause               1021
;  :num-allocs              12664903
;  :num-checks              1685
;  :propagations            661
;  :quant-instantiations    236
;  :rlimit-count            547518)
(assert (forall ((i__102@364@08 Int)) (!
  (implies
    (and
      (<
        i__102@364@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
      (<= 0 i__102@364@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
          i__102@364@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
            i__102@364@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
            i__102@364@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
    i__102@364@08))
  :qid |prog.l<no position>|)))
(declare-const $k@365@08 $Perm)
(assert ($Perm.isReadVar $k@365@08 $Perm.Write))
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      224
;  :arith-assert-lower      744
;  :arith-assert-upper      747
;  :arith-conflicts         320
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         313
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1377
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              905
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9296
;  :mk-clause               1023
;  :num-allocs              12664903
;  :num-checks              1686
;  :propagations            662
;  :quant-instantiations    236
;  :rlimit-count            548111)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@365@08 $Perm.No) (< $Perm.No $k@365@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      224
;  :arith-assert-lower      744
;  :arith-assert-upper      747
;  :arith-conflicts         320
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         313
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1378
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              905
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9296
;  :mk-clause               1023
;  :num-allocs              12664903
;  :num-checks              1687
;  :propagations            662
;  :quant-instantiations    236
;  :rlimit-count            548161)
(set-option :timeout 10)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      224
;  :arith-assert-lower      744
;  :arith-assert-upper      747
;  :arith-conflicts         320
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         313
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1378
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              905
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9296
;  :mk-clause               1023
;  :num-allocs              12664903
;  :num-checks              1688
;  :propagations            662
;  :quant-instantiations    236
;  :rlimit-count            548180)
(push) ; 15
(assert (not (not (= (- $k@230@08 $k@331@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          97
;  :arith-assert-diseq      224
;  :arith-assert-lower      744
;  :arith-assert-upper      747
;  :arith-conflicts         320
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         313
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               1379
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              905
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9297
;  :mk-clause               1023
;  :num-allocs              12664903
;  :num-checks              1689
;  :propagations            662
;  :quant-instantiations    236
;  :rlimit-count            548248)
(assert (< $k@365@08 (- $k@230@08 $k@331@08)))
(assert (<= $Perm.No (- (- $k@230@08 $k@331@08) $k@365@08)))
(assert (<= (- (- $k@230@08 $k@331@08) $k@365@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@230@08 $k@331@08) $k@365@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn != null
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      749
;  :arith-conflicts         321
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         314
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               1380
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              905
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9301
;  :mk-clause               1023
;  :num-allocs              12664903
;  :num-checks              1690
;  :propagations            662
;  :quant-instantiations    236
;  :rlimit-count            548535)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      749
;  :arith-conflicts         321
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         314
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               1380
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              905
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9301
;  :mk-clause               1023
;  :num-allocs              12664903
;  :num-checks              1691
;  :propagations            662
;  :quant-instantiations    236
;  :rlimit-count            548554)
(push) ; 15
(assert (not (< $Perm.No (- $k@230@08 $k@331@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      749
;  :arith-conflicts         321
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         314
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               1380
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              905
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9301
;  :mk-clause               1023
;  :num-allocs              12664903
;  :num-checks              1692
;  :propagations            662
;  :quant-instantiations    236
;  :rlimit-count            548573)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      750
;  :arith-conflicts         322
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         315
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               1381
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              905
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9302
;  :mk-clause               1023
;  :num-allocs              12664903
;  :num-checks              1693
;  :propagations            662
;  :quant-instantiations    236
;  :rlimit-count            548654)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      750
;  :arith-conflicts         322
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         315
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               1381
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              905
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9302
;  :mk-clause               1023
;  :num-allocs              12664903
;  :num-checks              1694
;  :propagations            662
;  :quant-instantiations    236
;  :rlimit-count            548673)
(push) ; 15
(assert (not (< $Perm.No (- $k@230@08 $k@331@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26395
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      750
;  :arith-conflicts         322
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         315
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               1381
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 7213
;  :datatype-occurs-check   1390
;  :datatype-splits         5905
;  :decisions               6964
;  :del-clause              905
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9302
;  :mk-clause               1023
;  :num-allocs              12664903
;  :num-checks              1695
;  :propagations            662
;  :quant-instantiations    236
;  :rlimit-count            548692)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26818
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      750
;  :arith-conflicts         322
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         315
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               1382
;  :datatype-accessor-ax    857
;  :datatype-constructor-ax 7349
;  :datatype-occurs-check   1406
;  :datatype-splits         6015
;  :decisions               7095
;  :del-clause              906
;  :final-checks            222
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9415
;  :mk-clause               1024
;  :num-allocs              12664903
;  :num-checks              1696
;  :propagations            666
;  :quant-instantiations    236
;  :rlimit-count            551470
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27562
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      750
;  :arith-conflicts         322
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         315
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               1383
;  :datatype-accessor-ax    865
;  :datatype-constructor-ax 7569
;  :datatype-occurs-check   1436
;  :datatype-splits         6231
;  :decisions               7307
;  :del-clause              910
;  :final-checks            228
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9629
;  :mk-clause               1024
;  :num-allocs              12664903
;  :num-checks              1699
;  :propagations            674
;  :quant-instantiations    236
;  :rlimit-count            556125)
(declare-const $t@366@08 $Ref)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27985
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      750
;  :arith-conflicts         322
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         315
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               1384
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9742
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1700
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            558903
;  :time                    0.00)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27985
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      750
;  :arith-conflicts         322
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         315
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               1385
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9743
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1701
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            558988)
(declare-const $t@367@08 $Ref)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27985
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      750
;  :arith-conflicts         322
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         315
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               1386
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9744
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1702
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            559073)
(declare-const $t@368@08 $Ref)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27985
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      750
;  :arith-conflicts         322
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         315
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               1387
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9745
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1703
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            559158)
(declare-const $t@369@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@230@08 $k@331@08) $k@365@08))
    (=
      $t@366@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
  (implies
    (< $Perm.No $k@324@08)
    (=
      $t@366@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@327@08)
    (=
      $t@367@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@233@08 $k@334@08))
    (=
      $t@367@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@326@08)
    (=
      $t@368@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@232@08 $k@333@08))
    (=
      $t@368@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@325@08)
    (=
      $t@369@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@231@08 $k@332@08))
    (=
      $t@369@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27998
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      750
;  :arith-conflicts         322
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         315
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               1388
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9752
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1704
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            560509)
(declare-const $t@370@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@234@08 $k@335@08))
    (=
      $t@370@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@328@08)
    (=
      $t@370@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@325@08 (- $k@231@08 $k@332@08))))
(assert (<= (+ $k@325@08 (- $k@231@08 $k@332@08)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@325@08 (- $k@231@08 $k@332@08)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (<= $Perm.No (+ $k@326@08 (- $k@232@08 $k@333@08))))
(assert (<= (+ $k@326@08 (- $k@232@08 $k@333@08)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@326@08 (- $k@232@08 $k@333@08)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (<= $Perm.No (+ $k@327@08 (- $k@233@08 $k@334@08))))
(assert (<= (+ $k@327@08 (- $k@233@08 $k@334@08)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@327@08 (- $k@233@08 $k@334@08)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@230@08 $k@331@08) $k@365@08) $k@324@08)))
(assert (<= (+ (- (- $k@230@08 $k@331@08) $k@365@08) $k@324@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@230@08 $k@331@08) $k@365@08) $k@324@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (<= $Perm.No (+ (- $k@234@08 $k@335@08) $k@328@08)))
(assert (<= (+ (- $k@234@08 $k@335@08) $k@328@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@234@08 $k@335@08) $k@328@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
      $Ref.null))))
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      755
;  :arith-conflicts         322
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         315
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1389
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9764
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1705
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            561393)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      756
;  :arith-conflicts         323
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         316
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1390
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9765
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1706
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            561474)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      756
;  :arith-conflicts         323
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         316
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1390
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9765
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1707
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            561493
;  :time                    0.00)
(push) ; 15
(assert (not (< $Perm.No (- $k@230@08 $k@331@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      756
;  :arith-conflicts         323
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         316
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1390
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9765
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1708
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            561512)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      756
;  :arith-conflicts         323
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         316
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1391
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9766
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1709
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            561677)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      757
;  :arith-conflicts         324
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         317
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1392
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9767
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1710
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            561758)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      757
;  :arith-conflicts         324
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         317
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1392
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9767
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1711
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            561777)
(push) ; 15
(assert (not (< $Perm.No (- $k@230@08 $k@331@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      757
;  :arith-conflicts         324
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         317
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1392
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9767
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1712
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            561796)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      757
;  :arith-conflicts         324
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         317
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1393
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9768
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1713
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            561961)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      758
;  :arith-conflicts         325
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         318
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1394
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9769
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1714
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562042)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      758
;  :arith-conflicts         325
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         318
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1394
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9769
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1715
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562061)
(push) ; 15
(assert (not (< $Perm.No (- $k@230@08 $k@331@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      758
;  :arith-conflicts         325
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         318
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1394
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9769
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1716
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562080)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      758
;  :arith-conflicts         325
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         318
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1395
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9770
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1717
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562245)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      759
;  :arith-conflicts         326
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         319
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1396
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9771
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1718
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562326)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      759
;  :arith-conflicts         326
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         319
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1396
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9771
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1719
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562345)
(push) ; 15
(assert (not (< $Perm.No (- $k@230@08 $k@331@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      759
;  :arith-conflicts         326
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         319
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1396
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9771
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1720
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562364)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      759
;  :arith-conflicts         326
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         319
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1397
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9772
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1721
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562529)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      760
;  :arith-conflicts         327
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         320
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1398
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9773
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1722
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562610)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      760
;  :arith-conflicts         327
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         320
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1398
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9773
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1723
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562629)
(push) ; 15
(assert (not (< $Perm.No (- $k@230@08 $k@331@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      760
;  :arith-conflicts         327
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         320
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1398
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9773
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1724
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562648)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      760
;  :arith-conflicts         327
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         320
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1399
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9774
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1725
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562813)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      761
;  :arith-conflicts         328
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         321
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1400
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9775
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1726
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562894)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      761
;  :arith-conflicts         328
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         321
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1400
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9775
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1727
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562913)
(push) ; 15
(assert (not (< $Perm.No (- $k@230@08 $k@331@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      761
;  :arith-conflicts         328
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         321
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1400
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9775
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1728
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            562932)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      761
;  :arith-conflicts         328
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         321
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1401
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9776
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1729
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            563097)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      762
;  :arith-conflicts         329
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         322
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1402
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9777
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1730
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            563178)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      762
;  :arith-conflicts         329
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         322
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1402
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9777
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1731
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            563197)
(push) ; 15
(assert (not (< $Perm.No (- $k@230@08 $k@331@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      762
;  :arith-conflicts         329
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         322
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1402
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9777
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1732
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            563216)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      762
;  :arith-conflicts         329
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         322
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1403
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9778
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1733
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            563381)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      763
;  :arith-conflicts         330
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         323
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1404
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9779
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1734
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            563462)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      763
;  :arith-conflicts         330
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         323
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1404
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9779
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1735
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            563481)
(push) ; 15
(assert (not (< $Perm.No (- $k@230@08 $k@331@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      763
;  :arith-conflicts         330
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         323
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1404
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9779
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1736
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            563500)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      763
;  :arith-conflicts         330
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         323
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1405
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9780
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1737
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            563665)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      764
;  :arith-conflicts         331
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         324
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1406
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9781
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1738
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            563746)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      764
;  :arith-conflicts         331
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         324
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1406
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9781
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1739
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            563765)
(push) ; 15
(assert (not (< $Perm.No (- $k@230@08 $k@331@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      764
;  :arith-conflicts         331
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         324
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1406
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9781
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1740
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            563784)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      224
;  :arith-assert-lower      751
;  :arith-assert-upper      764
;  :arith-conflicts         331
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         324
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1407
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9782
;  :mk-clause               1025
;  :num-allocs              12664903
;  :num-checks              1741
;  :propagations            678
;  :quant-instantiations    236
;  :rlimit-count            563949)
(declare-const $k@371@08 $Perm)
(assert ($Perm.isReadVar $k@371@08 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      225
;  :arith-assert-lower      753
;  :arith-assert-upper      766
;  :arith-conflicts         332
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         325
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1408
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9787
;  :mk-clause               1027
;  :num-allocs              12664903
;  :num-checks              1742
;  :propagations            679
;  :quant-instantiations    236
;  :rlimit-count            564179)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@371@08 $Perm.No) (< $Perm.No $k@371@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      225
;  :arith-assert-lower      753
;  :arith-assert-upper      766
;  :arith-conflicts         332
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         325
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1409
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9787
;  :mk-clause               1027
;  :num-allocs              12664903
;  :num-checks              1743
;  :propagations            679
;  :quant-instantiations    236
;  :rlimit-count            564229)
(set-option :timeout 10)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27999
;  :arith-add-rows          102
;  :arith-assert-diseq      225
;  :arith-assert-lower      753
;  :arith-assert-upper      766
;  :arith-conflicts         332
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         325
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               1410
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              911
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9788
;  :mk-clause               1027
;  :num-allocs              12664903
;  :num-checks              1744
;  :propagations            679
;  :quant-instantiations    236
;  :rlimit-count            564309)
(push) ; 15
(assert (not (not (= (+ $k@325@08 (- $k@231@08 $k@332@08)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          102
;  :arith-assert-diseq      225
;  :arith-assert-lower      753
;  :arith-assert-upper      767
;  :arith-conflicts         333
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         325
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1411
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9790
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1745
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            564393)
(assert (< $k@371@08 (+ $k@325@08 (- $k@231@08 $k@332@08))))
(assert (<= $Perm.No (- (+ $k@325@08 (- $k@231@08 $k@332@08)) $k@371@08)))
(assert (<= (- (+ $k@325@08 (- $k@231@08 $k@332@08)) $k@371@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@325@08 (- $k@231@08 $k@332@08)) $k@371@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_casr != null
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      769
;  :arith-conflicts         334
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         326
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1412
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9794
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1746
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            564662)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      769
;  :arith-conflicts         334
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         326
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1412
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9794
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1747
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            564681)
(push) ; 15
(assert (not (< $Perm.No (- $k@231@08 $k@332@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      769
;  :arith-conflicts         334
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         326
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1412
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9794
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1748
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            564700)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      770
;  :arith-conflicts         335
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         327
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1413
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9795
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1749
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            564781)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      770
;  :arith-conflicts         335
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         327
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1413
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9795
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1750
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            564800)
(push) ; 15
(assert (not (< $Perm.No (- $k@231@08 $k@332@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      770
;  :arith-conflicts         335
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         327
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1413
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9795
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1751
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            564819)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      770
;  :arith-conflicts         335
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         327
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1413
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9795
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1752
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            564830)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      771
;  :arith-conflicts         336
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         328
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1414
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9796
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1753
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            564911)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      771
;  :arith-conflicts         336
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         328
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1414
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9796
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1754
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            564930)
(push) ; 15
(assert (not (< $Perm.No (- $k@231@08 $k@332@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      771
;  :arith-conflicts         336
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         328
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1414
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9796
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1755
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            564949)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      771
;  :arith-conflicts         336
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         328
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1414
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9796
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1756
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            564960)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      772
;  :arith-conflicts         337
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         329
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1415
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9797
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1757
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565041)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      772
;  :arith-conflicts         337
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         329
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1415
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9797
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1758
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565060)
(push) ; 15
(assert (not (< $Perm.No (- $k@231@08 $k@332@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      772
;  :arith-conflicts         337
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         329
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1415
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9797
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1759
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565079)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      772
;  :arith-conflicts         337
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         329
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1415
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9797
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1760
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565090)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      773
;  :arith-conflicts         338
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         330
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1416
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9798
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1761
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565171)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      773
;  :arith-conflicts         338
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         330
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1416
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9798
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1762
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565190)
(push) ; 15
(assert (not (< $Perm.No (- $k@231@08 $k@332@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      773
;  :arith-conflicts         338
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         330
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1416
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9798
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1763
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565209)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      773
;  :arith-conflicts         338
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         330
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1416
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9798
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1764
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565220)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      774
;  :arith-conflicts         339
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         331
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1417
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9799
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1765
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565301)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      774
;  :arith-conflicts         339
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         331
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1417
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9799
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1766
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565320)
(push) ; 15
(assert (not (< $Perm.No (- $k@231@08 $k@332@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      774
;  :arith-conflicts         339
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         331
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1417
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9799
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1767
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565339)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      774
;  :arith-conflicts         339
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         331
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1417
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9799
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1768
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565350)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      775
;  :arith-conflicts         340
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         332
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1418
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9800
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1769
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565431)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      775
;  :arith-conflicts         340
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         332
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1418
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9800
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1770
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565450
;  :time                    0.00)
(push) ; 15
(assert (not (< $Perm.No (- $k@231@08 $k@332@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      775
;  :arith-conflicts         340
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         332
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1418
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9800
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1771
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565469)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      775
;  :arith-conflicts         340
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         332
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1418
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9800
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1772
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565480)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      776
;  :arith-conflicts         341
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         333
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1419
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9801
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1773
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565561)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      776
;  :arith-conflicts         341
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         333
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1419
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9801
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1774
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565580)
(push) ; 15
(assert (not (< $Perm.No (- $k@231@08 $k@332@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      776
;  :arith-conflicts         341
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         333
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1419
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9801
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1775
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565599)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      225
;  :arith-assert-lower      755
;  :arith-assert-upper      776
;  :arith-conflicts         341
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         333
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1419
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9801
;  :mk-clause               1029
;  :num-allocs              12664903
;  :num-checks              1776
;  :propagations            680
;  :quant-instantiations    236
;  :rlimit-count            565610)
(declare-const $k@372@08 $Perm)
(assert ($Perm.isReadVar $k@372@08 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      226
;  :arith-assert-lower      757
;  :arith-assert-upper      778
;  :arith-conflicts         342
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         334
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1420
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9806
;  :mk-clause               1031
;  :num-allocs              12664903
;  :num-checks              1777
;  :propagations            681
;  :quant-instantiations    236
;  :rlimit-count            565839)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@372@08 $Perm.No) (< $Perm.No $k@372@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      226
;  :arith-assert-lower      757
;  :arith-assert-upper      778
;  :arith-conflicts         342
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         334
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1421
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9806
;  :mk-clause               1031
;  :num-allocs              12664903
;  :num-checks              1778
;  :propagations            681
;  :quant-instantiations    236
;  :rlimit-count            565889)
(set-option :timeout 10)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28000
;  :arith-add-rows          104
;  :arith-assert-diseq      226
;  :arith-assert-lower      757
;  :arith-assert-upper      778
;  :arith-conflicts         342
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         334
;  :arith-pivots            180
;  :binary-propagations     22
;  :conflicts               1422
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              913
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9807
;  :mk-clause               1031
;  :num-allocs              12664903
;  :num-checks              1779
;  :propagations            681
;  :quant-instantiations    236
;  :rlimit-count            565969)
(push) ; 15
(assert (not (not (= (+ $k@326@08 (- $k@232@08 $k@333@08)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          105
;  :arith-assert-diseq      226
;  :arith-assert-lower      757
;  :arith-assert-upper      779
;  :arith-conflicts         343
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         334
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1423
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9809
;  :mk-clause               1033
;  :num-allocs              12664903
;  :num-checks              1780
;  :propagations            682
;  :quant-instantiations    236
;  :rlimit-count            566083)
(assert (< $k@372@08 (+ $k@326@08 (- $k@232@08 $k@333@08))))
(assert (<= $Perm.No (- (+ $k@326@08 (- $k@232@08 $k@333@08)) $k@372@08)))
(assert (<= (- (+ $k@326@08 (- $k@232@08 $k@333@08)) $k@372@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@326@08 (- $k@232@08 $k@333@08)) $k@372@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_lfsr != null
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      226
;  :arith-assert-lower      759
;  :arith-assert-upper      781
;  :arith-conflicts         344
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         335
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1424
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9813
;  :mk-clause               1033
;  :num-allocs              12664903
;  :num-checks              1781
;  :propagations            682
;  :quant-instantiations    236
;  :rlimit-count            566357)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      226
;  :arith-assert-lower      759
;  :arith-assert-upper      781
;  :arith-conflicts         344
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         335
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1424
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9813
;  :mk-clause               1033
;  :num-allocs              12664903
;  :num-checks              1782
;  :propagations            682
;  :quant-instantiations    236
;  :rlimit-count            566376)
(push) ; 15
(assert (not (< $Perm.No (- $k@232@08 $k@333@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      226
;  :arith-assert-lower      759
;  :arith-assert-upper      781
;  :arith-conflicts         344
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         335
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1424
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9813
;  :mk-clause               1033
;  :num-allocs              12664903
;  :num-checks              1783
;  :propagations            682
;  :quant-instantiations    236
;  :rlimit-count            566395)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      226
;  :arith-assert-lower      759
;  :arith-assert-upper      782
;  :arith-conflicts         345
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         336
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1425
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9814
;  :mk-clause               1033
;  :num-allocs              12664903
;  :num-checks              1784
;  :propagations            682
;  :quant-instantiations    236
;  :rlimit-count            566476)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      226
;  :arith-assert-lower      759
;  :arith-assert-upper      782
;  :arith-conflicts         345
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         336
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1425
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9814
;  :mk-clause               1033
;  :num-allocs              12664903
;  :num-checks              1785
;  :propagations            682
;  :quant-instantiations    236
;  :rlimit-count            566495)
(push) ; 15
(assert (not (< $Perm.No (- $k@232@08 $k@333@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      226
;  :arith-assert-lower      759
;  :arith-assert-upper      782
;  :arith-conflicts         345
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         336
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1425
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9814
;  :mk-clause               1033
;  :num-allocs              12664903
;  :num-checks              1786
;  :propagations            682
;  :quant-instantiations    236
;  :rlimit-count            566514)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      226
;  :arith-assert-lower      759
;  :arith-assert-upper      782
;  :arith-conflicts         345
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         336
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1426
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9815
;  :mk-clause               1033
;  :num-allocs              12664903
;  :num-checks              1787
;  :propagations            682
;  :quant-instantiations    236
;  :rlimit-count            566884)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      226
;  :arith-assert-lower      759
;  :arith-assert-upper      783
;  :arith-conflicts         346
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         337
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1427
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9816
;  :mk-clause               1033
;  :num-allocs              12664903
;  :num-checks              1788
;  :propagations            682
;  :quant-instantiations    236
;  :rlimit-count            566965)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      226
;  :arith-assert-lower      759
;  :arith-assert-upper      783
;  :arith-conflicts         346
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         337
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1427
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9816
;  :mk-clause               1033
;  :num-allocs              12664903
;  :num-checks              1789
;  :propagations            682
;  :quant-instantiations    236
;  :rlimit-count            566984)
(push) ; 15
(assert (not (< $Perm.No (- $k@232@08 $k@333@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      226
;  :arith-assert-lower      759
;  :arith-assert-upper      783
;  :arith-conflicts         346
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         337
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1427
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9816
;  :mk-clause               1033
;  :num-allocs              12664903
;  :num-checks              1790
;  :propagations            682
;  :quant-instantiations    236
;  :rlimit-count            567003)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      226
;  :arith-assert-lower      759
;  :arith-assert-upper      783
;  :arith-conflicts         346
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         337
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1428
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9817
;  :mk-clause               1033
;  :num-allocs              12664903
;  :num-checks              1791
;  :propagations            682
;  :quant-instantiations    236
;  :rlimit-count            567373)
(declare-const $k@373@08 $Perm)
(assert ($Perm.isReadVar $k@373@08 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      227
;  :arith-assert-lower      761
;  :arith-assert-upper      785
;  :arith-conflicts         347
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         338
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1429
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9822
;  :mk-clause               1035
;  :num-allocs              12664903
;  :num-checks              1792
;  :propagations            683
;  :quant-instantiations    236
;  :rlimit-count            567603)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@373@08 $Perm.No) (< $Perm.No $k@373@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      227
;  :arith-assert-lower      761
;  :arith-assert-upper      785
;  :arith-conflicts         347
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         338
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1430
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9822
;  :mk-clause               1035
;  :num-allocs              12664903
;  :num-checks              1793
;  :propagations            683
;  :quant-instantiations    236
;  :rlimit-count            567653)
(set-option :timeout 10)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28001
;  :arith-add-rows          106
;  :arith-assert-diseq      227
;  :arith-assert-lower      761
;  :arith-assert-upper      785
;  :arith-conflicts         347
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         338
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1431
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              915
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9823
;  :mk-clause               1035
;  :num-allocs              12664903
;  :num-checks              1794
;  :propagations            683
;  :quant-instantiations    236
;  :rlimit-count            567733)
(push) ; 15
(assert (not (not (= (+ $k@327@08 (- $k@233@08 $k@334@08)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28002
;  :arith-add-rows          106
;  :arith-assert-diseq      227
;  :arith-assert-lower      761
;  :arith-assert-upper      786
;  :arith-conflicts         348
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         338
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1432
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              917
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9825
;  :mk-clause               1037
;  :num-allocs              12664903
;  :num-checks              1795
;  :propagations            684
;  :quant-instantiations    236
;  :rlimit-count            567817)
(assert (< $k@373@08 (+ $k@327@08 (- $k@233@08 $k@334@08))))
(assert (<= $Perm.No (- (+ $k@327@08 (- $k@233@08 $k@334@08)) $k@373@08)))
(assert (<= (- (+ $k@327@08 (- $k@233@08 $k@334@08)) $k@373@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@327@08 (- $k@233@08 $k@334@08)) $k@373@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@321@08)) $Ref.null))))
; [eval] diz.CASR_m.Main_rn_combinate != null
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28002
;  :arith-add-rows          108
;  :arith-assert-diseq      227
;  :arith-assert-lower      763
;  :arith-assert-upper      788
;  :arith-conflicts         349
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         339
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1433
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              917
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9829
;  :mk-clause               1037
;  :num-allocs              12664903
;  :num-checks              1796
;  :propagations            684
;  :quant-instantiations    236
;  :rlimit-count            568086)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28002
;  :arith-add-rows          108
;  :arith-assert-diseq      227
;  :arith-assert-lower      763
;  :arith-assert-upper      788
;  :arith-conflicts         349
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         339
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1433
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              917
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9829
;  :mk-clause               1037
;  :num-allocs              12664903
;  :num-checks              1797
;  :propagations            684
;  :quant-instantiations    236
;  :rlimit-count            568105)
(push) ; 15
(assert (not (< $Perm.No (- $k@233@08 $k@334@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28002
;  :arith-add-rows          108
;  :arith-assert-diseq      227
;  :arith-assert-lower      763
;  :arith-assert-upper      788
;  :arith-conflicts         349
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         339
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1433
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              917
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9829
;  :mk-clause               1037
;  :num-allocs              12664903
;  :num-checks              1798
;  :propagations            684
;  :quant-instantiations    236
;  :rlimit-count            568124)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28002
;  :arith-add-rows          108
;  :arith-assert-diseq      227
;  :arith-assert-lower      763
;  :arith-assert-upper      789
;  :arith-conflicts         350
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         340
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1434
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              917
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9830
;  :mk-clause               1037
;  :num-allocs              12664903
;  :num-checks              1799
;  :propagations            684
;  :quant-instantiations    236
;  :rlimit-count            568205)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28002
;  :arith-add-rows          108
;  :arith-assert-diseq      227
;  :arith-assert-lower      763
;  :arith-assert-upper      789
;  :arith-conflicts         350
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         340
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1434
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              917
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9830
;  :mk-clause               1037
;  :num-allocs              12664903
;  :num-checks              1800
;  :propagations            684
;  :quant-instantiations    236
;  :rlimit-count            568224)
(push) ; 15
(assert (not (< $Perm.No (- $k@233@08 $k@334@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28002
;  :arith-add-rows          108
;  :arith-assert-diseq      227
;  :arith-assert-lower      763
;  :arith-assert-upper      789
;  :arith-conflicts         350
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         340
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1434
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              917
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9830
;  :mk-clause               1037
;  :num-allocs              12664903
;  :num-checks              1801
;  :propagations            684
;  :quant-instantiations    236
;  :rlimit-count            568243)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28002
;  :arith-add-rows          108
;  :arith-assert-diseq      227
;  :arith-assert-lower      763
;  :arith-assert-upper      789
;  :arith-conflicts         350
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         340
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1435
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              917
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9831
;  :mk-clause               1037
;  :num-allocs              12664903
;  :num-checks              1802
;  :propagations            684
;  :quant-instantiations    236
;  :rlimit-count            568653)
(declare-const $k@374@08 $Perm)
(assert ($Perm.isReadVar $k@374@08 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28002
;  :arith-add-rows          108
;  :arith-assert-diseq      228
;  :arith-assert-lower      765
;  :arith-assert-upper      791
;  :arith-conflicts         351
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         341
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1436
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              917
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9836
;  :mk-clause               1039
;  :num-allocs              12664903
;  :num-checks              1803
;  :propagations            685
;  :quant-instantiations    236
;  :rlimit-count            568882)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28002
;  :arith-add-rows          108
;  :arith-assert-diseq      228
;  :arith-assert-lower      765
;  :arith-assert-upper      791
;  :arith-conflicts         351
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         341
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1436
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              917
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9836
;  :mk-clause               1039
;  :num-allocs              12664903
;  :num-checks              1804
;  :propagations            685
;  :quant-instantiations    236
;  :rlimit-count            568901)
(push) ; 15
(assert (not (< $Perm.No (- $k@230@08 $k@331@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28002
;  :arith-add-rows          108
;  :arith-assert-diseq      228
;  :arith-assert-lower      765
;  :arith-assert-upper      791
;  :arith-conflicts         351
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         341
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1436
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              917
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9836
;  :mk-clause               1039
;  :num-allocs              12664903
;  :num-checks              1805
;  :propagations            685
;  :quant-instantiations    236
;  :rlimit-count            568920)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@374@08 $Perm.No) (< $Perm.No $k@374@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28002
;  :arith-add-rows          108
;  :arith-assert-diseq      228
;  :arith-assert-lower      765
;  :arith-assert-upper      791
;  :arith-conflicts         351
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         341
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1437
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              917
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9836
;  :mk-clause               1039
;  :num-allocs              12664903
;  :num-checks              1806
;  :propagations            685
;  :quant-instantiations    236
;  :rlimit-count            568970)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= (+ (- $k@234@08 $k@335@08) $k@328@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28003
;  :arith-add-rows          109
;  :arith-assert-diseq      228
;  :arith-assert-lower      765
;  :arith-assert-upper      792
;  :arith-conflicts         352
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         341
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1438
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              919
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9838
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1807
;  :propagations            686
;  :quant-instantiations    236
;  :rlimit-count            569079)
(assert (< $k@374@08 (+ (- $k@234@08 $k@335@08) $k@328@08)))
(assert (<= $Perm.No (- (+ (- $k@234@08 $k@335@08) $k@328@08) $k@374@08)))
(assert (<= (- (+ (- $k@234@08 $k@335@08) $k@328@08) $k@374@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@234@08 $k@335@08) $k@328@08) $k@374@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
      $Ref.null))))
; [eval] diz.CASR_m.Main_rn.Rng_m == diz.CASR_m
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28003
;  :arith-add-rows          110
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      794
;  :arith-conflicts         353
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         342
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1439
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              919
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9842
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1808
;  :propagations            686
;  :quant-instantiations    236
;  :rlimit-count            569347)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28003
;  :arith-add-rows          110
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      794
;  :arith-conflicts         353
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         342
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1439
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              919
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9842
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1809
;  :propagations            686
;  :quant-instantiations    236
;  :rlimit-count            569366)
(push) ; 15
(assert (not (< $Perm.No (- $k@230@08 $k@331@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28003
;  :arith-add-rows          110
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      794
;  :arith-conflicts         353
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         342
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1439
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              919
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9842
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1810
;  :propagations            686
;  :quant-instantiations    236
;  :rlimit-count            569385)
(push) ; 15
(assert (not (< $Perm.No (- $k@234@08 $k@335@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28003
;  :arith-add-rows          110
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      794
;  :arith-conflicts         353
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         342
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1439
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              919
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9842
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1811
;  :propagations            686
;  :quant-instantiations    236
;  :rlimit-count            569404)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28003
;  :arith-add-rows          110
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      795
;  :arith-conflicts         354
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         343
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1440
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              919
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9843
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1812
;  :propagations            686
;  :quant-instantiations    236
;  :rlimit-count            569485)
(set-option :timeout 0)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
  $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28003
;  :arith-add-rows          110
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      795
;  :arith-conflicts         354
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         343
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1440
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              919
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9843
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1813
;  :propagations            686
;  :quant-instantiations    236
;  :rlimit-count            569507)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
  $t@362@08))
; [eval] diz.CASR_m.Main_rn_casr == diz
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ $k@322@08 (- $k@228@08 $k@329@08)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28003
;  :arith-add-rows          110
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1441
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              919
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9844
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1814
;  :propagations            686
;  :quant-instantiations    236
;  :rlimit-count            569607)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@362@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28003
;  :arith-add-rows          110
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1441
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              919
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9844
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1815
;  :propagations            686
;  :quant-instantiations    236
;  :rlimit-count            569626)
(push) ; 15
(assert (not (< $Perm.No (- $k@231@08 $k@332@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28003
;  :arith-add-rows          110
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1441
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              919
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9844
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1816
;  :propagations            686
;  :quant-instantiations    236
;  :rlimit-count            569645)
(pop) ; 14
(push) ; 14
; [else-branch: 98 | First:(Second:(Second:(Second:($t@321@08))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@321@08))))))[1] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@08)))))))
        1)
      (- 0 2)))))
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 72 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08)))))))))))))) != 0]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
    0)))
(pop) ; 11
; [eval] !(__flatten_19__52.Rng_seed_i == 0)
; [eval] __flatten_19__52.Rng_seed_i == 0
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  __flatten_19__52@312@08)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28003
;  :arith-add-rows          115
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1441
;  :datatype-accessor-ax    870
;  :datatype-constructor-ax 7705
;  :datatype-occurs-check   1452
;  :datatype-splits         6341
;  :decisions               7438
;  :del-clause              981
;  :final-checks            231
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9844
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1817
;  :propagations            686
;  :quant-instantiations    236
;  :rlimit-count            569863)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
  0)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28272
;  :arith-add-rows          115
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1441
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7787
;  :datatype-occurs-check   1465
;  :datatype-splits         6421
;  :decisions               7517
;  :del-clause              981
;  :final-checks            234
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             9925
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1818
;  :propagations            689
;  :quant-instantiations    237
;  :rlimit-count            571842
;  :time                    0.00)
(push) ; 11
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28542
;  :arith-add-rows          115
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1441
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10006
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1819
;  :propagations            692
;  :quant-instantiations    238
;  :rlimit-count            573807
;  :time                    0.00)
; [then-branch: 103 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08)))))))))))))) != 0 | live]
; [else-branch: 103 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08)))))))))))))) == 0 | live]
(push) ; 11
; [then-branch: 103 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@227@08)))))))))))))) != 0]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))
    0)))
; [exec]
; __flatten_24__57 := diz.CASR_m
(push) ; 12
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28543
;  :arith-add-rows          115
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1442
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10008
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1820
;  :propagations            692
;  :quant-instantiations    239
;  :rlimit-count            574078)
(declare-const __flatten_24__57@375@08 $Ref)
(assert (= __flatten_24__57@375@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_23__56 := __flatten_24__57.Main_rn
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_24__57@375@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28544
;  :arith-add-rows          115
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1442
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10009
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1821
;  :propagations            692
;  :quant-instantiations    239
;  :rlimit-count            574126)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28544
;  :arith-add-rows          115
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1443
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10009
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1822
;  :propagations            692
;  :quant-instantiations    239
;  :rlimit-count            574174)
(declare-const __flatten_23__56@376@08 $Ref)
(assert (=
  __flatten_23__56@376@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
; [exec]
; __flatten_27__60 := diz.CASR_m
(push) ; 12
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28545
;  :arith-add-rows          115
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1444
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10010
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1823
;  :propagations            692
;  :quant-instantiations    239
;  :rlimit-count            574259)
(declare-const __flatten_27__60@377@08 $Ref)
(assert (= __flatten_27__60@377@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_26__59 := __flatten_27__60.Main_rn
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_27__60@377@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28546
;  :arith-add-rows          115
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1444
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10011
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1824
;  :propagations            692
;  :quant-instantiations    239
;  :rlimit-count            574307)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28546
;  :arith-add-rows          115
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1445
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10011
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1825
;  :propagations            692
;  :quant-instantiations    239
;  :rlimit-count            574355)
(declare-const __flatten_26__59@378@08 $Ref)
(assert (=
  __flatten_26__59@378@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
; [exec]
; __flatten_28__61 := diz.CASR_m
(push) ; 12
(assert (not (< $Perm.No $k@228@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28547
;  :arith-add-rows          115
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1446
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10012
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1826
;  :propagations            692
;  :quant-instantiations    239
;  :rlimit-count            574443)
(declare-const __flatten_28__61@379@08 $Ref)
(assert (= __flatten_28__61@379@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))))
; [exec]
; __flatten_29__62 := Rng_exp2__EncodedGlobalVariables_Integer(__flatten_28__61.Main_rn, globals__40, 32)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) __flatten_28__61@379@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1446
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10013
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1827
;  :propagations            692
;  :quant-instantiations    239
;  :rlimit-count            574491)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      228
;  :arith-assert-lower      767
;  :arith-assert-upper      796
;  :arith-conflicts         355
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1447
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10013
;  :mk-clause               1041
;  :num-allocs              12664903
;  :num-checks              1828
;  :propagations            692
;  :quant-instantiations    239
;  :rlimit-count            574539)
; [eval] diz != null
(declare-const $k@380@08 $Perm)
(assert ($Perm.isReadVar $k@380@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@380@08 $Perm.No) (< $Perm.No $k@380@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      769
;  :arith-assert-upper      797
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1448
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10017
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1829
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            574738)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@234@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      769
;  :arith-assert-upper      797
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1448
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10017
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1830
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            574749)
(assert (< $k@380@08 $k@234@08))
(assert (<= $Perm.No (- $k@234@08 $k@380@08)))
(assert (<= (- $k@234@08 $k@380@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@234@08 $k@380@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
      $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1449
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10020
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1831
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            574957)
(set-option :timeout 0)
(push) ; 12
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1449
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10020
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1832
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            574975)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))
    $Ref.null)))
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1450
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10020
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1833
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575043)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1450
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10020
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1834
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575062)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1451
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10020
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1835
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575110)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1451
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10020
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1836
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575129)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1452
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10020
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1837
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575177)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1452
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10020
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1838
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575196)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1453
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10020
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1839
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575244)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1453
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10020
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1840
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575263)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1454
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10020
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1841
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575311)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1454
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10020
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1842
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575330)
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@381@08 Int)
(push) ; 12
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 13
; [then-branch: 104 | 0 <= i@381@08 | live]
; [else-branch: 104 | !(0 <= i@381@08) | live]
(push) ; 14
; [then-branch: 104 | 0 <= i@381@08]
(assert (<= 0 i@381@08))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 15
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      772
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1455
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10021
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1843
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575430)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      772
;  :arith-assert-upper      798
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1455
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10021
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1844
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575449)
(pop) ; 14
(push) ; 14
; [else-branch: 104 | !(0 <= i@381@08)]
(assert (not (<= 0 i@381@08)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 105 | i@381@08 < |First:(Second:(Second:(Second:($t@227@08))))| && 0 <= i@381@08 | live]
; [else-branch: 105 | !(i@381@08 < |First:(Second:(Second:(Second:($t@227@08))))| && 0 <= i@381@08) | live]
(push) ; 14
; [then-branch: 105 | i@381@08 < |First:(Second:(Second:(Second:($t@227@08))))| && 0 <= i@381@08]
(assert (and
  (<
    i@381@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
  (<= 0 i@381@08)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 15
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      773
;  :arith-assert-upper      799
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1456
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10023
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1845
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575606)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      773
;  :arith-assert-upper      799
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1456
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10023
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1846
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575625)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@381@08 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      229
;  :arith-assert-lower      773
;  :arith-assert-upper      799
;  :arith-conflicts         355
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1456
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10023
;  :mk-clause               1043
;  :num-allocs              12664903
;  :num-checks              1847
;  :propagations            693
;  :quant-instantiations    239
;  :rlimit-count            575634)
; [eval] -1
(push) ; 15
; [then-branch: 106 | First:(Second:(Second:(Second:($t@227@08))))[i@381@08] == -1 | live]
; [else-branch: 106 | First:(Second:(Second:(Second:($t@227@08))))[i@381@08] != -1 | live]
(push) ; 16
; [then-branch: 106 | First:(Second:(Second:(Second:($t@227@08))))[i@381@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
    i@381@08)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 106 | First:(Second:(Second:(Second:($t@227@08))))[i@381@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
      i@381@08)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 17
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      230
;  :arith-assert-lower      776
;  :arith-assert-upper      800
;  :arith-conflicts         355
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1457
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10029
;  :mk-clause               1047
;  :num-allocs              12664903
;  :num-checks              1848
;  :propagations            695
;  :quant-instantiations    240
;  :rlimit-count            575905)
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      230
;  :arith-assert-lower      776
;  :arith-assert-upper      800
;  :arith-conflicts         355
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1457
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10029
;  :mk-clause               1047
;  :num-allocs              12664903
;  :num-checks              1849
;  :propagations            695
;  :quant-instantiations    240
;  :rlimit-count            575924)
(set-option :timeout 0)
(push) ; 17
(assert (not (>= i@381@08 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      230
;  :arith-assert-lower      776
;  :arith-assert-upper      800
;  :arith-conflicts         355
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1457
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10029
;  :mk-clause               1047
;  :num-allocs              12664903
;  :num-checks              1850
;  :propagations            695
;  :quant-instantiations    240
;  :rlimit-count            575933)
(push) ; 17
; [then-branch: 107 | 0 <= First:(Second:(Second:(Second:($t@227@08))))[i@381@08] | live]
; [else-branch: 107 | !(0 <= First:(Second:(Second:(Second:($t@227@08))))[i@381@08]) | live]
(push) ; 18
; [then-branch: 107 | 0 <= First:(Second:(Second:(Second:($t@227@08))))[i@381@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
    i@381@08)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 19
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      230
;  :arith-assert-lower      776
;  :arith-assert-upper      800
;  :arith-conflicts         355
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1458
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10029
;  :mk-clause               1047
;  :num-allocs              12664903
;  :num-checks              1851
;  :propagations            695
;  :quant-instantiations    240
;  :rlimit-count            576086)
(push) ; 19
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      230
;  :arith-assert-lower      776
;  :arith-assert-upper      800
;  :arith-conflicts         355
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1458
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10029
;  :mk-clause               1047
;  :num-allocs              12664903
;  :num-checks              1852
;  :propagations            695
;  :quant-instantiations    240
;  :rlimit-count            576105)
(set-option :timeout 0)
(push) ; 19
(assert (not (>= i@381@08 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      230
;  :arith-assert-lower      776
;  :arith-assert-upper      800
;  :arith-conflicts         355
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1458
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10029
;  :mk-clause               1047
;  :num-allocs              12664903
;  :num-checks              1853
;  :propagations            695
;  :quant-instantiations    240
;  :rlimit-count            576114)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 19
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      230
;  :arith-assert-lower      776
;  :arith-assert-upper      800
;  :arith-conflicts         355
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1459
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10029
;  :mk-clause               1047
;  :num-allocs              12664903
;  :num-checks              1854
;  :propagations            695
;  :quant-instantiations    240
;  :rlimit-count            576162)
(push) ; 19
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      230
;  :arith-assert-lower      776
;  :arith-assert-upper      800
;  :arith-conflicts         355
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1459
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              981
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10029
;  :mk-clause               1047
;  :num-allocs              12664903
;  :num-checks              1855
;  :propagations            695
;  :quant-instantiations    240
;  :rlimit-count            576181)
(pop) ; 18
(push) ; 18
; [else-branch: 107 | !(0 <= First:(Second:(Second:(Second:($t@227@08))))[i@381@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
      i@381@08))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 105 | !(i@381@08 < |First:(Second:(Second:(Second:($t@227@08))))| && 0 <= i@381@08)]
(assert (not
  (and
    (<
      i@381@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
    (<= 0 i@381@08))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 12
(assert (not (forall ((i@381@08 Int)) (!
  (implies
    (and
      (<
        i@381@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
      (<= 0 i@381@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
          i@381@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
            i@381@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
            i@381@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
    i@381@08))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      231
;  :arith-assert-lower      777
;  :arith-assert-upper      801
;  :arith-conflicts         355
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1460
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10037
;  :mk-clause               1059
;  :num-allocs              12664903
;  :num-checks              1856
;  :propagations            697
;  :quant-instantiations    241
;  :rlimit-count            576627)
(assert (forall ((i@381@08 Int)) (!
  (implies
    (and
      (<
        i@381@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))
      (<= 0 i@381@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
          i@381@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
            i@381@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
            i@381@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))
    i@381@08))
  :qid |prog.l<no position>|)))
(declare-const $k@382@08 $Perm)
(assert ($Perm.isReadVar $k@382@08 $Perm.Write))
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      779
;  :arith-assert-upper      802
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1461
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10042
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1857
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577185)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@382@08 $Perm.No) (< $Perm.No $k@382@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      779
;  :arith-assert-upper      802
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1462
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10042
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1858
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577235)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      779
;  :arith-assert-upper      802
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1462
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10042
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1859
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577254)
(push) ; 12
(assert (not (not (= $k@230@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      779
;  :arith-assert-upper      802
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1462
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10042
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1860
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577265)
(assert (< $k@382@08 $k@230@08))
(assert (<= $Perm.No (- $k@230@08 $k@382@08)))
(assert (<= (- $k@230@08 $k@382@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@230@08 $k@382@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1463
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1861
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577479)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1463
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1862
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577498)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1464
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1863
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577546)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1465
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1864
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577594)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1465
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1865
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577613)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1466
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1866
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577661)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1467
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1867
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577709)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1467
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1868
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577728)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1468
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1869
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577776)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1469
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1870
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577824)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1469
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1871
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577843)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1470
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1872
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577891)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1471
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1873
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577939)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1471
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1874
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            577958)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1472
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1875
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578006)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1473
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1876
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578054)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1473
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1877
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578073)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1474
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1878
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578121)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1475
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1879
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578169)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1475
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1880
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578188)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1476
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1881
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578236)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1477
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1882
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578284)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1477
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1883
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578303)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1478
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1884
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578351)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1479
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1885
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578399)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1479
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1886
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578418)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1480
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1887
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578466)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.05s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1481
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1888
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578514)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1481
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1889
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578533)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1482
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1890
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578581)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1483
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1891
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578629)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1483
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1892
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578648)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      232
;  :arith-assert-lower      781
;  :arith-assert-upper      803
;  :arith-conflicts         355
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1484
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10045
;  :mk-clause               1061
;  :num-allocs              12664903
;  :num-checks              1893
;  :propagations            698
;  :quant-instantiations    241
;  :rlimit-count            578696)
(declare-const $k@383@08 $Perm)
(assert ($Perm.isReadVar $k@383@08 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      783
;  :arith-assert-upper      804
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1485
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10049
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1894
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            578893)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@383@08 $Perm.No) (< $Perm.No $k@383@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      783
;  :arith-assert-upper      804
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1486
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10049
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1895
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            578943)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      783
;  :arith-assert-upper      804
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1486
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10049
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1896
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            578962)
(push) ; 12
(assert (not (not (= $k@231@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      783
;  :arith-assert-upper      804
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1486
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10049
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1897
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            578973)
(assert (< $k@383@08 $k@231@08))
(assert (<= $Perm.No (- $k@231@08 $k@383@08)))
(assert (<= (- $k@231@08 $k@383@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@231@08 $k@383@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1487
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1898
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579181)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1487
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1899
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579200)
(push) ; 12
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1488
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1900
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579248)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1489
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1901
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579296)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1489
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1902
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579315)
(push) ; 12
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1490
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1903
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579363)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1491
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1904
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579411)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1491
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1905
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579430)
(push) ; 12
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1492
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1906
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579478)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1493
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1907
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579526)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1493
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1908
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579545)
(push) ; 12
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1494
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1909
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579593)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1495
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1910
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579641
;  :time                    0.00)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1495
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1911
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579660)
(push) ; 12
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1496
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1912
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579708)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1497
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1913
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579756)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1497
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1914
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579775)
(push) ; 12
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1498
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1915
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579823)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1499
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1916
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579871)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1499
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1917
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579890)
(push) ; 12
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1500
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1918
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579938)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1501
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1919
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            579986)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1501
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1920
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            580005)
(push) ; 12
(assert (not (< $Perm.No $k@231@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      233
;  :arith-assert-lower      785
;  :arith-assert-upper      805
;  :arith-conflicts         355
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1502
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10052
;  :mk-clause               1063
;  :num-allocs              12664903
;  :num-checks              1921
;  :propagations            699
;  :quant-instantiations    241
;  :rlimit-count            580053)
(declare-const $k@384@08 $Perm)
(assert ($Perm.isReadVar $k@384@08 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      234
;  :arith-assert-lower      787
;  :arith-assert-upper      806
;  :arith-conflicts         355
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1503
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10056
;  :mk-clause               1065
;  :num-allocs              12664903
;  :num-checks              1922
;  :propagations            700
;  :quant-instantiations    241
;  :rlimit-count            580249)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@384@08 $Perm.No) (< $Perm.No $k@384@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      234
;  :arith-assert-lower      787
;  :arith-assert-upper      806
;  :arith-conflicts         355
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1504
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10056
;  :mk-clause               1065
;  :num-allocs              12664903
;  :num-checks              1923
;  :propagations            700
;  :quant-instantiations    241
;  :rlimit-count            580299)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      234
;  :arith-assert-lower      787
;  :arith-assert-upper      806
;  :arith-conflicts         355
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1504
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10056
;  :mk-clause               1065
;  :num-allocs              12664903
;  :num-checks              1924
;  :propagations            700
;  :quant-instantiations    241
;  :rlimit-count            580318)
(push) ; 12
(assert (not (not (= $k@232@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      234
;  :arith-assert-lower      787
;  :arith-assert-upper      806
;  :arith-conflicts         355
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         344
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1504
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10056
;  :mk-clause               1065
;  :num-allocs              12664903
;  :num-checks              1925
;  :propagations            700
;  :quant-instantiations    241
;  :rlimit-count            580329)
(assert (< $k@384@08 $k@232@08))
(assert (<= $Perm.No (- $k@232@08 $k@384@08)))
(assert (<= (- $k@232@08 $k@384@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@232@08 $k@384@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      234
;  :arith-assert-lower      789
;  :arith-assert-upper      807
;  :arith-conflicts         355
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         344
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1505
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10059
;  :mk-clause               1065
;  :num-allocs              12664903
;  :num-checks              1926
;  :propagations            700
;  :quant-instantiations    241
;  :rlimit-count            580543)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      234
;  :arith-assert-lower      789
;  :arith-assert-upper      807
;  :arith-conflicts         355
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         344
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1505
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10059
;  :mk-clause               1065
;  :num-allocs              12664903
;  :num-checks              1927
;  :propagations            700
;  :quant-instantiations    241
;  :rlimit-count            580562)
(push) ; 12
(assert (not (< $Perm.No $k@232@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      234
;  :arith-assert-lower      789
;  :arith-assert-upper      807
;  :arith-conflicts         355
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         344
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1506
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10059
;  :mk-clause               1065
;  :num-allocs              12664903
;  :num-checks              1928
;  :propagations            700
;  :quant-instantiations    241
;  :rlimit-count            580610)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      234
;  :arith-assert-lower      789
;  :arith-assert-upper      807
;  :arith-conflicts         355
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         344
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1507
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10059
;  :mk-clause               1065
;  :num-allocs              12664903
;  :num-checks              1929
;  :propagations            700
;  :quant-instantiations    241
;  :rlimit-count            580658)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      234
;  :arith-assert-lower      789
;  :arith-assert-upper      807
;  :arith-conflicts         355
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         344
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1507
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10059
;  :mk-clause               1065
;  :num-allocs              12664903
;  :num-checks              1930
;  :propagations            700
;  :quant-instantiations    241
;  :rlimit-count            580677
;  :time                    0.00)
(push) ; 12
(assert (not (< $Perm.No $k@232@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      234
;  :arith-assert-lower      789
;  :arith-assert-upper      807
;  :arith-conflicts         355
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         344
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1508
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10059
;  :mk-clause               1065
;  :num-allocs              12664903
;  :num-checks              1931
;  :propagations            700
;  :quant-instantiations    241
;  :rlimit-count            580725)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      234
;  :arith-assert-lower      789
;  :arith-assert-upper      807
;  :arith-conflicts         355
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         344
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1509
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10059
;  :mk-clause               1065
;  :num-allocs              12664903
;  :num-checks              1932
;  :propagations            700
;  :quant-instantiations    241
;  :rlimit-count            580773)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      234
;  :arith-assert-lower      789
;  :arith-assert-upper      807
;  :arith-conflicts         355
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         344
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1509
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10059
;  :mk-clause               1065
;  :num-allocs              12664903
;  :num-checks              1933
;  :propagations            700
;  :quant-instantiations    241
;  :rlimit-count            580792)
(push) ; 12
(assert (not (< $Perm.No $k@232@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      234
;  :arith-assert-lower      789
;  :arith-assert-upper      807
;  :arith-conflicts         355
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         344
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1510
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10059
;  :mk-clause               1065
;  :num-allocs              12664903
;  :num-checks              1934
;  :propagations            700
;  :quant-instantiations    241
;  :rlimit-count            580840)
(declare-const $k@385@08 $Perm)
(assert ($Perm.isReadVar $k@385@08 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      235
;  :arith-assert-lower      791
;  :arith-assert-upper      808
;  :arith-conflicts         355
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         344
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1511
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10063
;  :mk-clause               1067
;  :num-allocs              12664903
;  :num-checks              1935
;  :propagations            701
;  :quant-instantiations    241
;  :rlimit-count            581036)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@385@08 $Perm.No) (< $Perm.No $k@385@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      235
;  :arith-assert-lower      791
;  :arith-assert-upper      808
;  :arith-conflicts         355
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         344
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1512
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10063
;  :mk-clause               1067
;  :num-allocs              12664903
;  :num-checks              1936
;  :propagations            701
;  :quant-instantiations    241
;  :rlimit-count            581086)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      235
;  :arith-assert-lower      791
;  :arith-assert-upper      808
;  :arith-conflicts         355
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         344
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1512
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10063
;  :mk-clause               1067
;  :num-allocs              12664903
;  :num-checks              1937
;  :propagations            701
;  :quant-instantiations    241
;  :rlimit-count            581105)
(push) ; 12
(assert (not (not (= $k@233@08 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      235
;  :arith-assert-lower      791
;  :arith-assert-upper      808
;  :arith-conflicts         355
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         344
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1512
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10063
;  :mk-clause               1067
;  :num-allocs              12664903
;  :num-checks              1938
;  :propagations            701
;  :quant-instantiations    241
;  :rlimit-count            581116)
(assert (< $k@385@08 $k@233@08))
(assert (<= $Perm.No (- $k@233@08 $k@385@08)))
(assert (<= (- $k@233@08 $k@385@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@233@08 $k@385@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      235
;  :arith-assert-lower      793
;  :arith-assert-upper      809
;  :arith-conflicts         355
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1513
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10066
;  :mk-clause               1067
;  :num-allocs              12664903
;  :num-checks              1939
;  :propagations            701
;  :quant-instantiations    241
;  :rlimit-count            581330)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      235
;  :arith-assert-lower      793
;  :arith-assert-upper      809
;  :arith-conflicts         355
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1513
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10066
;  :mk-clause               1067
;  :num-allocs              12664903
;  :num-checks              1940
;  :propagations            701
;  :quant-instantiations    241
;  :rlimit-count            581349)
(push) ; 12
(assert (not (< $Perm.No $k@233@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      235
;  :arith-assert-lower      793
;  :arith-assert-upper      809
;  :arith-conflicts         355
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1514
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10066
;  :mk-clause               1067
;  :num-allocs              12664903
;  :num-checks              1941
;  :propagations            701
;  :quant-instantiations    241
;  :rlimit-count            581397)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      235
;  :arith-assert-lower      793
;  :arith-assert-upper      809
;  :arith-conflicts         355
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1515
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10066
;  :mk-clause               1067
;  :num-allocs              12664903
;  :num-checks              1942
;  :propagations            701
;  :quant-instantiations    241
;  :rlimit-count            581445)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      235
;  :arith-assert-lower      793
;  :arith-assert-upper      809
;  :arith-conflicts         355
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1515
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10066
;  :mk-clause               1067
;  :num-allocs              12664903
;  :num-checks              1943
;  :propagations            701
;  :quant-instantiations    241
;  :rlimit-count            581464)
(push) ; 12
(assert (not (< $Perm.No $k@233@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      235
;  :arith-assert-lower      793
;  :arith-assert-upper      809
;  :arith-conflicts         355
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1516
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10066
;  :mk-clause               1067
;  :num-allocs              12664903
;  :num-checks              1944
;  :propagations            701
;  :quant-instantiations    241
;  :rlimit-count            581512)
(declare-const $k@386@08 $Perm)
(assert ($Perm.isReadVar $k@386@08 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      236
;  :arith-assert-lower      795
;  :arith-assert-upper      810
;  :arith-conflicts         355
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1517
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10070
;  :mk-clause               1069
;  :num-allocs              12664903
;  :num-checks              1945
;  :propagations            702
;  :quant-instantiations    241
;  :rlimit-count            581709)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      236
;  :arith-assert-lower      795
;  :arith-assert-upper      810
;  :arith-conflicts         355
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1517
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10070
;  :mk-clause               1069
;  :num-allocs              12664903
;  :num-checks              1946
;  :propagations            702
;  :quant-instantiations    241
;  :rlimit-count            581728)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      236
;  :arith-assert-lower      795
;  :arith-assert-upper      810
;  :arith-conflicts         355
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1518
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10070
;  :mk-clause               1069
;  :num-allocs              12664903
;  :num-checks              1947
;  :propagations            702
;  :quant-instantiations    241
;  :rlimit-count            581776)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@386@08 $Perm.No) (< $Perm.No $k@386@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      236
;  :arith-assert-lower      795
;  :arith-assert-upper      810
;  :arith-conflicts         355
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1519
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10070
;  :mk-clause               1069
;  :num-allocs              12664903
;  :num-checks              1948
;  :propagations            702
;  :quant-instantiations    241
;  :rlimit-count            581826)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (- $k@234@08 $k@380@08) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      236
;  :arith-assert-lower      795
;  :arith-assert-upper      810
;  :arith-conflicts         355
;  :arith-eq-adapter        334
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1520
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10071
;  :mk-clause               1069
;  :num-allocs              12664903
;  :num-checks              1949
;  :propagations            702
;  :quant-instantiations    241
;  :rlimit-count            581894)
(assert (< $k@386@08 (- $k@234@08 $k@380@08)))
(assert (<= $Perm.No (- (- $k@234@08 $k@380@08) $k@386@08)))
(assert (<= (- (- $k@234@08 $k@380@08) $k@386@08) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@234@08 $k@380@08) $k@386@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      236
;  :arith-assert-lower      797
;  :arith-assert-upper      811
;  :arith-conflicts         355
;  :arith-eq-adapter        334
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1521
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10074
;  :mk-clause               1069
;  :num-allocs              12664903
;  :num-checks              1950
;  :propagations            702
;  :quant-instantiations    241
;  :rlimit-count            582126)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      236
;  :arith-assert-lower      797
;  :arith-assert-upper      811
;  :arith-conflicts         355
;  :arith-eq-adapter        334
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1521
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10074
;  :mk-clause               1069
;  :num-allocs              12664903
;  :num-checks              1951
;  :propagations            702
;  :quant-instantiations    241
;  :rlimit-count            582145)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      236
;  :arith-assert-lower      797
;  :arith-assert-upper      811
;  :arith-conflicts         355
;  :arith-eq-adapter        334
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1522
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10074
;  :mk-clause               1069
;  :num-allocs              12664903
;  :num-checks              1952
;  :propagations            702
;  :quant-instantiations    241
;  :rlimit-count            582193)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      236
;  :arith-assert-lower      797
;  :arith-assert-upper      811
;  :arith-conflicts         355
;  :arith-eq-adapter        334
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1523
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10074
;  :mk-clause               1069
;  :num-allocs              12664903
;  :num-checks              1953
;  :propagations            702
;  :quant-instantiations    241
;  :rlimit-count            582241)
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      236
;  :arith-assert-lower      797
;  :arith-assert-upper      811
;  :arith-conflicts         355
;  :arith-eq-adapter        334
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1524
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10074
;  :mk-clause               1069
;  :num-allocs              12664903
;  :num-checks              1954
;  :propagations            702
;  :quant-instantiations    241
;  :rlimit-count            582289)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 12
(assert (not (< $Perm.No $k@234@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      236
;  :arith-assert-lower      797
;  :arith-assert-upper      811
;  :arith-conflicts         355
;  :arith-eq-adapter        334
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1525
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10074
;  :mk-clause               1069
;  :num-allocs              12664903
;  :num-checks              1955
;  :propagations            702
;  :quant-instantiations    241
;  :rlimit-count            582337)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      236
;  :arith-assert-lower      797
;  :arith-assert-upper      811
;  :arith-conflicts         355
;  :arith-eq-adapter        334
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1525
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10074
;  :mk-clause               1069
;  :num-allocs              12664903
;  :num-checks              1956
;  :propagations            702
;  :quant-instantiations    241
;  :rlimit-count            582356)
(push) ; 12
(assert (not (< $Perm.No $k@230@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28548
;  :arith-add-rows          115
;  :arith-assert-diseq      236
;  :arith-assert-lower      797
;  :arith-assert-upper      811
;  :arith-conflicts         355
;  :arith-eq-adapter        334
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1526
;  :datatype-accessor-ax    876
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10074
;  :mk-clause               1069
;  :num-allocs              12664903
;  :num-checks              1957
;  :propagations            702
;  :quant-instantiations    241
;  :rlimit-count            582404)
(declare-const sys__result@387@08 Int)
(declare-const $t@388@08 $Snap)
(assert (= $t@388@08 ($Snap.combine ($Snap.first $t@388@08) ($Snap.second $t@388@08))))
(declare-const $k@389@08 $Perm)
(assert ($Perm.isReadVar $k@389@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@389@08 $Perm.No) (< $Perm.No $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28553
;  :arith-add-rows          115
;  :arith-assert-diseq      237
;  :arith-assert-lower      799
;  :arith-assert-upper      812
;  :arith-conflicts         355
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         344
;  :arith-pivots            205
;  :binary-propagations     22
;  :conflicts               1527
;  :datatype-accessor-ax    877
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10079
;  :mk-clause               1071
;  :num-allocs              12664903
;  :num-checks              1958
;  :propagations            703
;  :quant-instantiations    241
;  :rlimit-count            582691)
(declare-const $t@390@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@234@08 $k@380@08) $k@386@08))
    (=
      $t@390@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@389@08)
    (= $t@390@08 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@388@08))))))
(assert (<= $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08)))
(assert (<= (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second $t@388@08)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@388@08))
    ($Snap.second ($Snap.second $t@388@08)))))
(assert (= ($Snap.first ($Snap.second $t@388@08)) $Snap.unit))
; [eval] diz.Rng_m != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28563
;  :arith-add-rows          116
;  :arith-assert-diseq      237
;  :arith-assert-lower      800
;  :arith-assert-upper      814
;  :arith-conflicts         356
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         345
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1528
;  :datatype-accessor-ax    878
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10087
;  :mk-clause               1071
;  :num-allocs              12664903
;  :num-checks              1959
;  :propagations            703
;  :quant-instantiations    242
;  :rlimit-count            583249)
(assert (not (= $t@390@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@388@08))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@388@08)))
    ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28569
;  :arith-add-rows          116
;  :arith-assert-diseq      237
;  :arith-assert-lower      800
;  :arith-assert-upper      815
;  :arith-conflicts         357
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         346
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1529
;  :datatype-accessor-ax    879
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10090
;  :mk-clause               1071
;  :num-allocs              12664903
;  :num-checks              1960
;  :propagations            703
;  :quant-instantiations    242
;  :rlimit-count            583510)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@388@08)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@08))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28574
;  :arith-add-rows          116
;  :arith-assert-diseq      237
;  :arith-assert-lower      800
;  :arith-assert-upper      816
;  :arith-conflicts         358
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         347
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1530
;  :datatype-accessor-ax    880
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10092
;  :mk-clause               1071
;  :num-allocs              12664903
;  :num-checks              1961
;  :propagations            703
;  :quant-instantiations    242
;  :rlimit-count            583736)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28580
;  :arith-add-rows          116
;  :arith-assert-diseq      237
;  :arith-assert-lower      800
;  :arith-assert-upper      817
;  :arith-conflicts         359
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         348
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1531
;  :datatype-accessor-ax    881
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10095
;  :mk-clause               1071
;  :num-allocs              12664903
;  :num-checks              1962
;  :propagations            703
;  :quant-instantiations    242
;  :rlimit-count            584004)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28587
;  :arith-add-rows          116
;  :arith-assert-diseq      237
;  :arith-assert-lower      802
;  :arith-assert-upper      819
;  :arith-conflicts         360
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         349
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1532
;  :datatype-accessor-ax    882
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10102
;  :mk-clause               1071
;  :num-allocs              12664903
;  :num-checks              1963
;  :propagations            703
;  :quant-instantiations    244
;  :rlimit-count            584383)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28593
;  :arith-add-rows          116
;  :arith-assert-diseq      237
;  :arith-assert-lower      802
;  :arith-assert-upper      820
;  :arith-conflicts         361
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         350
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1533
;  :datatype-accessor-ax    883
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10105
;  :mk-clause               1071
;  :num-allocs              12664903
;  :num-checks              1964
;  :propagations            703
;  :quant-instantiations    244
;  :rlimit-count            584671)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@391@08 Int)
(push) ; 12
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 13
; [then-branch: 108 | 0 <= i@391@08 | live]
; [else-branch: 108 | !(0 <= i@391@08) | live]
(push) ; 14
; [then-branch: 108 | 0 <= i@391@08]
(assert (<= 0 i@391@08))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 15
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28601
;  :arith-add-rows          116
;  :arith-assert-diseq      237
;  :arith-assert-lower      805
;  :arith-assert-upper      822
;  :arith-conflicts         362
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         351
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1534
;  :datatype-accessor-ax    884
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10114
;  :mk-clause               1071
;  :num-allocs              12664903
;  :num-checks              1965
;  :propagations            703
;  :quant-instantiations    246
;  :rlimit-count            585158)
(pop) ; 14
(push) ; 14
; [else-branch: 108 | !(0 <= i@391@08)]
(assert (not (<= 0 i@391@08)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 109 | i@391@08 < |First:(Second:(Second:(Second:($t@388@08))))| && 0 <= i@391@08 | live]
; [else-branch: 109 | !(i@391@08 < |First:(Second:(Second:(Second:($t@388@08))))| && 0 <= i@391@08) | live]
(push) ; 14
; [then-branch: 109 | i@391@08 < |First:(Second:(Second:(Second:($t@388@08))))| && 0 <= i@391@08]
(assert (and
  (<
    i@391@08
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))
  (<= 0 i@391@08)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 15
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28601
;  :arith-add-rows          116
;  :arith-assert-diseq      237
;  :arith-assert-lower      806
;  :arith-assert-upper      824
;  :arith-conflicts         363
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         352
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1535
;  :datatype-accessor-ax    884
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10117
;  :mk-clause               1071
;  :num-allocs              12664903
;  :num-checks              1966
;  :propagations            703
;  :quant-instantiations    246
;  :rlimit-count            585364)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@391@08 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28601
;  :arith-add-rows          116
;  :arith-assert-diseq      237
;  :arith-assert-lower      806
;  :arith-assert-upper      824
;  :arith-conflicts         363
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         352
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1535
;  :datatype-accessor-ax    884
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10117
;  :mk-clause               1071
;  :num-allocs              12664903
;  :num-checks              1967
;  :propagations            703
;  :quant-instantiations    246
;  :rlimit-count            585373)
; [eval] -1
(push) ; 15
; [then-branch: 110 | First:(Second:(Second:(Second:($t@388@08))))[i@391@08] == -1 | live]
; [else-branch: 110 | First:(Second:(Second:(Second:($t@388@08))))[i@391@08] != -1 | live]
(push) ; 16
; [then-branch: 110 | First:(Second:(Second:(Second:($t@388@08))))[i@391@08] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))
    i@391@08)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 110 | First:(Second:(Second:(Second:($t@388@08))))[i@391@08] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))
      i@391@08)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 17
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28601
;  :arith-add-rows          116
;  :arith-assert-diseq      237
;  :arith-assert-lower      806
;  :arith-assert-upper      825
;  :arith-conflicts         364
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         353
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1536
;  :datatype-accessor-ax    884
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10119
;  :mk-clause               1071
;  :num-allocs              12664903
;  :num-checks              1968
;  :propagations            703
;  :quant-instantiations    246
;  :rlimit-count            585636)
(set-option :timeout 0)
(push) ; 17
(assert (not (>= i@391@08 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28601
;  :arith-add-rows          116
;  :arith-assert-diseq      237
;  :arith-assert-lower      806
;  :arith-assert-upper      825
;  :arith-conflicts         364
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         353
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1536
;  :datatype-accessor-ax    884
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10119
;  :mk-clause               1071
;  :num-allocs              12664903
;  :num-checks              1969
;  :propagations            703
;  :quant-instantiations    246
;  :rlimit-count            585645)
(push) ; 17
; [then-branch: 111 | 0 <= First:(Second:(Second:(Second:($t@388@08))))[i@391@08] | live]
; [else-branch: 111 | !(0 <= First:(Second:(Second:(Second:($t@388@08))))[i@391@08]) | live]
(push) ; 18
; [then-branch: 111 | 0 <= First:(Second:(Second:(Second:($t@388@08))))[i@391@08]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))
    i@391@08)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 19
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28601
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      809
;  :arith-assert-upper      826
;  :arith-conflicts         365
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         354
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1537
;  :datatype-accessor-ax    884
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10123
;  :mk-clause               1072
;  :num-allocs              12664903
;  :num-checks              1970
;  :propagations            703
;  :quant-instantiations    246
;  :rlimit-count            585856)
(set-option :timeout 0)
(push) ; 19
(assert (not (>= i@391@08 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28601
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      809
;  :arith-assert-upper      826
;  :arith-conflicts         365
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         354
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1537
;  :datatype-accessor-ax    884
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10123
;  :mk-clause               1072
;  :num-allocs              12664903
;  :num-checks              1971
;  :propagations            703
;  :quant-instantiations    246
;  :rlimit-count            585865)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 19
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28601
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      809
;  :arith-assert-upper      827
;  :arith-conflicts         366
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         355
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1538
;  :datatype-accessor-ax    884
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              997
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10124
;  :mk-clause               1072
;  :num-allocs              12664903
;  :num-checks              1972
;  :propagations            703
;  :quant-instantiations    246
;  :rlimit-count            585962)
(pop) ; 18
(push) ; 18
; [else-branch: 111 | !(0 <= First:(Second:(Second:(Second:($t@388@08))))[i@391@08])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))
      i@391@08))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 109 | !(i@391@08 < |First:(Second:(Second:(Second:($t@388@08))))| && 0 <= i@391@08)]
(assert (not
  (and
    (<
      i@391@08
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))
    (<= 0 i@391@08))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@391@08 Int)) (!
  (implies
    (and
      (<
        i@391@08
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))
      (<= 0 i@391@08))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))
          i@391@08)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))
            i@391@08)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))
            i@391@08)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))
    i@391@08))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28606
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      809
;  :arith-assert-upper      828
;  :arith-conflicts         367
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         356
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1539
;  :datatype-accessor-ax    885
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10127
;  :mk-clause               1072
;  :num-allocs              12664903
;  :num-checks              1973
;  :propagations            703
;  :quant-instantiations    246
;  :rlimit-count            586636)
(declare-const $k@392@08 $Perm)
(assert ($Perm.isReadVar $k@392@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@392@08 $Perm.No) (< $Perm.No $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28606
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      811
;  :arith-assert-upper      829
;  :arith-conflicts         367
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         356
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1540
;  :datatype-accessor-ax    885
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10131
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1974
;  :propagations            704
;  :quant-instantiations    246
;  :rlimit-count            586835)
(set-option :timeout 10)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28606
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      811
;  :arith-assert-upper      829
;  :arith-conflicts         367
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         356
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1540
;  :datatype-accessor-ax    885
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10131
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1975
;  :propagations            704
;  :quant-instantiations    246
;  :rlimit-count            586846)
(declare-const $t@393@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@230@08 $k@382@08))
    (=
      $t@393@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
  (implies
    (< $Perm.No $k@392@08)
    (=
      $t@393@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))
(assert (<= $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08)))
(assert (<= (+ (- $k@230@08 $k@382@08) $k@392@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28616
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      831
;  :arith-conflicts         368
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         357
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1541
;  :datatype-accessor-ax    886
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10139
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1976
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            587451)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28616
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      831
;  :arith-conflicts         368
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         357
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1541
;  :datatype-accessor-ax    886
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10139
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1977
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            587462)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28616
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      832
;  :arith-conflicts         369
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         358
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1542
;  :datatype-accessor-ax    886
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10140
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1978
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            587540)
(assert (not (= $t@393@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28622
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      833
;  :arith-conflicts         370
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         359
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1543
;  :datatype-accessor-ax    887
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10143
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1979
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            587881)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28622
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      833
;  :arith-conflicts         370
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         359
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1543
;  :datatype-accessor-ax    887
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10143
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1980
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            587892)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28622
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      834
;  :arith-conflicts         371
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         360
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1544
;  :datatype-accessor-ax    887
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10144
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1981
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            587970)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28627
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      835
;  :arith-conflicts         372
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         361
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1545
;  :datatype-accessor-ax    888
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10146
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1982
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            588276)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28627
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      835
;  :arith-conflicts         372
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         361
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1545
;  :datatype-accessor-ax    888
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10146
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1983
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            588287)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28627
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      836
;  :arith-conflicts         373
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         362
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1546
;  :datatype-accessor-ax    888
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10147
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1984
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            588365)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28632
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      837
;  :arith-conflicts         374
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         363
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1547
;  :datatype-accessor-ax    889
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10149
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1985
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            588681)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28632
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      837
;  :arith-conflicts         374
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         363
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1547
;  :datatype-accessor-ax    889
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10149
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1986
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            588692)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28632
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      838
;  :arith-conflicts         375
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         364
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1548
;  :datatype-accessor-ax    889
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10150
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1987
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            588770)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28637
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      839
;  :arith-conflicts         376
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         365
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1549
;  :datatype-accessor-ax    890
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10152
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1988
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            589096)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28637
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      839
;  :arith-conflicts         376
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         365
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1549
;  :datatype-accessor-ax    890
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10152
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1989
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            589107)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28637
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      840
;  :arith-conflicts         377
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         366
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1550
;  :datatype-accessor-ax    890
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10153
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1990
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            589185)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28642
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      841
;  :arith-conflicts         378
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         367
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1551
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10155
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1991
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            589521)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28642
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      841
;  :arith-conflicts         378
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         367
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1551
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10155
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1992
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            589532)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28642
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      842
;  :arith-conflicts         379
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         368
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1552
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10156
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1993
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            589610)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28647
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      843
;  :arith-conflicts         380
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         369
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1553
;  :datatype-accessor-ax    892
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10158
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1994
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            589956)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28647
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      843
;  :arith-conflicts         380
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         369
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1553
;  :datatype-accessor-ax    892
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10158
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1995
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            589967)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28647
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      844
;  :arith-conflicts         381
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         370
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1554
;  :datatype-accessor-ax    892
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10159
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1996
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            590045)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28652
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      845
;  :arith-conflicts         382
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         371
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1555
;  :datatype-accessor-ax    893
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10161
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1997
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            590401)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28652
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      845
;  :arith-conflicts         382
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         371
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1555
;  :datatype-accessor-ax    893
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10161
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1998
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            590412)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28652
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      846
;  :arith-conflicts         383
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         372
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1556
;  :datatype-accessor-ax    893
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10162
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              1999
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            590490)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28657
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      847
;  :arith-conflicts         384
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         373
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1557
;  :datatype-accessor-ax    894
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10164
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              2000
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            590856)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28657
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      847
;  :arith-conflicts         384
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         373
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1557
;  :datatype-accessor-ax    894
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10164
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              2001
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            590867)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28657
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      848
;  :arith-conflicts         385
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         374
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1558
;  :datatype-accessor-ax    894
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10165
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              2002
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            590945)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28662
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      849
;  :arith-conflicts         386
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         375
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1559
;  :datatype-accessor-ax    895
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10167
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              2003
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            591321)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28662
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      849
;  :arith-conflicts         386
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         375
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1559
;  :datatype-accessor-ax    895
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10167
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              2004
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            591332)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28662
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      850
;  :arith-conflicts         387
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         376
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1560
;  :datatype-accessor-ax    895
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10168
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              2005
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            591410)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28667
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      851
;  :arith-conflicts         388
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         377
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1561
;  :datatype-accessor-ax    896
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10170
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              2006
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            591796)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28667
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      851
;  :arith-conflicts         388
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         377
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1561
;  :datatype-accessor-ax    896
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10170
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              2007
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            591807)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28667
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      852
;  :arith-conflicts         389
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         378
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1562
;  :datatype-accessor-ax    896
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10171
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              2008
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            591885)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28672
;  :arith-add-rows          117
;  :arith-assert-diseq      239
;  :arith-assert-lower      812
;  :arith-assert-upper      853
;  :arith-conflicts         390
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         379
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1563
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10173
;  :mk-clause               1074
;  :num-allocs              12664903
;  :num-checks              2009
;  :propagations            704
;  :quant-instantiations    247
;  :rlimit-count            592281)
(declare-const $k@394@08 $Perm)
(assert ($Perm.isReadVar $k@394@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@394@08 $Perm.No) (< $Perm.No $k@394@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28672
;  :arith-add-rows          117
;  :arith-assert-diseq      240
;  :arith-assert-lower      814
;  :arith-assert-upper      854
;  :arith-conflicts         390
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         379
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1564
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10177
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2010
;  :propagations            705
;  :quant-instantiations    247
;  :rlimit-count            592479)
(set-option :timeout 10)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28672
;  :arith-add-rows          117
;  :arith-assert-diseq      240
;  :arith-assert-lower      814
;  :arith-assert-upper      854
;  :arith-conflicts         390
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         379
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1564
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10177
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2011
;  :propagations            705
;  :quant-instantiations    247
;  :rlimit-count            592490)
(declare-const $t@395@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@231@08 $k@383@08))
    (=
      $t@395@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@394@08)
    (=
      $t@395@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@231@08 $k@383@08) $k@394@08)))
(assert (<= (+ (- $k@231@08 $k@383@08) $k@394@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@231@08 $k@383@08) $k@394@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28682
;  :arith-add-rows          117
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      856
;  :arith-conflicts         391
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         380
;  :arith-pivots            207
;  :binary-propagations     22
;  :conflicts               1565
;  :datatype-accessor-ax    898
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10185
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2012
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            593239)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28682
;  :arith-add-rows          117
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      856
;  :arith-conflicts         391
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         380
;  :arith-pivots            207
;  :binary-propagations     22
;  :conflicts               1565
;  :datatype-accessor-ax    898
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10185
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2013
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            593250)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@231@08 $k@383@08) $k@394@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28682
;  :arith-add-rows          118
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      857
;  :arith-conflicts         392
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         381
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1566
;  :datatype-accessor-ax    898
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10186
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2014
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            593359)
(assert (not (= $t@395@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28687
;  :arith-add-rows          118
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      858
;  :arith-conflicts         393
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         382
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1567
;  :datatype-accessor-ax    899
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10188
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2015
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            593793)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28687
;  :arith-add-rows          118
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      858
;  :arith-conflicts         393
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         382
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1567
;  :datatype-accessor-ax    899
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10188
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2016
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            593804)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@231@08 $k@383@08) $k@394@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28687
;  :arith-add-rows          119
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      859
;  :arith-conflicts         394
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         383
;  :arith-pivots            212
;  :binary-propagations     22
;  :conflicts               1568
;  :datatype-accessor-ax    899
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10189
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2017
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            593917)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28692
;  :arith-add-rows          119
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      860
;  :arith-conflicts         395
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         384
;  :arith-pivots            212
;  :binary-propagations     22
;  :conflicts               1569
;  :datatype-accessor-ax    900
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10191
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2018
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            594343)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28692
;  :arith-add-rows          119
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      860
;  :arith-conflicts         395
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         384
;  :arith-pivots            212
;  :binary-propagations     22
;  :conflicts               1569
;  :datatype-accessor-ax    900
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10191
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2019
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            594354)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@231@08 $k@383@08) $k@394@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28692
;  :arith-add-rows          120
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      861
;  :arith-conflicts         396
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         385
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1570
;  :datatype-accessor-ax    900
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10192
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2020
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            594462)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28697
;  :arith-add-rows          120
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      862
;  :arith-conflicts         397
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         386
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1571
;  :datatype-accessor-ax    901
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10194
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2021
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            594898)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28697
;  :arith-add-rows          120
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      862
;  :arith-conflicts         397
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         386
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1571
;  :datatype-accessor-ax    901
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10194
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2022
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            594909)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@231@08 $k@383@08) $k@394@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28697
;  :arith-add-rows          121
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      863
;  :arith-conflicts         398
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         387
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1572
;  :datatype-accessor-ax    901
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10195
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2023
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            595022)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28702
;  :arith-add-rows          121
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      864
;  :arith-conflicts         399
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         388
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1573
;  :datatype-accessor-ax    902
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10197
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2024
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            595468)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28702
;  :arith-add-rows          121
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      864
;  :arith-conflicts         399
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         388
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1573
;  :datatype-accessor-ax    902
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10197
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2025
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            595479)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@231@08 $k@383@08) $k@394@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28702
;  :arith-add-rows          122
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      865
;  :arith-conflicts         400
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         389
;  :arith-pivots            219
;  :binary-propagations     22
;  :conflicts               1574
;  :datatype-accessor-ax    902
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10198
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2026
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            595587)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28707
;  :arith-add-rows          122
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      866
;  :arith-conflicts         401
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         390
;  :arith-pivots            219
;  :binary-propagations     22
;  :conflicts               1575
;  :datatype-accessor-ax    903
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10200
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2027
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            596043)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28707
;  :arith-add-rows          122
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      866
;  :arith-conflicts         401
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         390
;  :arith-pivots            219
;  :binary-propagations     22
;  :conflicts               1575
;  :datatype-accessor-ax    903
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10200
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2028
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            596054)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@231@08 $k@383@08) $k@394@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28707
;  :arith-add-rows          123
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      867
;  :arith-conflicts         402
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         391
;  :arith-pivots            222
;  :binary-propagations     22
;  :conflicts               1576
;  :datatype-accessor-ax    903
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10201
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2029
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            596167)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28712
;  :arith-add-rows          123
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      868
;  :arith-conflicts         403
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         392
;  :arith-pivots            222
;  :binary-propagations     22
;  :conflicts               1577
;  :datatype-accessor-ax    904
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10203
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2030
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            596633)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28712
;  :arith-add-rows          123
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      868
;  :arith-conflicts         403
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         392
;  :arith-pivots            222
;  :binary-propagations     22
;  :conflicts               1577
;  :datatype-accessor-ax    904
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10203
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2031
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            596644)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@231@08 $k@383@08) $k@394@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28712
;  :arith-add-rows          124
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      869
;  :arith-conflicts         404
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         393
;  :arith-pivots            224
;  :binary-propagations     22
;  :conflicts               1578
;  :datatype-accessor-ax    904
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10204
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2032
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            596752)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28717
;  :arith-add-rows          124
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      870
;  :arith-conflicts         405
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         394
;  :arith-pivots            224
;  :binary-propagations     22
;  :conflicts               1579
;  :datatype-accessor-ax    905
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10206
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2033
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            597228)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28717
;  :arith-add-rows          124
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      870
;  :arith-conflicts         405
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         394
;  :arith-pivots            224
;  :binary-propagations     22
;  :conflicts               1579
;  :datatype-accessor-ax    905
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10206
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2034
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            597239)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@231@08 $k@383@08) $k@394@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28717
;  :arith-add-rows          125
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      871
;  :arith-conflicts         406
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         395
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1580
;  :datatype-accessor-ax    905
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10207
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2035
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            597352)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28722
;  :arith-add-rows          125
;  :arith-assert-diseq      240
;  :arith-assert-lower      815
;  :arith-assert-upper      872
;  :arith-conflicts         407
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         396
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1581
;  :datatype-accessor-ax    906
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10209
;  :mk-clause               1076
;  :num-allocs              12664903
;  :num-checks              2036
;  :propagations            705
;  :quant-instantiations    248
;  :rlimit-count            597838)
(declare-const $k@396@08 $Perm)
(assert ($Perm.isReadVar $k@396@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@396@08 $Perm.No) (< $Perm.No $k@396@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28722
;  :arith-add-rows          125
;  :arith-assert-diseq      241
;  :arith-assert-lower      817
;  :arith-assert-upper      873
;  :arith-conflicts         407
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         396
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1582
;  :datatype-accessor-ax    906
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10213
;  :mk-clause               1078
;  :num-allocs              12664903
;  :num-checks              2037
;  :propagations            706
;  :quant-instantiations    248
;  :rlimit-count            598037)
(set-option :timeout 10)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28722
;  :arith-add-rows          125
;  :arith-assert-diseq      241
;  :arith-assert-lower      817
;  :arith-assert-upper      873
;  :arith-conflicts         407
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         396
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1582
;  :datatype-accessor-ax    906
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10213
;  :mk-clause               1078
;  :num-allocs              12664903
;  :num-checks              2038
;  :propagations            706
;  :quant-instantiations    248
;  :rlimit-count            598048)
(declare-const $t@397@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@232@08 $k@384@08))
    (=
      $t@397@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@396@08)
    (=
      $t@397@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@232@08 $k@384@08) $k@396@08)))
(assert (<= (+ (- $k@232@08 $k@384@08) $k@396@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@232@08 $k@384@08) $k@396@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28732
;  :arith-add-rows          126
;  :arith-assert-diseq      241
;  :arith-assert-lower      818
;  :arith-assert-upper      875
;  :arith-conflicts         408
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         397
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1583
;  :datatype-accessor-ax    907
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10221
;  :mk-clause               1078
;  :num-allocs              12664903
;  :num-checks              2039
;  :propagations            706
;  :quant-instantiations    249
;  :rlimit-count            599179)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28732
;  :arith-add-rows          126
;  :arith-assert-diseq      241
;  :arith-assert-lower      818
;  :arith-assert-upper      875
;  :arith-conflicts         408
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         397
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1583
;  :datatype-accessor-ax    907
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10221
;  :mk-clause               1078
;  :num-allocs              12664903
;  :num-checks              2040
;  :propagations            706
;  :quant-instantiations    249
;  :rlimit-count            599190)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@232@08 $k@384@08) $k@396@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28732
;  :arith-add-rows          126
;  :arith-assert-diseq      241
;  :arith-assert-lower      818
;  :arith-assert-upper      876
;  :arith-conflicts         409
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         398
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1584
;  :datatype-accessor-ax    907
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10222
;  :mk-clause               1078
;  :num-allocs              12664903
;  :num-checks              2041
;  :propagations            706
;  :quant-instantiations    249
;  :rlimit-count            599268)
(assert (not (= $t@397@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28738
;  :arith-add-rows          126
;  :arith-assert-diseq      241
;  :arith-assert-lower      818
;  :arith-assert-upper      877
;  :arith-conflicts         410
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         399
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1585
;  :datatype-accessor-ax    908
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10225
;  :mk-clause               1078
;  :num-allocs              12664903
;  :num-checks              2042
;  :propagations            706
;  :quant-instantiations    249
;  :rlimit-count            599819)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28738
;  :arith-add-rows          126
;  :arith-assert-diseq      241
;  :arith-assert-lower      818
;  :arith-assert-upper      877
;  :arith-conflicts         410
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         399
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1585
;  :datatype-accessor-ax    908
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10225
;  :mk-clause               1078
;  :num-allocs              12664903
;  :num-checks              2043
;  :propagations            706
;  :quant-instantiations    249
;  :rlimit-count            599830)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@232@08 $k@384@08) $k@396@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28738
;  :arith-add-rows          126
;  :arith-assert-diseq      241
;  :arith-assert-lower      818
;  :arith-assert-upper      878
;  :arith-conflicts         411
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         400
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1586
;  :datatype-accessor-ax    908
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10226
;  :mk-clause               1078
;  :num-allocs              12664903
;  :num-checks              2044
;  :propagations            706
;  :quant-instantiations    249
;  :rlimit-count            599908)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28743
;  :arith-add-rows          126
;  :arith-assert-diseq      241
;  :arith-assert-lower      818
;  :arith-assert-upper      879
;  :arith-conflicts         412
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         401
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1587
;  :datatype-accessor-ax    909
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10228
;  :mk-clause               1078
;  :num-allocs              12664903
;  :num-checks              2045
;  :propagations            706
;  :quant-instantiations    249
;  :rlimit-count            600424)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28743
;  :arith-add-rows          126
;  :arith-assert-diseq      241
;  :arith-assert-lower      818
;  :arith-assert-upper      879
;  :arith-conflicts         412
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         401
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1587
;  :datatype-accessor-ax    909
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10228
;  :mk-clause               1078
;  :num-allocs              12664903
;  :num-checks              2046
;  :propagations            706
;  :quant-instantiations    249
;  :rlimit-count            600435)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@232@08 $k@384@08) $k@396@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28743
;  :arith-add-rows          126
;  :arith-assert-diseq      241
;  :arith-assert-lower      818
;  :arith-assert-upper      880
;  :arith-conflicts         413
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         402
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1588
;  :datatype-accessor-ax    909
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10229
;  :mk-clause               1078
;  :num-allocs              12664903
;  :num-checks              2047
;  :propagations            706
;  :quant-instantiations    249
;  :rlimit-count            600513)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28748
;  :arith-add-rows          126
;  :arith-assert-diseq      241
;  :arith-assert-lower      818
;  :arith-assert-upper      881
;  :arith-conflicts         414
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         403
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1589
;  :datatype-accessor-ax    910
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10231
;  :mk-clause               1078
;  :num-allocs              12664903
;  :num-checks              2048
;  :propagations            706
;  :quant-instantiations    249
;  :rlimit-count            601039)
(declare-const $k@398@08 $Perm)
(assert ($Perm.isReadVar $k@398@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@398@08 $Perm.No) (< $Perm.No $k@398@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28748
;  :arith-add-rows          126
;  :arith-assert-diseq      242
;  :arith-assert-lower      820
;  :arith-assert-upper      882
;  :arith-conflicts         414
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         403
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1590
;  :datatype-accessor-ax    910
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10235
;  :mk-clause               1080
;  :num-allocs              12664903
;  :num-checks              2049
;  :propagations            707
;  :quant-instantiations    249
;  :rlimit-count            601237)
(set-option :timeout 10)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28748
;  :arith-add-rows          126
;  :arith-assert-diseq      242
;  :arith-assert-lower      820
;  :arith-assert-upper      882
;  :arith-conflicts         414
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         403
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1590
;  :datatype-accessor-ax    910
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10235
;  :mk-clause               1080
;  :num-allocs              12664903
;  :num-checks              2050
;  :propagations            707
;  :quant-instantiations    249
;  :rlimit-count            601248)
(declare-const $t@399@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@233@08 $k@385@08))
    (=
      $t@399@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@398@08)
    (=
      $t@399@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@233@08 $k@385@08) $k@398@08)))
(assert (<= (+ (- $k@233@08 $k@385@08) $k@398@08) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@233@08 $k@385@08) $k@398@08))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28758
;  :arith-add-rows          127
;  :arith-assert-diseq      242
;  :arith-assert-lower      821
;  :arith-assert-upper      884
;  :arith-conflicts         415
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         404
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1591
;  :datatype-accessor-ax    911
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10243
;  :mk-clause               1080
;  :num-allocs              12664903
;  :num-checks              2051
;  :propagations            707
;  :quant-instantiations    250
;  :rlimit-count            602449)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28758
;  :arith-add-rows          127
;  :arith-assert-diseq      242
;  :arith-assert-lower      821
;  :arith-assert-upper      884
;  :arith-conflicts         415
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         404
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               1591
;  :datatype-accessor-ax    911
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10243
;  :mk-clause               1080
;  :num-allocs              12664903
;  :num-checks              2052
;  :propagations            707
;  :quant-instantiations    250
;  :rlimit-count            602460)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@233@08 $k@385@08) $k@398@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28758
;  :arith-add-rows          127
;  :arith-assert-diseq      242
;  :arith-assert-lower      821
;  :arith-assert-upper      885
;  :arith-conflicts         416
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         405
;  :arith-pivots            228
;  :binary-propagations     22
;  :conflicts               1592
;  :datatype-accessor-ax    911
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10244
;  :mk-clause               1080
;  :num-allocs              12664903
;  :num-checks              2053
;  :propagations            707
;  :quant-instantiations    250
;  :rlimit-count            602544)
(assert (not (= $t@399@08 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28764
;  :arith-add-rows          127
;  :arith-assert-diseq      242
;  :arith-assert-lower      821
;  :arith-assert-upper      886
;  :arith-conflicts         417
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         406
;  :arith-pivots            228
;  :binary-propagations     22
;  :conflicts               1593
;  :datatype-accessor-ax    912
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10247
;  :mk-clause               1080
;  :num-allocs              12664903
;  :num-checks              2054
;  :propagations            707
;  :quant-instantiations    250
;  :rlimit-count            603135)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28764
;  :arith-add-rows          127
;  :arith-assert-diseq      242
;  :arith-assert-lower      821
;  :arith-assert-upper      886
;  :arith-conflicts         417
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         406
;  :arith-pivots            228
;  :binary-propagations     22
;  :conflicts               1593
;  :datatype-accessor-ax    912
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10247
;  :mk-clause               1080
;  :num-allocs              12664903
;  :num-checks              2055
;  :propagations            707
;  :quant-instantiations    250
;  :rlimit-count            603146)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@233@08 $k@385@08) $k@398@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28764
;  :arith-add-rows          127
;  :arith-assert-diseq      242
;  :arith-assert-lower      821
;  :arith-assert-upper      887
;  :arith-conflicts         418
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         407
;  :arith-pivots            228
;  :binary-propagations     22
;  :conflicts               1594
;  :datatype-accessor-ax    912
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10248
;  :mk-clause               1080
;  :num-allocs              12664903
;  :num-checks              2056
;  :propagations            707
;  :quant-instantiations    250
;  :rlimit-count            603226)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28769
;  :arith-add-rows          127
;  :arith-assert-diseq      242
;  :arith-assert-lower      821
;  :arith-assert-upper      888
;  :arith-conflicts         419
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         408
;  :arith-pivots            228
;  :binary-propagations     22
;  :conflicts               1595
;  :datatype-accessor-ax    913
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10250
;  :mk-clause               1080
;  :num-allocs              12664903
;  :num-checks              2057
;  :propagations            707
;  :quant-instantiations    250
;  :rlimit-count            603782)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@390@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28769
;  :arith-add-rows          127
;  :arith-assert-diseq      242
;  :arith-assert-lower      821
;  :arith-assert-upper      888
;  :arith-conflicts         419
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         408
;  :arith-pivots            228
;  :binary-propagations     22
;  :conflicts               1595
;  :datatype-accessor-ax    913
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10250
;  :mk-clause               1080
;  :num-allocs              12664903
;  :num-checks              2058
;  :propagations            707
;  :quant-instantiations    250
;  :rlimit-count            603793)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28769
;  :arith-add-rows          127
;  :arith-assert-diseq      242
;  :arith-assert-lower      821
;  :arith-assert-upper      889
;  :arith-conflicts         420
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         409
;  :arith-pivots            228
;  :binary-propagations     22
;  :conflicts               1596
;  :datatype-accessor-ax    913
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10251
;  :mk-clause               1080
;  :num-allocs              12664903
;  :num-checks              2059
;  :propagations            707
;  :quant-instantiations    250
;  :rlimit-count            603871)
(declare-const $k@400@08 $Perm)
(assert ($Perm.isReadVar $k@400@08 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@400@08 $Perm.No) (< $Perm.No $k@400@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28769
;  :arith-add-rows          127
;  :arith-assert-diseq      243
;  :arith-assert-lower      823
;  :arith-assert-upper      890
;  :arith-conflicts         420
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         409
;  :arith-pivots            228
;  :binary-propagations     22
;  :conflicts               1597
;  :datatype-accessor-ax    913
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10255
;  :mk-clause               1082
;  :num-allocs              12664903
;  :num-checks              2060
;  :propagations            708
;  :quant-instantiations    250
;  :rlimit-count            604069)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  $t@393@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28769
;  :arith-add-rows          127
;  :arith-assert-diseq      243
;  :arith-assert-lower      823
;  :arith-assert-upper      890
;  :arith-conflicts         420
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         409
;  :arith-pivots            228
;  :binary-propagations     22
;  :conflicts               1597
;  :datatype-accessor-ax    913
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10255
;  :mk-clause               1082
;  :num-allocs              12664903
;  :num-checks              2061
;  :propagations            708
;  :quant-instantiations    250
;  :rlimit-count            604088)
(declare-const $t@401@08 $Ref)
(assert (and
  (implies
    (< $Perm.No (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08))
    (= $t@401@08 $t@390@08))
  (implies
    (< $Perm.No $k@400@08)
    (=
      $t@401@08
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08) $k@400@08)))
(assert (<=
  (+ (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08) $k@400@08)
  $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08) $k@400@08))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08) $k@400@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28777
;  :arith-add-rows          131
;  :arith-assert-diseq      243
;  :arith-assert-lower      824
;  :arith-assert-upper      892
;  :arith-conflicts         421
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         410
;  :arith-pivots            231
;  :binary-propagations     22
;  :conflicts               1598
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10264
;  :mk-clause               1083
;  :num-allocs              12664903
;  :num-checks              2062
;  :propagations            708
;  :quant-instantiations    251
;  :rlimit-count            605109)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@401@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28778
;  :arith-add-rows          135
;  :arith-assert-diseq      243
;  :arith-assert-lower      824
;  :arith-assert-upper      893
;  :arith-conflicts         422
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         411
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1599
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10265
;  :mk-clause               1083
;  :num-allocs              12664903
;  :num-checks              2063
;  :propagations            709
;  :quant-instantiations    251
;  :rlimit-count            605253)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28778
;  :arith-add-rows          135
;  :arith-assert-diseq      243
;  :arith-assert-lower      824
;  :arith-assert-upper      894
;  :arith-conflicts         423
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         412
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1600
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10266
;  :mk-clause               1083
;  :num-allocs              12664903
;  :num-checks              2064
;  :propagations            709
;  :quant-instantiations    251
;  :rlimit-count            605331)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))
  $t@393@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28778
;  :arith-add-rows          135
;  :arith-assert-diseq      243
;  :arith-assert-lower      824
;  :arith-assert-upper      894
;  :arith-conflicts         423
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         412
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1600
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10266
;  :mk-clause               1083
;  :num-allocs              12664903
;  :num-checks              2065
;  :propagations            709
;  :quant-instantiations    251
;  :rlimit-count            605350)
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08) $k@400@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28778
;  :arith-add-rows          138
;  :arith-assert-diseq      243
;  :arith-assert-lower      824
;  :arith-assert-upper      895
;  :arith-conflicts         424
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         413
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1601
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10267
;  :mk-clause               1083
;  :num-allocs              12664903
;  :num-checks              2066
;  :propagations            709
;  :quant-instantiations    251
;  :rlimit-count            605519)
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08) $k@400@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28778
;  :arith-add-rows          142
;  :arith-assert-diseq      243
;  :arith-assert-lower      824
;  :arith-assert-upper      896
;  :arith-conflicts         425
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         414
;  :arith-pivots            240
;  :binary-propagations     22
;  :conflicts               1602
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10268
;  :mk-clause               1083
;  :num-allocs              12664903
;  :num-checks              2067
;  :propagations            709
;  :quant-instantiations    251
;  :rlimit-count            605721)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@08))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- (- $k@234@08 $k@380@08) $k@386@08) $k@389@08) $k@400@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28780
;  :arith-add-rows          146
;  :arith-assert-diseq      243
;  :arith-assert-lower      824
;  :arith-assert-upper      897
;  :arith-conflicts         426
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         415
;  :arith-pivots            244
;  :binary-propagations     22
;  :conflicts               1603
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10270
;  :mk-clause               1083
;  :num-allocs              12664903
;  :num-checks              2068
;  :propagations            709
;  :quant-instantiations    251
;  :rlimit-count            606341)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@227@08)) $t@401@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28781
;  :arith-add-rows          148
;  :arith-assert-diseq      243
;  :arith-assert-lower      824
;  :arith-assert-upper      898
;  :arith-conflicts         427
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         416
;  :arith-pivots            245
;  :binary-propagations     22
;  :conflicts               1604
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10271
;  :mk-clause               1083
;  :num-allocs              12664903
;  :num-checks              2069
;  :propagations            710
;  :quant-instantiations    251
;  :rlimit-count            606446)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@230@08 $k@382@08) $k@392@08))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28781
;  :arith-add-rows          148
;  :arith-assert-diseq      243
;  :arith-assert-lower      824
;  :arith-assert-upper      899
;  :arith-conflicts         428
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         417
;  :arith-pivots            245
;  :binary-propagations     22
;  :conflicts               1605
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 7869
;  :datatype-occurs-check   1478
;  :datatype-splits         6501
;  :decisions               7596
;  :del-clause              998
;  :final-checks            237
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10272
;  :mk-clause               1083
;  :num-allocs              12664903
;  :num-checks              2070
;  :propagations            710
;  :quant-instantiations    251
;  :rlimit-count            606524)
(assert (=
  $t@393@08
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@08))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_25__58 := __flatten_26__59.Rng_seed_i % __flatten_29__62
; [eval] __flatten_26__59.Rng_seed_i % __flatten_29__62
(set-option :timeout 10)
(push) ; 12
(assert (not (= $t@393@08 __flatten_26__59@378@08)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29332
;  :arith-add-rows          148
;  :arith-assert-diseq      243
;  :arith-assert-lower      824
;  :arith-assert-upper      899
;  :arith-conflicts         428
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         417
;  :arith-pivots            245
;  :binary-propagations     22
;  :conflicts               1606
;  :datatype-accessor-ax    918
;  :datatype-constructor-ax 8046
;  :datatype-occurs-check   1493
;  :datatype-splits         6606
;  :decisions               7770
;  :del-clause              1022
;  :final-checks            240
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10378
;  :mk-clause               1084
;  :num-allocs              12664903
;  :num-checks              2072
;  :propagations            713
;  :quant-instantiations    251
;  :rlimit-count            609715)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= sys__result@387@08 0))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29696
;  :arith-add-rows          148
;  :arith-assert-diseq      243
;  :arith-assert-lower      824
;  :arith-assert-upper      899
;  :arith-conflicts         428
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         417
;  :arith-pivots            245
;  :binary-propagations     22
;  :conflicts               1606
;  :datatype-accessor-ax    922
;  :datatype-constructor-ax 8153
;  :datatype-occurs-check   1508
;  :datatype-splits         6711
;  :decisions               7874
;  :del-clause              1022
;  :final-checks            243
;  :max-generation          2
;  :max-memory              5.97
;  :memory                  5.97
;  :mk-bool-var             10483
;  :mk-clause               1084
;  :num-allocs              12664903
;  :num-checks              2073
;  :propagations            717
;  :quant-instantiations    251
;  :rlimit-count            612004
;  :time                    0.00)
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
